[{"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\main.js":"1","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\App.vue":"2","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\router\\index.js":"3","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\layouts\\AdminLayout.vue":"4","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminDashboard.vue":"5","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminDictionary.vue":"6","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminUsers.vue":"7","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\UserLogin.vue":"8","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminRoles.vue":"9","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminSettings.vue":"10","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminBackup.vue":"11","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminManagement.vue":"12","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminLogs.vue":"13","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\FontDemo.vue":"14","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\ServerList.vue":"15","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\AssetDashboard.vue":"16","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminDepartments.vue":"17","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminPositions.vue":"18","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\AssetCategoryList.vue":"19","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminEmployees.vue":"20","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\NetworkDeviceList.vue":"21","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\AssetStatusList.vue":"22","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\IPAdd.vue":"23","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\BusinessList.vue":"24","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\IPList.vue":"25","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\BusinessDetail.vue":"26","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\HardwareAssetList.vue":"27","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\SoftwareAssetList.vue":"28","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetForm.vue":"29","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\routeGuard.js":"30","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\MonitoringCard.vue":"31","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\DynamicMetrics.vue":"32","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\webSocketIntegration.js":"33","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\admin\\CardManager.vue":"34","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\TemplateDrawer.vue":"35","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\IPTable.vue":"36","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\MonitoringActions.vue":"37","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\HardwareAssetForm.vue":"38","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\HardwareAssetTable.vue":"39","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetTable.vue":"40","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareMonitoringActions.vue":"41","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetImport.vue":"42","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetDetail.vue":"43","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\errorHandler.js":"44","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\date.js":"45","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\websocketManager.js":"46","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\MetricCard.vue":"47","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\admin\\CardConfigModal.vue":"48","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\TemplateCard.vue":"49","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\index.js":"50","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\menu.js":"51","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\users.js":"52","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\organization.js":"53","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\businessManagement.js":"54","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\ipManagement.js":"55","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\hardwareAsset.js":"56","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\supplier.js":"57","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\softwareAsset.js":"58","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\user.js":"59","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\request.js":"60"},{"size":6531,"mtime":1757867727584,"results":"61","hashOfConfig":"62"},{"size":19378,"mtime":1757867727568,"results":"63","hashOfConfig":"62"},{"size":7624,"mtime":1757901452404,"results":"64","hashOfConfig":"62"},{"size":25969,"mtime":1757651805215,"results":"65","hashOfConfig":"62"},{"size":20745,"mtime":1757651805222,"results":"66","hashOfConfig":"62"},{"size":32053,"mtime":1757651805223,"results":"67","hashOfConfig":"62"},{"size":43274,"mtime":1757651805228,"results":"68","hashOfConfig":"62"},{"size":29671,"mtime":1757651805229,"results":"69","hashOfConfig":"62"},{"size":24762,"mtime":1757651805227,"results":"70","hashOfConfig":"62"},{"size":12894,"mtime":1757651805227,"results":"71","hashOfConfig":"62"},{"size":22960,"mtime":1757651805220,"results":"72","hashOfConfig":"62"},{"size":16461,"mtime":1757651805226,"results":"73","hashOfConfig":"62"},{"size":15477,"mtime":1757651805225,"results":"74","hashOfConfig":"62"},{"size":7368,"mtime":1757867727589,"results":"75","hashOfConfig":"62"},{"size":8903,"mtime":1757867727594,"results":"76","hashOfConfig":"62"},{"size":19570,"mtime":1757867727589,"results":"77","hashOfConfig":"62"},{"size":19725,"mtime":1757867727588,"results":"78","hashOfConfig":"62"},{"size":20971,"mtime":1757867727589,"results":"79","hashOfConfig":"62"},{"size":7526,"mtime":1757867727589,"results":"80","hashOfConfig":"62"},{"size":26667,"mtime":1757867727589,"results":"81","hashOfConfig":"62"},{"size":8560,"mtime":1757867727594,"results":"82","hashOfConfig":"62"},{"size":6080,"mtime":1757867727589,"results":"83","hashOfConfig":"62"},{"size":12921,"mtime":1757651805235,"results":"84","hashOfConfig":"62"},{"size":19485,"mtime":1757867727594,"results":"85","hashOfConfig":"62"},{"size":114640,"mtime":1757676700586,"results":"86","hashOfConfig":"62"},{"size":62774,"mtime":1757867727594,"results":"87","hashOfConfig":"62"},{"size":49230,"mtime":1758005413951,"results":"88","hashOfConfig":"62"},{"size":27426,"mtime":1758011120867,"results":"89","hashOfConfig":"62"},{"size":21848,"mtime":1758013028275,"results":"90","hashOfConfig":"62"},{"size":3128,"mtime":1757651805218,"results":"91","hashOfConfig":"62"},{"size":6353,"mtime":1757651805209,"results":"92","hashOfConfig":"62"},{"size":3879,"mtime":1757651805203,"results":"93","hashOfConfig":"62"},{"size":12009,"mtime":1757651805219,"results":"94","hashOfConfig":"62"},{"size":14200,"mtime":1757651805202,"results":"95","hashOfConfig":"62"},{"size":21121,"mtime":1757867727583,"results":"96","hashOfConfig":"62"},{"size":30613,"mtime":1757867727578,"results":"97","hashOfConfig":"62"},{"size":18022,"mtime":1757867727578,"results":"98","hashOfConfig":"62"},{"size":25063,"mtime":1757867727574,"results":"99","hashOfConfig":"62"},{"size":34761,"mtime":1758005708965,"results":"100","hashOfConfig":"62"},{"size":30106,"mtime":1758009607464,"results":"101","hashOfConfig":"62"},{"size":18975,"mtime":1757867727583,"results":"102","hashOfConfig":"62"},{"size":19629,"mtime":1757867727578,"results":"103","hashOfConfig":"62"},{"size":13666,"mtime":1757867727578,"results":"104","hashOfConfig":"62"},{"size":4204,"mtime":1757651805218,"results":"105","hashOfConfig":"62"},{"size":8781,"mtime":1757867727585,"results":"106","hashOfConfig":"62"},{"size":8470,"mtime":1757651805220,"results":"107","hashOfConfig":"62"},{"size":5073,"mtime":1757651805208,"results":"108","hashOfConfig":"62"},{"size":7956,"mtime":1757651805202,"results":"109","hashOfConfig":"62"},{"size":9772,"mtime":1757651805213,"results":"110","hashOfConfig":"62"},{"size":6687,"mtime":1757897697606,"results":"111","hashOfConfig":"62"},{"size":2047,"mtime":1757897697615,"results":"112","hashOfConfig":"62"},{"size":8773,"mtime":1757897697640,"results":"113","hashOfConfig":"62"},{"size":13600,"mtime":1757897697621,"results":"114","hashOfConfig":"62"},{"size":2122,"mtime":1757897697592,"results":"115","hashOfConfig":"62"},{"size":10617,"mtime":1757897697611,"results":"116","hashOfConfig":"62"},{"size":6566,"mtime":1757897697598,"results":"117","hashOfConfig":"62"},{"size":6941,"mtime":1757897697630,"results":"118","hashOfConfig":"62"},{"size":6121,"mtime":1758006413887,"results":"119","hashOfConfig":"62"},{"size":7498,"mtime":1757897697636,"results":"120","hashOfConfig":"62"},{"size":1973,"mtime":1757867727585,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"125"},"9lxzag",{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"129"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"129"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"129"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"129"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"129"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"129"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"129"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"129"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"129"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"129"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"129"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"129"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"129"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"129"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"129"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"129"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"129"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"129"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"129"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"129"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"129"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"125"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"129"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"129"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"125"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"129"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"129"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"129"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"129"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"129"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"129"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"129"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\main.js",["278","279","280","281","282","283"],"import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport Antd from 'ant-design-vue';\r\nimport 'ant-design-vue/dist/reset.css';\r\nimport './assets/global.css';\r\nimport axios from 'axios';\r\nimport router from './router';\r\nimport { message, notification } from 'ant-design-vue';\r\nimport dayjs from 'dayjs';\r\nimport 'dayjs/locale/zh-cn';\r\nimport zhCN from 'ant-design-vue/es/locale/zh_CN';\r\n\r\n// 配置dayjs为中文\r\ndayjs.locale('zh-cn');\r\n// WebSocket集成将在用户登录后按需导入，避免页面加载时自动初始化\r\n\r\n// 配置Ant Design Vue的message和notification\r\nmessage.config({\r\n  top: '10px', // 设置为10px，更接近页面顶部\r\n  duration: 3,\r\n  maxCount: 3,\r\n  getContainer: () => document.body, // 确保挂载到body上\r\n});\r\n\r\nnotification.config({\r\n  placement: 'topRight',\r\n  top: '10px', \r\n  duration: 4.5,\r\n  getContainer: () => document.body, // 确保挂载到body上\r\n});\r\n\r\n// ========== ResizeObserver 错误彻底解决方案 ==========\r\n\r\n// 1. 完全禁用 ResizeObserver 错误输出\r\nconst originalResizeObserver = window.ResizeObserver;\r\nconst originalConsoleError = console.error;\r\nconst originalConsoleWarn = console.warn;\r\n\r\n// 2. ResizeObserver 错误检测模式\r\nconst RESIZE_OBSERVER_ERROR_PATTERNS = [\r\n  /ResizeObserver loop completed with undelivered notifications/i,\r\n  /ResizeObserver loop limit exceeded/i,\r\n  /ResizeObserver/i\r\n];\r\n\r\nconst isResizeObserverRelated = (message) => {\r\n  if (!message) return false;\r\n  const text = String(message);\r\n  return RESIZE_OBSERVER_ERROR_PATTERNS.some(pattern => pattern.test(text));\r\n};\r\n\r\n// 3. 彻底静默所有 ResizeObserver 相关输出\r\nconsole.error = function(...args) {\r\n  if (args.some(arg => isResizeObserverRelated(arg))) {\r\n    return; // 完全忽略\r\n  }\r\n  originalConsoleError.apply(console, args);\r\n};\r\n\r\nconsole.warn = function(...args) {\r\n  if (args.some(arg => isResizeObserverRelated(arg))) {\r\n    return; // 完全忽略\r\n  }\r\n  originalConsoleWarn.apply(console, args);\r\n};\r\n\r\n// 4. 拦截全局错误事件\r\nwindow.addEventListener('error', (event) => {\r\n  if (isResizeObserverRelated(event.message) || \r\n      isResizeObserverRelated(event.error)) {\r\n    event.preventDefault();\r\n    event.stopImmediatePropagation();\r\n    return false;\r\n  }\r\n}, true);\r\n\r\nwindow.addEventListener('unhandledrejection', (event) => {\r\n  if (isResizeObserverRelated(event.reason)) {\r\n    event.preventDefault();\r\n    return false;\r\n  }\r\n}, true);\r\n\r\n// 5. 重写 ResizeObserver 实现\r\nif (originalResizeObserver) {\r\n  window.ResizeObserver = class SafeResizeObserver {\r\n    constructor(callback) {\r\n      this.callback = callback;\r\n      this.observer = null;\r\n      this.rafId = null;\r\n      this.entries = [];\r\n      \r\n      // 使用防抖机制\r\n      this.debouncedCallback = this.debounce(() => {\r\n        if (this.entries.length > 0) {\r\n          try {\r\n            this.callback(this.entries, this);\r\n          } catch (error) {\r\n            if (!isResizeObserverRelated(error)) {\r\n              console.error('ResizeObserver callback error:', error);\r\n            }\r\n          }\r\n          this.entries = [];\r\n        }\r\n      }, 16); // 约60fps\r\n      \r\n      this.observer = new originalResizeObserver((entries) => {\r\n        this.entries = entries;\r\n        this.debouncedCallback();\r\n      });\r\n    }\r\n    \r\n    debounce(func, wait) {\r\n      let timeout;\r\n      return function executedFunction(...args) {\r\n        const later = () => {\r\n          clearTimeout(timeout);\r\n          func(...args);\r\n        };\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(later, wait);\r\n      };\r\n    }\r\n    \r\n    observe(target, options) {\r\n      if (this.observer) {\r\n        this.observer.observe(target, options);\r\n      }\r\n    }\r\n    \r\n    unobserve(target) {\r\n      if (this.observer) {\r\n        this.observer.unobserve(target);\r\n      }\r\n    }\r\n    \r\n    disconnect() {\r\n      if (this.observer) {\r\n        this.observer.disconnect();\r\n      }\r\n      this.entries = [];\r\n    }\r\n  };\r\n}\r\n\r\n// 6. 处理 webpack-dev-server overlay 错误\r\nif (process.env.NODE_ENV === 'development') {\r\n  // 拦截 webpack overlay 错误处理\r\n  const originalWindowError = window.onerror;\r\n  window.onerror = function(message, source, lineno, colno, error) {\r\n    if (isResizeObserverRelated(message)) {\r\n      return true; // 阻止错误传播\r\n    }\r\n    if (originalWindowError) {\r\n      return originalWindowError.apply(this, arguments);\r\n    }\r\n  };\r\n  \r\n  // 拦截 Promise 错误\r\n  const originalUnhandledRejection = window.onunhandledrejection;\r\n  window.onunhandledrejection = function(event) {\r\n    if (isResizeObserverRelated(event.reason)) {\r\n      event.preventDefault();\r\n      return true;\r\n    }\r\n    if (originalUnhandledRejection) {\r\n      return originalUnhandledRejection.apply(this, arguments);\r\n    }\r\n  };\r\n}\r\n\r\n// ========== ResizeObserver 错误处理结束 ==========\r\n\r\n// 定义隐藏初始loading的函数\r\n\r\n\r\n\r\n\r\nconst app = createApp(App);\r\napp.use(Antd, { locale: zhCN });\r\napp.use(router);\r\n\r\n// 配置axios\r\naxios.defaults.baseURL = '/api';\r\napp.config.globalProperties.$axios = axios;\r\n\r\n// 添加全局message和notification\r\napp.config.globalProperties.$message = message;\r\napp.config.globalProperties.$notification = notification;\r\n\r\n// 添加全局错误处理\r\n// 确保message组件正常工作\r\napp.config.globalProperties.$messageTest = () => {\r\n  message.success('测试通知成功！');\r\n};\r\n\r\n// Vue全局错误处理 - 使用统一的错误检测\r\napp.config.errorHandler = (err, vm, info) => {\r\n  // 忽略 ResizeObserver 相关错误\r\n  if (isResizeObserverRelated(err) || \r\n      isResizeObserverRelated(err?.message) || \r\n      isResizeObserverRelated(err?.toString())) {\r\n    return;\r\n  }\r\n  \r\n  // 忽略其他常见的开发环境错误\r\n  const commonDevErrors = [\r\n    /Non-passive event listener/i,\r\n    /Ignored attempt to cancel a touchmove/i,\r\n    /Unable to preventDefault/i,\r\n    /Script error/i,\r\n    /Network Error/i\r\n  ];\r\n  \r\n  const errorMessage = err?.message || String(err);\r\n  if (commonDevErrors.some(pattern => pattern.test(errorMessage))) {\r\n    return;\r\n  }\r\n  \r\n  // 只在开发环境显示真正的错误\r\n  // if (process.env.NODE_ENV === 'development') {\r\n  //   originalConsoleError('Vue Error:', err, '\\nInfo:', info);\r\n  // }\r\n};\r\n\r\napp.mount('#app');\r\n\r\n\r\n\r\n// WebSocket集成将在用户登录成功后按需初始化，不在应用启动时自动加载\r\n// 这样可以避免未登录状态下的WebSocket连接尝试\r\n",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\App.vue",["284"],"<template>\r\n  <!-- 登录页面独立布局 -->\r\n  <router-view v-if=\"$route.meta.hideLayout\" />\r\n  \r\n  <!-- 管理员后台布局 -->\r\n  <AdminLayout v-else-if=\"isAdminRoute\" />\r\n  \r\n  <!-- 主应用布局 -->\r\n  <div v-else class=\"monitor-layout\">\r\n    <!-- 顶部导航 -->\r\n    <header class=\"monitor-header\">\r\n      <div class=\"header-container\">\r\n        <div class=\"brand\">\r\n          <div class=\"brand-icon\">\r\n            <svg t=\"1757646777321\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"8545\">\r\n              <path d=\"M453.6 679.904h100.8v113.408H453.6z\" fill=\"#7FF298\" p-id=\"8546\"></path>\r\n              <path d=\"M365.408 843.712V768.096h277.216v75.616z\" fill=\"#226CFF\" p-id=\"8547\"></path>\r\n              <path d=\"M151.2 176.416m192 0l321.6 0q192 0 192 192l0 141.088q0 192-192 192l-321.6 0q-192 0-192-192l0-141.088q0-192 192-192Z\" fill=\"#226CFF\" p-id=\"8548\"></path>\r\n              <path d=\"M576 378.272h50.4v214.208H576z\" fill=\"#FFFFFF\" p-id=\"8549\"></path>\r\n              <path d=\"M676.8 315.264h50.4v277.216H676.8z\" fill=\"#FFFFFF\" p-id=\"8550\"></path>\r\n              <path d=\"M462.592 340.48h50.4v252h-50.4z\" fill=\"#FFFFFF\" p-id=\"8551\"></path>\r\n              <path d=\"M361.792 466.464h50.4v126.016h-50.4z\" fill=\"#FFFFFF\" p-id=\"8552\"></path>\r\n            </svg>\r\n          </div>\r\n          <h1 class=\"brand-title\">运维监控系统</h1>\r\n        </div>\r\n        \r\n        <nav class=\"main-nav\">\r\n          <div class=\"custom-menu\" v-if=\"!loading\">\r\n            <template v-for=\"item in menuItems\" :key=\"item.key\">\r\n              <!-- 一级菜单项 -->\r\n              <div \r\n                v-if=\"!item.children || item.children.length === 0\" \r\n                class=\"menu-item\"\r\n                :class=\"{ 'menu-item-selected': selectedKeys.includes(item.key) }\"\r\n                @click=\"handleMenuSelect({ key: item.key })\"\r\n              >\r\n                <component :is=\"getIconComponent(item.icon)\" class=\"menu-icon\" />\r\n                <span class=\"menu-text\">{{ item.title }}</span>\r\n              </div>\r\n              \r\n              <!-- 带子菜单的菜单项 -->\r\n              <div v-else class=\"menu-submenu\" @mouseenter=\"showSubmenu(item.key)\" @mouseleave=\"hideSubmenu(item.key)\">\r\n                <div \r\n                  class=\"menu-item submenu-title\"\r\n                  :class=\"{ 'menu-item-selected': isSubmenuSelected(item) }\"\r\n                >\r\n                  <component :is=\"getIconComponent(item.icon)\" class=\"menu-icon\" />\r\n                  <span class=\"menu-text\">{{ item.title }}</span>\r\n                  <DownOutlined class=\"submenu-arrow\" />\r\n                </div>\r\n                <div \r\n                  class=\"submenu-popup\"\r\n                  :class=\"{ 'submenu-visible': visibleSubmenus[item.key] }\"\r\n                >\r\n                  <div \r\n                    v-for=\"child in item.children\" \r\n                    :key=\"child.key\"\r\n                    class=\"submenu-item\"\r\n                    :class=\"{ 'submenu-item-selected': selectedKeys.includes(child.key) }\"\r\n                    @click=\"handleMenuSelect({ key: child.key })\"\r\n                  >\r\n                    <component :is=\"getIconComponent(child.icon)\" class=\"menu-icon\" />\r\n                    <span class=\"menu-text\">{{ child.title }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </template>\r\n          </div>\r\n          <div v-else class=\"menu-loading\">\r\n            加载中...\r\n          </div>\r\n        </nav>\r\n        \r\n        <div class=\"header-actions\">\r\n          <a-badge :count=\"3\" class=\"notification-badge\">\r\n            <a-button type=\"text\" class=\"action-btn\">\r\n              <BellOutlined />\r\n            </a-button>\r\n          </a-badge>\r\n          <a-dropdown>\r\n            <a-button type=\"text\" class=\"user-btn\">\r\n              <a-avatar size=\"small\" class=\"user-avatar\" :style=\"{ background: isAdmin ? '#faad14' : '#1890ff' }\">\r\n                {{ currentUserName.charAt(0).toUpperCase() }}\r\n              </a-avatar>\r\n              <span class=\"user-name\">{{ currentUserName }} {{ isAdmin ? '(管理员)' : '(用户)' }}</span>\r\n              <DownOutlined />\r\n            </a-button>\r\n            <template #overlay>\r\n              <a-menu>\r\n                <a-menu-item key=\"1\"><UserOutlined /> 个人中心</a-menu-item>\r\n                <a-menu-item key=\"2\"><SettingOutlined /> 系统设置</a-menu-item>\r\n                <a-menu-divider />\r\n                <a-menu-item key=\"3\" @click=\"handleLogout\">\r\n                  <LogoutOutlined /> 退出登录\r\n                </a-menu-item>\r\n              </a-menu>\r\n            </template>\r\n          </a-dropdown>\r\n        </div>\r\n      </div>\r\n    </header>\r\n\r\n    <!-- 主内容区域 -->\r\n    <main class=\"monitor-content\">\r\n      <div class=\"content-container\">\r\n        <div class=\"content-panel\">\r\n          <router-view />\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, onMounted, onBeforeUnmount } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport { message } from 'ant-design-vue';\r\nimport { userAPI } from '@/api/users';\r\nimport { menuApi } from '@/api/menu';\r\nimport AdminLayout from '@/layouts/AdminLayout.vue';\r\nimport { \r\n  DatabaseOutlined, \r\n  UserOutlined,\r\n  BellOutlined,\r\n  DownOutlined,\r\n  SettingOutlined,\r\n  LogoutOutlined,\r\n  HomeOutlined,\r\n  CloudServerOutlined,\r\n  BarChartOutlined,\r\n  GlobalOutlined,\r\n  AppstoreOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\nconst collapsed = ref(false);\r\nconst route = useRoute();\r\nconst router = useRouter();\r\n\r\n\r\n\r\nconst selectedKeys = ref([route.path || '/']);\r\nconst menuItems = ref([]);\r\nconst loading = ref(false);\r\nconst visibleSubmenus = ref({});\r\n\r\n// 用户类型和信息\r\nconst userType = ref(localStorage.getItem('userType') || 'user');\r\nconst currentUserName = ref(localStorage.getItem('username') || '用户');\r\nconst isAdmin = computed(() => userType.value === 'admin');\r\n\r\n// 判断是否为管理员路由\r\nconst isAdminRoute = computed(() => {\r\n  return route.path.startsWith('/admin/');\r\n});\r\n\r\n// 图标组件映射\r\nconst iconComponents = {\r\n  'HomeOutlined': HomeOutlined,\r\n  'DatabaseOutlined': DatabaseOutlined,\r\n  'CloudServerOutlined': CloudServerOutlined,\r\n  'BellOutlined': BellOutlined,\r\n  'BarChartOutlined': BarChartOutlined,\r\n  'GlobalOutlined': GlobalOutlined,\r\n  'AppstoreOutlined': AppstoreOutlined,\r\n  'UserOutlined': UserOutlined,\r\n  'SettingOutlined': SettingOutlined\r\n};\r\n\r\n// 获取图标组件\r\nconst getIconComponent = (iconName) => {\r\n  return iconComponents[iconName] || HomeOutlined;\r\n};\r\n\r\n// 获取用户菜单\r\nconst fetchUserMenus = async () => {\r\n  // 只在主应用布局时获取菜单，避免在登录页面或管理员页面调用\r\n  if (route.meta.hideLayout || isAdminRoute.value) {\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    loading.value = true;\r\n    const response = await menuApi.getUserMenus();\r\n    if (response.data && response.data.data && response.data.data.results) {\r\n      menuItems.value = response.data.data.results;\r\n    } else {\r\n      // 如果API返回失败，使用默认菜单\r\n      menuItems.value = getDefaultMenus();\r\n    }\r\n  } catch (error) {\r\n    console.error('获取菜单失败:', error);\r\n    message.warning('获取菜单失败，使用默认菜单');\r\n    // 使用默认菜单作为后备\r\n    menuItems.value = getDefaultMenus();\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 默认菜单配置（空数组，菜单完全由后端提供）\r\nconst getDefaultMenus = () => {\r\n  return [];\r\n};\r\n\r\nwatch(() => route.path, (newPath) => {\r\n  selectedKeys.value = [newPath];\r\n});\r\n\r\nconst toggleCollapsed = () => {\r\n  collapsed.value = !collapsed.value;\r\n};\r\n\r\nconst handleMenuSelect = ({ key }) => {\r\n  router.push(key);\r\n};\r\n\r\n// 显示子菜单\r\nconst showSubmenu = (key) => {\r\n  visibleSubmenus.value[key] = true;\r\n};\r\n\r\n// 隐藏子菜单\r\nconst hideSubmenu = (key) => {\r\n  visibleSubmenus.value[key] = false;\r\n};\r\n\r\n// 判断子菜单是否选中\r\nconst isSubmenuSelected = (item) => {\r\n  if (!item.children) return false;\r\n  return item.children.some(child => selectedKeys.value.includes(child.key));\r\n};\r\n\r\n// 处理用户登录事件\r\nconst handleUserLoggedIn = () => {\r\n  // 延迟获取菜单，等待路由跳转完成\r\n  setTimeout(() => {\r\n    fetchUserMenus();\r\n  }, 600); // 稍微延迟一点，确保路由跳转完成\r\n};\r\n\r\n// 组件挂载时检查登录状态后获取菜单\r\nonMounted(() => {\r\n  // 只在主应用布局时获取菜单，避免在登录页面调用\r\n  if (!route.meta.hideLayout && !isAdminRoute.value) {\r\n    // 检查用户登录状态\r\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (isLoggedIn === 'true' && token) {\r\n      // 用户已登录，获取菜单\r\n      fetchUserMenus();\r\n    }\r\n    // 移除未登录时也调用fetchUserMenus的逻辑\r\n  }\r\n  \r\n  // 监听登录事件\r\n  window.addEventListener('userLoggedIn', handleUserLoggedIn);\r\n});\r\n\r\n// 组件卸载时移除事件监听\r\nonBeforeUnmount(() => {\r\n  window.removeEventListener('userLoggedIn', handleUserLoggedIn);\r\n});\r\n\r\nconst handleLogout = async () => {\r\n  try {\r\n    // 调用后端登出 API\r\n    await userAPI.logout();\r\n    \r\n    // 清除本地存储的登录状态\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('userType');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('isAdmin');\r\n    localStorage.removeItem('userRole');\r\n    localStorage.removeItem('remember_user');\r\n    localStorage.removeItem('remember_mode');\r\n    \r\n    // 显示成功提示\r\n    message.success({\r\n      content: '已退出登录',\r\n      duration: 1.5\r\n    });\r\n    \r\n    // 延迟跳转，使用 window.location.href 强制刷新\r\n    setTimeout(() => {\r\n      window.location.href = '/#/login';\r\n    }, 500);\r\n    \r\n  } catch (error) {\r\n    console.error('登出错误:', error);\r\n    \r\n    // 即使登出 API 失败，也要清除本地状态\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('userType');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('isAdmin');\r\n    localStorage.removeItem('userRole');\r\n    localStorage.removeItem('remember_user');\r\n    localStorage.removeItem('remember_mode');\r\n    \r\n    // 显示警告提示\r\n    message.warning({\r\n      content: '登出请求失败，但已清除本地登录状态',\r\n      duration: 1.5\r\n    });\r\n    \r\n    // 强制跳转到登录页面\r\n    setTimeout(() => {\r\n      window.location.href = '/#/login';\r\n    }, 500);\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.monitor-layout {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: #f0f5ff;\r\n}\r\n\r\n/* 顶部导航 */\r\n.monitor-header {\r\n  background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);\r\n  border-bottom: 1px solid #e6f7ff;\r\n  box-shadow: 0 2px 16px rgba(24, 144, 255, 0.08);\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1000;\r\n  backdrop-filter: blur(10px);\r\n}\r\n\r\n.header-container {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 24px;\r\n  height: 64px;\r\n}\r\n\r\n.brand {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  padding: 8px 16px;\r\n  border-radius: 12px;\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(248, 250, 255, 0.8) 100%);\r\n  backdrop-filter: blur(10px);\r\n  box-shadow: 0 4px 20px rgba(24, 144, 255, 0.08);\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.brand::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: -100%;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(90deg, transparent, rgba(24, 144, 255, 0.1), transparent);\r\n  transition: left 0.6s ease;\r\n}\r\n\r\n.brand:hover::before {\r\n  left: 100%;\r\n}\r\n\r\n.brand:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 32px rgba(24, 144, 255, 0.15);\r\n  border-color: rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.brand-icon {\r\n  width: 40px;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 12px;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\n.brand-icon svg {\r\n  width: 100%;\r\n  height: 100%;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.brand:hover .brand-icon {\r\n  transform: scale(1.1) rotate(5deg);\r\n  filter: drop-shadow(0 4px 8px rgba(24, 144, 255, 0.4));\r\n}\r\n\r\n.brand-title {\r\n  margin: 0;\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  line-height: 1.2;\r\n  background: linear-gradient(135deg, #1a1a1a 0%, #2d3748 50%, #4a5568 100%);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  background-clip: text;\r\n  letter-spacing: 0.8px;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  z-index: 1;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.brand:hover .brand-title {\r\n  transform: translateX(2px);\r\n  background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  background-clip: text;\r\n}\r\n\r\n.main-nav {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.custom-menu {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  padding: 0 20px;\r\n  height: 87px;\r\n}\r\n\r\n.menu-loading {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 64px;\r\n  color: #64748b;\r\n  font-size: 14px;\r\n}\r\n\r\n.menu-item {\r\n  margin: 0 4px;\r\n  padding: 0 16px;\r\n  border-radius: 8px;\r\n  color: #64748b;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  position: relative;\r\n  overflow: hidden;\r\n  height: 40px;\r\n  line-height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(10px);\r\n  border: 1px solid transparent;\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.menu-item:hover {\r\n  color: #3b82f6;\r\n  transform: translateY(-1px);\r\n  background-color: rgba(59, 130, 246, 0.05);\r\n  border-color: transparent;\r\n}\r\n\r\n/* .menu-item:hover:not(.menu-item-selected) .menu-text {\r\n  color: #3b82f6 !important;\r\n}\r\n\r\n.menu-item:hover:not(.menu-item-selected) .menu-icon {\r\n  color: #3b82f6 !important;\r\n} */\r\n\r\n\r\n\r\n.menu-item-selected {\r\n  color: #ffffff !important;\r\n  background: linear-gradient(135deg, #3b82f6 0%, #60a5fa 100%) !important;\r\n  font-weight: 600;\r\n  border-color: transparent;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.menu-item-selected .menu-text {\r\n  color: #ffffff !important;\r\n}\r\n\r\n.menu-item-selected .menu-icon {\r\n  color: #ffffff !important;\r\n}\r\n\r\n.menu-item-selected:hover {\r\n  color: #ffffff !important;\r\n  background: linear-gradient(135deg, #3b82f6 0%, #60a5fa 100%) !important;\r\n}\r\n\r\n.menu-item-selected:hover .menu-text {\r\n  color: #ffffff !important;\r\n}\r\n\r\n.menu-item-selected:hover .menu-icon {\r\n  color: #ffffff !important;\r\n}\r\n\r\n/* 子菜单样式 */\r\n.menu-submenu {\r\n  margin: 0 4px;\r\n  position: relative;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.submenu-title {\r\n  position: relative;\r\n}\r\n\r\n.submenu-arrow {\r\n  margin-left: 4px;\r\n  font-size: 12px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.menu-submenu:hover .submenu-arrow {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.submenu-popup {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  min-width: 160px;\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.1);\r\n  border: 1px solid rgba(0, 0, 0, 0.06);\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  transform: translateY(-10px);\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  z-index: 1000;\r\n  padding: 8px 0;\r\n}\r\n\r\n.submenu-visible {\r\n  opacity: 1;\r\n  visibility: visible;\r\n  transform: translateY(0);\r\n}\r\n\r\n.submenu-item {\r\n  padding: 8px 16px;\r\n  color: #64748b;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  transition: all 0.3s ease;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.submenu-item:hover {\r\n  color: #3b82f6;\r\n  background-color: rgba(59, 130, 246, 0.05);\r\n}\r\n\r\n.submenu-item-selected {\r\n  color: #3b82f6 !important;\r\n  background-color: rgba(59, 130, 246, 0.1) !important;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 图标样式优化 */\r\n.menu-icon {\r\n  font-size: 16px;\r\n  margin-right: 8px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.menu-item:hover .menu-icon {\r\n  transform: scale(1.1);\r\n}\r\n\r\n.menu-item-selected .menu-icon {\r\n  color: #ffffff;\r\n  transform: scale(1.05);\r\n}\r\n\r\n.menu-text {\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n}\r\n\r\n.notification-badge {\r\n  cursor: pointer;\r\n}\r\n\r\n.action-btn {\r\n  color: #595959;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.action-btn:hover {\r\n  color: #1890ff;\r\n}\r\n\r\n.user-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  color: #595959;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.user-btn:hover {\r\n  color: #1890ff;\r\n}\r\n\r\n.user-avatar {\r\n  background: #1890ff;\r\n  font-weight: 600;\r\n}\r\n\r\n.user-name {\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 主内容区域 */\r\n.monitor-content {\r\n  flex: 1;\r\n  padding: 32px 24px;\r\n  background: linear-gradient(135deg, #f0f5ff 0%, #f8faff 50%, #ffffff 100%);\r\n  position: relative;\r\n}\r\n\r\n.monitor-content::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 100px;\r\n  background: linear-gradient(180deg, rgba(24, 144, 255, 0.02) 0%, transparent 100%);\r\n  pointer-events: none;\r\n}\r\n\r\n.content-container {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.page-title {\r\n  margin: 0 0 8px 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.page-subtitle {\r\n  margin: 0;\r\n  font-size: 14px;\r\n  color: #595959;\r\n}\r\n\r\n.content-panel {\r\n  background: #ffffff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 24px rgba(24, 144, 255, 0.08);\r\n  padding: 20px;\r\n  min-height: 600px;\r\n  border: 1px solid rgba(24, 144, 255, 0.08);\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.content-panel::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 1px;\r\n  background: linear-gradient(90deg, transparent, rgba(24, 144, 255, 0.2), transparent);\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .header-container {\r\n    padding: 0 16px;\r\n    flex-direction: column;\r\n    height: auto;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .main-nav {\r\n    width: 100%;\r\n    margin: 0;\r\n  }\r\n  \r\n  .custom-menu {\r\n    width: 100%;\r\n    justify-content: center;\r\n    height: 48px;\r\n    flex-wrap: wrap;\r\n    gap: 4px;\r\n  }\r\n  \r\n  .menu-item {\r\n    height: 36px;\r\n    line-height: 36px;\r\n    padding: 0 12px;\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .page-title {\r\n    font-size: 20px;\r\n  }\r\n  \r\n  .monitor-content {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .content-panel {\r\n    padding: 16px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .brand-title {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .user-name {\r\n    display: none;\r\n  }\r\n}\r\n</style>\r\n",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\router\\index.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\layouts\\AdminLayout.vue",["285","286","287","288"],"<template>\r\n  <a-layout class=\"admin-layout\">\r\n    <!-- 顶部导航栏 -->\r\n    <a-layout-header class=\"admin-header\">\r\n      <div class=\"header-container\">\r\n        <!-- 左侧Logo和品牌 -->\r\n        <div class=\"header-brand\">\r\n          <div class=\"brand-logo\">\r\n            <CrownOutlined class=\"brand-icon\" />\r\n            <span class=\"brand-title\">管理后台</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 中间导航菜单 -->\r\n        <nav class=\"header-nav\">\r\n          <a-menu\r\n            v-model:selectedKeys=\"selectedKeys\"\r\n            mode=\"horizontal\"\r\n            theme=\"light\"\r\n            class=\"admin-nav-menu\"\r\n            @select=\"handleMenuSelect\"\r\n          >\r\n            <a-menu-item key=\"/admin/dashboard\">\r\n              <template #icon><DashboardOutlined /></template>\r\n              <span>控制台</span>\r\n            </a-menu-item>\r\n            \r\n            <a-sub-menu key=\"users\">\r\n              <template #icon><TeamOutlined /></template>\r\n              <template #title>用户管理</template>\r\n              <a-menu-item key=\"/admin/users\">\r\n                <template #icon><UserOutlined /></template>\r\n                <span>用户列表</span>\r\n              </a-menu-item>\r\n              <a-menu-item key=\"/admin/roles\">\r\n                <template #icon><SafetyOutlined /></template>\r\n                <span>角色权限</span>\r\n              </a-menu-item>\r\n            </a-sub-menu>\r\n            \r\n            <a-sub-menu key=\"organization\">\r\n              <template #icon><ApartmentOutlined /></template>\r\n              <template #title>组织架构</template>\r\n              <a-menu-item key=\"/admin/departments\">\r\n                <template #icon><BankOutlined /></template>\r\n                <span>部门管理</span>\r\n              </a-menu-item>\r\n              <a-menu-item key=\"/admin/positions\">\r\n                <template #icon><IdcardOutlined /></template>\r\n                <span>职位管理</span>\r\n              </a-menu-item>\r\n              <a-menu-item key=\"/admin/employees\">\r\n                <template #icon><ContactsOutlined /></template>\r\n                <span>员工管理</span>\r\n              </a-menu-item>\r\n            </a-sub-menu>\r\n            \r\n            <a-sub-menu key=\"assets\">\r\n              <template #icon><LaptopOutlined /></template>\r\n              <template #title>资产管理</template>\r\n              <a-menu-item key=\"/assets/hardware\">\r\n                <template #icon><DesktopOutlined /></template>\r\n                <span>硬件设施</span>\r\n              </a-menu-item>\r\n              <a-menu-item key=\"/assets/software\">\r\n                <template #icon><CodeOutlined /></template>\r\n                <span>软件资产</span>\r\n              </a-menu-item>\r\n            </a-sub-menu>\r\n            \r\n            <a-sub-menu key=\"system\">\r\n              <template #icon><SettingOutlined /></template>\r\n              <template #title>系统管理</template>\r\n              <a-menu-item key=\"/admin/dictionary\">\r\n                <template #icon><BookOutlined /></template>\r\n                <span>字典管理</span>\r\n              </a-menu-item>\r\n              <a-menu-item key=\"/admin/font-demo\">\r\n                <template #icon><FontSizeOutlined /></template>\r\n                <span>字体设计</span>\r\n              </a-menu-item>\r\n              <a-menu-item key=\"/admin/settings\">\r\n                <template #icon><ToolOutlined /></template>\r\n                <span>系统设置</span>\r\n              </a-menu-item>\r\n              <a-menu-item key=\"/admin/logs\">\r\n                <template #icon><FileTextOutlined /></template>\r\n                <span>操作日志</span>\r\n              </a-menu-item>\r\n            </a-sub-menu>\r\n            \r\n            <a-menu-item key=\"/admin/backup\">\r\n              <template #icon><CloudDownloadOutlined /></template>\r\n              <span>数据备份</span>\r\n            </a-menu-item>\r\n          </a-menu>\r\n        </nav>\r\n        \r\n        <!-- 右侧操作区域 -->\r\n        <div class=\"header-actions\">\r\n          <a-space size=\"large\">\r\n            <!-- 切换到用户界面 -->\r\n            \r\n            <!-- 通知铃铛 -->\r\n            <a-badge :count=\"5\" class=\"notification-badge\">\r\n              <a-button type=\"text\" class=\"header-btn\">\r\n                <BellOutlined />\r\n              </a-button>\r\n            </a-badge>\r\n            \r\n            <!-- 全屏切换 -->\r\n            <a-button type=\"text\" class=\"header-btn\" @click=\"toggleFullscreen\">\r\n              <FullscreenOutlined v-if=\"!isFullscreen\" />\r\n              <FullscreenExitOutlined v-else />\r\n            </a-button>\r\n            \r\n            <!-- 用户信息下拉菜单 -->\r\n            <a-dropdown>\r\n              <a-button type=\"text\" class=\"user-info\">\r\n                <a-avatar class=\"user-avatar\" :style=\"{ background: '#faad14' }\">\r\n                  {{ currentUserName.charAt(0).toUpperCase() }}\r\n                </a-avatar>\r\n                <span class=\"user-name\">{{ currentUserName }}</span>\r\n                <DownOutlined />\r\n              </a-button>\r\n              <template #overlay>\r\n                <a-menu>\r\n                  <a-menu-item key=\"profile\">\r\n                    <UserOutlined />\r\n                    <span>个人资料</span>\r\n                  </a-menu-item>\r\n                  <a-menu-item key=\"security\">\r\n                    <LockOutlined />\r\n                    <span>安全设置</span>\r\n                  </a-menu-item>\r\n                  <a-menu-divider />\r\n                  <a-menu-item key=\"logout\" @click=\"handleLogout\">\r\n                    <LogoutOutlined />\r\n                    <span>退出登录</span>\r\n                  </a-menu-item>\r\n                </a-menu>\r\n              </template>\r\n            </a-dropdown>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n    </a-layout-header>\r\n    \r\n    <!-- 面包屑导航 -->\r\n    <div class=\"breadcrumb-container\">\r\n      <div class=\"breadcrumb-wrapper\">\r\n        <a-breadcrumb class=\"breadcrumb\">\r\n          <a-breadcrumb-item>管理后台</a-breadcrumb-item>\r\n          <a-breadcrumb-item>{{ currentPageTitle }}</a-breadcrumb-item>\r\n        </a-breadcrumb>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 主内容区 -->\r\n    <a-layout-content class=\"admin-content\">\r\n      <div class=\"content-wrapper\">\r\n        <router-view />\r\n      </div>\r\n    </a-layout-content>\r\n    \r\n    <!-- 底部信息 -->\r\n    <a-layout-footer class=\"admin-footer\">\r\n      <div class=\"footer-content\">\r\n        <span>© 2024 运维监控系统管理后台</span>\r\n        <span class=\"version\">Version 1.0.0</span>\r\n      </div>\r\n    </a-layout-footer>\r\n  </a-layout>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, onMounted, nextTick } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport { message } from 'ant-design-vue';\r\nimport { userAPI } from '@/api/users';\r\nimport {\r\n  CrownOutlined,\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n  DashboardOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n  SafetyOutlined,\r\n  ApartmentOutlined,\r\n  BankOutlined,\r\n  IdcardOutlined,\r\n  ContactsOutlined,\r\n  SettingOutlined,\r\n  ToolOutlined,\r\n  FileTextOutlined,\r\n  CloudDownloadOutlined,\r\n  BookOutlined,\r\n  FontSizeOutlined,\r\n  SwapOutlined,\r\n  BellOutlined,\r\n  FullscreenOutlined,\r\n  FullscreenExitOutlined,\r\n  DownOutlined,\r\n  LockOutlined,\r\n  LogoutOutlined,\r\n  LaptopOutlined,\r\n  DesktopOutlined,\r\n  CodeOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\nconst route = useRoute();\r\nconst router = useRouter();\r\n\r\n// 响应式数据\r\nconst collapsed = ref(false);\r\nconst selectedKeys = ref([route.path]);\r\nconst currentUserName = ref(localStorage.getItem('username') || '管理员');\r\nconst isFullscreen = ref(false);\r\n\r\n// 监听 localStorage 变化，确保登出后能正确更新界面\r\nconst updateUserInfo = () => {\r\n  currentUserName.value = localStorage.getItem('username') || '管理员';\r\n};\r\n\r\n// 监听存储变化\r\nwindow.addEventListener('storage', updateUserInfo);\r\n\r\n// 计算属性\r\nconst currentPageTitle = computed(() => {\r\n  const titles = {\r\n    '/admin': '控制台',\r\n    '/admin/dashboard': '控制台',\r\n    '/admin/users': '用户管理',\r\n    '/admin/roles': '角色权限',\r\n    '/admin/departments': '部门管理',\r\n    '/admin/positions': '职位管理',\r\n    '/admin/employees': '员工管理',\r\n    '/admin/dictionary': '字典管理',\r\n    '/admin/settings': '系统设置',\r\n    '/admin/logs': '操作日志',\r\n    '/admin/backup': '数据备份'\r\n  };\r\n  return titles[route.path] || '管理后台';\r\n});\r\n\r\n// 监听路由变化\r\nwatch(() => route.path, (newPath) => {\r\n  selectedKeys.value = [newPath];\r\n});\r\n\r\n// 方法\r\nconst toggleCollapsed = () => {\r\n  collapsed.value = !collapsed.value;\r\n  \r\n  // 在移动端，折叠侧边栏实际上是隐藏它\r\n  const isMobile = window.innerWidth <= 768;\r\n  if (isMobile) {\r\n    const siderElement = document.querySelector('.admin-sider');\r\n    if (siderElement) {\r\n      if (collapsed.value) {\r\n        siderElement.style.transform = 'translateX(-100%)';\r\n      } else {\r\n        siderElement.style.transform = 'translateX(0)';\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst handleMenuSelect = ({ key }) => {\r\n  if (key !== 'back-to-user') {\r\n    const contentWrapper = document.querySelector('.content-wrapper');\r\n    \r\n    if (contentWrapper) {\r\n      // 第一步：渐出当前内容\r\n      contentWrapper.style.transition = 'all 0.3s ease-out';\r\n      contentWrapper.style.opacity = '0';\r\n      contentWrapper.style.transform = 'translateY(-10px)';\r\n      \r\n      // 第二步：延迟后进行路由跳转\r\n      setTimeout(async () => {\r\n        await router.push(key);\r\n        \r\n        // 第三步：等待路由切换完成后渐入新内容\r\n        await nextTick();\r\n        \r\n        // 使用轮询方式确保找到新的DOM元素\r\n        const waitForElement = (selector, maxAttempts = 10) => {\r\n          return new Promise((resolve) => {\r\n            let attempts = 0;\r\n            const checkElement = () => {\r\n              const element = document.querySelector(selector);\r\n              if (element || attempts >= maxAttempts) {\r\n                resolve(element);\r\n              } else {\r\n                attempts++;\r\n                setTimeout(checkElement, 50);\r\n              }\r\n            };\r\n            checkElement();\r\n          });\r\n        };\r\n        \r\n        const newContentWrapper = await waitForElement('.content-wrapper');\r\n        if (newContentWrapper) {\r\n          // 设置初始渐入状态\r\n          newContentWrapper.style.transition = 'none';\r\n          newContentWrapper.style.opacity = '0';\r\n          newContentWrapper.style.transform = 'translateY(20px)';\r\n          \r\n          // 滚动到顶部\r\n          newContentWrapper.scrollTo({\r\n            top: 0,\r\n            behavior: 'auto'\r\n          });\r\n          \r\n          // 强制重绘后应用渐入效果\r\n          newContentWrapper.offsetHeight; // 触发重绘\r\n          \r\n          newContentWrapper.style.transition = 'all 0.4s ease-out';\r\n          newContentWrapper.style.opacity = '1';\r\n          newContentWrapper.style.transform = 'translateY(0)';\r\n        }\r\n      }, 300); // 等待渐出动画完成\r\n    } else {\r\n      // 如果找不到容器，直接跳转\r\n      router.push(key);\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\nconst toggleFullscreen = () => {\r\n  if (!document.fullscreenElement) {\r\n    document.documentElement.requestFullscreen();\r\n    isFullscreen.value = true;\r\n  } else {\r\n    if (document.exitFullscreen) {\r\n      document.exitFullscreen();\r\n      isFullscreen.value = false;\r\n    }\r\n  }\r\n};\r\n\r\nconst handleLogout = async () => {\r\n  try {\r\n    // 调用后端登出 API\r\n    await userAPI.logout();\r\n    \r\n    // 清除本地存储的登录状态\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('userType');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('isAdmin');\r\n    localStorage.removeItem('userRole');\r\n    localStorage.removeItem('remember_user');\r\n    localStorage.removeItem('remember_mode');\r\n    \r\n    // 显示成功提示\r\n    message.success({\r\n      content: '已退出登录',\r\n      duration: 1.5\r\n    });\r\n    \r\n    // 延迟跳转，使用 window.location.href 强制刷新\r\n    setTimeout(() => {\r\n      window.location.href = '/#/login';\r\n    }, 500);\r\n    \r\n  } catch (error) {\r\n    console.error('登出错误:', error);\r\n    \r\n    // 即使登出 API 失败，也要清除本地状态\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('userInfo');\r\n    localStorage.removeItem('isLoggedIn');\r\n    localStorage.removeItem('userType');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('isAdmin');\r\n    localStorage.removeItem('userRole');\r\n    localStorage.removeItem('remember_user');\r\n    localStorage.removeItem('remember_mode');\r\n    \r\n    // 显示警告提示\r\n    message.warning({\r\n      content: '登出请求失败，但已清除本地登录状态',\r\n      duration: 1.5\r\n    });\r\n    \r\n    // 强制跳转到登录页面\r\n    setTimeout(() => {\r\n      window.location.href = '/#/login';\r\n    }, 500);\r\n  }\r\n};\r\n\r\n// 监听全屏状态变化\r\nonMounted(() => {\r\n  document.addEventListener('fullscreenchange', () => {\r\n    isFullscreen.value = !!document.fullscreenElement;\r\n  });\r\n  \r\n  // 监听窗口大小变化，处理移动端侧边栏\r\n  const handleResize = () => {\r\n    const isMobile = window.innerWidth <= 768;\r\n    const siderElement = document.querySelector('.admin-sider');\r\n    \r\n    if (isMobile && !collapsed.value) {\r\n      collapsed.value = true;\r\n      if (siderElement) {\r\n        siderElement.style.transform = 'translateX(-100%)';\r\n      }\r\n    } else if (!isMobile) {\r\n      if (siderElement) {\r\n        siderElement.style.transform = '';\r\n      }\r\n    }\r\n  };\r\n  \r\n  window.addEventListener('resize', handleResize);\r\n  handleResize(); // 初始化检查\r\n  \r\n  // 清理事件监听器\r\n  return () => {\r\n    window.removeEventListener('resize', handleResize);\r\n  };\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.admin-layout {\r\n  min-height: 100vh;\r\n  background: #f0f2f5;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  overflow-x: hidden; /* 防止水平滚动条 */\r\n}\r\n\r\n/* 顶部导航栏样式 */\r\n.admin-header {\r\n  background: linear-gradient(135deg, #001529 0%, #002140 100%);\r\n  padding: 0;\r\n  height: 72px;\r\n  box-shadow: 0 4px 16px rgba(0, 21, 41, 0.35);\r\n  z-index: 100;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.header-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 100%;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  padding: 0 24px;\r\n}\r\n\r\n/* 左侧品牌区域 */\r\n.header-brand {\r\n  display: flex;\r\n  align-items: center;\r\n  min-width: 200px;\r\n}\r\n\r\n.brand-logo {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.brand-icon {\r\n  font-size: 28px;\r\n  color: #faad14;\r\n  filter: drop-shadow(0 0 12px rgba(250, 173, 20, 0.6));\r\n  animation: pulse 3s ease-in-out infinite;\r\n}\r\n\r\n.brand-title {\r\n  color: #fff;\r\n  font-size: var(--font-size-lg);\r\n  font-weight: var(--font-weight-bold);\r\n  line-height: var(--line-height-tight);\r\n  text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n/* 中间导航区域 */\r\n.header-nav {\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  max-width: 800px;\r\n}\r\n\r\n/* 水平导航菜单样式 */\r\n:deep(.admin-nav-menu) {\r\n  background: transparent;\r\n  border-bottom: none;\r\n  line-height: 72px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item) {\r\n  color: rgba(255, 255, 255, 0.85) !important;\r\n  border-radius: 8px;\r\n  margin: 0 4px;\r\n  padding: 0 16px;\r\n  height: 48px;\r\n  line-height: 48px;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item:hover) {\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08)) !important;\r\n  color: #fff !important;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item:hover span) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item:hover .anticon) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item-selected) {\r\n  background: linear-gradient(135deg, #1890ff, #40a9ff) !important;\r\n  color: #fff !important;\r\n  font-weight: 600;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item-selected span) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item-selected .anticon) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-item-selected::after) {\r\n  border-bottom: none !important;\r\n  display: none !important;\r\n  content: none !important;\r\n}\r\n\r\n/* 子菜单样式 */\r\n:deep(.admin-nav-menu .ant-menu-submenu) {\r\n  color: rgba(255, 255, 255, 0.85) !important;\r\n  margin: 0 4px;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-title) {\r\n  color: rgba(255, 255, 255, 0.85) !important;\r\n  border-radius: 8px;\r\n  padding: 0 16px;\r\n  height: 48px;\r\n  line-height: 48px;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n/* 子菜单标题文字和图标默认颜色 */\r\n:deep(.admin-nav-menu .ant-menu-submenu-title span) {\r\n  color: rgba(255, 255, 255, 0.85) !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-title .anticon) {\r\n  color: rgba(255, 255, 255, 0.85) !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-title .ant-menu-submenu-arrow) {\r\n  color: rgba(255, 255, 255, 0.85) !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-title:hover) {\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08)) !important;\r\n  color: #fff !important;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-title:hover span) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-title:hover .anticon) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-title:hover .ant-menu-submenu-arrow) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-open > .ant-menu-submenu-title) {\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08)) !important;\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-open > .ant-menu-submenu-title span) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-open > .ant-menu-submenu-title .anticon) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-open > .ant-menu-submenu-title .ant-menu-submenu-arrow) {\r\n  color: #fff !important;\r\n}\r\n\r\n/* 当子菜单被选中时的样式（当子菜单中有选中项时） */\r\n:deep(.admin-nav-menu .ant-menu-submenu-selected > .ant-menu-submenu-title) {\r\n  background: linear-gradient(135deg, #1890ff, #40a9ff) !important;\r\n  color: #fff !important;\r\n  font-weight: 600;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-selected > .ant-menu-submenu-title span) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-selected > .ant-menu-submenu-title .anticon) {\r\n  color: #fff !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-selected > .ant-menu-submenu-title .ant-menu-submenu-arrow) {\r\n  color: #fff !important;\r\n}\r\n\r\n/* 移除子菜单选中状态的下方线条 */\r\n:deep(.admin-nav-menu .ant-menu-submenu-selected::after) {\r\n  border-bottom: none !important;\r\n  display: none !important;\r\n  content: none !important;\r\n}\r\n\r\n:deep(.admin-nav-menu .ant-menu-submenu-selected > .ant-menu-submenu-title::after) {\r\n  border-bottom: none !important;\r\n  display: none !important;\r\n  content: none !important;\r\n}\r\n\r\n/* 右侧操作区域 */\r\n.header-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  min-width: 300px;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.switch-btn {\r\n  color: rgba(255, 255, 255, 0.85);\r\n  border-radius: 8px;\r\n  padding: 8px 16px;\r\n  height: 40px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.switch-btn:hover {\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08));\r\n  color: #fff;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.switch-text {\r\n  margin-left: 8px;\r\n}\r\n\r\n.header-btn {\r\n  color: rgba(255, 255, 255, 0.85);\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.header-btn:hover {\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08));\r\n  color: #fff;\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.notification-badge {\r\n  cursor: pointer;\r\n}\r\n\r\n:deep(.notification-badge .ant-badge-count) {\r\n  background: #ff4757;\r\n  border: 2px solid #fff;\r\n}\r\n\r\n.user-info {\r\n  color: rgba(255, 255, 255, 0.85);\r\n  padding: 8px 16px;\r\n  border-radius: 8px;\r\n  height: auto;\r\n  transition: all 0.3s ease;\r\n  background: rgba(255, 255, 255, 0.08);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.user-info:hover {\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08));\r\n  color: #fff;\r\n  border-color: rgba(255, 255, 255, 0.2);\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.user-avatar {\r\n  background: linear-gradient(135deg, #faad14, #ffc53d);\r\n  color: #fff;\r\n  font-weight: 600;\r\n}\r\n\r\n.user-name {\r\n  color: inherit;\r\n  font-size: var(--font-size-sm);\r\n  font-weight: var(--font-weight-medium);\r\n  line-height: var(--line-height-normal);\r\n  margin: 0 8px;\r\n}\r\n\r\n/* 面包屑导航 */\r\n.breadcrumb-container {\r\n  background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);\r\n  padding: 12px 0;\r\n  border-bottom: 1px solid rgba(24, 144, 255, 0.08);\r\n  position: fixed;\r\n  top: 72px;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 99;\r\n  height: 48px;\r\n}\r\n\r\n.breadcrumb-wrapper {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  padding: 0 24px;\r\n}\r\n\r\n.breadcrumb {\r\n  margin: 0;\r\n}\r\n\r\n:deep(.breadcrumb .ant-breadcrumb-link) {\r\n  color: #595959;\r\n  font-weight: var(--font-weight-medium);\r\n  line-height: var(--line-height-normal);\r\n}\r\n\r\n:deep(.breadcrumb .ant-breadcrumb-separator) {\r\n  color: #d9d9d9;\r\n}\r\n\r\n/* 主内容区域 */\r\n.admin-content {\r\n  flex: 1;\r\n  margin-top: 120px; /* 顶部导航(72px) + 面包屑(48px) */\r\n  margin-bottom: 60px; /* 底部高度 */\r\n  min-height: calc(100vh - 180px);\r\n  overflow-y: auto; /* 允许垂直滚动 */\r\n  overflow-x: hidden; /* 防止水平滚动 */\r\n}\r\n\r\n.content-wrapper {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  padding: 32px;\r\n  background: #fff;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 24px rgba(24, 144, 255, 0.08);\r\n  min-height: calc(100vh - 260px); /* 调整内容区域最小高度 */\r\n  overflow-y: auto; /* 允许垂直滚动 */\r\n  overflow-x: hidden; /* 防止水平滚动 */\r\n  max-height: calc(100vh - 260px); /* 限制最大高度以启用滚动 */\r\n  /* 移除自动动画，由JavaScript控制 */\r\n}\r\n\r\n/* 底部区域 */\r\n.admin-footer {\r\n  background: linear-gradient(135deg, #ffffff 0%, #f8faff 100%);\r\n  padding: 16px 24px;\r\n  border-top: 1px solid rgba(24, 144, 255, 0.08);\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: 99;\r\n  height: 60px;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.footer-content {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  color: #666;\r\n  font-size: var(--font-size-xs);\r\n  font-weight: var(--font-weight-medium);\r\n  line-height: var(--line-height-normal);\r\n}\r\n\r\n.version {\r\n  background: linear-gradient(135deg, #e6f7ff, #bae7ff);\r\n  color: #1890ff;\r\n  padding: 4px 12px;\r\n  border-radius: 16px;\r\n  font-size: var(--font-size-xs);\r\n  font-weight: var(--font-weight-semibold);\r\n  line-height: var(--line-height-tight);\r\n  border: 1px solid rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n/* 动画效果 */\r\n/* fadeInUp动画已移除，由JavaScript控制渐入渐出效果 */\r\n\r\n@keyframes pulse {\r\n  0%, 100% {\r\n    transform: scale(1);\r\n    filter: drop-shadow(0 0 12px rgba(250, 173, 20, 0.6));\r\n  }\r\n  50% {\r\n    transform: scale(1.08);\r\n    filter: drop-shadow(0 0 16px rgba(250, 173, 20, 0.8));\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .header-container {\r\n    padding: 0 16px;\r\n  }\r\n  \r\n  .breadcrumb-wrapper {\r\n    padding: 0 16px;\r\n  }\r\n  \r\n  .content-wrapper {\r\n    padding: 24px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .header-container {\r\n    flex-wrap: wrap;\r\n    height: auto;\r\n    padding: 12px 16px;\r\n  }\r\n  \r\n  .header-brand {\r\n    min-width: auto;\r\n  }\r\n  \r\n  .header-nav {\r\n    order: 3;\r\n    flex-basis: 100%;\r\n    margin-top: 12px;\r\n  }\r\n  \r\n  .header-actions {\r\n    min-width: auto;\r\n  }\r\n  \r\n  .switch-text {\r\n    display: none;\r\n  }\r\n  \r\n  .user-name {\r\n    display: none;\r\n  }\r\n  \r\n  .admin-content {\r\n    margin-top: 140px; /* 增加移动端顶部间距 */\r\n    margin-bottom: 70px; /* 增加移动端底部间距 */\r\n    overflow-y: auto; /* 移动端也允许滚动 */\r\n  }\r\n  \r\n  .content-wrapper {\r\n    padding: 20px;\r\n    min-height: calc(100vh - 320px);\r\n  }\r\n  \r\n  .footer-content {\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .admin-footer {\r\n    height: 70px; /* 移动端底部高度增加 */\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .header-container {\r\n    padding: 8px 12px;\r\n  }\r\n  \r\n  .brand-title {\r\n    font-size: var(--font-size-base);\r\n  }\r\n  \r\n  .admin-content {\r\n    margin-top: 150px; /* 小屏幕顶部间距进一步增加 */\r\n    margin-bottom: 80px; /* 小屏幕底部间距增加 */\r\n    overflow-y: auto; /* 小屏幕也允许滚动 */\r\n  }\r\n  \r\n  .content-wrapper {\r\n    padding: 16px;\r\n    min-height: calc(100vh - 350px);\r\n  }\r\n  \r\n  .header-btn {\r\n    width: 36px;\r\n    height: 36px;\r\n  }\r\n  \r\n  .user-avatar {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n  \r\n  .admin-footer {\r\n    height: 80px; /* 小屏幕底部高度进一步增加 */\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminDashboard.vue",["289"],"<template>\r\n  <div class=\"admin-dashboard\">\r\n    <!-- 欢迎区域 -->\r\n    <div class=\"welcome-section\">\r\n      <div class=\"welcome-bg\">\r\n        <div class=\"bg-decoration\"></div>\r\n        <div class=\"bg-particles\"></div>\r\n      </div>\r\n      <div class=\"welcome-content\">\r\n        <h1 class=\"welcome-title\">\r\n          <CrownOutlined class=\"crown-icon\" />\r\n          欢迎回来，{{ currentUserName }}\r\n        </h1>\r\n        <p class=\"welcome-text\">今天是 {{ currentDate }}，祝您工作愉快！</p>\r\n        <div class=\"welcome-features\">\r\n          <div class=\"feature-item\">\r\n            <ShieldCheckOutlined class=\"feature-icon\" />\r\n            <span>安全管理</span>\r\n          </div>\r\n          <div class=\"feature-item\">\r\n            <ControlOutlined class=\"feature-icon\" />\r\n            <span>全局控制</span>\r\n          </div>\r\n          <div class=\"feature-item\">\r\n            <RocketOutlined class=\"feature-icon\" />\r\n            <span>高效运维</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"welcome-stats\">\r\n        <div class=\"quick-stat\">\r\n          <div class=\"stat-icon\">\r\n            <UserOutlined />\r\n          </div>\r\n          <div class=\"stat-info\">\r\n            <div class=\"stat-number\">{{ systemStats.onlineUsers }}</div>\r\n            <div class=\"stat-label\">在线用户</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"quick-stat\">\r\n          <div class=\"stat-icon\">\r\n            <DatabaseOutlined />\r\n          </div>\r\n          <div class=\"stat-info\">\r\n            <div class=\"stat-number\">{{ systemStats.totalAssets }}</div>\r\n            <div class=\"stat-label\">资产总数</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"quick-stat\">\r\n          <div class=\"stat-icon\">\r\n            <BellOutlined />\r\n          </div>\r\n          <div class=\"stat-info\">\r\n            <div class=\"stat-number\">{{ systemStats.alerts }}</div>\r\n            <div class=\"stat-label\">待处理告警</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 统计卡片 -->\r\n    <div class=\"stats-grid\">\r\n      <a-card class=\"stat-card gradient-blue\">\r\n        <div class=\"stat-header\">\r\n          <TeamOutlined class=\"stat-icon-large\" />\r\n          <div class=\"stat-title\">系统用户</div>\r\n        </div>\r\n        <div class=\"stat-value\">{{ dashboardData.totalUsers }}</div>\r\n        <div class=\"stat-trend\">\r\n          <ArrowUpOutlined class=\"trend-up\" />\r\n          <span>较昨日 +12%</span>\r\n        </div>\r\n      </a-card>\r\n\r\n      <a-card class=\"stat-card gradient-green\">\r\n        <div class=\"stat-header\">\r\n          <UserOutlined class=\"stat-icon-large\" />\r\n          <div class=\"stat-title\">活跃会话</div>\r\n        </div>\r\n        <div class=\"stat-value\">{{ dashboardData.activeSessions }}</div>\r\n        <div class=\"stat-trend\">\r\n          <ArrowUpOutlined class=\"trend-up\" />\r\n          <span>较昨日 +8%</span>\r\n        </div>\r\n      </a-card>\r\n\r\n      <a-card class=\"stat-card gradient-orange\">\r\n        <div class=\"stat-header\">\r\n          <BellOutlined class=\"stat-icon-large\" />\r\n          <div class=\"stat-title\">系统告警</div>\r\n        </div>\r\n        <div class=\"stat-value\">{{ dashboardData.systemAlerts }}</div>\r\n        <div class=\"stat-trend\">\r\n          <ArrowDownOutlined class=\"trend-down\" />\r\n          <span>较昨日 -3%</span>\r\n        </div>\r\n      </a-card>\r\n\r\n      <a-card class=\"stat-card gradient-purple\">\r\n        <div class=\"stat-header\">\r\n          <CloudServerOutlined class=\"stat-icon-large\" />\r\n          <div class=\"stat-title\">存储使用</div>\r\n        </div>\r\n        <div class=\"stat-value\">{{ dashboardData.storageUsed }}GB</div>\r\n        <div class=\"stat-trend\">\r\n          <ArrowUpOutlined class=\"trend-up\" />\r\n          <span>较昨日 +2GB</span>\r\n        </div>\r\n      </a-card>\r\n    </div>\r\n\r\n    <!-- 主要内容区 -->\r\n    <div class=\"main-grid\">\r\n      <!-- 系统监控 -->\r\n      <a-card title=\"系统性能监控\" class=\"monitor-card modern-card\">\r\n        <template #title>\r\n          <div class=\"card-title\">\r\n            <MonitorOutlined class=\"title-icon\" />\r\n            <span>系统性能监控</span>\r\n          </div>\r\n        </template>\r\n        <template #extra>\r\n          <a-button type=\"primary\" size=\"small\" ghost>查看详情</a-button>\r\n        </template>\r\n        <div class=\"monitor-content\">\r\n          <div class=\"monitor-item\">\r\n            <div class=\"monitor-label\">CPU 使用率</div>\r\n            <a-progress :percent=\"systemMonitor.cpu\" :stroke-color=\"getProgressColor(systemMonitor.cpu)\" />\r\n          </div>\r\n          <div class=\"monitor-item\">\r\n            <div class=\"monitor-label\">内存使用率</div>\r\n            <a-progress :percent=\"systemMonitor.memory\" :stroke-color=\"getProgressColor(systemMonitor.memory)\" />\r\n          </div>\r\n          <div class=\"monitor-item\">\r\n            <div class=\"monitor-label\">磁盘使用率</div>\r\n            <a-progress :percent=\"systemMonitor.disk\" :stroke-color=\"getProgressColor(systemMonitor.disk)\" />\r\n          </div>\r\n          <div class=\"monitor-item\">\r\n            <div class=\"monitor-label\">网络流量</div>\r\n            <a-progress :percent=\"systemMonitor.network\" :stroke-color=\"getProgressColor(systemMonitor.network)\" />\r\n          </div>\r\n        </div>\r\n      </a-card>\r\n\r\n      <!-- 最近活动 -->\r\n      <a-card title=\"最近活动\" class=\"activity-card modern-card\">\r\n        <template #title>\r\n          <div class=\"card-title\">\r\n            <HistoryOutlined class=\"title-icon\" />\r\n            <span>最近活动</span>\r\n          </div>\r\n        </template>\r\n        <template #extra>\r\n          <a-button type=\"primary\" size=\"small\" ghost>查看全部</a-button>\r\n        </template>\r\n        <a-timeline class=\"activity-timeline\">\r\n          <a-timeline-item\r\n            v-for=\"activity in recentActivities\"\r\n            :key=\"activity.id\"\r\n            :color=\"activity.type === 'success' ? 'green' : activity.type === 'warning' ? 'orange' : 'red'\"\r\n          >\r\n            <div class=\"activity-item\">\r\n              <div class=\"activity-content\">\r\n                <span class=\"activity-text\">{{ activity.text }}</span>\r\n                <span class=\"activity-user\">by {{ activity.user }}</span>\r\n              </div>\r\n              <div class=\"activity-time\">{{ activity.time }}</div>\r\n            </div>\r\n          </a-timeline-item>\r\n        </a-timeline>\r\n      </a-card>\r\n\r\n      <!-- 快速操作 -->\r\n      <a-card title=\"快速操作\" class=\"actions-card modern-card\">\r\n        <template #title>\r\n          <div class=\"card-title\">\r\n            <ThunderboltOutlined class=\"title-icon\" />\r\n            <span>快速操作</span>\r\n          </div>\r\n        </template>\r\n        <div class=\"quick-actions\">\r\n          <a-button type=\"primary\" size=\"large\" class=\"action-btn primary-action\" @click=\"goToUsers\">\r\n            <TeamOutlined />\r\n            用户管理\r\n          </a-button>\r\n          <a-button size=\"large\" class=\"action-btn secondary-action\" @click=\"goToSettings\">\r\n            <SettingOutlined />\r\n            系统设置\r\n          </a-button>\r\n          <a-button size=\"large\" class=\"action-btn secondary-action\" @click=\"goToLogs\">\r\n            <FileTextOutlined />\r\n            查看日志\r\n          </a-button>\r\n          <a-button size=\"large\" class=\"action-btn secondary-action\" @click=\"goToBackup\">\r\n            <CloudDownloadOutlined />\r\n            数据备份\r\n          </a-button>\r\n        </div>\r\n      </a-card>\r\n\r\n      <!-- 系统信息 -->\r\n      <a-card title=\"系统信息\" class=\"system-info-card modern-card\">\r\n        <template #title>\r\n          <div class=\"card-title\">\r\n            <InfoCircleOutlined class=\"title-icon\" />\r\n            <span>系统信息</span>\r\n          </div>\r\n        </template>\r\n        <div class=\"system-info\">\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">系统版本</span>\r\n            <span class=\"info-value\">v1.0.0</span>\r\n          </div>\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">运行时间</span>\r\n            <span class=\"info-value\">{{ systemInfo.uptime }}</span>\r\n          </div>\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">数据库版本</span>\r\n            <span class=\"info-value\">MySQL 8.0</span>\r\n          </div>\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">服务器IP</span>\r\n            <span class=\"info-value\">192.168.1.100</span>\r\n          </div>\r\n          <div class=\"info-item\">\r\n            <span class=\"info-label\">最后备份</span>\r\n            <span class=\"info-value\">{{ systemInfo.lastBackup }}</span>\r\n          </div>\r\n        </div>\r\n      </a-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport {\r\n  CrownOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n  BellOutlined,\r\n  CloudServerOutlined,\r\n  ArrowUpOutlined,\r\n  ArrowDownOutlined,\r\n  SettingOutlined,\r\n  FileTextOutlined,\r\n  CloudDownloadOutlined,\r\n  DatabaseOutlined,\r\n  ShieldCheckOutlined,\r\n  ControlOutlined,\r\n  RocketOutlined,\r\n  MonitorOutlined,\r\n  HistoryOutlined,\r\n  ThunderboltOutlined,\r\n  InfoCircleOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\nconst router = useRouter();\r\n\r\n// 响应式数据\r\nconst currentUserName = ref(localStorage.getItem('username') || '管理员');\r\nconst currentDate = ref(new Date().toLocaleDateString('zh-CN', { \r\n  weekday: 'long', \r\n  year: 'numeric', \r\n  month: 'long', \r\n  day: 'numeric' \r\n}));\r\n\r\nconst systemStats = ref({\r\n  onlineUsers: 12,\r\n  totalAssets: 248,\r\n  alerts: 3\r\n});\r\n\r\nconst dashboardData = ref({\r\n  totalUsers: 128,\r\n  activeSessions: 45,\r\n  systemAlerts: 8,\r\n  storageUsed: 67.2\r\n});\r\n\r\nconst systemMonitor = ref({\r\n  cpu: 45,\r\n  memory: 62,\r\n  disk: 78,\r\n  network: 34\r\n});\r\n\r\nconst systemInfo = ref({\r\n  uptime: '15天 8小时 23分钟',\r\n  lastBackup: '2024-01-20 02:30:00'\r\n});\r\n\r\nconst recentActivities = ref([\r\n  {\r\n    id: 1,\r\n    text: '新用户注册',\r\n    user: 'user123',\r\n    time: '2分钟前',\r\n    type: 'success'\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '系统设置更新',\r\n    user: 'admin',\r\n    time: '10分钟前',\r\n    type: 'info'\r\n  },\r\n  {\r\n    id: 3,\r\n    text: '数据备份完成',\r\n    user: 'system',\r\n    time: '1小时前',\r\n    type: 'success'\r\n  },\r\n  {\r\n    id: 4,\r\n    text: '磁盘使用率告警',\r\n    user: 'monitor',\r\n    time: '2小时前',\r\n    type: 'warning'\r\n  },\r\n  {\r\n    id: 5,\r\n    text: '用户权限修改',\r\n    user: 'admin',\r\n    time: '3小时前',\r\n    type: 'info'\r\n  }\r\n]);\r\n\r\n// 计算属性\r\nconst getProgressColor = (percent) => {\r\n  if (percent >= 80) return '#ff4d4f';\r\n  if (percent >= 60) return '#faad14';\r\n  return '#52c41a';\r\n};\r\n\r\n// 方法\r\nconst goToUsers = () => {\r\n  router.push('/admin/users');\r\n};\r\n\r\nconst goToSettings = () => {\r\n  router.push('/admin/settings');\r\n};\r\n\r\nconst goToLogs = () => {\r\n  router.push('/admin/logs');\r\n};\r\n\r\nconst goToBackup = () => {\r\n  router.push('/admin/backup');\r\n};\r\n\r\n// 模拟实时数据更新\r\nonMounted(() => {\r\n  const timer = setInterval(() => {\r\n    // 更新系统监控数据\r\n    systemMonitor.value.cpu = Math.floor(Math.random() * 30) + 30;\r\n    systemMonitor.value.memory = Math.floor(Math.random() * 40) + 40;\r\n    systemMonitor.value.network = Math.floor(Math.random() * 50) + 20;\r\n    \r\n    // 更新在线用户数\r\n    systemStats.value.onlineUsers = Math.floor(Math.random() * 10) + 8;\r\n  }, 5000);\r\n  \r\n  // 清理定时器\r\n  return () => {\r\n    clearInterval(timer);\r\n  };\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.admin-dashboard {\r\n  padding: 0;\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n/* 欢迎区域美化 */\r\n.welcome-section {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 40px;\r\n  border-radius: 16px;\r\n  margin-bottom: 32px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.welcome-bg {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  overflow: hidden;\r\n}\r\n\r\n.bg-decoration {\r\n  position: absolute;\r\n  top: -50%;\r\n  right: -20%;\r\n  width: 400px;\r\n  height: 400px;\r\n  background: linear-gradient(45deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);\r\n  border-radius: 50%;\r\n  animation: float 6s ease-in-out infinite;\r\n}\r\n\r\n.bg-particles {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-image: \r\n    radial-gradient(2px 2px at 20% 30%, rgba(255, 255, 255, 0.3), transparent),\r\n    radial-gradient(2px 2px at 40% 70%, rgba(255, 255, 255, 0.2), transparent),\r\n    radial-gradient(1px 1px at 60% 20%, rgba(255, 255, 255, 0.4), transparent),\r\n    radial-gradient(1px 1px at 80% 80%, rgba(255, 255, 255, 0.2), transparent);\r\n  background-repeat: no-repeat;\r\n  background-size: 300px 300px;\r\n  animation: twinkle 4s linear infinite;\r\n}\r\n\r\n.welcome-content {\r\n  flex: 1;\r\n  z-index: 2;\r\n  position: relative;\r\n}\r\n\r\n.welcome-title {\r\n  margin: 0 0 16px 0;\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n}\r\n\r\n.crown-icon {\r\n  color: #ffd700;\r\n  font-size: 36px;\r\n  filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.5));\r\n  animation: glow 2s ease-in-out infinite alternate;\r\n}\r\n\r\n.welcome-text {\r\n  margin: 0 0 24px 0;\r\n  font-size: 18px;\r\n  opacity: 0.9;\r\n  line-height: 1.6;\r\n}\r\n\r\n.welcome-features {\r\n  display: flex;\r\n  gap: 32px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.feature-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  padding: 12px 20px;\r\n  background: rgba(255, 255, 255, 0.15);\r\n  border-radius: 25px;\r\n  backdrop-filter: blur(10px);\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.feature-item:hover {\r\n  background: rgba(255, 255, 255, 0.25);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.feature-icon {\r\n  font-size: 18px;\r\n  color: #fff;\r\n}\r\n\r\n.welcome-stats {\r\n  display: flex;\r\n  gap: 24px;\r\n  z-index: 2;\r\n  position: relative;\r\n}\r\n\r\n.quick-stat {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  padding: 20px;\r\n  background: rgba(255, 255, 255, 0.15);\r\n  border-radius: 16px;\r\n  backdrop-filter: blur(10px);\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  min-width: 140px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.quick-stat:hover {\r\n  background: rgba(255, 255, 255, 0.25);\r\n  transform: translateY(-4px);\r\n}\r\n\r\n.stat-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 20px;\r\n  color: #fff;\r\n}\r\n\r\n.stat-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  color: #fff;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  opacity: 0.8;\r\n  margin-top: 4px;\r\n  color: #fff;\r\n}\r\n\r\n/* 统计卡片美化 */\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  gap: 24px;\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.stat-card {\r\n  border-radius: 16px;\r\n  border: none;\r\n  overflow: hidden;\r\n  position: relative;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\r\n  padding: 24px;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-4px);\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.stat-card.gradient-blue {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n}\r\n\r\n.stat-card.gradient-green {\r\n  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\r\n  color: white;\r\n}\r\n\r\n.stat-card.gradient-orange {\r\n  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\r\n  color: white;\r\n}\r\n\r\n.stat-card.gradient-purple {\r\n  background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);\r\n  color: white;\r\n}\r\n\r\n.stat-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.stat-icon-large {\r\n  font-size: 24px;\r\n  opacity: 0.9;\r\n}\r\n\r\n.stat-title {\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  opacity: 0.9;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n  margin-bottom: 12px;\r\n  line-height: 1;\r\n}\r\n\r\n.stat-trend {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  font-size: 13px;\r\n  opacity: 0.8;\r\n}\r\n\r\n.trend-up {\r\n  color: rgba(255, 255, 255, 0.9);\r\n}\r\n\r\n.trend-down {\r\n  color: rgba(255, 255, 255, 0.9);\r\n}\r\n\r\n/* 主要内容区美化 */\r\n.main-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n  gap: 24px;\r\n}\r\n\r\n.modern-card {\r\n  border-radius: 16px;\r\n  border: none;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.modern-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.card-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-weight: 600;\r\n}\r\n\r\n.title-icon {\r\n  color: #1890ff;\r\n  font-size: 18px;\r\n}\r\n\r\n/* 快速操作美化 */\r\n.quick-actions {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.action-btn {\r\n  height: 56px;\r\n  border-radius: 12px;\r\n  font-weight: 500;\r\n  font-size: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 12px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.primary-action {\r\n  background: linear-gradient(135deg, #1890ff, #40a9ff);\r\n  border: none;\r\n}\r\n\r\n.primary-action:hover {\r\n  background: linear-gradient(135deg, #40a9ff, #1890ff);\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 20px rgba(24, 144, 255, 0.3);\r\n}\r\n\r\n.secondary-action {\r\n  background: #f8f9fa;\r\n  border: 1px solid #e9ecef;\r\n  color: #495057;\r\n}\r\n\r\n.secondary-action:hover {\r\n  background: #e9ecef;\r\n  border-color: #1890ff;\r\n  color: #1890ff;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n/* 监控卡片 */\r\n.monitor-card {\r\n  grid-column: span 2;\r\n}\r\n\r\n.monitor-content {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 24px;\r\n}\r\n\r\n.monitor-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.monitor-label {\r\n  font-weight: 500;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 活动卡片 */\r\n.activity-timeline {\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.activity-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n}\r\n\r\n.activity-content {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.activity-text {\r\n  font-size: 14px;\r\n  color: #333;\r\n}\r\n\r\n.activity-user {\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.activity-time {\r\n  font-size: 12px;\r\n  color: #999;\r\n  white-space: nowrap;\r\n}\r\n\r\n/* 系统信息 */\r\n.system-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 8px 0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.info-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.info-label {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.info-value {\r\n  font-weight: 500;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 动画效果 */\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes float {\r\n  0%, 100% {\r\n    transform: translateY(0px);\r\n  }\r\n  50% {\r\n    transform: translateY(-20px);\r\n  }\r\n}\r\n\r\n@keyframes twinkle {\r\n  0%, 100% {\r\n    opacity: 0.3;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n@keyframes glow {\r\n  from {\r\n    text-shadow: 0 0 10px rgba(255, 215, 0, 0.5);\r\n  }\r\n  to {\r\n    text-shadow: 0 0 20px rgba(255, 215, 0, 0.8), 0 0 30px rgba(255, 215, 0, 0.6);\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .welcome-section {\r\n    flex-direction: column;\r\n    gap: 24px;\r\n    text-align: center;\r\n  }\r\n  \r\n  .welcome-features {\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n  }\r\n  \r\n  .welcome-stats {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .monitor-card {\r\n    grid-column: span 1;\r\n  }\r\n  \r\n  .monitor-content {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .welcome-section {\r\n    padding: 24px;\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .welcome-title {\r\n    font-size: 24px;\r\n  }\r\n  \r\n  .welcome-text {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .welcome-features {\r\n    gap: 16px;\r\n  }\r\n  \r\n  .welcome-stats {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n  \r\n  .quick-stat {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .stats-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .main-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 16px;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminDictionary.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminUsers.vue",["290","291","292","293","294"],"<template>\r\n  <div class=\"admin-users admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <TeamOutlined />\r\n          用户管理\r\n        </h1>\r\n        <p class=\"page-description\">管理系统用户和权限</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-tooltip title=\"导出用户列表为Excel文件\" placement=\"bottom\">\r\n            <a-button @click=\"exportUsers\">\r\n              <ExportOutlined />\r\n              导出用户\r\n            </a-button>\r\n          </a-tooltip>\r\n          <a-tooltip title=\"创建新的用户账户\" placement=\"bottom\">\r\n            <a-button type=\"primary\" @click=\"showAddModal\">\r\n              <PlusOutlined />\r\n              新建用户\r\n            </a-button>\r\n          </a-tooltip>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 用户管理布局 -->\r\n    <div class=\"users-layout admin-layout\">\r\n      <!-- 左侧菜单 -->\r\n      <div class=\"users-menu admin-menu\">\r\n        <div class=\"menu-title\">用户分类</div>\r\n        <div class=\"menu-list\">\r\n          <div \r\n            v-for=\"category in categoryList\" \r\n            :key=\"category.key\"\r\n            :class=\"['menu-item', { 'active': activeCategory === category.key }]\"\r\n            @click=\"handleCategoryChange(category.key)\"\r\n          >\r\n            <component :is=\"category.icon\" class=\"menu-icon\" />\r\n            <span class=\"menu-text\">{{ category.name }}</span>\r\n            <a-badge \r\n              v-if=\"category.count\" \r\n              :count=\"category.count\" \r\n              class=\"menu-badge\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 统计信息 -->\r\n        <div class=\"menu-stats\">\r\n          <div class=\"stats-title\">用户统计</div>\r\n          <div class=\"stats-list\">\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">总用户数</span>\r\n              <span class=\"stat-value\">{{ userStats.total }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">活跃用户</span>\r\n              <span class=\"stat-value\">{{ userStats.active }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">管理员</span>\r\n              <span class=\"stat-value\">{{ userStats.admin }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧内容 -->\r\n      <div class=\"users-content admin-content\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索用户...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n                @change=\"handleSearch\"\r\n              />\r\n              <a-select\r\n                v-model:value=\"roleFilter\"\r\n                placeholder=\"角色筛选\"\r\n                style=\"width: 120px\"\r\n                @change=\"handleRoleFilter\"\r\n              >\r\n                <a-select-option value=\"\">全部角色</a-select-option>\r\n                <a-select-option value=\"admin\">管理员</a-select-option>\r\n                <a-select-option value=\"operator\">操作员</a-select-option>\r\n                <a-select-option value=\"viewer\">观察者</a-select-option>\r\n              </a-select>\r\n              <a-tooltip title=\"刷新用户列表数据\" placement=\"bottom\">\r\n                <a-button @click=\"refreshData\">\r\n                  <ReloadOutlined />\r\n                </a-button>\r\n              </a-tooltip>\r\n            </a-space>\r\n          </template>\r\n\r\n          <a-table\r\n            :columns=\"tableColumns\"\r\n            :data-source=\"filteredUsers\"\r\n            :pagination=\"pagination\"\r\n            :loading=\"loading\"\r\n            :row-selection=\"rowSelection\"\r\n            row-key=\"id\"\r\n            size=\"middle\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <template v-if=\"column.key === 'avatar'\">\r\n                <a-avatar :style=\"{ background: getAvatarColor(record.role) }\">\r\n                  {{ record.realName?.charAt(0) || record.username?.charAt(0) }}\r\n                </a-avatar>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'role'\">\r\n                <a-tag :color=\"getRoleColor(record.role)\">\r\n                  {{ getRoleText(record.role) }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'onlineStatus'\">\r\n                <a-space>\r\n                  <a-badge \r\n                    :status=\"record.isOnline ? 'processing' : 'default'\" \r\n                    :text=\"record.isOnline ? '在线' : '离线'\"\r\n                  />\r\n                  <a-tooltip v-if=\"record.onlineSessions && record.onlineSessions.length > 0\" placement=\"top\">\r\n                    <template #title>\r\n                      <div>\r\n                        <div v-for=\"session in record.onlineSessions\" :key=\"session.id\">\r\n                          IP: {{ session.ip_address }}<br>\r\n                          设备: {{ session.device_info }}<br>\r\n                          登录时间: {{ formatDate(session.login_time) }}\r\n                        </div>\r\n                      </div>\r\n                    </template>\r\n                  </a-tooltip>\r\n                </a-space>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"record.isActive ? 'green' : 'red'\">\r\n                  {{ record.isActive ? '启用' : '禁用' }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'lastLogin'\">      \r\n                <span v-if=\"record.lastLogin\">\r\n                  {{ formatDate(record.lastLogin) }}\r\n                </span>\r\n                <span v-else class=\"text-gray\">从未登录</span>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'actions'\">\r\n                <a-space>\r\n                  <a-tooltip title=\"编辑用户信息\" placement=\"top\">\r\n                    <a-button type=\"link\" size=\"small\" @click=\"editUser(record)\">\r\n                      <EditOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip :title=\"record.isActive ? '禁用此用户' : '启用此用户'\" placement=\"top\">\r\n                    <a-button \r\n                      type=\"link\" \r\n                      size=\"small\" \r\n                      @click=\"toggleUserStatus(record)\"\r\n                    >\r\n                      <CheckCircleOutlined v-if=\"!record.isActive\" />\r\n                      <StopOutlined v-else />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip v-if=\"record.isOnline && record.username !== currentUsername\" title=\"踢出用户（关闭所有会话）\" placement=\"top\">\r\n                    <a-popconfirm\r\n                      :title=\"`确定要踢出用户 '${record.username}' 吗？这将关闭其所有在线会话。`\"\r\n                      @confirm=\"kickOutUser(record)\"\r\n                      placement=\"topRight\"\r\n                    >\r\n                      <a-button type=\"link\" size=\"small\" danger>\r\n                        <LogoutOutlined />\r\n                      </a-button>\r\n                    </a-popconfirm>\r\n                  </a-tooltip>\r\n                  <a-tooltip title=\"重置用户密码\" placement=\"top\">\r\n                    <a-button \r\n                      type=\"link\" \r\n                      size=\"small\" \r\n                      @click=\"resetPassword(record)\"\r\n                    >\r\n                      <KeyOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-popconfirm\r\n                    :title=\"getDeleteConfirmTitle(record)\"\r\n                    @confirm=\"deleteUser(record)\"\r\n                    placement=\"topRight\"\r\n                    :ok-type=\"record.username === currentUsername ? 'danger' : 'primary'\"\r\n                  >\r\n                    <a-tooltip title=\"删除此用户\" placement=\"top\">\r\n                      <a-button type=\"link\" size=\"small\" danger>\r\n                        <DeleteOutlined />\r\n                      </a-button>\r\n                    </a-tooltip>\r\n                  </a-popconfirm>\r\n                </a-space>\r\n              </template>\r\n            </template>\r\n          </a-table>\r\n\r\n          <!-- 批量操作 -->\r\n          <div v-if=\"selectedRowKeys.length > 0\" class=\"batch-actions\">\r\n            <a-space>\r\n              <span>已选择 {{ selectedRowKeys.length }} 项</span>\r\n              <a-tooltip title=\"批量启用选中的用户\" placement=\"top\">\r\n                <a-button @click=\"batchEnable\">\r\n                  <CheckOutlined />\r\n                  批量启用\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-tooltip title=\"批量禁用选中的用户\" placement=\"top\">\r\n                <a-button @click=\"batchDisable\">\r\n                  <CloseOutlined />\r\n                  批量禁用\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-popconfirm\r\n                :title=\"getBatchDeleteConfirmTitle()\"\r\n                @confirm=\"batchDelete\"\r\n                placement=\"topRight\"\r\n                :ok-type=\"getBatchDeleteConfirmTitle().includes('警告') ? 'danger' : 'primary'\"\r\n              >\r\n                <a-tooltip title=\"批量删除选中的用户\" placement=\"top\">\r\n                  <a-button danger>\r\n                    <DeleteOutlined />\r\n                    批量删除\r\n                  </a-button>\r\n                </a-tooltip>\r\n              </a-popconfirm>\r\n            </a-space>\r\n          </div>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 添加/编辑用户弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"isEditing ? '编辑用户' : '新建用户'\"\r\n      width=\"600px\"\r\n      @ok=\"handleSubmit\"\r\n      @cancel=\"handleCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"用户名\" name=\"username\">\r\n              <a-input \r\n                v-model:value=\"formData.username\" \r\n                placeholder=\"输入用户名\"\r\n                :disabled=\"isEditing\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"真实姓名\" name=\"realName\">\r\n              <a-input v-model:value=\"formData.realName\" placeholder=\"输入真实姓名\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"邮箱\" name=\"email\">\r\n              <a-input v-model:value=\"formData.email\" placeholder=\"输入邮箱地址\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"电话\" name=\"phone\">\r\n              <a-input v-model:value=\"formData.phone\" placeholder=\"输入电话号码\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"角色\" name=\"role\">\r\n              <a-select v-model:value=\"formData.role\" placeholder=\"选择用户角色\">\r\n                <a-select-option value=\"admin\">管理员</a-select-option>\r\n                <a-select-option value=\"operator\">操作员</a-select-option>\r\n                <a-select-option value=\"viewer\">观察者</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"部门\" name=\"department\">\r\n              <a-input v-model:value=\"formData.department\" placeholder=\"输入所属部门\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item v-if=\"!isEditing\" label=\"密码\" name=\"password\">\r\n          <a-input-password v-model:value=\"formData.password\" placeholder=\"输入密码\" />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"状态\" name=\"isActive\">\r\n          <a-switch v-model:checked=\"formData.isActive\" />\r\n          <span class=\"switch-description\">{{ formData.isActive ? '启用' : '禁用' }}</span>\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { userAPI } from '@/api/users';\r\nimport { dictionaryAPI } from '@/api/index';\r\nimport {\r\n  TeamOutlined,\r\n  PlusOutlined,\r\n  ExportOutlined,\r\n  ReloadOutlined,\r\n  UserOutlined,\r\n  CrownOutlined,\r\n  SafetyOutlined,\r\n  EyeOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  KeyOutlined,\r\n  StopOutlined,\r\n  CheckOutlined,\r\n  CloseOutlined,\r\n  LogoutOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst modalVisible = ref(false);\r\nconst isEditing = ref(false);\r\nconst searchText = ref('');\r\nconst roleFilter = ref('');\r\nconst activeCategory = ref('all');\r\nconst selectedRowKeys = ref([]);\r\n\r\n// 表单数据\r\nconst formRef = ref();\r\nconst formData = ref({\r\n  username: '',\r\n  realName: '',\r\n  email: '',\r\n  phone: '',\r\n  role: 'viewer',\r\n  department: '',\r\n  password: '',\r\n  isActive: true\r\n});\r\n\r\n// 用户数据\r\nconst users = ref([]);\r\nconst userStats = ref({\r\n  total: 0,\r\n  active: 0,\r\n  admin: 0\r\n});\r\n\r\n// 分类列表（从字典动态获取）\r\nconst categoryList = ref([]);\r\n\r\n// 获取用户分类字典数据\r\nconst fetchUserCategories = async () => {\r\n  try {\r\n    const response = await dictionaryAPI.getDictionaryByCategory('user_category', {\r\n      status: 'active',\r\n      simple: 'true'  // 获取简化数据格式\r\n    });\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const dictionary = response.data.data || [];\r\n      \r\n      // 转换字典数据为分类格式\r\n      const dictionaryCategories = dictionary\r\n        .sort((a, b) => (b.priority || 0) - (a.priority || 0))\r\n        .map(item => {\r\n          // 解析config中的配置\r\n          let config = {};\r\n          try {\r\n            config = item.config ? JSON.parse(item.config) : {};\r\n          } catch (e) {\r\n            console.warn('解析字典配置失败:', item.config);\r\n          }\r\n          \r\n          return {\r\n            key: item.key,\r\n            name: item.label,\r\n            icon: config.icon || 'UserOutlined',\r\n            count: 0\r\n          };\r\n        });\r\n      \r\n      // 始终包含默认分类\r\n      const defaultCategories = [\r\n        {\r\n          key: 'all',\r\n          name: '全部用户',\r\n          icon: 'TeamOutlined',\r\n          count: 0\r\n        },\r\n        {\r\n          key: 'active',\r\n          name: '活跃用户',\r\n          icon: 'CheckCircleOutlined',\r\n          count: 0\r\n        },\r\n        {\r\n          key: 'inactive',\r\n          name: '禁用用户',\r\n          icon: 'CloseCircleOutlined',\r\n          count: 0\r\n        }\r\n      ];\r\n      \r\n      // 合并默认分类和字典分类\r\n      categoryList.value = [...defaultCategories, ...dictionaryCategories];\r\n      \r\n      console.log('用户分类字典加载成功:', categoryList.value);\r\n    } else {\r\n      console.warn('获取用户分类字典失败，使用默认分类');\r\n      setDefaultCategories();\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户分类字典失败:', error);\r\n    // 如果获取字典失败，使用默认分类\r\n    setDefaultCategories();\r\n  }\r\n};\r\n\r\n// 设置默认分类（作为备用方案）\r\nconst setDefaultCategories = () => {\r\n  categoryList.value = [\r\n    {\r\n      key: 'all',\r\n      name: '全部用户',\r\n      icon: 'TeamOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'admin',\r\n      name: '管理员',\r\n      icon: 'CrownOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'operator',\r\n      name: '操作员',\r\n      icon: 'SafetyOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'viewer',\r\n      name: '观察者',\r\n      icon: 'EyeOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'active',\r\n      name: '活跃用户',\r\n      icon: 'CheckCircleOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'inactive',\r\n      name: '禁用用户',\r\n      icon: 'CloseCircleOutlined',\r\n      count: 0\r\n    }\r\n  ];\r\n};\r\n\r\n// 表格列配置\r\nconst tableColumns = [\r\n  {\r\n    title: '用户名',\r\n    dataIndex: 'username',\r\n    key: 'username',\r\n  },\r\n  {\r\n    title: '姓名',\r\n    dataIndex: 'realName',\r\n    key: 'realName'\r\n  },\r\n  {\r\n    title: '邮箱',\r\n    dataIndex: 'email',\r\n    key: 'email'\r\n  },\r\n  {\r\n    title: '角色',\r\n    key: 'role',\r\n    width: 100,\r\n    filters: [\r\n      { text: '管理员', value: 'admin' },\r\n      { text: '操作员', value: 'operator' },\r\n      { text: '观察者', value: 'viewer' }\r\n    ]\r\n  },\r\n  {\r\n    title: '部门',\r\n    dataIndex: 'department',\r\n    key: 'department'\r\n  },\r\n  {\r\n    title: '在线状态',\r\n    key: 'onlineStatus',\r\n    width: 100,\r\n    filters: [\r\n      { text: '在线', value: true },\r\n      { text: '离线', value: false }\r\n    ]\r\n  },\r\n  {\r\n    title: '状态',\r\n    key: 'status',\r\n    width: 80,\r\n    filters: [\r\n      { text: '启用', value: true },\r\n      { text: '禁用', value: false }\r\n    ]\r\n  },\r\n  // {\r\n  //   title: '最后登录',\r\n  //   key: 'lastLogin',\r\n  //   width: 150,\r\n  // },\r\n  {\r\n    title: '操作',\r\n    key: 'actions',\r\n    width: 200,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = ref({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,\r\n  onChange: (page, pageSize) => {\r\n    pagination.value.current = page;\r\n    pagination.value.pageSize = pageSize;\r\n    fetchUsers();\r\n  }\r\n});\r\n\r\n// 行选择配置\r\nconst rowSelection = {\r\n  selectedRowKeys,\r\n  onChange: (keys) => {\r\n    selectedRowKeys.value = keys;\r\n  }\r\n};\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  username: [\r\n    { required: true, message: '请输入用户名', trigger: 'blur' },\r\n    { min: 3, max: 20, message: '用户名长度在3-20个字符', trigger: 'blur' }\r\n  ],\r\n  realName: [\r\n    { required: true, message: '请输入真实姓名', trigger: 'blur' }\r\n  ],\r\n  email: [\r\n    { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n    { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\r\n  ],\r\n  role: [\r\n    { required: true, message: '请选择用户角色', trigger: 'change' }\r\n  ],\r\n  password: [\r\n    { required: true, message: '请输入密码', trigger: 'blur' },\r\n    { min: 6, message: '密码长度不能少于6个字符', trigger: 'blur' }\r\n  ],\r\n  phone: [\r\n    { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\r\n  ]\r\n};\r\n\r\n// 计算属性\r\nconst filteredUsers = computed(() => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array in filteredUsers:', users.value);\r\n    return [];\r\n  }\r\n  \r\n  let result = users.value;\r\n  \r\n  // 分类筛选\r\n  if (activeCategory.value !== 'all') {\r\n    if (activeCategory.value === 'active') {\r\n      result = result.filter(user => user.isActive);\r\n    } else if (activeCategory.value === 'inactive') {\r\n      result = result.filter(user => !user.isActive);\r\n    } else {\r\n      result = result.filter(user => user.role === activeCategory.value);\r\n    }\r\n  }\r\n  \r\n  // 角色筛选\r\n  if (roleFilter.value) {\r\n    result = result.filter(user => user.role === roleFilter.value);\r\n  }\r\n  \r\n  // 搜索筛选\r\n  if (searchText.value) {\r\n    const searchLower = searchText.value.toLowerCase();\r\n    result = result.filter(user => \r\n      user.username?.toLowerCase().includes(searchLower) ||\r\n      user.realName?.toLowerCase().includes(searchLower) ||\r\n      user.email?.toLowerCase().includes(searchLower) ||\r\n      user.department?.toLowerCase().includes(searchLower)\r\n    );\r\n  }\r\n  \r\n  return result;\r\n});\r\n\r\n// 获取当前分类名称\r\nconst getCurrentCategoryName = () => {\r\n  const category = categoryList.value.find(cat => cat.key === activeCategory.value);\r\n  return category ? category.name : '全部用户';\r\n};\r\n\r\n// 获取头像颜色\r\nconst getAvatarColor = (role) => {\r\n  const colors = {\r\n    admin: '#faad14',\r\n    operator: '#1890ff', \r\n    viewer: '#52c41a'\r\n  };\r\n  return colors[role] || '#d9d9d9';\r\n};\r\n\r\n// 获取角色颜色\r\nconst getRoleColor = (role) => {\r\n  const colors = {\r\n    admin: 'gold',\r\n    operator: 'blue',\r\n    viewer: 'green'\r\n  };\r\n  return colors[role] || 'default';\r\n};\r\n\r\n// 获取角色文本\r\nconst getRoleText = (role) => {\r\n  const texts = {\r\n    admin: '管理员',\r\n    operator: '操作员',\r\n    viewer: '观察者'\r\n  };\r\n  return texts[role] || role;\r\n};\r\n\r\n// 获取当前用户名\r\nconst currentUsername = computed(() => {\r\n  return localStorage.getItem('username') || '';\r\n});\r\n\r\n// 获取删除确认标题\r\nconst getDeleteConfirmTitle = (record) => {\r\n  if (record.username === currentUsername.value) {\r\n    return '警告：您将删除自己的账户！删除后您将被自动退出登录，确定继续吗？';\r\n  }\r\n  return `确定要删除用户 \"${record.username}\" 吗？`;\r\n};\r\n\r\n// 获取批量删除确认标题\r\nconst getBatchDeleteConfirmTitle = () => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array:', users.value);\r\n    return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\r\n  }\r\n  \r\n  const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n  const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername.value);\r\n  \r\n  if (isCurrentUserIncluded) {\r\n    return '警告：您在批量删除中包含了自己的账户！删除后您将被自动退出登录，确定继续吗？';\r\n  }\r\n  return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\r\n};\r\n\r\n// 格式化日期\r\nconst formatDate = (date) => {\r\n  if (!date) return '';\r\n  return new Date(date).toLocaleString('zh-CN', {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\n// 更新统计数据\r\nconst updateStats = () => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array in updateStats:', users.value);\r\n    users.value = []; // 重置为空数组\r\n  }\r\n  \r\n  const stats = {\r\n    total: users.value.length,\r\n    active: users.value.filter(user => user.isActive).length,\r\n    admin: users.value.filter(user => user.role === 'admin').length\r\n  };\r\n  \r\n  userStats.value = stats;\r\n  \r\n  // 更新分类计数（支持动态分类）\r\n  categoryList.value.forEach(category => {\r\n    switch (category.key) {\r\n      case 'all':\r\n        category.count = stats.total;\r\n        break;\r\n      case 'active':\r\n        category.count = stats.active;\r\n        break;\r\n      case 'inactive':\r\n        category.count = stats.total - stats.active;\r\n        break;\r\n      case 'admin':\r\n        category.count = users.value.filter(user => user.role === 'admin').length;\r\n        break;\r\n      case 'operator':\r\n        category.count = users.value.filter(user => user.role === 'operator').length;\r\n        break;\r\n      case 'viewer':\r\n        category.count = users.value.filter(user => user.role === 'viewer').length;\r\n        break;\r\n      default:\r\n        // 对于其他动态分类，根据角色进行计数\r\n        if (category.key === 'admin' || category.key === 'operator' || category.key === 'viewer') {\r\n          category.count = users.value.filter(user => user.role === category.key).length;\r\n        } else {\r\n          // 其他类型的分类可以根据需要扩展\r\n          category.count = 0;\r\n        }\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\n// 获取用户列表\r\nconst fetchUsers = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const params = {\r\n      page: pagination.value.current,\r\n      pageSize: pagination.value.pageSize,\r\n      search: searchText.value,\r\n      role: roleFilter.value\r\n    };\r\n    \r\n    // 移除空参数\r\n    Object.keys(params).forEach(key => {\r\n      if (!params[key]) {\r\n        delete params[key];\r\n      }\r\n    });\r\n    \r\n    const response = await userAPI.getUserList(params);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const data = response.data.data;\r\n      // 处理用户数据，统一字段格式\r\n      users.value = (data.list || data.results || []).map(user => ({\r\n        id: user.id,\r\n        username: user.username,\r\n        realName: user.profile?.real_name || user.real_name || user.first_name + ' ' + user.last_name,\r\n        email: user.email,\r\n        phone: user.profile?.phone || user.phone || '',\r\n        role: user.profile?.role || 'viewer',\r\n        department: user.profile?.department || '',\r\n        isActive: user.is_active !== undefined ? user.is_active : true,\r\n        lastLogin: user.last_login,\r\n        createdAt: user.date_joined || user.created_at,\r\n        // 新增在线状态相关字段\r\n        isOnline: user.is_online || false,\r\n        onlineSessions: user.online_sessions || []\r\n      }));\r\n      \r\n      pagination.value.total = data.total || data.count || users.value.length;\r\n      \r\n      // 获取用户统计\r\n      await fetchUserStats();\r\n      updateStats();\r\n    } else {\r\n      console.error('API响应格式错误:', response.data);\r\n      throw new Error('API响应格式错误');\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户列表失败:', error);\r\n    \r\n    // 对于401错误，提供更友好的提示\r\n    if (error.response?.status === 401) {\r\n      message.error({\r\n        content: '身份认证已过期，请重新登录',\r\n        duration: 5\r\n      });\r\n      \r\n      // 清除本地状态并跳转到登录页\r\n      setTimeout(() => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userInfo');\r\n        localStorage.removeItem('isLoggedIn');\r\n        localStorage.removeItem('userType');\r\n        localStorage.removeItem('username');\r\n        window.location.href = '/#/login';\r\n      }, 2000);\r\n    } else {\r\n      // 其他错误的处理\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message;\r\n      message.error(`获取用户列表失败: ${errorMsg}`);\r\n    }\r\n    \r\n    // 如果API失败，使用空数组而不是模拟数据\r\n    users.value = [];\r\n    pagination.value.total = 0;\r\n    updateStats();\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 获取用户统计数据\r\nconst fetchUserStats = async () => {\r\n  try {\r\n    const response = await userAPI.getUserStats();\r\n    if (response.data && response.data.code === 200) {\r\n      const stats = response.data.data;\r\n      userStats.value = {\r\n        total: stats.total || 0,\r\n        active: stats.active || 0,\r\n        admin: stats.admin || 0\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户统计失败:', error);\r\n    // 统计失败时使用本地计算\r\n    userStats.value = {\r\n      total: users.value.length,\r\n      active: users.value.filter(user => user.isActive).length,\r\n      admin: users.value.filter(user => user.role === 'admin').length\r\n    };\r\n  }\r\n};\r\n\r\n\r\n// 分类切换\r\nconst handleCategoryChange = (key) => {\r\n  activeCategory.value = key;\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  // 分类筛选在前端处理，不需要重新获取数据\r\n};\r\n\r\n// 搜索处理\r\nconst handleSearch = () => {\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  fetchUsers(); // 重新获取数据\r\n};\r\n\r\n// 角色筛选\r\nconst handleRoleFilter = () => {\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  fetchUsers(); // 重新获取数据\r\n};\r\n\r\n// 刷新数据\r\nconst refreshData = () => {\r\n  fetchUsers();\r\n  message.success('数据刷新成功');\r\n};\r\n\r\n// 显示新建用户弹窗\r\nconst showAddModal = () => {\r\n  isEditing.value = false;\r\n  formData.value = {\r\n    username: '',\r\n    realName: '',\r\n    email: '',\r\n    phone: '',\r\n    role: 'viewer',\r\n    department: '',\r\n    password: '',\r\n    isActive: true\r\n  };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 编辑用户\r\nconst editUser = (record) => {\r\n  isEditing.value = true;\r\n  formData.value = {\r\n    id: record.id,\r\n    username: record.username,\r\n    realName: record.realName,\r\n    email: record.email,\r\n    phone: record.phone,\r\n    role: record.role,\r\n    department: record.department,\r\n    isActive: record.isActive\r\n  };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    loading.value = true;\r\n    \r\n    // 准备API请求数据\r\n    const apiData = {\r\n      username: formData.value.username,\r\n      email: formData.value.email,\r\n      real_name: formData.value.realName,\r\n      phone: formData.value.phone,\r\n      role: formData.value.role,\r\n      department: formData.value.department,\r\n      is_active: formData.value.isActive\r\n    };\r\n    \r\n    if (!isEditing.value) {\r\n      apiData.password = formData.value.password;\r\n    }\r\n    \r\n    let response;\r\n    if (isEditing.value) {\r\n      // 编辑用户\r\n      response = await userAPI.updateUser(formData.value.id, apiData);\r\n    } else {\r\n      // 新建用户\r\n      response = await userAPI.createUser(apiData);\r\n    }\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(isEditing.value ? '用户更新成功' : '用户创建成功');\r\n      modalVisible.value = false;\r\n      // 重新获取数据\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '操作失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('用户操作失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 取消操作\r\nconst handleCancel = () => {\r\n  modalVisible.value = false;\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 切换用户状态\r\nconst toggleUserStatus = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.toggleUserStatus(record.id, !record.isActive);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`用户${!record.isActive ? '启用' : '禁用'}成功`);\r\n      // 重新获取数据\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '操作失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('切换用户状态失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 重置密码\r\nconst resetPassword = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.resetUserPassword(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('密码重置成功,新密码为: 123456');\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '重置密码失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('重置密码失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '重置密码失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 踢出用户\r\nconst kickOutUser = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.kickOutUser(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const data = response.data.data;\r\n      message.success({\r\n        content: `成功踢出用户 ${data.username}，关闭了 ${data.kicked_sessions} 个会话`,\r\n        duration: 3\r\n      });\r\n      \r\n      // 重新获取数据以更新在线状态\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '踢出用户失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('踢出用户失败:', error);\r\n    \r\n    if (error.response?.status === 403) {\r\n      message.error('权限不足，只有管理员才能踢出用户');\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '踢出用户失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 删除用户\r\nconst deleteUser = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 检查是否删除当前登录用户\r\n    const currentUsername = localStorage.getItem('username');\r\n    const isCurrentUser = record.username === currentUsername;\r\n    \r\n    const response = await userAPI.deleteUser(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('用户删除成功');\r\n      \r\n      // 如果删除的是当前用户，提示用户并重定向到登录页\r\n      if (isCurrentUser) {\r\n        message.warning({\r\n          content: '您删除了自己的账户，系统将在3秒后自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        // 3秒后清除登录状态并跳转到登录页\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return; // 不执行后续的fetchUsers，避免401错误\r\n      }\r\n      \r\n      // 重新获取数据（只有非当前用户时才执行）\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('删除用户失败:', error);\r\n    \r\n    // 如果是401错误且删除的是当前用户，给出特殊提示\r\n    if (error.response?.status === 401) {\r\n      const currentUsername = localStorage.getItem('username');\r\n      const isCurrentUser = record.username === currentUsername;\r\n      \r\n      if (isCurrentUser) {\r\n        message.success({\r\n          content: '用户删除成功，您的账户已被删除，系统将自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return;\r\n      } else {\r\n        message.error('认证失败，请重新登录');\r\n      }\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '删除失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量启用\r\nconst batchEnable = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 批量操作需要逐个调用API\r\n    const promises = selectedRowKeys.value.map(id => {\r\n      const user = users.value.find(u => u.id === id);\r\n      if (user && !user.isActive) {\r\n        return userAPI.toggleUserStatus(id, true);\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    \r\n    await Promise.all(promises);\r\n    \r\n    selectedRowKeys.value = [];\r\n    message.success('批量启用成功');\r\n    // 重新获取数据\r\n    await fetchUsers();\r\n  } catch (error) {\r\n    console.error('批量启用失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量启用失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量禁用\r\nconst batchDisable = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 批量操作需要逐个调用API\r\n    const promises = selectedRowKeys.value.map(id => {\r\n      const user = users.value.find(u => u.id === id);\r\n      if (user && user.isActive) {\r\n        return userAPI.toggleUserStatus(id, false);\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    \r\n    await Promise.all(promises);\r\n    \r\n    selectedRowKeys.value = [];\r\n    message.success('批量禁用成功');\r\n    // 重新获取数据\r\n    await fetchUsers();\r\n  } catch (error) {\r\n    console.error('批量禁用失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量禁用失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量删除\r\nconst batchDelete = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 检查是否包含当前登录用户\r\n    const currentUsername = localStorage.getItem('username');\r\n    \r\n    // 确保users.value是数组\r\n    if (!Array.isArray(users.value)) {\r\n      console.warn('users.value is not an array in batchDelete:', users.value);\r\n      message.error('数据异常，请刷新页面后重试');\r\n      return;\r\n    }\r\n    \r\n    const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n    const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\r\n    \r\n    const response = await userAPI.batchDeleteUsers(selectedRowKeys.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      selectedRowKeys.value = [];\r\n      message.success('批量删除成功');\r\n      \r\n      // 如果删除的用户中包含当前用户，提示用户并重定向到登录页\r\n      if (isCurrentUserIncluded) {\r\n        message.warning({\r\n          content: '您在批量删除中包含了自己的账户，系统将在3秒后自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        // 3秒后清除登录状态并跳转到登录页\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return; // 不执行后续的fetchUsers，避免401错误\r\n      }\r\n      \r\n      // 重新获取数据（只有非当前用户时才执行）\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '批量删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('批量删除失败:', error);\r\n    \r\n    // 如果是401错误，可能是删除了当前用户后的后续请求\r\n    if (error.response?.status === 401) {\r\n      const currentUsername = localStorage.getItem('username');\r\n      \r\n      // 确保users.value是数组\r\n      if (!Array.isArray(users.value)) {\r\n        console.warn('users.value is not an array in error handler:', users.value);\r\n        message.error('认证失败，请重新登录');\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 2000);\r\n        return;\r\n      }\r\n      \r\n      const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n      const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\r\n      \r\n      if (isCurrentUserIncluded) {\r\n        message.success({\r\n          content: '批量删除成功，您的账户已被删除，系统将自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return;\r\n      } else {\r\n        message.error('认证失败，请重新登录');\r\n      }\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量删除失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 导出用户\r\nconst exportUsers = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.exportUsers();\r\n    \r\n    if (response.data) {\r\n      // 创建下载链接\r\n      const blob = new Blob([response.data], { \r\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n      });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `用户列表_${new Date().toISOString().slice(0, 10)}.xlsx`;\r\n      link.click();\r\n      window.URL.revokeObjectURL(url);\r\n      \r\n      message.success('用户列表导出成功');\r\n    } else {\r\n      throw new Error('导出数据为空');\r\n    }\r\n  } catch (error) {\r\n    console.error('导出用户列表失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '导出失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 组件挂载\r\nonMounted(async () => {\r\n  // 同时获取用户分类和用户数据\r\n  await Promise.all([\r\n    fetchUserCategories(),\r\n    fetchUsers()\r\n  ]);\r\n});\r\n\r\n// 监听搜索条件变化，实现实时搜索\r\nwatch([searchText, roleFilter], () => {\r\n  // 使用防抖避免频繁请求\r\n  clearTimeout(searchTimeout.value);\r\n  searchTimeout.value = setTimeout(() => {\r\n    pagination.value.current = 1; // 重置页码\r\n    fetchUsers();\r\n  }, 500);\r\n});\r\n\r\n// 搜索防抖定时器\r\nconst searchTimeout = ref(null);\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 用户管理页面特有的样式 */\r\n/* 所有通用样式已在 admin-common.css 中定义 */\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\UserLogin.vue",["295"],"<template>\r\n  <div class=\"login-page\">\r\n    <!-- 背景装饰 -->\r\n    <div class=\"background-decoration\">\r\n      <div class=\"geometric-shapes\">\r\n        <div class=\"shape circle-1\"></div>\r\n        <div class=\"shape circle-2\"></div>\r\n        <div class=\"shape triangle-1\"></div>\r\n        <div class=\"shape square-1\"></div>\r\n      </div>\r\n      <div class=\"gradient-overlay\"></div>\r\n      \r\n      <!-- 粒子效果 -->\r\n      <div class=\"particles\">\r\n        <div class=\"particle\" v-for=\"n in 20\" :key=\"n\" :style=\"getParticleStyle(n)\"></div>\r\n      </div>\r\n      \r\n      <!-- 光晕效果 -->\r\n      <div class=\"glow glow-1\"></div>\r\n      <div class=\"glow glow-2\"></div>\r\n      <div class=\"glow glow-3\"></div>\r\n    </div>\r\n\r\n    <!-- 主要内容区域 -->\r\n    <div class=\"main-content\">\r\n      <!-- 左侧信息面板 -->\r\n      <div class=\"info-panel\">\r\n        <div class=\"brand-section\">\r\n          <div class=\"logo\">\r\n            <DatabaseOutlined class=\"logo-icon\" />\r\n          </div>\r\n          <h1 class=\"brand-title\">运维监控系统</h1>\r\n          <p class=\"brand-subtitle\">专业的资产管理与监控平台</p>\r\n        </div>\r\n        \r\n        <div class=\"features-list\">\r\n          <div class=\"feature-item\">\r\n            <div class=\"feature-icon-wrapper\">\r\n              <MonitorOutlined class=\"feature-icon\" />\r\n            </div>\r\n            <div class=\"feature-content\">\r\n              <h3 class=\"feature-title\">实时监控资产状态</h3>\r\n              <p class=\"feature-desc\">7×24小时不间断监控，实时掌握设备运行状态</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"feature-item\">\r\n            <div class=\"feature-icon-wrapper\">\r\n              <BellOutlined class=\"feature-icon\" />\r\n            </div>\r\n            <div class=\"feature-content\">\r\n              <h3 class=\"feature-title\">智能告警管理</h3>\r\n              <p class=\"feature-desc\">AI驱动的智能告警，精准识别异常并及时通知</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"feature-item\">\r\n            <div class=\"feature-icon-wrapper\">\r\n              <BarChartOutlined class=\"feature-icon\" />\r\n            </div>\r\n            <div class=\"feature-content\">\r\n              <h3 class=\"feature-title\">数据可视化分析</h3>\r\n              <p class=\"feature-desc\">多维度数据分析，直观展示运维趋势和性能指标</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧登录表单 -->\r\n      <div class=\"login-panel\">\r\n        <div class=\"login-container\">\r\n          <div class=\"login-header\">\r\n            <h2 class=\"login-title\">欢迎登录</h2>\r\n            <p class=\"login-subtitle\">请选择登录方式并输入您的凭据</p>\r\n          </div>\r\n\r\n          <!-- 登录模式切换 -->\r\n          <div class=\"mode-selector\">\r\n            <div class=\"mode-options\">\r\n              <button \r\n                class=\"mode-option\"\r\n                :class=\"{ active: loginMode === 'user' }\"\r\n                @click=\"switchLoginMode('user')\"\r\n              >\r\n                <UserOutlined class=\"mode-icon\" />\r\n                <span>普通用户</span>\r\n              </button>\r\n              <button \r\n                class=\"mode-option\"\r\n                :class=\"{ active: loginMode === 'admin' }\"\r\n                @click=\"switchLoginMode('admin')\"\r\n              >\r\n                <CrownOutlined class=\"mode-icon\" />\r\n                <span>管理员</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- 登录表单 -->\r\n          <a-form\r\n            :model=\"loginForm\"\r\n            :rules=\"rules\"\r\n            @finish=\"handleLogin\"\r\n            @finishFailed=\"handleLoginFailed\"\r\n            class=\"login-form\"\r\n          >\r\n            <a-form-item name=\"username\" class=\"form-group\">\r\n              <label class=\"form-label\">用户名</label>\r\n              <div class=\"input-group\">\r\n                <UserOutlined class=\"input-prefix-icon\" />\r\n                <a-input\r\n                  v-model:value=\"loginForm.username\"\r\n                  size=\"large\"\r\n                  placeholder=\"请输入用户名\"\r\n                  class=\"form-input\"\r\n                  @focus=\"onInputFocus\"\r\n                  @blur=\"onInputBlur\"\r\n                />\r\n              </div>\r\n            </a-form-item>\r\n\r\n            <a-form-item name=\"password\" class=\"form-group\">\r\n              <label class=\"form-label\">密码</label>\r\n              <div class=\"input-group\">\r\n                <LockOutlined class=\"input-prefix-icon\" />\r\n                <a-input-password\r\n                  v-model:value=\"loginForm.password\"\r\n                  size=\"large\"\r\n                  placeholder=\"请输入密码\"\r\n                  class=\"form-input\"\r\n                  @focus=\"onInputFocus\"\r\n                  @blur=\"onInputBlur\"\r\n                />\r\n              </div>\r\n            </a-form-item>\r\n\r\n            <div class=\"form-options\">\r\n              <a-checkbox v-model:checked=\"loginForm.remember\" class=\"remember-checkbox\">\r\n                记住登录状态\r\n              </a-checkbox>\r\n              <a href=\"#\" class=\"forgot-link\">忘记密码？</a>\r\n            </div>\r\n\r\n            <a-form-item class=\"form-submit\">\r\n              <a-button\r\n                type=\"primary\"\r\n                html-type=\"submit\"\r\n                size=\"large\"\r\n                :loading=\"loading\"\r\n                class=\"login-button\"\r\n                block\r\n                @mousedown=\"onButtonPress\"\r\n                @mouseup=\"onButtonRelease\"\r\n                @mouseleave=\"onButtonRelease\"\r\n              >\r\n                <template #icon v-if=\"!loading\">\r\n                  <LoginOutlined class=\"button-icon\" />\r\n                </template>\r\n                <span class=\"button-text\">{{ loading ? '登录中...' : (loginMode === 'admin' ? '管理员登录' : '用户登录') }}</span>\r\n              </a-button>\r\n            </a-form-item>\r\n          </a-form>\r\n\r\n          <!-- 底部信息 -->\r\n          <div class=\"login-footer\">\r\n            <div class=\"security-badge\">\r\n              <SafetyCertificateOutlined class=\"security-icon\" />\r\n              <span>安全加密传输</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 底部版权 -->\r\n    <div class=\"page-footer\">\r\n      <p>&copy; 2024 运维监控系统 | 技术支持：运维团队</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { message } from 'ant-design-vue';\r\nimport {\r\n  DatabaseOutlined,\r\n  UserOutlined,\r\n  LockOutlined,\r\n  LoginOutlined,\r\n  SafetyCertificateOutlined,\r\n  CrownOutlined,\r\n  MonitorOutlined,\r\n  BellOutlined,\r\n  BarChartOutlined\r\n} from '@ant-design/icons-vue';\r\nimport { userAPI } from '@/api/users';\r\n\r\nconst router = useRouter();\r\nconst loading = ref(false);\r\nconst loginMode = ref('user');\r\n\r\nconst loginForm = reactive({\r\n  username: '',\r\n  password: '',\r\n  remember: false\r\n});\r\n\r\nconst rules = {\r\n  username: [\r\n    { required: true, message: '请输入用户名', trigger: 'blur' },\r\n    { min: 2, max: 50, message: '用户名长度在 2 到 50 个字符', trigger: 'blur' }\r\n  ],\r\n  password: [\r\n    { required: true, message: '请输入密码', trigger: 'blur' },\r\n    { min: 6, max: 128, message: '密码长度在 6 到 128 个字符', trigger: 'blur' }\r\n  ]\r\n};\r\n\r\n// 切换登录模式\r\nconst switchLoginMode = (mode) => {\r\n  loginMode.value = mode;\r\n  loginForm.username = '';\r\n  loginForm.password = '';\r\n  loginForm.remember = false;\r\n};\r\n\r\n// 动画相关函数\r\nconst onInputFocus = (e) => {\r\n  e.target.parentElement.classList.add('input-focused');\r\n};\r\n\r\nconst onInputBlur = (e) => {\r\n  e.target.parentElement.classList.remove('input-focused');\r\n};\r\n\r\nconst onButtonPress = (e) => {\r\n  e.target.classList.add('button-pressed');\r\n};\r\n\r\nconst onButtonRelease = (e) => {\r\n  e.target.classList.remove('button-pressed');\r\n};\r\n\r\n// 粒子动画\r\nconst getParticleStyle = (index) => {\r\n  const size = Math.random() * 4 + 2;\r\n  const left = Math.random() * 100;\r\n  const animationDelay = Math.random() * 20;\r\n  const animationDuration = Math.random() * 10 + 15;\r\n  \r\n  return {\r\n    width: `${size}px`,\r\n    height: `${size}px`,\r\n    left: `${left}%`,\r\n    animationDelay: `${animationDelay}s`,\r\n    animationDuration: `${animationDuration}s`\r\n  };\r\n};\r\n\r\n// 登录处理\r\nconst handleLogin = async () => {\r\n  loading.value = true;\r\n  \r\n  // 清理旧的WebSocket连接\r\n  if (typeof window !== 'undefined' && window.webSocketIntegration) {\r\n    console.log('清理旧的WebSocket连接...');\r\n    window.webSocketIntegration.reset();\r\n  }\r\n  \r\n  try {\r\n    const response = await userAPI.login({\r\n      username: loginForm.username,\r\n      password: loginForm.password,\r\n      remember: loginForm.remember,\r\n      loginMode: loginMode.value\r\n    });\r\n    \r\n    if (response.status === 200 && response.data.code === 200) {\r\n      const userData = response.data.data;\r\n      \r\n      // 保存认证信息\r\n      if (userData && userData.token) {\r\n        localStorage.setItem('token', userData.token);\r\n      }\r\n      \r\n      if (userData && userData.user) {\r\n        localStorage.setItem('userInfo', JSON.stringify(userData.user));\r\n        localStorage.setItem('username', userData.user.username);\r\n        \r\n        const isAdmin = userData.user.is_admin || userData.user.role === 'admin';\r\n        const userRole = userData.user.role || (userData.user.is_admin ? 'admin' : 'viewer');\r\n        \r\n        localStorage.setItem('userRole', userRole);\r\n        localStorage.setItem('isAdmin', isAdmin.toString());\r\n        \r\n        // 权限验证\r\n        if (loginMode.value === 'admin' && !isAdmin) {\r\n          message.error({\r\n            content: '您没有管理员权限，无法使用管理员模式登录',\r\n            duration: 1\r\n          });\r\n          return;\r\n        }\r\n        \r\n        if (loginMode.value === 'user' && isAdmin) {\r\n          message.warning({\r\n            content: '检测到您是管理员，建议使用管理员模式登录以获得完整功能',\r\n            duration: 1\r\n          });\r\n        }\r\n        \r\n        const userType = isAdmin ? 'admin' : 'user';\r\n        localStorage.setItem('userType', userType);\r\n      }\r\n      \r\n      localStorage.setItem('isLoggedIn', 'true');\r\n      \r\n      // 记住用户\r\n      if (loginForm.remember) {\r\n        localStorage.setItem('remember_user', loginForm.username);\r\n        localStorage.setItem('remember_mode', loginMode.value);\r\n      } else {\r\n        localStorage.removeItem('remember_user');\r\n        localStorage.removeItem('remember_mode');\r\n      }\r\n      \r\n      message.success({\r\n        content: '登录成功',\r\n        duration: 1\r\n      });\r\n      \r\n      // 初始化WebSocket\r\n      try {\r\n        const webSocketModule = await import('@/utils/webSocketIntegration');\r\n        const webSocketIntegration = webSocketModule.default;\r\n        window.webSocketIntegration = webSocketIntegration;\r\n        \r\n        webSocketIntegration.reset();\r\n        setTimeout(() => {\r\n          webSocketIntegration.initialize();\r\n        }, 100);\r\n      } catch (error) {\r\n        console.error('WebSocket初始化失败:', error);\r\n      }\r\n      \r\n      // 触发菜单更新\r\n      try {\r\n        // 通知App.vue重新获取菜单\r\n        window.dispatchEvent(new CustomEvent('userLoggedIn'));\r\n      } catch (error) {\r\n        console.error('触发菜单更新失败:', error);\r\n      }\r\n      \r\n      // 根据用户类型跳转到不同页面\r\n      setTimeout(() => {\r\n        const isAdmin = localStorage.getItem('isAdmin') === 'true';\r\n        if (loginMode.value === 'admin' && isAdmin) {\r\n          router.push('/admin/dashboard');\r\n        } else {\r\n          router.push('/');\r\n        }\r\n      }, 500);\r\n      \r\n    } else {\r\n      message.error({\r\n        content: response.data.message || '登录失败，请检查用户名和密码',\r\n        duration: 1\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('登录错误:', error);\r\n    if (error.response && error.response.data && error.response.data.message) {\r\n      message.error({\r\n        content: error.response.data.message,\r\n        duration: 1\r\n      });\r\n    } else {\r\n      message.error({\r\n        content: '网络错误，请稍后重试',\r\n        duration: 1\r\n      });\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst handleLoginFailed = (errorInfo) => {\r\n  console.log('表单验证失败:', errorInfo);\r\n};\r\n\r\n// 组件挂载时恢复记住的用户信息\r\nonMounted(() => {\r\n  const rememberedUser = localStorage.getItem('remember_user');\r\n  const rememberedMode = localStorage.getItem('remember_mode');\r\n  \r\n  if (rememberedUser) {\r\n    loginForm.username = rememberedUser;\r\n    loginForm.remember = true;\r\n  }\r\n  \r\n  if (rememberedMode) {\r\n    loginMode.value = rememberedMode;\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* 全局样式重置 */\r\n.login-page {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;\r\n  overflow: hidden;\r\n  animation: pageLoad 1.2s ease-out;\r\n}\r\n\r\n@keyframes pageLoad {\r\n  0% {\r\n    opacity: 0;\r\n    transform: scale(1.05);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n}\r\n\r\n/* 背景装饰 */\r\n.background-decoration {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n}\r\n\r\n/* 粒子效果 */\r\n.particles {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n.particle {\r\n  position: absolute;\r\n  background: rgba(255, 255, 255, 0.6);\r\n  border-radius: 50%;\r\n  animation: particleFloat 20s linear infinite;\r\n  pointer-events: none;\r\n}\r\n\r\n@keyframes particleFloat {\r\n  0% {\r\n    transform: translateY(100vh) rotate(0deg);\r\n    opacity: 0;\r\n  }\r\n  10% {\r\n    opacity: 1;\r\n  }\r\n  90% {\r\n    opacity: 1;\r\n  }\r\n  100% {\r\n    transform: translateY(-100px) rotate(360deg);\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n/* 光晕效果 */\r\n.glow {\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  filter: blur(40px);\r\n  opacity: 0.3;\r\n  animation: glowPulse 8s ease-in-out infinite;\r\n}\r\n\r\n.glow-1 {\r\n  width: 300px;\r\n  height: 300px;\r\n  background: radial-gradient(circle, rgba(102, 126, 234, 0.4), transparent);\r\n  top: 10%;\r\n  left: 10%;\r\n  animation-delay: 0s;\r\n}\r\n\r\n.glow-2 {\r\n  width: 200px;\r\n  height: 200px;\r\n  background: radial-gradient(circle, rgba(118, 75, 162, 0.4), transparent);\r\n  top: 60%;\r\n  right: 15%;\r\n  animation-delay: 2s;\r\n}\r\n\r\n.glow-3 {\r\n  width: 150px;\r\n  height: 150px;\r\n  background: radial-gradient(circle, rgba(255, 255, 255, 0.2), transparent);\r\n  bottom: 20%;\r\n  left: 30%;\r\n  animation-delay: 4s;\r\n}\r\n\r\n@keyframes glowPulse {\r\n  0%, 100% {\r\n    transform: scale(1) rotate(0deg);\r\n    opacity: 0.3;\r\n  }\r\n  50% {\r\n    transform: scale(1.2) rotate(180deg);\r\n    opacity: 0.6;\r\n  }\r\n}\r\n\r\n.geometric-shapes {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.shape {\r\n  position: absolute;\r\n  opacity: 0.1;\r\n  animation: float 20s ease-in-out infinite;\r\n  will-change: transform;\r\n}\r\n\r\n.circle-1 {\r\n  width: 200px;\r\n  height: 200px;\r\n  border-radius: 50%;\r\n  background: rgba(255, 255, 255, 0.2);\r\n  top: 10%;\r\n  left: 10%;\r\n  animation-delay: 0s;\r\n}\r\n\r\n.circle-2 {\r\n  width: 150px;\r\n  height: 150px;\r\n  border-radius: 50%;\r\n  background: rgba(255, 255, 255, 0.15);\r\n  bottom: 20%;\r\n  right: 15%;\r\n  animation-delay: 5s;\r\n}\r\n\r\n.triangle-1 {\r\n  width: 0;\r\n  height: 0;\r\n  border-left: 60px solid transparent;\r\n  border-right: 60px solid transparent;\r\n  border-bottom: 100px solid rgba(255, 255, 255, 0.1);\r\n  top: 60%;\r\n  left: 5%;\r\n  animation-delay: 10s;\r\n}\r\n\r\n.square-1 {\r\n  width: 80px;\r\n  height: 80px;\r\n  background: rgba(255, 255, 255, 0.12);\r\n  transform: rotate(45deg);\r\n  top: 30%;\r\n  right: 10%;\r\n  animation-delay: 15s;\r\n}\r\n\r\n@keyframes float {\r\n  0%, 100% {\r\n    transform: translateY(0px) rotate(0deg) scale(1);\r\n  }\r\n  25% {\r\n    transform: translateY(-15px) rotate(45deg) scale(1.1);\r\n  }\r\n  50% {\r\n    transform: translateY(-20px) rotate(180deg) scale(0.9);\r\n  }\r\n  75% {\r\n    transform: translateY(-10px) rotate(270deg) scale(1.05);\r\n  }\r\n}\r\n\r\n.gradient-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(45deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));\r\n}\r\n\r\n/* 主要内容区域 */\r\n.main-content {\r\n  position: relative;\r\n  z-index: 2;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 40px 20px;\r\n}\r\n\r\n/* 左侧信息面板 */\r\n.info-panel {\r\n  flex: 1;\r\n  padding: 60px 40px;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  animation: slideInLeft 0.8s ease-out 0.2s both;\r\n  overflow: hidden;\r\n  height: 100%;\r\n}\r\n\r\n@keyframes slideInLeft {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateX(-50px);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n.brand-section {\r\n  margin-bottom: 60px;\r\n}\r\n\r\n.logo {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.logo-icon {\r\n  font-size: 64px;\r\n  color: white;\r\n  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));\r\n  animation: logoFloat 3s ease-in-out infinite, logoGlow 2s ease-in-out infinite alternate;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.logo-icon:hover {\r\n  transform: scale(1.1) rotate(5deg);\r\n}\r\n\r\n@keyframes logoFloat {\r\n  0%, 100% {\r\n    transform: translateY(0px);\r\n  }\r\n  50% {\r\n    transform: translateY(-10px);\r\n  }\r\n}\r\n\r\n@keyframes logoGlow {\r\n  0% {\r\n    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));\r\n  }\r\n  100% {\r\n    filter: drop-shadow(0 6px 20px rgba(255, 255, 255, 0.3));\r\n  }\r\n}\r\n\r\n.brand-title {\r\n  font-size: 48px;\r\n  font-weight: 700;\r\n  margin: 0 0 16px 0;\r\n  background: linear-gradient(135deg, #ffffff, #f0f0f0);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  background-clip: text;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  animation: titleSlideIn 0.8s ease-out 0.4s both;\r\n}\r\n\r\n@keyframes titleSlideIn {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.brand-subtitle {\r\n  font-size: 20px;\r\n  opacity: 0.9;\r\n  margin: 0;\r\n  font-weight: 300;\r\n}\r\n\r\n.features-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.feature-item {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 16px;\r\n  font-size: 16px;\r\n  opacity: 0.9;\r\n  animation: featureSlideIn 0.6s ease-out both;\r\n  transition: transform 0.3s ease, opacity 0.3s ease;\r\n  padding: 16px 0;\r\n}\r\n\r\n.feature-item:nth-child(1) {\r\n  animation-delay: 0.6s;\r\n}\r\n\r\n.feature-item:nth-child(2) {\r\n  animation-delay: 0.8s;\r\n}\r\n\r\n.feature-item:nth-child(3) {\r\n  animation-delay: 1s;\r\n}\r\n\r\n.feature-item:hover {\r\n  transform: translateX(10px);\r\n  opacity: 1;\r\n}\r\n\r\n@keyframes featureSlideIn {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateX(-30px);\r\n  }\r\n  100% {\r\n    opacity: 0.9;\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n.feature-icon-wrapper {\r\n  flex-shrink: 0;\r\n  width: 48px;\r\n  height: 48px;\r\n  background: rgba(255, 255, 255, 0.15);\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(10px);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.feature-item:hover .feature-icon-wrapper {\r\n  background: rgba(255, 255, 255, 0.25);\r\n  transform: scale(1.1);\r\n}\r\n\r\n.feature-icon {\r\n  font-size: 20px;\r\n  color: #52c41a;\r\n}\r\n\r\n.feature-content {\r\n  flex: 1;\r\n}\r\n\r\n.feature-title {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  margin: 0 0 8px 0;\r\n  color: white;\r\n}\r\n\r\n.feature-desc {\r\n  font-size: 14px;\r\n  margin: 0;\r\n  opacity: 0.8;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* 右侧登录面板 */\r\n.login-panel {\r\n  flex: 0 0 480px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  animation: slideInRight 0.8s ease-out 0.3s both;\r\n  overflow: hidden;\r\n  height: 100%;\r\n  padding: 20px;\r\n}\r\n\r\n@keyframes slideInRight {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateX(50px);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n}\r\n\r\n.login-container {\r\n  width: 100%;\r\n  max-width: 400px;\r\n  background: rgba(255, 255, 255, 0.95);\r\n  backdrop-filter: blur(20px);\r\n  border-radius: 24px;\r\n  padding: 48px 40px;\r\n  box-shadow: \r\n    0 20px 40px rgba(0, 0, 0, 0.1),\r\n    0 0 0 1px rgba(255, 255, 255, 0.2);\r\n  border: 1px solid rgba(255, 255, 255, 0.3);\r\n  animation: containerFloat 0.8s ease-out 0.5s both, containerPulse 4s ease-in-out infinite 2s;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.login-container:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: \r\n    0 30px 60px rgba(0, 0, 0, 0.15),\r\n    0 0 0 1px rgba(255, 255, 255, 0.3);\r\n}\r\n\r\n@keyframes containerFloat {\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateY(30px) scale(0.95);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: translateY(0) scale(1);\r\n  }\r\n}\r\n\r\n@keyframes containerPulse {\r\n  0%, 100% {\r\n    box-shadow: \r\n      0 20px 40px rgba(0, 0, 0, 0.1),\r\n      0 0 0 1px rgba(255, 255, 255, 0.2);\r\n  }\r\n  50% {\r\n    box-shadow: \r\n      0 25px 50px rgba(102, 126, 234, 0.15),\r\n      0 0 0 1px rgba(102, 126, 234, 0.3);\r\n  }\r\n}\r\n\r\n/* 登录头部 */\r\n.login-header {\r\n  text-align: center;\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.login-title {\r\n  font-size: 32px;\r\n  font-weight: 700;\r\n  color: #1a1a1a;\r\n  margin: 0 0 8px 0;\r\n  background: linear-gradient(135deg, #667eea, #764ba2);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  background-clip: text;\r\n}\r\n\r\n.login-subtitle {\r\n  font-size: 16px;\r\n  color: #666;\r\n  margin: 0;\r\n  font-weight: 400;\r\n}\r\n\r\n/* 模式选择器 */\r\n.mode-selector {\r\n  margin-bottom: 32px;\r\n}\r\n\r\n.mode-options {\r\n  display: flex;\r\n  background: #f8f9fa;\r\n  border-radius: 12px;\r\n  padding: 4px;\r\n  gap: 4px;\r\n}\r\n\r\n.mode-option {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  padding: 12px 16px;\r\n  border: none;\r\n  background: transparent;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  color: #666;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.mode-option::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: -100%;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.1), transparent);\r\n  transition: left 0.6s ease;\r\n}\r\n\r\n.mode-option:hover::before {\r\n  left: 100%;\r\n}\r\n\r\n.mode-option.active {\r\n  background: white;\r\n  color: #667eea;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.mode-option:hover:not(.active) {\r\n  color: #333;\r\n  background: rgba(255, 255, 255, 0.5);\r\n}\r\n\r\n.mode-icon {\r\n  font-size: 16px;\r\n}\r\n\r\n/* 登录表单 */\r\n.login-form {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.form-label {\r\n  display: block;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #333;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.input-group {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.input-group.input-focused {\r\n  transform: scale(1.02);\r\n}\r\n\r\n.input-group.input-focused .input-prefix-icon {\r\n  color: #667eea;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.input-prefix-icon {\r\n  position: absolute;\r\n  left: 16px;\r\n  color: #999;\r\n  font-size: 16px;\r\n  z-index: 1;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.form-input {\r\n  padding-left: 48px !important;\r\n  height: 48px;\r\n  border-radius: 12px;\r\n  border: 2px solid #e8e8e8;\r\n  font-size: 16px;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  background: rgba(255, 255, 255, 0.8);\r\n  position: relative;\r\n}\r\n\r\n.form-input:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.1);\r\n}\r\n\r\n.form-input:focus {\r\n  border-color: #667eea;\r\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1), 0 8px 25px rgba(102, 126, 234, 0.15);\r\n  background: white;\r\n  transform: translateY(-3px);\r\n}\r\n\r\n.form-options {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n  font-size: 14px;\r\n}\r\n\r\n.remember-checkbox {\r\n  color: #666;\r\n}\r\n\r\n.forgot-link {\r\n  color: #667eea;\r\n  text-decoration: none;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.forgot-link:hover {\r\n  color: #5a67d8;\r\n}\r\n\r\n.form-submit {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.login-button {\r\n  width: 100%;\r\n  height: 52px;\r\n  border-radius: 12px;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border: none;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  position: relative;\r\n  overflow: hidden;\r\n  animation: buttonPulse 2s ease-in-out infinite 3s;\r\n}\r\n\r\n@keyframes buttonPulse {\r\n  0%, 100% {\r\n    transform: scale(1);\r\n  }\r\n  50% {\r\n    transform: scale(1.02);\r\n  }\r\n}\r\n\r\n.login-button::before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: -100%;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\r\n  transition: left 0.5s ease;\r\n}\r\n\r\n.login-button:hover::before {\r\n  left: 100%;\r\n}\r\n\r\n.login-button:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);\r\n}\r\n\r\n.login-button.button-pressed {\r\n  transform: translateY(0px) scale(0.98);\r\n  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.2);\r\n}\r\n\r\n.button-icon {\r\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.login-button:hover .button-icon {\r\n  transform: scale(1.1) rotate(5deg);\r\n}\r\n\r\n.button-text {\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.login-button:hover .button-text {\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n/* 登录底部 */\r\n.login-footer {\r\n  text-align: center;\r\n  padding-top: 24px;\r\n  border-top: 1px solid #f0f0f0;\r\n}\r\n\r\n.security-badge {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  color: #52c41a;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.security-icon {\r\n  font-size: 16px;\r\n}\r\n\r\n/* 页面底部 */\r\n.page-footer {\r\n  position: absolute;\r\n  bottom: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 2;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  font-size: 14px;\r\n  text-align: center;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1024px) {\r\n  .main-content {\r\n    flex-direction: column;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .info-panel {\r\n    flex: none;\r\n    padding: 40px 20px;\r\n    text-align: center;\r\n  }\r\n  \r\n  .brand-title {\r\n    font-size: 36px;\r\n  }\r\n  \r\n  .login-panel {\r\n    flex: none;\r\n    width: 100%;\r\n    max-width: 400px;\r\n  }\r\n}\r\n\r\n/* 页面切换动画 */\r\n.page-transition-enter-active,\r\n.page-transition-leave-active {\r\n  transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.page-transition-enter-from {\r\n  opacity: 0;\r\n  transform: scale(1.1) translateY(30px);\r\n}\r\n\r\n.page-transition-leave-to {\r\n  opacity: 0;\r\n  transform: scale(0.9) translateY(-30px);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .login-page {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    overflow: hidden;\r\n  }\r\n  \r\n  .login-container {\r\n    flex-direction: column;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    padding: 0;\r\n  }\r\n  \r\n  .info-panel {\r\n    flex: 0 0 auto;\r\n    height: 40%;\r\n    padding: 20px;\r\n    overflow: hidden;\r\n    animation-delay: 0s;\r\n  }\r\n  \r\n  .brand-title {\r\n    font-size: 28px;\r\n    margin-bottom: 8px;\r\n  }\r\n  \r\n  .brand-subtitle {\r\n    font-size: 14px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .features-list {\r\n    gap: 8px;\r\n  }\r\n  \r\n  .feature-item {\r\n    padding: 8px 0;\r\n  }\r\n  \r\n  .feature-title {\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .feature-desc {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .feature-icon-wrapper {\r\n    width: 36px;\r\n    height: 36px;\r\n  }\r\n  \r\n  .login-panel {\r\n    flex: 1;\r\n    height: 60%;\r\n    padding: 20px;\r\n    overflow: hidden;\r\n    animation-delay: 0.1s;\r\n  }\r\n  \r\n  .login-form {\r\n    padding: 24px 20px;\r\n    border-radius: 16px;\r\n  }\r\n  \r\n  .brand-title {\r\n    font-size: 28px;\r\n  }\r\n  \r\n  .login-title {\r\n    font-size: 24px;\r\n  }\r\n  \r\n  .form-input {\r\n    height: 44px;\r\n    font-size: 15px;\r\n  }\r\n  \r\n  .login-button {\r\n    height: 48px;\r\n    font-size: 15px;\r\n  }\r\n  \r\n  .particle {\r\n    display: none;\r\n  }\r\n  \r\n  .glow {\r\n    opacity: 0.1;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .main-content {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .info-panel {\r\n    padding: 20px 16px;\r\n  }\r\n  \r\n  .login-container {\r\n    padding: 24px 20px;\r\n  }\r\n  \r\n  .brand-title {\r\n    font-size: 24px;\r\n  }\r\n  \r\n  .features-list {\r\n    gap: 16px;\r\n  }\r\n  \r\n  .feature-item {\r\n    font-size: 16px;\r\n  }\r\n}\r\n\r\n/* Ant Design 组件样式覆盖 */\r\n:deep(.ant-form-item) {\r\n  margin-bottom: 0;\r\n}\r\n\r\n:deep(.ant-form-item-label) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.ant-input-affix-wrapper) {\r\n  border-radius: 12px;\r\n  border: 2px solid #e8e8e8;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n:deep(.ant-input-affix-wrapper:focus-within) {\r\n  border-color: #667eea;\r\n  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\r\n}\r\n\r\n:deep(.ant-input-password) {\r\n  padding-left: 48px;\r\n  height: 48px;\r\n  font-size: 16px;\r\n}\r\n\r\n:deep(.ant-checkbox-wrapper) {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n:deep(.ant-checkbox-checked .ant-checkbox-inner) {\r\n  background-color: #667eea;\r\n  border-color: #667eea;\r\n}\r\n\r\n:deep(.ant-btn-loading-icon) {\r\n  margin-right: 8px;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminRoles.vue",["296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"<template>\r\n  <div class=\"admin-roles admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <SafetyOutlined />\r\n          角色权限\r\n        </h1>\r\n        <p class=\"page-description\">管理系统角色和权限分配</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-button @click=\"exportRoles\">\r\n            <ExportOutlined />\r\n            导出角色\r\n          </a-button>\r\n          <a-button type=\"primary\" @click=\"showAddModal\">\r\n            <PlusOutlined />\r\n            新建角色\r\n          </a-button>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 角色权限布局 -->\r\n    <div class=\"roles-layout admin-layout\">\r\n      <!-- 左侧菜单 -->\r\n      <div class=\"roles-menu admin-menu\">\r\n        <div class=\"menu-title\">角色分类</div>\r\n        <div class=\"menu-list\">\r\n          <div \r\n            v-for=\"category in categoryList\" \r\n            :key=\"category.key\"\r\n            :class=\"['menu-item', { 'active': activeCategory === category.key }]\"\r\n            @click=\"handleCategoryChange(category.key)\"\r\n          >\r\n            <component :is=\"category.icon\" class=\"menu-icon\" />\r\n            <span class=\"menu-text\">{{ category.name }}</span>\r\n            <a-badge \r\n              v-if=\"category.count\" \r\n              :count=\"category.count\" \r\n              class=\"menu-badge\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 统计信息 -->\r\n        <div class=\"menu-stats\">\r\n          <div class=\"stats-title\">权限统计</div>\r\n          <div class=\"stats-list\">\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">总角色数</span>\r\n              <span class=\"stat-value\">{{ roleStats.total }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">启用角色</span>\r\n              <span class=\"stat-value\">{{ roleStats.active }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">权限节点</span>\r\n              <span class=\"stat-value\">{{ roleStats.permissions }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧内容 -->\r\n      <div class=\"roles-content admin-content\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索角色...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n                @change=\"handleSearch\"\r\n              />\r\n              <a-select\r\n                v-model:value=\"statusFilter\"\r\n                placeholder=\"状态筛选\"\r\n                style=\"width: 120px\"\r\n                @change=\"handleStatusFilter\"\r\n              >\r\n                <a-select-option value=\"\">全部状态</a-select-option>\r\n                <a-select-option value=\"true\">启用</a-select-option>\r\n                <a-select-option value=\"false\">禁用</a-select-option>\r\n              </a-select>\r\n              <a-button @click=\"refreshData\">\r\n                <ReloadOutlined />\r\n              </a-button>\r\n            </a-space>\r\n          </template>\r\n\r\n          <a-table\r\n            :columns=\"tableColumns\"\r\n            :data-source=\"filteredRoles\"\r\n            :pagination=\"pagination\"\r\n            :loading=\"loading\"\r\n            :row-selection=\"rowSelection\"\r\n            row-key=\"id\"\r\n            size=\"middle\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <template v-if=\"column.key === 'level'\">\r\n                <a-tag :color=\"getLevelColor(record.level)\">\r\n                  {{ getLevelText(record.level) }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"record.status ? 'green' : 'red'\">\r\n                  {{ record.status ? '启用' : '禁用' }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'permissions'\">\r\n                <span>{{ record.permissions.length }}</span>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'users'\">\r\n                <span>{{ record.userCount }}</span>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'actions'\">\r\n                <a-space>\r\n                  <a-button type=\"link\" size=\"small\" @click=\"editRole(record)\">\r\n                    编辑\r\n                  </a-button>\r\n                  <a-button type=\"link\" size=\"small\" @click=\"configPermissions(record)\">\r\n                    权限配置\r\n                  </a-button>\r\n                  <a-button \r\n                    type=\"link\" \r\n                    size=\"small\" \r\n                    @click=\"toggleRoleStatus(record)\"\r\n                  >\r\n                    {{ record.status ? '禁用' : '启用' }}\r\n                  </a-button>\r\n                  <a-popconfirm\r\n                    title=\"确定要删除这个角色吗？\"\r\n                    @confirm=\"deleteRole(record)\"\r\n                  >\r\n                    <a-button type=\"link\" size=\"small\" danger>\r\n                      删除\r\n                    </a-button>\r\n                  </a-popconfirm>\r\n                </a-space>\r\n              </template>\r\n            </template>\r\n          </a-table>\r\n\r\n          <!-- 批量操作 -->\r\n          <div v-if=\"selectedRowKeys.length > 0\" class=\"batch-actions\">\r\n            <a-space>\r\n              <span>已选择 {{ selectedRowKeys.length }} 项</span>\r\n              <a-button @click=\"batchEnable\">批量启用</a-button>\r\n              <a-button @click=\"batchDisable\">批量禁用</a-button>\r\n              <a-popconfirm\r\n                title=\"确定要删除选中的角色吗？\"\r\n                @confirm=\"batchDelete\"\r\n              >\r\n                <a-button danger>批量删除</a-button>\r\n              </a-popconfirm>\r\n            </a-space>\r\n          </div>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 添加/编辑角色弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"isEditing ? '编辑角色' : '新建角色'\"\r\n      width=\"600px\"\r\n      @ok=\"handleSubmit\"\r\n      @cancel=\"handleCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"角色名称\" name=\"name\">\r\n              <a-input v-model:value=\"formData.name\" placeholder=\"输入角色名称\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"角色编码\" name=\"code\">\r\n              <a-input \r\n                v-model:value=\"formData.code\" \r\n                placeholder=\"输入角色编码\"\r\n                :disabled=\"isEditing\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"角色级别\" name=\"level\">\r\n              <a-select v-model:value=\"formData.level\" placeholder=\"选择角色级别\">\r\n                <a-select-option value=\"high\">高级</a-select-option>\r\n                <a-select-option value=\"medium\">中级</a-select-option>\r\n                <a-select-option value=\"low\">初级</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"角色类型\" name=\"type\">\r\n              <a-select v-model:value=\"formData.type\" placeholder=\"选择角色类型\">\r\n                <a-select-option value=\"system\">系统角色</a-select-option>\r\n                <a-select-option value=\"business\">业务角色</a-select-option>\r\n                <a-select-option value=\"custom\">自定义角色</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item label=\"角色描述\" name=\"description\">\r\n          <a-textarea \r\n            v-model:value=\"formData.description\" \r\n            placeholder=\"输入角色描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"状态\" name=\"status\">\r\n          <a-switch v-model:checked=\"formData.status\" />\r\n          <span class=\"switch-description\">{{ formData.status ? '启用' : '禁用' }}</span>\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 权限配置弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"permissionModalVisible\"\r\n      title=\"权限配置\"\r\n      width=\"800px\"\r\n      @ok=\"handlePermissionSubmit\"\r\n      @cancel=\"handlePermissionCancel\"\r\n    >\r\n      <div class=\"permission-config\">\r\n        <div class=\"permission-header\">\r\n          <h3>为角色 \"{{ selectedRole?.name }}\" 配置权限</h3>\r\n          <a-space>\r\n            <a-button size=\"small\" @click=\"expandAll\">全部展开</a-button>\r\n            <a-button size=\"small\" @click=\"collapseAll\">全部收起</a-button>\r\n            <a-button size=\"small\" @click=\"selectAll\">全选</a-button>\r\n            <a-button size=\"small\" @click=\"unselectAll\">全不选</a-button>\r\n          </a-space>\r\n        </div>\r\n        \r\n        <a-tree\r\n          ref=\"permissionTreeRef\"\r\n          v-model:checkedKeys=\"checkedPermissions\"\r\n          :tree-data=\"permissionTree\"\r\n          :expanded-keys=\"expandedKeys\"\r\n          checkable\r\n          :check-strictly=\"false\"\r\n          @expand=\"onExpand\"\r\n          @check=\"onCheck\"\r\n        >\r\n          <template #title=\"{ title, icon }\">\r\n            <span class=\"permission-node\">\r\n              <component :is=\"icon\" v-if=\"icon\" class=\"permission-icon\" />\r\n              {{ title }}\r\n            </span>\r\n          </template>\r\n        </a-tree>\r\n      </div>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { roleAPI } from '@/api/users';\r\nimport {\r\n  SafetyOutlined,\r\n  PlusOutlined,\r\n  ExportOutlined,\r\n  ReloadOutlined,\r\n  CrownOutlined,\r\n  UserOutlined,\r\n  TeamOutlined,\r\n  SettingOutlined,\r\n  EyeOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  FolderOutlined,\r\n  FileOutlined,\r\n  DatabaseOutlined,\r\n  MonitorOutlined,\r\n  SecurityScanOutlined,\r\n  ToolOutlined,\r\n  FileTextOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst modalVisible = ref(false);\r\nconst permissionModalVisible = ref(false);\r\nconst isEditing = ref(false);\r\nconst searchText = ref('');\r\nconst statusFilter = ref('');\r\nconst activeCategory = ref('all');\r\nconst selectedRowKeys = ref([]);\r\nconst selectedRole = ref(null);\r\nconst checkedPermissions = ref([]);\r\nconst expandedKeys = ref(['1', '2', '3']);\r\n\r\n// 表单数据\r\nconst formRef = ref();\r\nconst permissionTreeRef = ref();\r\nconst formData = ref({\r\n  name: '',\r\n  code: '',\r\n  level: 'medium',\r\n  type: 'business',\r\n  description: '',\r\n  status: true\r\n});\r\n\r\n// 角色数据\r\nconst roles = ref([]);\r\nconst roleStats = ref({\r\n  total: 0,\r\n  active: 0,\r\n  permissions: 24\r\n});\r\n\r\n// 分类列表\r\nconst categoryList = ref([\r\n  { key: 'all', name: '全部角色', icon: 'TeamOutlined', count: 0 },\r\n  { key: 'system', name: '系统角色', icon: 'CrownOutlined', count: 0 },\r\n  { key: 'business', name: '业务角色', icon: 'UserOutlined', count: 0 },\r\n  { key: 'custom', name: '自定义角色', icon: 'SettingOutlined', count: 0 },\r\n  { key: 'active', name: '启用角色', icon: 'CheckCircleOutlined', count: 0 },\r\n  { key: 'inactive', name: '禁用角色', icon: 'CloseCircleOutlined', count: 0 }\r\n]);\r\n\r\n// 表格列配置\r\nconst tableColumns = [\r\n  { title: '角色名称', dataIndex: 'name', key: 'name', sorter: true,width: 150 },\r\n  { title: '角色编码', dataIndex: 'code', key: 'code' },\r\n  { title: '角色级别', key: 'level', width: 100 },\r\n  { title: '角色类型', dataIndex: 'type', key: 'type', width: 100 },\r\n  { title: '权限数量', key: 'permissions', width: 120 },\r\n  { title: '用户数量', key: 'users', width: 120 },\r\n  { title: '状态', key: 'status', width: 80 },\r\n  { title: '创建时间', dataIndex: 'createdAt', key: 'createdAt', width: 150, sorter: true },\r\n  { title: '操作', key: 'actions', width: 250, fixed: 'right' }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = ref({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n// 行选择配置\r\nconst rowSelection = {\r\n  selectedRowKeys,\r\n  onChange: (keys) => { selectedRowKeys.value = keys; }\r\n};\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  name: [\r\n    { required: true, message: '请输入角色名称', trigger: 'blur' },\r\n    { min: 2, max: 50, message: '角色名称长度在2-50个字符', trigger: 'blur' }\r\n  ],\r\n  code: [\r\n    { required: true, message: '请输入角色编码', trigger: 'blur' },\r\n    { pattern: /^[A-Z_][A-Z0-9_]*$/, message: '角色编码只能包含大写字母、数字和下划线', trigger: 'blur' }\r\n  ],\r\n  level: [{ required: true, message: '请选择角色级别', trigger: 'change' }],\r\n  type: [{ required: true, message: '请选择角色类型', trigger: 'change' }]\r\n};\r\n\r\n// 权限树数据\r\nconst permissionTree = ref([\r\n  {\r\n    title: '系统管理', key: '1', icon: 'SettingOutlined',\r\n    children: [\r\n      {\r\n        title: '用户管理', key: '1-1', icon: 'UserOutlined',\r\n        children: [\r\n          { title: '查看用户', key: '1-1-1', icon: 'EyeOutlined' },\r\n          { title: '创建用户', key: '1-1-2', icon: 'PlusOutlined' },\r\n          { title: '编辑用户', key: '1-1-3', icon: 'EditOutlined' },\r\n          { title: '删除用户', key: '1-1-4', icon: 'DeleteOutlined' }\r\n        ]\r\n      },\r\n      {\r\n        title: '角色权限', key: '1-2', icon: 'SafetyOutlined',\r\n        children: [\r\n          { title: '查看角色', key: '1-2-1', icon: 'EyeOutlined' },\r\n          { title: '创建角色', key: '1-2-2', icon: 'PlusOutlined' },\r\n          { title: '编辑角色', key: '1-2-3', icon: 'EditOutlined' },\r\n          { title: '删除角色', key: '1-2-4', icon: 'DeleteOutlined' },\r\n          { title: '权限分配', key: '1-2-5', icon: 'SecurityScanOutlined' }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    title: '业务管理', key: '2', icon: 'DatabaseOutlined',\r\n    children: [\r\n      {\r\n        title: '资产管理', key: '2-1', icon: 'FolderOutlined',\r\n        children: [\r\n          { title: '查看资产', key: '2-1-1', icon: 'EyeOutlined' },\r\n          { title: '创建资产', key: '2-1-2', icon: 'PlusOutlined' }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]);\r\n\r\n// 计算属性\r\nconst filteredRoles = computed(() => {\r\n  let result = roles.value;\r\n  \r\n  if (activeCategory.value !== 'all') {\r\n    if (activeCategory.value === 'active') {\r\n      result = result.filter(role => role.status);\r\n    } else if (activeCategory.value === 'inactive') {\r\n      result = result.filter(role => !role.status);\r\n    } else {\r\n      result = result.filter(role => role.type === activeCategory.value);\r\n    }\r\n  }\r\n  \r\n  if (statusFilter.value !== '') {\r\n    const status = statusFilter.value === 'true';\r\n    result = result.filter(role => role.status === status);\r\n  }\r\n  \r\n  if (searchText.value) {\r\n    const searchLower = searchText.value.toLowerCase();\r\n    result = result.filter(role => \r\n      role.name?.toLowerCase().includes(searchLower) ||\r\n      role.code?.toLowerCase().includes(searchLower) ||\r\n      role.description?.toLowerCase().includes(searchLower)\r\n    );\r\n  }\r\n  \r\n  return result;\r\n});\r\n\r\n// 获取当前分类名称\r\nconst getCurrentCategoryName = () => {\r\n  const category = categoryList.value.find(cat => cat.key === activeCategory.value);\r\n  return category ? category.name : '全部角色';\r\n};\r\n\r\n// 获取级别颜色\r\nconst getLevelColor = (level) => {\r\n  const colors = { high: 'red', medium: 'orange', low: 'green' };\r\n  return colors[level] || 'default';\r\n};\r\n\r\n// 获取级别文本\r\nconst getLevelText = (level) => {\r\n  const texts = { high: '高级', medium: '中级', low: '初级' };\r\n  return texts[level] || level;\r\n};\r\n\r\n// 更新统计数据\r\nconst updateStats = () => {\r\n  const stats = {\r\n    total: roles.value.length,\r\n    active: roles.value.filter(role => role.status).length,\r\n    permissions: 24\r\n  };\r\n  \r\n  roleStats.value = stats;\r\n  \r\n  categoryList.value.forEach(category => {\r\n    switch (category.key) {\r\n      case 'all': category.count = stats.total; break;\r\n      case 'system': category.count = roles.value.filter(role => role.type === 'system').length; break;\r\n      case 'business': category.count = roles.value.filter(role => role.type === 'business').length; break;\r\n      case 'custom': category.count = roles.value.filter(role => role.type === 'custom').length; break;\r\n      case 'active': category.count = stats.active; break;\r\n      case 'inactive': category.count = stats.total - stats.active; break;\r\n    }\r\n  });\r\n};\r\n\r\n// 生成模拟数据\r\nconst generateMockRoles = () => {\r\n  return [\r\n    {\r\n      id: 1, name: '超级管理员', code: 'SUPER_ADMIN', level: 'high', type: 'system',\r\n      description: '系统超级管理员，拥有所有权限', status: true,\r\n      permissions: ['1', '1-1', '1-1-1', '1-1-2', '1-1-3'], userCount: 1,\r\n      createdAt: '2024-01-01 10:00:00'\r\n    },\r\n    {\r\n      id: 2, name: '系统管理员', code: 'SYS_ADMIN', level: 'high', type: 'system',\r\n      description: '系统管理员，负责系统配置', status: true,\r\n      permissions: ['1', '1-1', '1-1-1'], userCount: 2,\r\n      createdAt: '2024-01-02 11:30:00'\r\n    },\r\n    {\r\n      id: 3, name: '业务管理员', code: 'BIZ_ADMIN', level: 'medium', type: 'business',\r\n      description: '业务管理员，负责业务数据管理', status: true,\r\n      permissions: ['2', '2-1', '2-1-1'], userCount: 5,\r\n      createdAt: '2024-01-03 09:15:00'\r\n    },\r\n    {\r\n      id: 4, name: '访客', code: 'GUEST', level: 'low', type: 'custom',\r\n      description: '访客角色，只有基本查看权限', status: false,\r\n      permissions: ['2-1-1'], userCount: 0,\r\n      createdAt: '2024-01-06 08:30:00'\r\n    }\r\n  ];\r\n};\r\n\r\n// 获取角色列表\r\nconst fetchRoles = async () => {\r\n  try {\r\n    loading.value = true;\r\n    roles.value = generateMockRoles();\r\n    updateStats();\r\n    message.warning('数据加载失败，显示模拟数据');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 分类切换\r\nconst handleCategoryChange = (key) => {\r\n  activeCategory.value = key;\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 搜索处理\r\nconst handleSearch = () => { selectedRowKeys.value = []; };\r\nconst handleStatusFilter = () => { selectedRowKeys.value = []; };\r\n\r\n// 刷新数据\r\nconst refreshData = () => {\r\n  fetchRoles();\r\n  message.success('数据刷新成功');\r\n};\r\n\r\n// 显示新建角色弹窗\r\nconst showAddModal = () => {\r\n  isEditing.value = false;\r\n  formData.value = { name: '', code: '', level: 'medium', type: 'business', description: '', status: true };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 编辑角色\r\nconst editRole = (record) => {\r\n  isEditing.value = true;\r\n  formData.value = { ...record };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    loading.value = true;\r\n    \r\n    if (isEditing.value) {\r\n      const index = roles.value.findIndex(role => role.id === formData.value.id);\r\n      if (index !== -1) {\r\n        roles.value[index] = { ...roles.value[index], ...formData.value };\r\n      }\r\n      message.success('角色更新成功');\r\n    } else {\r\n      const newRole = { \r\n        id: Date.now(), ...formData.value, permissions: [], userCount: 0,\r\n        createdAt: new Date().toLocaleString('zh-CN')\r\n      };\r\n      roles.value.unshift(newRole);\r\n      message.success('角色创建成功');\r\n    }\r\n    \r\n    updateStats();\r\n    modalVisible.value = false;\r\n  } catch (error) {\r\n    message.error('操作失败，请重试');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 取消操作\r\nconst handleCancel = () => {\r\n  modalVisible.value = false;\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 配置权限\r\nconst configPermissions = (record) => {\r\n  selectedRole.value = record;\r\n  checkedPermissions.value = [...record.permissions];\r\n  permissionModalVisible.value = true;\r\n};\r\n\r\n// 权限树操作\r\nconst expandAll = () => {\r\n  expandedKeys.value = ['1', '2', '3', '1-1', '1-2', '2-1'];\r\n};\r\nconst collapseAll = () => { expandedKeys.value = []; };\r\nconst selectAll = () => {\r\n  checkedPermissions.value = ['1', '1-1', '1-1-1', '1-1-2', '1-1-3', '1-1-4', '1-2', '1-2-1', '1-2-2', '1-2-3', '1-2-4', '1-2-5', '2', '2-1', '2-1-1', '2-1-2'];\r\n};\r\nconst unselectAll = () => { checkedPermissions.value = []; };\r\nconst onExpand = (keys) => { expandedKeys.value = keys; };\r\nconst onCheck = (keys) => { checkedPermissions.value = keys; };\r\n\r\n// 提交权限配置\r\nconst handlePermissionSubmit = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    if (selectedRole.value) {\r\n      const index = roles.value.findIndex(role => role.id === selectedRole.value.id);\r\n      if (index !== -1) {\r\n        roles.value[index].permissions = [...checkedPermissions.value];\r\n      }\r\n      message.success('权限配置成功');\r\n      permissionModalVisible.value = false;\r\n    }\r\n  } catch (error) {\r\n    message.error('权限配置失败，请重试');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 取消权限配置\r\nconst handlePermissionCancel = () => {\r\n  permissionModalVisible.value = false;\r\n  selectedRole.value = null;\r\n  checkedPermissions.value = [];\r\n};\r\n\r\n// 切换角色状态\r\nconst toggleRoleStatus = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    record.status = !record.status;\r\n    updateStats();\r\n    message.success(`角色${record.status ? '启用' : '禁用'}成功`);\r\n  } catch (error) {\r\n    message.error('操作失败，请重试');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 删除角色\r\nconst deleteRole = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const index = roles.value.findIndex(role => role.id === record.id);\r\n    if (index !== -1) {\r\n      roles.value.splice(index, 1);\r\n    }\r\n    updateStats();\r\n    message.success('角色删除成功');\r\n  } catch (error) {\r\n    message.error('删除失败，请重试');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量操作\r\nconst batchEnable = () => {\r\n  selectedRowKeys.value.forEach(id => {\r\n    const role = roles.value.find(r => r.id === id);\r\n    if (role) role.status = true;\r\n  });\r\n  updateStats();\r\n  selectedRowKeys.value = [];\r\n  message.success('批量启用成功');\r\n};\r\n\r\nconst batchDisable = () => {\r\n  selectedRowKeys.value.forEach(id => {\r\n    const role = roles.value.find(r => r.id === id);\r\n    if (role) role.status = false;\r\n  });\r\n  updateStats();\r\n  selectedRowKeys.value = [];\r\n  message.success('批量禁用成功');\r\n};\r\n\r\nconst batchDelete = () => {\r\n  roles.value = roles.value.filter(role => !selectedRowKeys.value.includes(role.id));\r\n  updateStats();\r\n  selectedRowKeys.value = [];\r\n  message.success('批量删除成功');\r\n};\r\n\r\n// 导出角色\r\nconst exportRoles = () => {\r\n  message.success('角色列表导出成功');\r\n};\r\n\r\n// 组件挂载\r\nonMounted(() => {\r\n  fetchRoles();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 角色权限页面特有的样式 */\r\n.permission-config {\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.permission-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n  padding-bottom: 12px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.permission-header h3 {\r\n  margin: 0;\r\n  color: #262626;\r\n}\r\n\r\n.permission-node {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.permission-icon {\r\n  color: #1890ff;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 权限树样式优化 */\r\n:deep(.ant-tree) {\r\n  background: transparent;\r\n}\r\n\r\n:deep(.ant-tree-treenode) {\r\n  padding: 2px 0;\r\n}\r\n\r\n:deep(.ant-tree-node-content-wrapper) {\r\n  border-radius: 4px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n:deep(.ant-tree-node-content-wrapper:hover) {\r\n  background-color: #f5f5f5;\r\n}\r\n\r\n:deep(.ant-tree-node-selected) {\r\n  background-color: #e6f7ff !important;\r\n}\r\n\r\n:deep(.ant-tree-checkbox) {\r\n  margin-right: 8px;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminSettings.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminBackup.vue",["313","314","315","316","317","318","319","320"],"<template>\r\n  <div class=\"admin-backup admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <CloudDownloadOutlined />\r\n          数据备份\r\n        </h1>\r\n        <p class=\"page-description\">管理系统数据备份和恢复操作</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-button @click=\"downloadBackup\">\r\n            <DownloadOutlined />\r\n            下载备份\r\n          </a-button>\r\n          <a-button type=\"primary\" @click=\"showCreateBackupModal\">\r\n            <CloudDownloadOutlined />\r\n            创建备份\r\n          </a-button>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 备份管理布局 -->\r\n    <div class=\"backup-layout admin-layout\">\r\n      <!-- 左侧菜单 -->\r\n      <div class=\"backup-menu admin-menu\">\r\n        <div class=\"menu-title\">备份类型</div>\r\n        <div class=\"menu-list\">\r\n          <div \r\n            v-for=\"category in categoryList\" \r\n            :key=\"category.key\"\r\n            :class=\"['menu-item', { 'active': activeCategory === category.key }]\"\r\n            @click=\"handleCategoryChange(category.key)\"\r\n          >\r\n            <component :is=\"category.icon\" class=\"menu-icon\" />\r\n            <span class=\"menu-text\">{{ category.name }}</span>\r\n            <a-badge \r\n              v-if=\"category.count\" \r\n              :count=\"category.count\" \r\n              class=\"menu-badge\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 备份统计 -->\r\n        <div class=\"menu-stats\">\r\n          <div class=\"stats-title\">备份统计</div>\r\n          <div class=\"stats-list\">\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">总备份数</span>\r\n              <span class=\"stat-value\">{{ backupStats.total }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">今日备份</span>\r\n              <span class=\"stat-value\">{{ backupStats.today }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">存储大小</span>\r\n              <span class=\"stat-value\">{{ backupStats.totalSize }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧内容 -->\r\n      <div class=\"backup-content admin-content\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索备份...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n                @change=\"handleSearch\"\r\n              />\r\n              <a-select\r\n                v-model:value=\"statusFilter\"\r\n                placeholder=\"状态筛选\"\r\n                style=\"width: 120px\"\r\n                @change=\"handleStatusFilter\"\r\n              >\r\n                <a-select-option value=\"\">全部状态</a-select-option>\r\n                <a-select-option value=\"success\">成功</a-select-option>\r\n                <a-select-option value=\"failed\">失败</a-select-option>\r\n                <a-select-option value=\"running\">进行中</a-select-option>\r\n              </a-select>\r\n              <a-button @click=\"refreshData\">\r\n                <ReloadOutlined />\r\n              </a-button>\r\n            </a-space>\r\n          </template>\r\n\r\n          <a-table\r\n            :columns=\"tableColumns\"\r\n            :data-source=\"filteredBackups\"\r\n            :pagination=\"pagination\"\r\n            :loading=\"loading\"\r\n            :row-selection=\"rowSelection\"\r\n            row-key=\"id\"\r\n            size=\"middle\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <template v-if=\"column.key === 'type'\">\r\n                <a-tag :color=\"getTypeColor(record.type)\">\r\n                  {{ getTypeText(record.type) }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"getStatusColor(record.status)\">\r\n                  <component :is=\"getStatusIcon(record.status)\" />\r\n                  {{ getStatusText(record.status) }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'size'\">\r\n                <span>{{ formatFileSize(record.size) }}</span>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'actions'\">\r\n                <a-space>\r\n                  <a-button \r\n                    type=\"link\" \r\n                    size=\"small\" \r\n                    @click=\"downloadSingleBackup(record)\"\r\n                    :disabled=\"record.status !== 'success'\"\r\n                  >\r\n                    下载\r\n                  </a-button>\r\n                  <a-button \r\n                    type=\"link\" \r\n                    size=\"small\" \r\n                    @click=\"restoreBackup(record)\"\r\n                    :disabled=\"record.status !== 'success'\"\r\n                  >\r\n                    恢复\r\n                  </a-button>\r\n                  <a-button type=\"link\" size=\"small\" @click=\"viewBackupDetail(record)\">\r\n                    详情\r\n                  </a-button>\r\n                  <a-popconfirm\r\n                    title=\"确定要删除这个备份吗？\"\r\n                    @confirm=\"deleteBackup(record)\"\r\n                  >\r\n                    <a-button type=\"link\" size=\"small\" danger>\r\n                      删除\r\n                    </a-button>\r\n                  </a-popconfirm>\r\n                </a-space>\r\n              </template>\r\n            </template>\r\n          </a-table>\r\n\r\n          <!-- 批量操作 -->\r\n          <div v-if=\"selectedRowKeys.length > 0\" class=\"batch-actions\">\r\n            <a-space>\r\n              <span>已选择 {{ selectedRowKeys.length }} 项</span>\r\n              <a-button @click=\"batchDownload\">批量下载</a-button>\r\n              <a-popconfirm\r\n                title=\"确定要删除选中的备份吗？\"\r\n                @confirm=\"batchDelete\"\r\n              >\r\n                <a-button danger>批量删除</a-button>\r\n              </a-popconfirm>\r\n            </a-space>\r\n          </div>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 创建备份弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"createBackupModalVisible\"\r\n      title=\"创建数据备份\"\r\n      width=\"600px\"\r\n      @ok=\"handleCreateBackup\"\r\n      @cancel=\"handleCreateBackupCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"backupFormRef\"\r\n        :model=\"backupFormData\"\r\n        :rules=\"backupFormRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"备份名称\" name=\"name\">\r\n              <a-input v-model:value=\"backupFormData.name\" placeholder=\"输入备份名称\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"备份类型\" name=\"type\">\r\n              <a-select v-model:value=\"backupFormData.type\" placeholder=\"选择备份类型\">\r\n                <a-select-option value=\"full\">完整备份</a-select-option>\r\n                <a-select-option value=\"incremental\">增量备份</a-select-option>\r\n                <a-select-option value=\"differential\">差异备份</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item label=\"备份范围\" name=\"scope\">\r\n          <a-checkbox-group v-model:value=\"backupFormData.scope\">\r\n            <a-row :gutter=\"[16, 16]\">\r\n              <a-col :span=\"8\">\r\n                <a-checkbox value=\"database\">数据库</a-checkbox>\r\n              </a-col>\r\n              <a-col :span=\"8\">\r\n                <a-checkbox value=\"config\">配置文件</a-checkbox>\r\n              </a-col>\r\n              <a-col :span=\"8\">\r\n                <a-checkbox value=\"logs\">日志文件</a-checkbox>\r\n              </a-col>\r\n              <a-col :span=\"8\">\r\n                <a-checkbox value=\"uploads\">上传文件</a-checkbox>\r\n              </a-col>\r\n              <a-col :span=\"8\">\r\n                <a-checkbox value=\"assets\">静态资源</a-checkbox>\r\n              </a-col>\r\n              <a-col :span=\"8\">\r\n                <a-checkbox value=\"cache\">缓存数据</a-checkbox>\r\n              </a-col>\r\n            </a-row>\r\n          </a-checkbox-group>\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"备份描述\" name=\"description\">\r\n          <a-textarea \r\n            v-model:value=\"backupFormData.description\" \r\n            placeholder=\"输入备份描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"压缩选项\" name=\"compression\">\r\n          <a-switch v-model:checked=\"backupFormData.compression\" />\r\n          <span class=\"switch-description\">启用压缩以减少备份文件大小</span>\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 备份详情弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"detailModalVisible\"\r\n      title=\"备份详情\"\r\n      width=\"800px\"\r\n      :footer=\"null\"\r\n    >\r\n      <a-descriptions\r\n        v-if=\"selectedBackup\"\r\n        :column=\"2\"\r\n        bordered\r\n        size=\"small\"\r\n      >\r\n        <a-descriptions-item label=\"备份名称\" :span=\"2\">\r\n          {{ selectedBackup.name }}\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"备份类型\">\r\n          <a-tag :color=\"getTypeColor(selectedBackup.type)\">\r\n            {{ getTypeText(selectedBackup.type) }}\r\n          </a-tag>\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"备份状态\">\r\n          <a-tag :color=\"getStatusColor(selectedBackup.status)\">\r\n            <component :is=\"getStatusIcon(selectedBackup.status)\" />\r\n            {{ getStatusText(selectedBackup.status) }}\r\n          </a-tag>\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"文件大小\">\r\n          {{ formatFileSize(selectedBackup.size) }}\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"创建时间\">\r\n          {{ selectedBackup.createdAt }}\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"完成时间\">\r\n          {{ selectedBackup.completedAt || '未完成' }}\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"备份路径\">\r\n          {{ selectedBackup.filePath }}\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"备份范围\" :span=\"2\">\r\n          <a-space>\r\n            <a-tag v-for=\"scope in selectedBackup.scope\" :key=\"scope\">\r\n              {{ getScopeText(scope) }}\r\n            </a-tag>\r\n          </a-space>\r\n        </a-descriptions-item>\r\n        <a-descriptions-item label=\"备份描述\" :span=\"2\">\r\n          {{ selectedBackup.description || '无描述' }}\r\n        </a-descriptions-item>\r\n      </a-descriptions>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport {\r\n  CloudDownloadOutlined,\r\n  DownloadOutlined,\r\n  ReloadOutlined,\r\n  DatabaseOutlined,\r\n  FileOutlined,\r\n  FolderOutlined,\r\n  SettingOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  LoadingOutlined,\r\n  PlusOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst createBackupModalVisible = ref(false);\r\nconst detailModalVisible = ref(false);\r\nconst searchText = ref('');\r\nconst statusFilter = ref('');\r\nconst activeCategory = ref('all');\r\nconst selectedRowKeys = ref([]);\r\nconst selectedBackup = ref(null);\r\n\r\n// 表单数据\r\nconst backupFormRef = ref();\r\nconst backupFormData = ref({\r\n  name: '',\r\n  type: 'full',\r\n  scope: ['database', 'config'],\r\n  description: '',\r\n  compression: true\r\n});\r\n\r\n// 备份数据\r\nconst backups = ref([]);\r\nconst backupStats = ref({\r\n  total: 0,\r\n  today: 0,\r\n  totalSize: '0 MB'\r\n});\r\n\r\n// 分类列表\r\nconst categoryList = ref([\r\n  { key: 'all', name: '全部备份', icon: 'FolderOutlined', count: 0 },\r\n  { key: 'full', name: '完整备份', icon: 'DatabaseOutlined', count: 0 },\r\n  { key: 'incremental', name: '增量备份', icon: 'FileOutlined', count: 0 },\r\n  { key: 'differential', name: '差异备份', icon: 'SettingOutlined', count: 0 },\r\n  { key: 'success', name: '成功备份', icon: 'CheckCircleOutlined', count: 0 },\r\n  { key: 'failed', name: '失败备份', icon: 'CloseCircleOutlined', count: 0 }\r\n]);\r\n\r\n// 表格列配置\r\nconst tableColumns = [\r\n  { title: '备份名称', dataIndex: 'name', key: 'name', sorter: true },\r\n  { title: '备份类型', key: 'type', width: 100 },\r\n  { title: '文件大小', key: 'size', width: 100, sorter: true },\r\n  { title: '状态', key: 'status', width: 100 },\r\n  { title: '创建时间', dataIndex: 'createdAt', key: 'createdAt', width: 180, sorter: true },\r\n  { title: '完成时间', dataIndex: 'completedAt', key: 'completedAt', width: 180 },\r\n  { title: '操作', key: 'actions', width: 200, fixed: 'right' }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = ref({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n// 行选择配置\r\nconst rowSelection = {\r\n  selectedRowKeys,\r\n  onChange: (keys) => { selectedRowKeys.value = keys; }\r\n};\r\n\r\n// 表单验证规则\r\nconst backupFormRules = {\r\n  name: [\r\n    { required: true, message: '请输入备份名称', trigger: 'blur' },\r\n    { min: 2, max: 50, message: '备份名称长度在2-50个字符', trigger: 'blur' }\r\n  ],\r\n  type: [{ required: true, message: '请选择备份类型', trigger: 'change' }],\r\n  scope: [{ required: true, message: '请选择备份范围', trigger: 'change' }]\r\n};\r\n\r\n// 计算属性\r\nconst filteredBackups = computed(() => {\r\n  let result = backups.value;\r\n  \r\n  if (activeCategory.value !== 'all') {\r\n    if (['success', 'failed', 'running'].includes(activeCategory.value)) {\r\n      result = result.filter(backup => backup.status === activeCategory.value);\r\n    } else {\r\n      result = result.filter(backup => backup.type === activeCategory.value);\r\n    }\r\n  }\r\n  \r\n  if (statusFilter.value) {\r\n    result = result.filter(backup => backup.status === statusFilter.value);\r\n  }\r\n  \r\n  if (searchText.value) {\r\n    const searchLower = searchText.value.toLowerCase();\r\n    result = result.filter(backup => \r\n      backup.name?.toLowerCase().includes(searchLower) ||\r\n      backup.description?.toLowerCase().includes(searchLower)\r\n    );\r\n  }\r\n  \r\n  return result;\r\n});\r\n\r\n// 获取当前分类名称\r\nconst getCurrentCategoryName = () => {\r\n  const category = categoryList.value.find(cat => cat.key === activeCategory.value);\r\n  return category ? category.name : '全部备份';\r\n};\r\n\r\n// 获取类型颜色和文本\r\nconst getTypeColor = (type) => {\r\n  const colors = { full: 'blue', incremental: 'green', differential: 'orange' };\r\n  return colors[type] || 'default';\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const texts = { full: '完整备份', incremental: '增量备份', differential: '差异备份' };\r\n  return texts[type] || type;\r\n};\r\n\r\n// 获取状态颜色、图标和文本\r\nconst getStatusColor = (status) => {\r\n  const colors = { success: 'green', failed: 'red', running: 'blue' };\r\n  return colors[status] || 'default';\r\n};\r\n\r\nconst getStatusIcon = (status) => {\r\n  const icons = { success: 'CheckCircleOutlined', failed: 'CloseCircleOutlined', running: 'LoadingOutlined' };\r\n  return icons[status] || 'CheckCircleOutlined';\r\n};\r\n\r\nconst getStatusText = (status) => {\r\n  const texts = { success: '成功', failed: '失败', running: '进行中' };\r\n  return texts[status] || status;\r\n};\r\n\r\n// 获取范围文本\r\nconst getScopeText = (scope) => {\r\n  const texts = {\r\n    database: '数据库',\r\n    config: '配置文件',\r\n    logs: '日志文件',\r\n    uploads: '上传文件',\r\n    assets: '静态资源',\r\n    cache: '缓存数据'\r\n  };\r\n  return texts[scope] || scope;\r\n};\r\n\r\n// 格式化文件大小\r\nconst formatFileSize = (bytes) => {\r\n  if (!bytes) return '0 B';\r\n  const k = 1024;\r\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\n// 更新统计数据\r\nconst updateStats = () => {\r\n  const today = new Date().toISOString().split('T')[0];\r\n  const todayBackups = backups.value.filter(backup => \r\n    backup.createdAt.startsWith(today)\r\n  ).length;\r\n  \r\n  const totalSize = backups.value.reduce((sum, backup) => sum + (backup.size || 0), 0);\r\n  \r\n  backupStats.value = {\r\n    total: backups.value.length,\r\n    today: todayBackups,\r\n    totalSize: formatFileSize(totalSize)\r\n  };\r\n  \r\n  // 更新分类计数\r\n  categoryList.value.forEach(category => {\r\n    switch (category.key) {\r\n      case 'all':\r\n        category.count = backups.value.length;\r\n        break;\r\n      case 'full':\r\n      case 'incremental':\r\n      case 'differential':\r\n        category.count = backups.value.filter(backup => backup.type === category.key).length;\r\n        break;\r\n      case 'success':\r\n      case 'failed':\r\n        category.count = backups.value.filter(backup => backup.status === category.key).length;\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\n// 生成模拟数据\r\nconst generateMockBackups = () => {\r\n  return [\r\n    {\r\n      id: 1,\r\n      name: '完整系统备份_20240120',\r\n      type: 'full',\r\n      status: 'success',\r\n      size: 1073741824, // 1GB\r\n      scope: ['database', 'config', 'uploads'],\r\n      description: '定期完整系统备份',\r\n      filePath: '/backups/full_backup_20240120.tar.gz',\r\n      createdAt: '2024-01-20 02:00:00',\r\n      completedAt: '2024-01-20 02:45:30'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: '数据库增量备份_20240121',\r\n      type: 'incremental',\r\n      status: 'success',\r\n      size: 52428800, // 50MB\r\n      scope: ['database'],\r\n      description: '每日数据库增量备份',\r\n      filePath: '/backups/incremental_db_20240121.tar.gz',\r\n      createdAt: '2024-01-21 02:00:00',\r\n      completedAt: '2024-01-21 02:05:15'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: '配置文件备份_20240121',\r\n      type: 'differential',\r\n      status: 'failed',\r\n      size: 0,\r\n      scope: ['config'],\r\n      description: '系统配置文件差异备份',\r\n      filePath: '/backups/config_diff_20240121.tar.gz',\r\n      createdAt: '2024-01-21 03:00:00',\r\n      completedAt: null\r\n    },\r\n    {\r\n      id: 4,\r\n      name: '应急备份_20240121',\r\n      type: 'full',\r\n      status: 'running',\r\n      size: 0,\r\n      scope: ['database', 'config', 'logs'],\r\n      description: '系统维护前的应急备份',\r\n      filePath: '/backups/emergency_20240121.tar.gz',\r\n      createdAt: '2024-01-21 10:30:00',\r\n      completedAt: null\r\n    }\r\n  ];\r\n};\r\n\r\n// 获取备份列表\r\nconst fetchBackups = async () => {\r\n  try {\r\n    loading.value = true;\r\n    backups.value = generateMockBackups();\r\n    updateStats();\r\n    message.warning('数据加载失败，显示模拟数据');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 分类切换\r\nconst handleCategoryChange = (key) => {\r\n  activeCategory.value = key;\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 搜索和筛选\r\nconst handleSearch = () => { selectedRowKeys.value = []; };\r\nconst handleStatusFilter = () => { selectedRowKeys.value = []; };\r\n\r\n// 刷新数据\r\nconst refreshData = () => {\r\n  fetchBackups();\r\n  message.success('数据刷新成功');\r\n};\r\n\r\n// 显示创建备份弹窗\r\nconst showCreateBackupModal = () => {\r\n  const now = new Date();\r\n  const timestamp = now.toISOString().replace(/[:.]/g, '-').slice(0, 19);\r\n  backupFormData.value = {\r\n    name: `系统备份_${timestamp}`,\r\n    type: 'full',\r\n    scope: ['database', 'config'],\r\n    description: '',\r\n    compression: true\r\n  };\r\n  createBackupModalVisible.value = true;\r\n};\r\n\r\n// 创建备份\r\nconst handleCreateBackup = async () => {\r\n  try {\r\n    await backupFormRef.value.validate();\r\n    loading.value = true;\r\n    \r\n    const newBackup = {\r\n      id: Date.now(),\r\n      ...backupFormData.value,\r\n      status: 'running',\r\n      size: 0,\r\n      filePath: `/backups/${backupFormData.value.name.toLowerCase().replace(/\\s+/g, '_')}.tar.gz`,\r\n      createdAt: new Date().toLocaleString('zh-CN'),\r\n      completedAt: null\r\n    };\r\n    \r\n    backups.value.unshift(newBackup);\r\n    updateStats();\r\n    createBackupModalVisible.value = false;\r\n    message.success('备份任务已启动');\r\n    \r\n    // 模拟备份完成\r\n    setTimeout(() => {\r\n      const backup = backups.value.find(b => b.id === newBackup.id);\r\n      if (backup) {\r\n        backup.status = 'success';\r\n        backup.size = Math.floor(Math.random() * 1073741824) + 52428800; // 50MB - 1GB\r\n        backup.completedAt = new Date().toLocaleString('zh-CN');\r\n        updateStats();\r\n        message.success('备份完成');\r\n      }\r\n    }, 3000);\r\n  } catch (error) {\r\n    message.error('创建备份失败，请重试');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 取消创建备份\r\nconst handleCreateBackupCancel = () => {\r\n  createBackupModalVisible.value = false;\r\n  backupFormRef.value?.resetFields();\r\n};\r\n\r\n// 查看备份详情\r\nconst viewBackupDetail = (record) => {\r\n  selectedBackup.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\n// 下载单个备份\r\nconst downloadSingleBackup = (record) => {\r\n  message.success(`开始下载备份：${record.name}`);\r\n};\r\n\r\n// 批量下载\r\nconst batchDownload = () => {\r\n  message.success(`开始批量下载 ${selectedRowKeys.value.length} 个备份`);\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 下载备份\r\nconst downloadBackup = () => {\r\n  message.success('开始下载最新备份');\r\n};\r\n\r\n// 恢复备份\r\nconst restoreBackup = (record) => {\r\n  message.warning(`恢复备份功能需要谨慎操作：${record.name}`);\r\n};\r\n\r\n// 删除备份\r\nconst deleteBackup = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const index = backups.value.findIndex(backup => backup.id === record.id);\r\n    if (index !== -1) {\r\n      backups.value.splice(index, 1);\r\n    }\r\n    updateStats();\r\n    message.success('备份删除成功');\r\n  } catch (error) {\r\n    message.error('删除失败，请重试');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量删除\r\nconst batchDelete = () => {\r\n  backups.value = backups.value.filter(backup => !selectedRowKeys.value.includes(backup.id));\r\n  updateStats();\r\n  selectedRowKeys.value = [];\r\n  message.success('批量删除成功');\r\n};\r\n\r\n// 组件挂载\r\nonMounted(() => {\r\n  fetchBackups();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 数据备份页面特有的样式 */\r\n/* 所有通用样式已在 admin-common.css 中定义 */\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminManagement.vue",["321"],"<template>\r\n  <div class=\"admin-management\">\r\n    <div class=\"page-header\">\r\n      <h2 class=\"page-title\">\r\n        <CrownOutlined class=\"title-icon\" />\r\n        管理员控制面板\r\n      </h2>\r\n      <p class=\"page-desc\">管理系统用户权限、角色分配和系统设置</p>\r\n    </div>\r\n\r\n    <div class=\"admin-content\">\r\n      <!-- 用户管理 -->\r\n      <a-card class=\"management-card\" title=\"用户管理\">\r\n        <template #extra>\r\n          <a-button type=\"primary\" @click=\"showAddUserModal\">\r\n            <UserAddOutlined />\r\n            添加用户\r\n          </a-button>\r\n        </template>\r\n        \r\n        <a-table \r\n          :columns=\"userColumns\" \r\n          :data-source=\"users\" \r\n          :pagination=\"{ pageSize: 10 }\"\r\n          row-key=\"id\"\r\n        >\r\n          <template #bodyCell=\"{ column, record }\">\r\n            <template v-if=\"column.key === 'role'\">\r\n              <a-tag :color=\"getRoleColor(record.role)\">\r\n                {{ getRoleText(record.role) }}\r\n              </a-tag>\r\n            </template>\r\n            <template v-else-if=\"column.key === 'status'\">\r\n              <a-switch \r\n                v-model:checked=\"record.active\" \r\n                :checked-children=\"'启用'\" \r\n                :un-checked-children=\"'禁用'\"\r\n                @change=\"toggleUserStatus(record)\"\r\n              />\r\n            </template>\r\n            <template v-else-if=\"column.key === 'action'\">\r\n              <a-space>\r\n                <a-button type=\"text\" size=\"small\" @click=\"editUser(record)\">\r\n                  <EditOutlined />\r\n                </a-button>\r\n                <a-button type=\"text\" size=\"small\" @click=\"resetPassword(record)\">\r\n                  <KeyOutlined />\r\n                </a-button>\r\n                <a-popconfirm\r\n                  title=\"确定要删除这个用户吗？\"\r\n                  @confirm=\"deleteUser(record)\"\r\n                >\r\n                  <a-button type=\"text\" size=\"small\" danger>\r\n                    <DeleteOutlined />\r\n                  </a-button>\r\n                </a-popconfirm>\r\n              </a-space>\r\n            </template>\r\n          </template>\r\n        </a-table>\r\n      </a-card>\r\n\r\n      <!-- 角色权限管理 -->\r\n      <a-card class=\"management-card\" title=\"角色权限管理\">\r\n        <template #extra>\r\n          <a-button type=\"primary\" @click=\"showAddRoleModal\">\r\n            <TeamOutlined />\r\n            添加角色\r\n          </a-button>\r\n        </template>\r\n        \r\n        <div class=\"role-management\">\r\n          <div class=\"role-list\">\r\n            <div \r\n              v-for=\"role in roles\" \r\n              :key=\"role.id\"\r\n              class=\"role-item\"\r\n              :class=\"{ active: selectedRole?.id === role.id }\"\r\n              @click=\"selectRole(role)\"\r\n            >\r\n              <div class=\"role-info\">\r\n                <h4>{{ role.name }}</h4>\r\n                <p>{{ role.description }}</p>\r\n                <span class=\"user-count\">{{ role.userCount }} 个用户</span>\r\n              </div>\r\n              <div class=\"role-actions\">\r\n                <a-button type=\"text\" size=\"small\" @click.stop=\"editRole(role)\">\r\n                  <EditOutlined />\r\n                </a-button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"permissions-panel\" v-if=\"selectedRole\">\r\n            <h3>{{ selectedRole.name }} 权限设置</h3>\r\n            <a-tree\r\n              v-model:checkedKeys=\"selectedPermissions\"\r\n              checkable\r\n              :tree-data=\"permissionTree\"\r\n              :field-names=\"{ title: 'title', key: 'key', children: 'children' }\"\r\n              @check=\"onPermissionChange\"\r\n            />\r\n            <div class=\"permission-actions\">\r\n              <a-button type=\"primary\" @click=\"savePermissions\">\r\n                保存权限\r\n              </a-button>\r\n              <a-button @click=\"resetPermissions\">\r\n                重置\r\n              </a-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </a-card>\r\n\r\n      <!-- 系统设置 -->\r\n      <a-card class=\"management-card\" title=\"系统设置\">\r\n        <a-form :model=\"systemSettings\" layout=\"vertical\">\r\n          <a-row :gutter=\"24\">\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"系统名称\">\r\n                <a-input v-model:value=\"systemSettings.systemName\" />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"系统版本\">\r\n                <a-input v-model:value=\"systemSettings.version\" disabled />\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n          \r\n          <a-row :gutter=\"24\">\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"会话超时时间（分钟）\">\r\n                <a-input-number \r\n                  v-model:value=\"systemSettings.sessionTimeout\" \r\n                  :min=\"5\" \r\n                  :max=\"1440\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"密码强度要求\">\r\n                <a-select v-model:value=\"systemSettings.passwordStrength\">\r\n                  <a-select-option value=\"low\">低</a-select-option>\r\n                  <a-select-option value=\"medium\">中</a-select-option>\r\n                  <a-select-option value=\"high\">高</a-select-option>\r\n                </a-select>\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n          \r\n          <a-form-item>\r\n            <a-space>\r\n              <a-button type=\"primary\" @click=\"saveSystemSettings\">\r\n                保存设置\r\n              </a-button>\r\n              <a-button @click=\"resetSystemSettings\">\r\n                重置设置\r\n              </a-button>\r\n            </a-space>\r\n          </a-form-item>\r\n        </a-form>\r\n      </a-card>\r\n    </div>\r\n\r\n    <!-- 添加/编辑用户弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"userModalVisible\"\r\n      :title=\"editingUser ? '编辑用户' : '添加用户'\"\r\n      width=\"600px\"\r\n      @ok=\"saveUser\"\r\n      @cancel=\"cancelUserEdit\"\r\n    >\r\n      <a-form :model=\"userForm\" :rules=\"userRules\" ref=\"userFormRef\" layout=\"vertical\">\r\n        <a-form-item name=\"username\" label=\"用户名\">\r\n          <a-input \r\n            v-model:value=\"userForm.username\" \r\n            :disabled=\"!!editingUser\"\r\n            placeholder=\"请输入用户名\"\r\n          />\r\n        </a-form-item>\r\n        \r\n        <a-form-item name=\"email\" label=\"邮箱\">\r\n          <a-input v-model:value=\"userForm.email\" placeholder=\"请输入邮箱\" />\r\n        </a-form-item>\r\n        \r\n        <a-form-item name=\"role\" label=\"角色\">\r\n          <a-select v-model:value=\"userForm.role\" placeholder=\"请选择角色\">\r\n            <a-select-option value=\"admin\">管理员</a-select-option>\r\n            <a-select-option value=\"operator\">操作员</a-select-option>\r\n            <a-select-option value=\"viewer\">观察者</a-select-option>\r\n          </a-select>\r\n        </a-form-item>\r\n        \r\n        <a-form-item v-if=\"!editingUser\" name=\"password\" label=\"密码\">\r\n          <a-input-password v-model:value=\"userForm.password\" placeholder=\"请输入密码\" />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport {\r\n  CrownOutlined,\r\n  UserAddOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  KeyOutlined,\r\n  TeamOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// 用户管理\r\nconst users = ref([\r\n  {\r\n    id: 1,\r\n    username: 'admin',\r\n    email: 'admin@system.com',\r\n    role: 'admin',\r\n    active: true,\r\n    lastLogin: '2024-01-20 14:30:00'\r\n  },\r\n  {\r\n    id: 2,\r\n    username: 'user1',\r\n    email: 'user1@system.com',\r\n    role: 'operator',\r\n    active: true,\r\n    lastLogin: '2024-01-20 10:15:00'\r\n  },\r\n  {\r\n    id: 3,\r\n    username: 'user2',\r\n    email: 'user2@system.com',\r\n    role: 'viewer',\r\n    active: false,\r\n    lastLogin: '2024-01-19 16:45:00'\r\n  }\r\n]);\r\n\r\nconst userColumns = [\r\n  {\r\n    title: '用户名',\r\n    dataIndex: 'username',\r\n    key: 'username',\r\n  },\r\n  {\r\n    title: '邮箱',\r\n    dataIndex: 'email',\r\n    key: 'email',\r\n  },\r\n  {\r\n    title: '角色',\r\n    dataIndex: 'role',\r\n    key: 'role',\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'active',\r\n    key: 'status',\r\n  },\r\n  {\r\n    title: '最后登录',\r\n    dataIndex: 'lastLogin',\r\n    key: 'lastLogin',\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'action',\r\n    width: 150,\r\n  },\r\n];\r\n\r\n// 角色管理\r\nconst roles = ref([\r\n  {\r\n    id: 1,\r\n    name: '管理员',\r\n    description: '拥有系统所有权限',\r\n    userCount: 1,\r\n    permissions: ['dashboard', 'assets', 'users', 'settings']\r\n  },\r\n  {\r\n    id: 2,\r\n    name: '操作员',\r\n    description: '可以查看和操作资产信息',\r\n    userCount: 1,\r\n    permissions: ['dashboard', 'assets']\r\n  },\r\n  {\r\n    id: 3,\r\n    name: '观察者',\r\n    description: '只能查看监控数据',\r\n    userCount: 1,\r\n    permissions: ['dashboard']\r\n  }\r\n]);\r\n\r\nconst selectedRole = ref(null);\r\nconst selectedPermissions = ref([]);\r\n\r\nconst permissionTree = [\r\n  {\r\n    title: '监控概览',\r\n    key: 'dashboard',\r\n    children: [\r\n      { title: '查看监控数据', key: 'dashboard.view' },\r\n      { title: '导出报表', key: 'dashboard.export' }\r\n    ]\r\n  },\r\n  {\r\n    title: '资产管理',\r\n    key: 'assets',\r\n    children: [\r\n      { title: '查看资产', key: 'assets.view' },\r\n      { title: '添加资产', key: 'assets.create' },\r\n      { title: '编辑资产', key: 'assets.edit' },\r\n      { title: '删除资产', key: 'assets.delete' }\r\n    ]\r\n  },\r\n  {\r\n    title: '用户管理',\r\n    key: 'users',\r\n    children: [\r\n      { title: '查看用户', key: 'users.view' },\r\n      { title: '添加用户', key: 'users.create' },\r\n      { title: '编辑用户', key: 'users.edit' },\r\n      { title: '删除用户', key: 'users.delete' }\r\n    ]\r\n  },\r\n  {\r\n    title: '系统设置',\r\n    key: 'settings',\r\n    children: [\r\n      { title: '查看设置', key: 'settings.view' },\r\n      { title: '修改设置', key: 'settings.edit' }\r\n    ]\r\n  }\r\n];\r\n\r\n// 用户表单\r\nconst userModalVisible = ref(false);\r\nconst editingUser = ref(null);\r\nconst userForm = reactive({\r\n  username: '',\r\n  email: '',\r\n  role: '',\r\n  password: ''\r\n});\r\n\r\nconst userRules = {\r\n  username: [\r\n    { required: true, message: '请输入用户名', trigger: 'blur' }\r\n  ],\r\n  email: [\r\n    { required: true, message: '请输入邮箱', trigger: 'blur' },\r\n    { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\r\n  ],\r\n  role: [\r\n    { required: true, message: '请选择角色', trigger: 'change' }\r\n  ],\r\n  password: [\r\n    { required: true, message: '请输入密码', trigger: 'blur' },\r\n    { min: 6, message: '密码长度不能少于6位', trigger: 'blur' }\r\n  ]\r\n};\r\n\r\n// 系统设置\r\nconst systemSettings = reactive({\r\n  systemName: '运维监控系统',\r\n  version: 'v1.0.0',\r\n  sessionTimeout: 30,\r\n  passwordStrength: 'medium'\r\n});\r\n\r\n// 辅助函数\r\nconst getRoleColor = (role) => {\r\n  const colors = {\r\n    admin: 'red',\r\n    operator: 'blue',\r\n    viewer: 'green'\r\n  };\r\n  return colors[role] || 'default';\r\n};\r\n\r\nconst getRoleText = (role) => {\r\n  const texts = {\r\n    admin: '管理员',\r\n    operator: '操作员',\r\n    viewer: '观察者'\r\n  };\r\n  return texts[role] || role;\r\n};\r\n\r\n// 用户管理方法\r\nconst showAddUserModal = () => {\r\n  editingUser.value = null;\r\n  Object.assign(userForm, {\r\n    username: '',\r\n    email: '',\r\n    role: '',\r\n    password: ''\r\n  });\r\n  userModalVisible.value = true;\r\n};\r\n\r\nconst editUser = (user) => {\r\n  editingUser.value = user;\r\n  Object.assign(userForm, {\r\n    username: user.username,\r\n    email: user.email,\r\n    role: user.role,\r\n    password: ''\r\n  });\r\n  userModalVisible.value = true;\r\n};\r\n\r\nconst saveUser = () => {\r\n  if (editingUser.value) {\r\n    // 编辑用户\r\n    const index = users.value.findIndex(u => u.id === editingUser.value.id);\r\n    if (index !== -1) {\r\n      users.value[index] = {\r\n        ...users.value[index],\r\n        email: userForm.email,\r\n        role: userForm.role\r\n      };\r\n    }\r\n    message.success('用户信息更新成功');\r\n  } else {\r\n    // 添加新用户\r\n    const newUser = {\r\n      id: Date.now(),\r\n      username: userForm.username,\r\n      email: userForm.email,\r\n      role: userForm.role,\r\n      active: true,\r\n      lastLogin: '-'\r\n    };\r\n    users.value.push(newUser);\r\n    message.success('用户添加成功');\r\n  }\r\n  \r\n  userModalVisible.value = false;\r\n};\r\n\r\nconst cancelUserEdit = () => {\r\n  userModalVisible.value = false;\r\n};\r\n\r\nconst toggleUserStatus = (user) => {\r\n  message.success(`用户${user.username}已${user.active ? '启用' : '禁用'}`);\r\n};\r\n\r\nconst resetPassword = (user) => {\r\n  message.success(`已重置用户${user.username}的密码`);\r\n};\r\n\r\nconst deleteUser = (user) => {\r\n  const index = users.value.findIndex(u => u.id === user.id);\r\n  if (index !== -1) {\r\n    users.value.splice(index, 1);\r\n    message.success('用户删除成功');\r\n  }\r\n};\r\n\r\n// 角色权限管理方法\r\nconst selectRole = (role) => {\r\n  selectedRole.value = role;\r\n  selectedPermissions.value = [...role.permissions];\r\n};\r\n\r\nconst onPermissionChange = (checkedKeys) => {\r\n  selectedPermissions.value = checkedKeys;\r\n};\r\n\r\nconst savePermissions = () => {\r\n  if (selectedRole.value) {\r\n    selectedRole.value.permissions = [...selectedPermissions.value];\r\n    message.success('权限保存成功');\r\n  }\r\n};\r\n\r\nconst resetPermissions = () => {\r\n  if (selectedRole.value) {\r\n    selectedPermissions.value = [...selectedRole.value.permissions];\r\n  }\r\n};\r\n\r\n// 系统设置方法\r\nconst saveSystemSettings = () => {\r\n  message.success('系统设置保存成功');\r\n};\r\n\r\nconst resetSystemSettings = () => {\r\n  Object.assign(systemSettings, {\r\n    systemName: '运维监控系统',\r\n    version: 'v1.0.0',\r\n    sessionTimeout: 30,\r\n    passwordStrength: 'medium'\r\n  });\r\n  message.info('系统设置已重置');\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.admin-management {\r\n  padding: 24px;\r\n  background: #f5f5f5;\r\n  min-height: 100vh;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.page-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.title-icon {\r\n  font-size: 28px;\r\n  color: #faad14;\r\n}\r\n\r\n.page-desc {\r\n  color: #666;\r\n  font-size: 14px;\r\n  margin: 0;\r\n}\r\n\r\n.admin-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n}\r\n\r\n.management-card {\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n:deep(.management-card .ant-card-head) {\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n:deep(.management-card .ant-card-head-title) {\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n/* 角色管理样式 */\r\n.role-management {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 24px;\r\n  min-height: 400px;\r\n}\r\n\r\n.role-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.role-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  border: 1px solid #f0f0f0;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.role-item:hover {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n.role-item.active {\r\n  border-color: #1890ff;\r\n  background: #f0f8ff;\r\n}\r\n\r\n.role-info h4 {\r\n  margin: 0 0 4px 0;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n}\r\n\r\n.role-info p {\r\n  margin: 0 0 8px 0;\r\n  color: #666;\r\n  font-size: 12px;\r\n}\r\n\r\n.user-count {\r\n  background: #f0f0f0;\r\n  color: #666;\r\n  padding: 2px 8px;\r\n  border-radius: 12px;\r\n  font-size: 11px;\r\n}\r\n\r\n.permissions-panel {\r\n  border: 1px solid #f0f0f0;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n}\r\n\r\n.permissions-panel h3 {\r\n  margin: 0 0 16px 0;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n}\r\n\r\n.permission-actions {\r\n  margin-top: 16px;\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .admin-management {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .role-management {\r\n    grid-template-columns: 1fr;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .role-item {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .role-actions {\r\n    align-self: flex-end;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminLogs.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\FontDemo.vue",["322"],"<template>\r\n  <div class=\"font-demo-container\">\r\n    <a-card title=\"字体系统设计演示\" class=\"demo-card\">\r\n      <!-- 标题层级演示 -->\r\n      <div class=\"demo-section\">\r\n        <h3 class=\"section-title\">标题层级</h3>\r\n        <div class=\"demo-content\">\r\n          <h1>H1 主标题 - 20px Bold</h1>\r\n          <h2>H2 大标题 - 18px Semibold</h2>\r\n          <h3>H3 中标题 - 16px Semibold</h3>\r\n          <h4>H4 小标题 - 14px Medium</h4>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 文本大小演示 -->\r\n      <div class=\"demo-section\">\r\n        <h3 class=\"section-title\">文本大小</h3>\r\n        <div class=\"demo-content\">\r\n          <p class=\"text-large\">大文本 - 16px Normal (重要内容)</p>\r\n          <p class=\"text-base\">基础文本 - 14px Normal (正文内容)</p>\r\n          <p class=\"text-small\">小文本 - 13px Normal (表格内容)</p>\r\n          <p class=\"text-xs\">超小文本 - 12px Normal (辅助信息)</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 字体重量演示 -->\r\n      <div class=\"demo-section\">\r\n        <h3 class=\"section-title\">字体重量</h3>\r\n        <div class=\"demo-content\">\r\n          <p class=\"font-light\">Light 300 - 轻量文字</p>\r\n          <p class=\"font-normal\">Normal 400 - 正常文字</p>\r\n          <p class=\"font-medium\">Medium 500 - 中等文字 (表单标签、按钮)</p>\r\n          <p class=\"font-semibold\">Semibold 600 - 半粗体 (表格表头、小标题)</p>\r\n          <p class=\"font-bold\">Bold 700 - 粗体 (重要标题)</p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 组件字体演示 -->\r\n      <div class=\"demo-section\">\r\n        <h3 class=\"section-title\">组件字体应用</h3>\r\n        <div class=\"demo-content\">\r\n          <!-- 按钮 -->\r\n          <div class=\"component-demo\">\r\n            <h4>按钮 (14px Medium)</h4>\r\n            <a-space>\r\n              <a-button type=\"primary\">主要按钮</a-button>\r\n              <a-button>默认按钮</a-button>\r\n              <a-button type=\"dashed\">虚线按钮</a-button>\r\n            </a-space>\r\n          </div>\r\n\r\n          <!-- 表单 -->\r\n          <div class=\"component-demo\">\r\n            <h4>表单 (标签14px Medium, 输入框14px Normal)</h4>\r\n            <a-form layout=\"vertical\">\r\n              <a-row :gutter=\"16\">\r\n                <a-col :span=\"12\">\r\n                  <a-form-item label=\"用户名\">\r\n                    <a-input placeholder=\"请输入用户名\" />\r\n                  </a-form-item>\r\n                </a-col>\r\n                <a-col :span=\"12\">\r\n                  <a-form-item label=\"邮箱地址\">\r\n                    <a-input placeholder=\"请输入邮箱\" />\r\n                  </a-form-item>\r\n                </a-col>\r\n              </a-row>\r\n            </a-form>\r\n          </div>\r\n\r\n          <!-- 表格 -->\r\n          <div class=\"component-demo\">\r\n            <h4>表格 (表头14px Semibold, 内容13px Normal)</h4>\r\n            <a-table \r\n              :columns=\"tableColumns\" \r\n              :data-source=\"tableData\" \r\n              :pagination=\"false\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n\r\n          <!-- 标签 -->\r\n          <div class=\"component-demo\">\r\n            <h4>标签 (12px Medium)</h4>\r\n            <a-space>\r\n              <a-tag color=\"blue\">蓝色标签</a-tag>\r\n              <a-tag color=\"green\">绿色标签</a-tag>\r\n              <a-tag color=\"orange\">橙色标签</a-tag>\r\n              <a-tag color=\"red\">红色标签</a-tag>\r\n            </a-space>\r\n          </div>\r\n\r\n          <!-- 卡片 -->\r\n          <div class=\"component-demo\">\r\n            <h4>卡片 (标题16px Semibold, 内容14px Normal)</h4>\r\n            <a-card title=\"卡片标题\" style=\"width: 300px\">\r\n              <p>这是卡片的内容区域，展示了统一的字体设计。文字清晰易读，层次分明。</p>\r\n            </a-card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 字体变量参考 -->\r\n      <div class=\"demo-section\">\r\n        <h3 class=\"section-title\">CSS变量参考</h3>\r\n        <div class=\"demo-content\">\r\n          <a-descriptions bordered size=\"small\">\r\n            <a-descriptions-item label=\"字体族\">--font-family</a-descriptions-item>\r\n            <a-descriptions-item label=\"超小字体\">--font-size-xs (12px)</a-descriptions-item>\r\n            <a-descriptions-item label=\"小字体\">--font-size-sm (13px)</a-descriptions-item>\r\n            <a-descriptions-item label=\"基础字体\">--font-size-base (14px)</a-descriptions-item>\r\n            <a-descriptions-item label=\"中等字体\">--font-size-md (16px)</a-descriptions-item>\r\n            <a-descriptions-item label=\"大字体\">--font-size-lg (18px)</a-descriptions-item>\r\n            <a-descriptions-item label=\"超大字体\">--font-size-xl (20px)</a-descriptions-item>\r\n            <a-descriptions-item label=\"轻量字重\">--font-weight-light (300)</a-descriptions-item>\r\n            <a-descriptions-item label=\"正常字重\">--font-weight-normal (400)</a-descriptions-item>\r\n            <a-descriptions-item label=\"中等字重\">--font-weight-medium (500)</a-descriptions-item>\r\n            <a-descriptions-item label=\"半粗字重\">--font-weight-semibold (600)</a-descriptions-item>\r\n            <a-descriptions-item label=\"粗体字重\">--font-weight-bold (700)</a-descriptions-item>\r\n          </a-descriptions>\r\n        </div>\r\n      </div>\r\n    </a-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\n\r\n// 表格数据\r\nconst tableColumns = [\r\n  {\r\n    title: '姓名',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n  },\r\n  {\r\n    title: '年龄',\r\n    dataIndex: 'age',\r\n    key: 'age',\r\n  },\r\n  {\r\n    title: '职位',\r\n    dataIndex: 'position',\r\n    key: 'position',\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n  },\r\n];\r\n\r\nconst tableData = [\r\n  {\r\n    key: '1',\r\n    name: '张三',\r\n    age: 28,\r\n    position: '前端工程师',\r\n    status: '在职',\r\n  },\r\n  {\r\n    key: '2',\r\n    name: '李四',\r\n    age: 32,\r\n    position: '后端工程师',\r\n    status: '在职',\r\n  },\r\n  {\r\n    key: '3',\r\n    name: '王五',\r\n    age: 25,\r\n    position: 'UI设计师',\r\n    status: '试用期',\r\n  },\r\n];\r\n</script>\r\n\r\n<style scoped>\r\n.font-demo-container {\r\n  padding: 24px;\r\n  background: #f5f5f5;\r\n  min-height: 100vh;\r\n}\r\n\r\n.demo-card {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.demo-section {\r\n  margin-bottom: 32px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.demo-section:last-child {\r\n  border-bottom: none;\r\n  margin-bottom: 0;\r\n}\r\n\r\n.section-title {\r\n  color: var(--primary-color);\r\n  margin-bottom: 16px;\r\n  padding-left: 12px;\r\n  border-left: 4px solid var(--primary-color);\r\n}\r\n\r\n.demo-content {\r\n  padding-left: 16px;\r\n}\r\n\r\n.component-demo {\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.component-demo h4 {\r\n  margin-bottom: 12px;\r\n  color: var(--gray-600);\r\n}\r\n\r\n/* 演示文本样式 */\r\n.demo-content p {\r\n  margin-bottom: 8px;\r\n  padding: 8px 12px;\r\n  background: white;\r\n  border-radius: 4px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.demo-content h1,\r\n.demo-content h2,\r\n.demo-content h3,\r\n.demo-content h4 {\r\n  margin-bottom: 8px;\r\n  padding: 8px 12px;\r\n  background: white;\r\n  border-radius: 4px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\ServerList.vue",["323","324","325","326","327","328","329","330","331","332","333","334"],"<template>\r\n  <div class=\"server-list-container\">\r\n    <div class=\"page-header\">\r\n      <h1>服务器管理</h1>\r\n      <p>管理所有服务器资产</p>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"search-card\">\r\n      <a-row gutter=\"[16, 16]\">\r\n        <a-col :span=\"6\">\r\n          <a-input v-model:value=\"searchKeyword\" placeholder=\"服务器名称/IP\" allow-clear />\r\n        </a-col>\r\n        <a-col :span=\"6\">\r\n          <a-select v-model:value=\"serverStatus\" placeholder=\"服务器状态\" allow-clear>\r\n            <a-select-option value=\"online\">在线</a-select-option>\r\n            <a-select-option value=\"offline\">离线</a-select-option>\r\n            <a-select-option value=\"maintenance\">维护中</a-select-option>\r\n          </a-select>\r\n        </a-col>\r\n        <a-col :span=\"6\">\r\n          <a-select v-model:value=\"serverType\" placeholder=\"服务器类型\" allow-clear>\r\n            <a-select-option value=\"physical\">物理服务器</a-select-option>\r\n            <a-select-option value=\"virtual\">虚拟服务器</a-select-option>\r\n          </a-select>\r\n        </a-col>\r\n        <a-col :span=\"6\">\r\n          <a-row gutter=\"16\">\r\n            <a-col :span=\"12\">\r\n              <a-button type=\"primary\" @click=\"handleSearch\">搜索</a-button>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-button @click=\"handleReset\">重置</a-button>\r\n            </a-col>\r\n          </a-row>\r\n        </a-col>\r\n      </a-row>\r\n    </a-card>\r\n    \r\n    <div class=\"action-bar\">\r\n      <a-button type=\"primary\" icon=\"plus\">新增服务器</a-button>\r\n      <a-button icon=\"download\">导出数据</a-button>\r\n      <a-button icon=\"sync\">刷新状态</a-button>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"table-card\">\r\n      <a-table \r\n        :columns=\"columns\" \r\n        :data-source=\"serversData\" \r\n        row-key=\"id\" \r\n        :pagination=\"pagination\" \r\n        @change=\"handleTableChange\"\r\n      >\r\n        <template #headerCell=\"{ column }\">\r\n          <span v-if=\"column.key === 'id'\">{{ column.title }} ({{ serversData.length }})</span>\r\n          <span v-else>{{ column.title }}</span>\r\n        </template>\r\n        <template #bodyCell=\"{ column, record }\">\r\n          <template v-if=\"column.key === 'status'\">\r\n            <span v-if=\"record.status === 'online'\" class=\"status-tag online\">在线</span>\r\n            <span v-else-if=\"record.status === 'offline'\" class=\"status-tag offline\">离线</span>\r\n            <span v-else-if=\"record.status === 'maintenance'\" class=\"status-tag maintenance\">维护中</span>\r\n          </template>\r\n          <template v-else-if=\"column.key === 'operation'\">\r\n            <a-button type=\"link\" @click=\"handleView(record.id)\">查看</a-button>\r\n            <a-button type=\"link\" @click=\"handleEdit(record.id)\">编辑</a-button>\r\n            <a-button type=\"link\" danger @click=\"handleDelete(record.id)\">删除</a-button>\r\n          </template>\r\n        </template>\r\n      </a-table>\r\n    </a-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { Input, Select, Button, Table, Card, Row, Col } from 'ant-design-vue';\r\nimport { PlusOutlined, DownloadOutlined, ReloadOutlined } from '@ant-design/icons-vue';\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst serverStatus = ref('');\r\nconst serverType = ref('');\r\n\r\n// 分页配置\r\nconst pagination = {\r\n  current: 1,\r\n  pageSize: 10,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n};\r\n\r\n// 模拟数据\r\nconst serversData = [\r\n  {\r\n    id: 'S001',\r\n    name: '服务器A-001',\r\n    type: '物理服务器',\r\n    model: 'Dell R740',\r\n    serialNumber: 'SN20230001',\r\n    ipAddress: '192.168.1.101',\r\n    cpu: 'Intel Xeon Gold 6230 2.1GHz',\r\n    memory: '64GB DDR4',\r\n    storage: '2x 1TB SSD + 4x 4TB HDD',\r\n    os: 'CentOS 7.9',\r\n    location: '数据中心A-1楼',\r\n    department: '技术部',\r\n    owner: '张三',\r\n    status: 'online',\r\n    purchaseDate: '2023-01-15',\r\n    warrantyEndDate: '2026-01-14'\r\n  },\r\n  {\r\n    id: 'S002',\r\n    name: '服务器A-002',\r\n    type: '物理服务器',\r\n    model: 'HP ProLiant DL380 Gen10',\r\n    serialNumber: 'SN20230003',\r\n    ipAddress: '192.168.1.102',\r\n    cpu: 'Intel Xeon Silver 4210 2.2GHz',\r\n    memory: '32GB DDR4',\r\n    storage: '2x 500GB SSD + 2x 2TB HDD',\r\n    os: 'Ubuntu 20.04',\r\n    location: '数据中心A-1楼',\r\n    department: '技术部',\r\n    owner: '张三',\r\n    status: 'offline',\r\n    purchaseDate: '2023-01-15',\r\n    warrantyEndDate: '2026-01-14'\r\n  },\r\n  {\r\n    id: 'S003',\r\n    name: '虚拟服务器A-001',\r\n    type: '虚拟服务器',\r\n    model: 'VMware ESXi',\r\n    serialNumber: 'VM20230001',\r\n    ipAddress: '192.168.1.201',\r\n    cpu: '4 vCPUs',\r\n    memory: '16GB',\r\n    storage: '100GB',\r\n    os: 'Windows Server 2019',\r\n    location: '虚拟化平台',\r\n    department: '财务部',\r\n    owner: '李四',\r\n    status: 'online',\r\n    purchaseDate: '2023-03-01',\r\n    warrantyEndDate: '2026-02-28'\r\n  },\r\n  {\r\n    id: 'S004',\r\n    name: '虚拟服务器A-002',\r\n    type: '虚拟服务器',\r\n    model: 'VMware ESXi',\r\n    serialNumber: 'VM20230002',\r\n    ipAddress: '192.168.1.202',\r\n    cpu: '8 vCPUs',\r\n    memory: '32GB',\r\n    storage: '200GB',\r\n    os: 'CentOS 8',\r\n    location: '虚拟化平台',\r\n    department: '市场部',\r\n    owner: '王五',\r\n    status: 'maintenance',\r\n    purchaseDate: '2023-03-01',\r\n    warrantyEndDate: '2026-02-28'\r\n  },\r\n  {\r\n    id: 'S005',\r\n    name: '服务器B-001',\r\n    type: '物理服务器',\r\n    model: 'IBM x3650 M5',\r\n    serialNumber: 'SN20230005',\r\n    ipAddress: '192.168.1.103',\r\n    cpu: 'Intel Xeon E5-2680 v4 2.4GHz',\r\n    memory: '128GB DDR4',\r\n    storage: '4x 2TB SSD + 8x 8TB HDD',\r\n    os: 'Red Hat Enterprise Linux 8',\r\n    location: '数据中心A-2楼',\r\n    department: '技术部',\r\n    owner: '赵六',\r\n    status: 'online',\r\n    purchaseDate: '2023-02-10',\r\n    warrantyEndDate: '2026-02-09'\r\n  }\r\n];\r\n\r\n// 表格列定义\r\nconst columns = [\r\n  {\r\n    title: '服务器编号',\r\n    dataIndex: 'id',\r\n    key: 'id',\r\n    fixed: 'left',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '服务器名称',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '类型',\r\n    dataIndex: 'type',\r\n    key: 'type',\r\n    width: 100\r\n  },\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ipAddress',\r\n    key: 'ipAddress',\r\n    width: 150\r\n  },\r\n  {\r\n    title: 'CPU',\r\n    dataIndex: 'cpu',\r\n    key: 'cpu',\r\n    width: 200\r\n  },\r\n  {\r\n    title: '内存',\r\n    dataIndex: 'memory',\r\n    key: 'memory',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '操作系统',\r\n    dataIndex: 'os',\r\n    key: 'os',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '所在位置',\r\n    dataIndex: 'location',\r\n    key: 'location',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 150\r\n  }\r\n];\r\n\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  console.log('搜索条件:', {\r\n    keyword: searchKeyword.value,\r\n    status: serverStatus.value,\r\n    type: serverType.value\r\n  });\r\n  // 这里应该调用API获取数据\r\n};\r\n\r\n// 处理重置\r\nconst handleReset = () => {\r\n  searchKeyword.value = '';\r\n  serverStatus.value = '';\r\n  serverType.value = '';\r\n};\r\n\r\n// 处理表格分页变化\r\nconst handleTableChange = (pagination, filters, sorter) => {\r\n  console.log('分页变化:', pagination);\r\n  // 这里应该根据分页信息重新获取数据\r\n};\r\n\r\n// 处理查看操作\r\nconst handleView = (id) => {\r\n  console.log('查看服务器:', id);\r\n  // 这里应该跳转到服务器详情页面\r\n};\r\n\r\n// 处理编辑操作\r\nconst handleEdit = (id) => {\r\n  console.log('编辑服务器:', id);\r\n  // 这里应该跳转到服务器编辑页面\r\n};\r\n\r\n// 处理删除操作\r\nconst handleDelete = (id) => {\r\n  console.log('删除服务器:', id);\r\n  // 这里应该调用API删除服务器\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.server-list-container {\r\n  padding: 24px;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.page-header h1 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.page-header p {\r\n  margin: 0;\r\n  color: rgba(0, 0, 0, 0.45);\r\n}\r\n\r\n.search-card {\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n}\r\n\r\n.action-bar {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.table-card {\r\n  overflow: hidden;\r\n}\r\n\r\n.status-tag {\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.status-tag.online {\r\n  background-color: #f6ffed;\r\n  color: #52c41a;\r\n  border: 1px solid #b7eb8f;\r\n}\r\n\r\n.status-tag.offline {\r\n  background-color: #fff2e8;\r\n  color: #fa8c16;\r\n  border: 1px solid #ffd591;\r\n}\r\n\r\n.status-tag.maintenance {\r\n  background-color: #e6f7ff;\r\n  color: #1890ff;\r\n  border: 1px solid #91d5ff;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\AssetDashboard.vue",["335","336","337"],"<template>\r\n  <div class=\"dashboard-container\">    \r\n    <!-- 统计卡片区域 -->\r\n    <DynamicMetrics \r\n      v-if=\"showMetrics\"\r\n      :config=\"metricsConfig\" \r\n      :metrics=\"metrics\"\r\n      @metric-click=\"handleMetricClick\"\r\n      @metrics-loaded=\"handleMetricsLoaded\"\r\n    />\r\n    \r\n    <!-- 主要内容区域 -->\r\n    <div class=\"main-content\" :class=\"{ 'no-alerts': !showAlerts }\">\r\n      <!-- 左侧告警区域 -->\r\n      <div v-if=\"showAlerts\" class=\"alerts-section\">\r\n        <a-card class=\"alerts-card\" :bordered=\"false\">\r\n          <template #title>\r\n            <div class=\"alerts-header\">\r\n              <span class=\"alerts-title\">最新告警</span>\r\n              <div class=\"alerts-stats\">\r\n                <div class=\"stat-item total\">\r\n                  <span class=\"stat-number\">{{ totalAlerts }}</span>\r\n                  <span class=\"stat-label\">总告警</span>\r\n                </div>\r\n                <div class=\"stat-item unhandled\">\r\n                  <span class=\"stat-number\">{{ unhandledAlerts }}</span>\r\n                  <span class=\"stat-label\">未处理</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </template>\r\n          <template #extra>\r\n            <a-button type=\"link\" size=\"small\">查看全部</a-button>\r\n          </template>\r\n          <div class=\"alerts-list\">\r\n            <div \r\n              v-for=\"alert in recentAlerts\" \r\n              :key=\"alert.id\"\r\n              class=\"alert-item\"\r\n              :class=\"[`alert-${alert.level}`, { 'alert-unhandled': !alert.handled }]\"\r\n            >\r\n              <div class=\"alert-indicator\"></div>\r\n              <div class=\"alert-icon\">\r\n                <WarningOutlined v-if=\"alert.level === 'warning'\" />\r\n                <ExclamationCircleOutlined v-if=\"alert.level === 'error'\" />\r\n                <InfoCircleOutlined v-if=\"alert.level === 'info'\" />\r\n              </div>\r\n              <div class=\"alert-content\">\r\n                <div class=\"alert-title\">{{ alert.title }}</div>\r\n                <div class=\"alert-meta\">\r\n                  <span class=\"alert-time\">{{ alert.time }}</span>\r\n                  <span class=\"alert-host\">{{ alert.host }}</span>\r\n                  <a-tag v-if=\"!alert.handled\" class=\"alert-status\" color=\"orange\" size=\"small\">未处理</a-tag>\r\n                  <a-tag v-else class=\"alert-status\" color=\"green\" size=\"small\">已处理</a-tag>\r\n                </div>\r\n              </div>\r\n              <div class=\"alert-actions\">\r\n                <a-button v-if=\"!alert.handled\" type=\"text\" size=\"small\" @click=\"handleAlert(alert.id)\">\r\n                  处理\r\n                </a-button>\r\n              </div>\r\n            </div>\r\n            <div v-if=\"recentAlerts.length === 0\" class=\"empty-alerts\">\r\n              <CheckCircleOutlined class=\"empty-icon\" />\r\n              <p>暂无告警信息</p>\r\n            </div>\r\n          </div>\r\n        </a-card>\r\n      </div>\r\n      \r\n      <!-- 右侧监控数据区域 -->\r\n      <div class=\"monitoring-section\">\r\n        <div class=\"monitoring-header\">\r\n          <h3>监控数据</h3>\r\n          <a-button type=\"text\" size=\"small\" @click=\"showCardManager\">\r\n            <SettingOutlined />\r\n          </a-button>\r\n        </div>\r\n        <div class=\"monitoring-grid\">\r\n          <MonitoringCard\r\n            v-for=\"card in monitoringCards\"\r\n            :key=\"card.id\"\r\n            :card=\"card\"\r\n            @refresh=\"handleRefreshCard\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 卡片管理弹窗 -->\r\n    <CardManager\r\n      v-model:open=\"cardManagerVisible\"\r\n      v-model=\"monitoringCards\"\r\n      v-model:showAlertCard=\"showAlerts\"\r\n      v-model:showMetricsCard=\"showMetrics\"\r\n      :alert-data=\"recentAlerts\"\r\n      @save=\"handleSaveCards\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref, computed } from 'vue';\r\nimport DynamicMetrics from '@/components/business/DynamicMetrics.vue';\r\nimport {\r\n  WarningOutlined,\r\n  ExclamationCircleOutlined,\r\n  InfoCircleOutlined,\r\n  CheckCircleOutlined,\r\n  SettingOutlined,\r\n  ReloadOutlined,\r\n  EditOutlined,\r\n  PlusOutlined\r\n} from '@ant-design/icons-vue';\r\nimport MonitoringCard from '@/components/business/MonitoringCard.vue';\r\nimport CardManager from '@/components/admin/CardManager.vue';\r\n\r\n// 动态指标配置\r\nconst metricsConfig = ref({\r\n  grid: {\r\n    columns: 'repeat(auto-fit, minmax(200px, 1fr))',\r\n    gap: '16px'\r\n  },\r\n  animation: {\r\n    enabled: true,\r\n    delay: 0.1\r\n  }\r\n});\r\n\r\n// 卡片管理相关\r\nconst cardManagerVisible = ref(false);\r\nconst showAlerts = ref(true); // 默认显示告警卡片\r\nconst showMetrics = ref(true); // 默认显示统计卡片\r\n\r\n// 最新告警数据\r\nconst recentAlerts = reactive([\r\n  {\r\n    id: 1,\r\n    title: 'CPU使用率过高',\r\n    time: '2分钟前',\r\n    host: 'web-server-01',\r\n    level: 'warning',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 2,\r\n    title: '磁盘空间不足',\r\n    time: '5分钟前',\r\n    host: 'db-server-02',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 3,\r\n    title: '内存使用率异常',\r\n    time: '10分钟前',\r\n    host: 'app-server-03',\r\n    level: 'warning',\r\n    handled: true\r\n  },\r\n  {\r\n    id: 4,\r\n    title: '网络连接超时',\r\n    time: '15分钟前',\r\n    host: 'proxy-server-01',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 5,\r\n    title: '服务重启完成',\r\n    time: '20分钟前',\r\n    host: 'web-server-02',\r\n    level: 'info',\r\n    handled: true\r\n  },\r\n  {\r\n    id: 2,\r\n    title: '磁盘空间不足',\r\n    time: '5分钟前',\r\n    host: 'db-server-02',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 3,\r\n    title: '内存使用率异常',\r\n    time: '10分钟前',\r\n    host: 'app-server-03',\r\n    level: 'warning',\r\n    handled: true\r\n  },\r\n  {\r\n    id: 4,\r\n    title: '网络连接超时',\r\n    time: '15分钟前',\r\n    host: 'proxy-server-01',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 5,\r\n    title: '服务重启完成',\r\n    time: '20分钟前',\r\n    host: 'web-server-02',\r\n    level: 'info',\r\n    handled: true\r\n  },\r\n  {\r\n    id: 2,\r\n    title: '磁盘空间不足',\r\n    time: '5分钟前',\r\n    host: 'db-server-02',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 3,\r\n    title: '内存使用率异常',\r\n    time: '10分钟前',\r\n    host: 'app-server-03',\r\n    level: 'warning',\r\n    handled: true\r\n  },\r\n  {\r\n    id: 4,\r\n    title: '网络连接超时',\r\n    time: '15分钟前',\r\n    host: 'proxy-server-01',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 5,\r\n    title: '服务重启完成',\r\n    time: '20分钟前',\r\n    host: 'web-server-02',\r\n    level: 'info',\r\n    handled: true\r\n  },\r\n  {\r\n    id: 2,\r\n    title: '磁盘空间不足',\r\n    time: '5分钟前',\r\n    host: 'db-server-02',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 3,\r\n    title: '内存使用率异常',\r\n    time: '10分钟前',\r\n    host: 'app-server-03',\r\n    level: 'warning',\r\n    handled: true\r\n  },\r\n  {\r\n    id: 4,\r\n    title: '网络连接超时',\r\n    time: '15分钟前',\r\n    host: 'proxy-server-01',\r\n    level: 'error',\r\n    handled: false\r\n  },\r\n  {\r\n    id: 5,\r\n    title: '服务重启完成',\r\n    time: '20分钟前',\r\n    host: 'web-server-02',\r\n    level: 'info',\r\n    handled: true\r\n  }\r\n]);\r\n\r\n// 计算告警统计\r\nconst totalAlerts = computed(() => recentAlerts.length);\r\nconst unhandledAlerts = computed(() => recentAlerts.filter(alert => !alert.handled).length);\r\n\r\n// 监控卡片配置\r\nconst monitoringCards = reactive([\r\n  {\r\n    id: 'cpu-top5',\r\n    title: 'CPU使用率 TOP5',\r\n    type: 'chart',\r\n    chartType: 'bar',\r\n    data: [\r\n      { name: 'web-server-01', value: 85.2 },\r\n      { name: 'db-server-02', value: 78.5 },\r\n      { name: 'app-server-03', value: 72.8 },\r\n      { name: 'proxy-server-01', value: 68.3 },\r\n      { name: 'cache-server-01', value: 65.7 }\r\n    ],\r\n    unit: '%',\r\n    color: '#ff7875'\r\n  },\r\n  {\r\n    id: 'memory-top5',\r\n    title: '内存使用率 TOP5',\r\n    type: 'chart',\r\n    chartType: 'bar',\r\n    data: [\r\n      { name: 'db-server-02', value: 92.1 },\r\n      { name: 'app-server-03', value: 86.4 },\r\n      { name: 'web-server-01', value: 79.8 },\r\n      { name: 'cache-server-01', value: 74.2 },\r\n      { name: 'proxy-server-01', value: 68.9 }\r\n    ],\r\n    unit: '%',\r\n    color: '#5cdbd3'\r\n  },\r\n  {\r\n    id: 'disk-top5',\r\n    title: '磁盘使用率 TOP5',\r\n    type: 'chart',\r\n    chartType: 'bar',\r\n    data: [\r\n      { name: 'log-server-01', value: 95.3 },\r\n      { name: 'db-server-02', value: 88.7 },\r\n      { name: 'backup-server-01', value: 82.1 },\r\n      { name: 'web-server-01', value: 76.5 },\r\n      { name: 'app-server-03', value: 71.2 }\r\n    ],\r\n    unit: '%',\r\n    color: '#ffc53d'\r\n  },\r\n  {\r\n    id: 'network-top5',\r\n    title: '网络流量 TOP5',\r\n    type: 'chart',\r\n    chartType: 'line',\r\n    data: [\r\n      { name: 'proxy-server-01', value: 156.8 },\r\n      { name: 'web-server-01', value: 124.3 },\r\n      { name: 'db-server-02', value: 98.7 },\r\n      { name: 'app-server-03', value: 87.2 },\r\n      { name: 'cache-server-01', value: 76.5 }\r\n    ],\r\n    unit: 'MB/s',\r\n    color: '#40a9ff'\r\n  }\r\n]);\r\n\r\n// 指标数据\r\nconst metrics = reactive([\r\n  {\r\n    id: 'total-assets',\r\n    label: '总资产数量',\r\n    value: 128,\r\n    change: '+5%',\r\n    trend: 'up',\r\n    icon: 'DatabaseOutlined',\r\n    iconColor: '#1890ff',\r\n    iconBgColor: 'linear-gradient(135deg, #e6f7ff, #bae7ff)'\r\n  },\r\n  {\r\n    id: 'servers',\r\n    label: '服务器数量',\r\n    value: 64,\r\n    change: '+2%',\r\n    trend: 'up',\r\n    icon: 'CloudServerOutlined',\r\n    iconColor: '#52c41a',\r\n    iconBgColor: 'linear-gradient(135deg, #f6ffed, #d9f7be)'\r\n  },\r\n  {\r\n    id: 'network-devices',\r\n    label: '网络设备',\r\n    value: 32,\r\n    change: '-1%',\r\n    trend: 'down',\r\n    icon: 'GlobalOutlined',\r\n    iconColor: '#fa8c16',\r\n    iconBgColor: 'linear-gradient(135deg, #fff7e6, #ffd591)'\r\n  },\r\n  {\r\n    id: 'online-rate',\r\n    label: '在线率',\r\n    value: '98.7%',\r\n    change: '+0.5%',\r\n    trend: 'up',\r\n    icon: 'CheckCircleOutlined',\r\n    iconColor: '#13c2c2',\r\n    iconBgColor: 'linear-gradient(135deg, #e6fffb, #b5f5ec)'\r\n  },\r\n  {\r\n    id: 'warning-alerts',\r\n    label: '告警数量',\r\n    value: 3,\r\n    change: '-2',\r\n    trend: 'down',\r\n    icon: 'WarningOutlined',\r\n    iconColor: '#faad14',\r\n    iconBgColor: 'linear-gradient(135deg, #fffbe6, #fff1b8)'\r\n  },\r\n  {\r\n    id: 'monthly-growth',\r\n    label: '月增长率',\r\n    value: '12.3%',\r\n    change: '+1.2%',\r\n    trend: 'up',\r\n    icon: 'RiseOutlined',\r\n    iconColor: '#722ed1',\r\n    iconBgColor: 'linear-gradient(135deg, #f9f0ff, #efdbff)'\r\n  }\r\n]);\r\n\r\n// 处理指标点击事件\r\nconst handleMetricClick = (metric) => {\r\n  console.log('点击了指标:', metric);\r\n  // 可以在这里处理指标点击逻辑，比如跳转到详细页面\r\n};\r\n\r\n// 处理指标数据加载完成事件\r\nconst handleMetricsLoaded = (data) => {\r\n  console.log('指标数据加载完成:', data);\r\n  // 可以在这里处理数据加载完成后的逻辑\r\n};\r\n\r\n// 显示卡片管理弹窗\r\nconst showCardManager = () => {\r\n  cardManagerVisible.value = true;\r\n};\r\n\r\n// 保存卡片配置\r\nconst handleSaveCards = (data) => {\r\n  if (data.cards) {\r\n    // 更新本地存储\r\n    localStorage.setItem('monitoringCards', JSON.stringify(data.cards));\r\n  }\r\n  if (data.showAlert !== undefined) {\r\n    localStorage.setItem('showAlerts', JSON.stringify(data.showAlert));\r\n  }\r\n  if (data.showMetrics !== undefined) {\r\n    localStorage.setItem('showMetrics', JSON.stringify(data.showMetrics));\r\n  }\r\n};\r\n\r\n// 处理告警\r\nconst handleAlert = (alertId) => {\r\n  const alert = recentAlerts.find(a => a.id === alertId);\r\n  if (alert) {\r\n    alert.handled = true;\r\n  }\r\n};\r\n\r\n// 处理卡片刷新\r\nconst handleRefreshCard = (cardId) => {\r\n  console.log('刷新卡片:', cardId);\r\n  // 重新获取卡片数据\r\n};\r\n\r\n// 动态添加指标的方法\r\nconst addMetric = (newMetric) => {\r\n  metrics.push(newMetric);\r\n};\r\n\r\n// 动态更新指标的方法\r\nconst updateMetric = (metricId, newData) => {\r\n  const index = metrics.findIndex(m => m.id === metricId);\r\n  if (index !== -1) {\r\n    Object.assign(metrics[index], newData);\r\n  }\r\n};\r\n\r\n// 暴露方法供外部调用\r\ndefineExpose({\r\n  addMetric,\r\n  updateMetric\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard-container {\r\n  padding: 0;\r\n  animation: fadeIn 0.6s ease-out;\r\n}\r\n\r\n/* 主要内容区域 */\r\n.main-content {\r\n  display: grid;\r\n  grid-template-columns: 400px 1fr;\r\n  gap: 20px;\r\n  margin-top: 24px;\r\n}\r\n\r\n.main-content.no-alerts {\r\n  grid-template-columns: 1fr;\r\n}\r\n.alerts-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.alerts-card {\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(24, 144, 255, 0.06);\r\n  border: 1px solid rgba(24, 144, 255, 0.04);\r\n  overflow: hidden;\r\n  height: 100%;\r\n}\r\n\r\n:deep(.alerts-card .ant-card-head) {\r\n  background: linear-gradient(135deg, #f8faff 0%, #ffffff 100%);\r\n  border-bottom: 1px solid rgba(24, 144, 255, 0.08);\r\n  padding: 12px 16px;\r\n  min-height: auto;\r\n}\r\n\r\n:deep(.alerts-card .ant-card-head-title) {\r\n  width: 100%;\r\n}\r\n\r\n.alerts-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n\r\n.alerts-title {\r\n  color: #434343;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n}\r\n\r\n.alerts-stats {\r\n  display: flex;\r\n  gap: 16px;\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 4px 8px;\r\n  border-radius: 6px;\r\n  background: rgba(255, 255, 255, 0.8);\r\n  backdrop-filter: blur(4px);\r\n  min-width: 50px;\r\n}\r\n\r\n.stat-item.total {\r\n  border: 1px solid rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.stat-item.unhandled {\r\n  border: 1px solid rgba(250, 173, 20, 0.3);\r\n  background: rgba(250, 173, 20, 0.05);\r\n}\r\n\r\n.stat-number {\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  color: #262626;\r\n}\r\n\r\n.stat-item.unhandled .stat-number {\r\n  color: #faad14;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 11px;\r\n  color: #8c8c8c;\r\n  line-height: 1;\r\n  margin-top: 2px;\r\n}\r\n\r\n:deep(.alerts-card .ant-card-body) {\r\n  background: linear-gradient(135deg, #ffffff 0%, #fafbff 100%);\r\n  padding: 12px;\r\n  height: calc(100vh - 160px);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.alerts-list {\r\n  height: calc(100% - 20px);\r\n  overflow-y: auto;\r\n  padding-right: 4px;\r\n  margin-right: -4px;\r\n}\r\n\r\n/* 优化滚动条样式 */\r\n.alerts-list::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.alerts-list::-webkit-scrollbar-track {\r\n  background: rgba(0, 0, 0, 0.04);\r\n  border-radius: 3px;\r\n}\r\n\r\n.alerts-list::-webkit-scrollbar-thumb {\r\n  background: rgba(24, 144, 255, 0.3);\r\n  border-radius: 3px;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.alerts-list::-webkit-scrollbar-thumb:hover {\r\n  background: rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n/* Firefox 滚动条样式 */\r\n.alerts-list {\r\n  scrollbar-width: thin;\r\n  scrollbar-color: rgba(24, 144, 255, 0.3) rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.alert-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 8px 10px;\r\n  border-radius: 6px;\r\n  margin-bottom: 6px;\r\n  position: relative;\r\n  background: rgba(255, 255, 255, 0.6);\r\n  border: 1px solid rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.alert-item:hover {\r\n  background: rgba(24, 144, 255, 0.04);\r\n  border-color: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n.alert-indicator {\r\n  width: 3px;\r\n  height: 100%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  border-radius: 0 3px 3px 0;\r\n}\r\n\r\n.alert-item.alert-warning .alert-indicator {\r\n  background: #faad14;\r\n}\r\n\r\n.alert-item.alert-error .alert-indicator {\r\n  background: #ff4d4f;\r\n}\r\n\r\n.alert-item.alert-info .alert-indicator {\r\n  background: #1890ff;\r\n}\r\n\r\n.alert-item.alert-unhandled {\r\n  border-left: 2px solid #faad14;\r\n  background: linear-gradient(90deg, rgba(250, 173, 20, 0.03) 0%, rgba(255, 255, 255, 0.6) 20%);\r\n}\r\n\r\n.alert-icon {\r\n  width: 16px;\r\n  height: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.alert-icon .anticon {\r\n  font-size: 14px;\r\n}\r\n\r\n.alert-warning .alert-icon .anticon {\r\n  color: #faad14;\r\n}\r\n\r\n.alert-error .alert-icon .anticon {\r\n  color: #ff4d4f;\r\n}\r\n\r\n.alert-info .alert-icon .anticon {\r\n  color: #1890ff;\r\n}\r\n\r\n.alert-content {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.alert-title {\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  color: #262626;\r\n  margin-bottom: 3px;\r\n  line-height: 1.3;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.alert-meta {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.alert-time {\r\n  font-size: 11px;\r\n  color: #8c8c8c;\r\n}\r\n\r\n.alert-host {\r\n  font-size: 11px;\r\n  color: #595959;\r\n  background: rgba(0, 0, 0, 0.05);\r\n  padding: 1px 4px;\r\n  border-radius: 3px;\r\n  white-space: nowrap;\r\n}\r\n\r\n.alert-status {\r\n  margin: 0;\r\n}\r\n\r\n:deep(.alert-status.ant-tag) {\r\n  font-size: 10px;\r\n  padding: 0 4px;\r\n  height: 16px;\r\n  line-height: 14px;\r\n  border-radius: 8px;\r\n  margin: 0;\r\n}\r\n\r\n.alert-actions {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.alert-actions .ant-btn {\r\n  height: 20px;\r\n  padding: 0 6px;\r\n  font-size: 11px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.empty-alerts {\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n  color: #bfbfbf;\r\n}\r\n\r\n.empty-icon {\r\n  font-size: 48px;\r\n  color: #52c41a;\r\n  margin-bottom: 16px;\r\n  display: block;\r\n}\r\n\r\n.empty-alerts p {\r\n  font-size: 14px;\r\n  margin: 0;\r\n}\r\n\r\n/* 监控区域 */\r\n.monitoring-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.monitoring-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.monitoring-header h3 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #434343;\r\n}\r\n\r\n.monitoring-grid {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr;\r\n  gap: 16px;\r\n  height: 100%;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .main-content {\r\n    grid-template-columns: 350px 1fr;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .monitoring-grid {\r\n    gap: 12px;\r\n  }\r\n  \r\n  .alerts-stats {\r\n    gap: 12px;\r\n  }\r\n  \r\n  .stat-item {\r\n    min-width: 45px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .main-content {\r\n    grid-template-columns: 1fr;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .alerts-section {\r\n    order: 2;\r\n  }\r\n  \r\n  .monitoring-section {\r\n    order: 1;\r\n  }\r\n  \r\n  .monitoring-grid {\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: repeat(4, auto);\r\n    gap: 12px;\r\n  }\r\n  \r\n  :deep(.alerts-card .ant-card-body) {\r\n    height: calc(100vh - 200px);\r\n  }\r\n  \r\n  .alerts-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .alerts-stats {\r\n    align-self: flex-end;\r\n    gap: 8px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .main-content {\r\n    gap: 12px;\r\n  }\r\n  \r\n  .monitoring-grid {\r\n    gap: 8px;\r\n  }\r\n  \r\n  .alert-item {\r\n    padding: 6px 8px;\r\n    margin-bottom: 4px;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .alert-title {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .alert-time,\r\n  .alert-host {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .alerts-stats {\r\n    gap: 6px;\r\n  }\r\n  \r\n  .stat-item {\r\n    min-width: 40px;\r\n    padding: 3px 6px;\r\n  }\r\n  \r\n  .stat-number {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .stat-label {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .alert-actions .ant-btn {\r\n    height: 18px;\r\n    padding: 0 4px;\r\n    font-size: 10px;\r\n  }\r\n}\r\n\r\n/* 动画效果 */\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminDepartments.vue",["338","339","340","341","342","343","344","345","346"],"<template>\r\n  <div class=\"admin-departments admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <BankOutlined />\r\n          部门管理\r\n        </h1>\r\n        <p class=\"page-description\">管理组织架构中的部门信息</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-tooltip title=\"导出部门列表为Excel文件\" placement=\"bottom\">\r\n            <a-button @click=\"exportDepartments\">\r\n              <ExportOutlined />\r\n              导出部门\r\n            </a-button>\r\n          </a-tooltip>\r\n          <a-tooltip title=\"创建新的部门\" placement=\"bottom\">\r\n            <a-button type=\"primary\" @click=\"showAddModal\">\r\n              <PlusOutlined />\r\n              新建部门\r\n            </a-button>\r\n          </a-tooltip>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 部门管理布局 -->\r\n    <div class=\"departments-layout admin-layout\">\r\n      <!-- 内容区域 -->\r\n      <div class=\"departments-content admin-content full-width\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n             <a-space>\r\n               <a-input-search\r\n                 v-model:value=\"searchText\"\r\n                 placeholder=\"搜索部门...\"\r\n                 style=\"width: 200px\"\r\n                 @search=\"handleSearch\"\r\n                 @change=\"handleSearch\"\r\n               />\r\n               <a-select\r\n                 v-model:value=\"statusFilter\"\r\n                 placeholder=\"状态筛选\"\r\n                 style=\"width: 120px\"\r\n                 @change=\"handleFilterChange\"\r\n               >\r\n                 <a-select-option value=\"\">全部状态</a-select-option>\r\n                 <a-select-option value=\"active\">启用</a-select-option>\r\n                 <a-select-option value=\"inactive\">禁用</a-select-option>\r\n               </a-select>\r\n               <a-tooltip title=\"刷新部门列表数据\" placement=\"bottom\">\r\n                 <a-button @click=\"refreshData\">\r\n                   <ReloadOutlined />\r\n                 </a-button>\r\n               </a-tooltip>\r\n             </a-space>\r\n           </template>\r\n\r\n          <!-- 部门表格 -->\r\n          <a-table\r\n            :columns=\"columns\"\r\n            :data-source=\"departmentTreeData\"\r\n            :loading=\"loading\"\r\n            :pagination=\"false\"\r\n            row-key=\"id\"\r\n            :tree-props=\"{ children: 'children', hasChildren: 'hasChildren' }\"\r\n            :default-expand-all=\"false\"\r\n            :expand-row-by-click=\"false\"\r\n            @change=\"handleTableChange\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <template v-if=\"column.key === 'name'\">\r\n                <div class=\"department-name\">\r\n                  <FolderOutlined v-if=\"record.children && record.children.length > 0\" class=\"folder-icon\" />\r\n                  <FileOutlined v-else class=\"file-icon\" />\r\n                  <span class=\"name-text\">{{ record.name }}</span>\r\n                </div>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'manager'\">\r\n                <div class=\"manager-info\" v-if=\"record.manager\">\r\n                  <span class=\"manager-name\">{{ record.manager }}</span>\r\n                </div>\r\n                <span v-else class=\"no-manager\">未设置</span>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"record.status === 'active' ? 'green' : 'red'\">\r\n                  {{ record.status === 'active' ? '启用' : '禁用' }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'action'\">\r\n                <a-space>\r\n                  <a-tooltip title=\"查看详情\">\r\n                    <a-button type=\"text\" size=\"small\" @click=\"viewDepartment(record)\">\r\n                      <EyeOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip title=\"编辑部门\">\r\n                    <a-button type=\"text\" size=\"small\" @click=\"editDepartment(record)\">\r\n                      <EditOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip title=\"添加子部门\">\r\n                    <a-button type=\"text\" size=\"small\" @click=\"addSubDepartment(record)\">\r\n                      <PlusOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-popconfirm\r\n                    title=\"确定要删除这个部门吗？\"\r\n                    @confirm=\"handleDeleteDepartment(record)\"\r\n                  >\r\n                    <a-tooltip title=\"删除部门\">\r\n                      <a-button type=\"text\" size=\"small\" danger>\r\n                        <DeleteOutlined />\r\n                      </a-button>\r\n                    </a-tooltip>\r\n                  </a-popconfirm>\r\n                </a-space>\r\n              </template>\r\n            </template>\r\n          </a-table>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 新建/编辑部门弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"modalTitle\"\r\n      :width=\"600\"\r\n      @ok=\"handleModalOk\"\r\n      @cancel=\"handleModalCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"部门名称\" name=\"name\">\r\n              <a-input v-model:value=\"formData.name\" placeholder=\"请输入部门名称\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"部门编码\" name=\"code\">\r\n              <a-input v-model:value=\"formData.code\" placeholder=\"请输入部门编码\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n        \r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"上级部门\" name=\"parent\">\r\n              <a-tree-select\r\n                v-model:value=\"formData.parent\"\r\n                :tree-data=\"departmentOptions\"\r\n                placeholder=\"请选择上级部门\"\r\n                allow-clear\r\n                tree-default-expand-all\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"部门负责人\" name=\"manager\">\r\n              <a-select\r\n                v-model:value=\"formData.manager\"\r\n                placeholder=\"请选择部门负责人\"\r\n                allow-clear\r\n                show-search\r\n                :filter-option=\"filterOption\"\r\n              >\r\n                <a-select-option v-for=\"user in userList\" :key=\"user.id\" :value=\"user.id\">\r\n                  {{ user.username }} - {{ user.first_name }} {{ user.last_name }}\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"状态\" name=\"status\">\r\n              <a-select v-model:value=\"formData.status\" placeholder=\"请选择状态\">\r\n                <a-select-option value=\"active\">启用</a-select-option>\r\n                <a-select-option value=\"inactive\">禁用</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item label=\"部门描述\" name=\"description\">\r\n          <a-textarea\r\n            v-model:value=\"formData.description\"\r\n            placeholder=\"请输入部门描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 部门详情弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"detailModalVisible\"\r\n      title=\"部门详情\"\r\n      :width=\"800\"\r\n      :footer=\"null\"\r\n    >\r\n      <div v-if=\"selectedDepartment\" class=\"department-detail\">\r\n        <a-descriptions :column=\"2\" bordered>\r\n          <a-descriptions-item label=\"部门名称\">\r\n            {{ selectedDepartment.name }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"部门编码\">\r\n            {{ selectedDepartment.code }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"上级部门\">\r\n            {{ selectedDepartment.parent_name || '无' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"部门负责人\">\r\n            {{ selectedDepartment.manager || '未设置' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"状态\">\r\n            <a-tag :color=\"selectedDepartment.status === 'active' ? 'green' : 'red'\">\r\n              {{ selectedDepartment.status === 'active' ? '启用' : '禁用' }}\r\n            </a-tag>\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"创建时间\" :span=\"2\">\r\n            {{ selectedDepartment.created_at }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"部门描述\" :span=\"2\">\r\n            {{ selectedDepartment.description || '无' }}\r\n          </a-descriptions-item>\r\n        </a-descriptions>\r\n      </div>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport {\r\n  BankOutlined,\r\n  ExportOutlined,\r\n  PlusOutlined,\r\n  SearchOutlined,\r\n  ReloadOutlined,\r\n  FolderOutlined,\r\n  FileOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined\r\n} from '@ant-design/icons-vue';\r\nimport {\r\n  getDepartments,\r\n  getDepartmentTree,\r\n  createDepartment,\r\n  updateDepartment,\r\n  deleteDepartment,\r\n  getDepartmentStatistics\r\n} from '@/api/organization';\r\nimport { userAPI } from '@/api/users';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst searchText = ref('');\r\nconst statusFilter = ref('');\r\nconst levelFilter = ref('');\r\n\r\nconst modalVisible = ref(false);\r\nconst detailModalVisible = ref(false);\r\nconst isEdit = ref(false);\r\nconst selectedDepartment = ref(null);\r\nconst formRef = ref();\r\n\r\n// 表单数据\r\nconst formData = reactive({\r\n  name: '',\r\n  code: '',\r\n  parent: null,\r\n  manager: null,\r\n  sort_order: 0,\r\n  status: 'active',\r\n  description: ''\r\n});\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  name: [{ required: true, message: '请输入部门名称', trigger: 'blur' }],\r\n  code: [{ required: true, message: '请输入部门编码', trigger: 'blur' }],\r\n  status: [{ required: true, message: '请选择状态', trigger: 'change' }]\r\n};\r\n\r\n// 数据\r\nconst departmentList = ref([]);\r\nconst userList = ref([]);\r\nconst departmentTreeDataRef = ref([]);\r\n\r\n\r\n\r\n// 表格列定义\r\nconst columns = [\r\n  {\r\n    title: '部门名称',\r\n    dataIndex: 'name',\r\n    key: 'name'\r\n  },\r\n  {\r\n    title: '部门编码',\r\n    dataIndex: 'code',\r\n    key: 'code'\r\n  },\r\n  {\r\n    title: '上级部门',\r\n    dataIndex: 'parent_name',\r\n    key: 'parent_name'\r\n  },\r\n  {\r\n    title: '负责人',\r\n    dataIndex: 'manager',\r\n    key: 'manager',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '状态',\r\n    key: 'status',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'action',\r\n    width: 200,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 计算属性\r\nconst modalTitle = computed(() => {\r\n  return isEdit.value ? '编辑部门' : '新建部门';\r\n});\r\n\r\n// 构建树形数据\r\nconst departmentTreeData = computed(() => {\r\n  // 直接返回从API获取的树形数据\r\n  return departmentTreeDataRef.value;\r\n});\r\n\r\nconst departmentOptions = computed(() => {\r\n  // 构建部门选择器数据\r\n  const buildOptions = (departments) => {\r\n    if (!Array.isArray(departments)) {\r\n      return [];\r\n    }\r\n    return departments.map(dept => ({\r\n      title: dept.name,\r\n      value: dept.id,\r\n      key: dept.id,\r\n      children: dept.children && dept.children.length > 0 ? buildOptions(dept.children) : []\r\n    }));\r\n  };\r\n  return buildOptions(departmentTreeData.value);\r\n});\r\n\r\n// 方法\r\n\r\nconst handleSearch = () => {\r\n  loadDepartments();\r\n};\r\n\r\nconst handleSearchChange = () => {\r\n  if (!searchText.value) {\r\n    loadDepartments();\r\n  }\r\n};\r\n\r\nconst handleFilterChange = () => {\r\n  loadDepartments();\r\n};\r\n\r\nconst resetFilters = () => {\r\n  searchText.value = '';\r\n  statusFilter.value = '';\r\n  levelFilter.value = '';\r\n  loadDepartments();\r\n};\r\n\r\nconst handleTableChange = (pag, filters, sorter) => {\r\n  // 树形表格不需要分页处理\r\n  loadDepartments();\r\n};\r\n\r\nconst loadDepartments = async () => {\r\n  loading.value = true;\r\n  try {\r\n    // 获取树形结构数据\r\n    const response = await getDepartmentTree();\r\n    if (response.status == 200){\r\n      const results = response.data || [];\r\n      console.log('部门树形数据:', results);\r\n      // 直接使用树形数据\r\n      departmentTreeDataRef.value = results;\r\n      // 同时保存扁平化数据用于其他功能\r\n      departmentList.value = flattenTreeData(results);\r\n    }\r\n  } catch (error) {\r\n    console.error('加载部门列表失败:', error);\r\n    message.error('加载部门列表失败');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 将树形数据扁平化\r\nconst flattenTreeData = (treeData) => {\r\n  const result = [];\r\n  const flatten = (nodes, level = 1) => {\r\n    nodes.forEach(node => {\r\n      result.push({\r\n        ...node,\r\n        level: level\r\n      });\r\n      if (node.children && node.children.length > 0) {\r\n        flatten(node.children, level + 1);\r\n      }\r\n    });\r\n  };\r\n  flatten(treeData);\r\n  return result;\r\n};\r\n\r\nconst showAddModal = () => {\r\n  isEdit.value = false;\r\n  resetForm();\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst addSubDepartment = (record) => {\r\n  isEdit.value = false;\r\n  resetForm();\r\n  formData.parent = record.id;\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst editDepartment = (record) => {\r\n  isEdit.value = true;\r\n  Object.assign(formData, {\r\n    id: record.id,\r\n    name: record.name,\r\n    code: record.code,\r\n    parent: record.parent,\r\n    manager: record.manager,\r\n    sort_order: record.sort_order,\r\n    status: record.status,\r\n    description: record.description\r\n  });\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst viewDepartment = (record) => {\r\n  selectedDepartment.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleDeleteDepartment = async (record) => {\r\n  try {\r\n    await deleteDepartment(record.id);\r\n    message.success('删除成功');\r\n    loadDepartments();\r\n  } catch (error) {\r\n    console.error('删除部门失败:', error);\r\n    message.error('删除失败');\r\n  }\r\n};\r\n\r\nconst handleModalOk = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    // 准备提交数据，将parent转换为parent_id\r\n    const submitData = { ...formData };\r\n    if (submitData.parent) {\r\n      submitData.parent_id = submitData.parent;\r\n      delete submitData.parent;\r\n    }\r\n    \r\n    if (isEdit.value) {\r\n      await updateDepartment(submitData.id, submitData);\r\n      message.success('更新成功');\r\n    } else {\r\n      await createDepartment(submitData);\r\n      message.success('创建成功');\r\n    }\r\n    \r\n    modalVisible.value = false;\r\n    loadDepartments();\r\n    loadDepartmentTree();\r\n  } catch (error) {\r\n    console.error('保存部门失败:', error);\r\n    \r\n    // 处理表单验证错误\r\n    if (error.errorFields) {\r\n      message.error('请检查表单输入');\r\n      return;\r\n    }\r\n    \r\n    // 处理API返回的错误\r\n    if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      \r\n      // 处理字段特定错误\r\n      if (errorData.code && Array.isArray(errorData.code)) {\r\n        message.error(`部门编码错误: ${errorData.code[0]}`);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.name && Array.isArray(errorData.name)) {\r\n        message.error(`部门名称错误: ${errorData.name[0]}`);\r\n        return;\r\n      }\r\n      \r\n      // 处理其他字段错误\r\n      const firstErrorField = Object.keys(errorData)[0];\r\n      if (firstErrorField && Array.isArray(errorData[firstErrorField])) {\r\n        message.error(`${firstErrorField}: ${errorData[firstErrorField][0]}`);\r\n        return;\r\n      }\r\n      \r\n      // 处理通用错误消息\r\n      if (errorData.detail) {\r\n        message.error(errorData.detail);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.message) {\r\n        message.error(errorData.message);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // 默认错误消息\r\n    message.error(isEdit.value ? '更新失败' : '创建失败');\r\n  }\r\n};\r\n\r\nconst handleModalCancel = () => {\r\n  modalVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\nconst resetForm = () => {\r\n  Object.assign(formData, {\r\n    name: '',\r\n    code: '',\r\n    parent: null,\r\n    manager: null,\r\n    sort_order: 0,\r\n    status: 'active',\r\n    description: ''\r\n  });\r\n  if (formRef.value) {\r\n    formRef.value.resetFields();\r\n  }\r\n};\r\n\r\nconst exportDepartments = () => {\r\n  // 导出功能实现\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst filterOption = (input, option) => {\r\n  return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\r\n};\r\n\r\nconst getCurrentCategoryName = () => {\r\n  return '部门管理';\r\n};\r\n\r\nconst refreshData = () => {\r\n  loadDepartments();\r\n};\r\n\r\n// 加载部门树形数据\r\nconst loadDepartmentTree = async () => {\r\n  try {\r\n    const response = await getDepartmentTree();\r\n    const treeData = response.data || response || [];\r\n    departmentTreeData.value = Array.isArray(treeData) ? treeData : [];\r\n  } catch (error) {\r\n    console.error('加载部门树失败:', error);\r\n  }\r\n};\r\n\r\n// 加载用户列表\r\nconst loadUsers = async () => {\r\n  try {\r\n    const response = await userAPI.getUserList();\r\n    const users = response.data?.results || response.data?.data || [];\r\n    userList.value = Array.isArray(users) ? users : [];\r\n  } catch (error) {\r\n    console.error('加载用户列表失败:', error);\r\n  }\r\n};\r\n\r\n// 生命周期\r\nonMounted(() => {\r\n  loadDepartments();\r\n  loadDepartmentTree();\r\n  loadUsers();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 部门管理页面特有的样式 */\r\n.departments-layout {\r\n  display: flex;\r\n  gap: 24px;\r\n  min-height: calc(100vh - 200px);\r\n}\r\n\r\n.departments-content.full-width {\r\n  flex: 1;\r\n  width: 100%;\r\n  height: calc(100vh - 200px);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.departments-content.full-width .ant-card {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.departments-content.full-width .ant-card-body {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0;\r\n}\r\n\r\n.departments-content.full-width .ant-table-wrapper {\r\n  flex: 1;\r\n  height: 100%;\r\n}\r\n\r\n.departments-content.full-width .ant-table {\r\n  height: 100%;\r\n}\r\n\r\n.departments-content.full-width .ant-table-tbody {\r\n  height: calc(100% - 55px);\r\n  overflow-y: auto;\r\n}\r\n\r\n.department-name {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.level-indent {\r\n  display: inline-block;\r\n}\r\n\r\n.folder-icon,\r\n.file-icon {\r\n  color: #1890ff;\r\n}\r\n\r\n.name-text {\r\n  font-weight: 500;\r\n}\r\n\r\n.manager-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.manager-name {\r\n  font-size: 13px;\r\n}\r\n\r\n.no-manager {\r\n  color: #999;\r\n  font-style: italic;\r\n}\r\n\r\n.department-detail {\r\n  padding: 16px 0;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminPositions.vue",["347","348","349","350","351","352","353"],"<template>\r\n  <div class=\"admin-positions admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <IdcardOutlined />\r\n          职位管理\r\n        </h1>\r\n        <p class=\"page-description\">管理组织架构中的职位信息</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-tooltip title=\"导出职位列表为Excel文件\" placement=\"bottom\">\r\n            <a-button @click=\"exportPositions\">\r\n              <ExportOutlined />\r\n              导出职位\r\n            </a-button>\r\n          </a-tooltip>\r\n          <a-tooltip title=\"创建新的职位\" placement=\"bottom\">\r\n            <a-button type=\"primary\" @click=\"showAddModal\">\r\n              <PlusOutlined />\r\n              新建职位\r\n            </a-button>\r\n          </a-tooltip>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 职位管理内容区域 -->\r\n    <div class=\"positions-content admin-content full-width\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-select\r\n                v-model:value=\"departmentFilter\"\r\n                placeholder=\"选择部门\"\r\n                style=\"width: 150px\"\r\n                allow-clear\r\n                @change=\"handleFilterChange\"\r\n              >\r\n                <a-select-option value=\"\">全部部门</a-select-option>\r\n                <a-select-option v-for=\"dept in departmentList\" :key=\"dept.id\" :value=\"dept.id\">\r\n                  {{ dept.name }}\r\n                </a-select-option>\r\n              </a-select>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索职位...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n                @change=\"handleSearch\"\r\n              />\r\n              <a-select\r\n                v-model:value=\"statusFilter\"\r\n                placeholder=\"状态筛选\"\r\n                style=\"width: 120px\"\r\n                @change=\"handleFilterChange\"\r\n              >\r\n                <a-select-option value=\"\">全部状态</a-select-option>\r\n                <a-select-option value=\"active\">启用</a-select-option>\r\n                <a-select-option value=\"inactive\">禁用</a-select-option>\r\n              </a-select>\r\n              <a-tooltip title=\"刷新职位列表数据\" placement=\"bottom\">\r\n                <a-button @click=\"refreshData\">\r\n                  <ReloadOutlined />\r\n                </a-button>\r\n              </a-tooltip>\r\n            </a-space>\r\n          </template>\r\n\r\n          <!-- 职位表格 -->\r\n          <a-table\r\n            :columns=\"columns\"\r\n            :data-source=\"positionList\"\r\n            :loading=\"loading\"\r\n            :pagination=\"pagination\"\r\n            row-key=\"id\"\r\n            @change=\"handleTableChange\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <!-- 职位名称列 -->\r\n              <template v-if=\"column.key === 'name'\">\r\n                <div class=\"position-name\">\r\n                  <IdcardOutlined class=\"position-icon\" />\r\n                  <span class=\"name-text\">{{ record.name }}</span>\r\n                  <a-tag v-if=\"record.level\" :color=\"getLevelColor(record.level)\" size=\"small\">\r\n                    {{ getLevelText(record.level) }}\r\n                  </a-tag>\r\n                </div>\r\n              </template>\r\n\r\n              <!-- 状态列 -->\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"record.status === 'active' ? 'green' : 'red'\">\r\n                  {{ record.status === 'active' ? '启用' : '禁用' }}\r\n                </a-tag>\r\n              </template>\r\n\r\n\r\n\r\n              <!-- 操作列 -->\r\n              <template v-else-if=\"column.key === 'action'\">\r\n              <a-space>\r\n                <a-tooltip title=\"查看详情\">\r\n                  <a-button type=\"text\" size=\"small\" @click=\"viewPosition(record)\">\r\n                    <EyeOutlined />\r\n                  </a-button>\r\n                </a-tooltip>\r\n                <a-tooltip title=\"编辑职位\">\r\n                  <a-button type=\"text\" size=\"small\" @click=\"editPosition(record)\">\r\n                    <EditOutlined />\r\n                  </a-button>\r\n                </a-tooltip>\r\n                <a-popconfirm\r\n                  title=\"确定要删除这个职位吗？\"\r\n                  @confirm=\"handleDeletePosition(record)\"\r\n                >\r\n                  <a-tooltip title=\"删除职位\">\r\n                    <a-button type=\"text\" size=\"small\" danger>\r\n                      <DeleteOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                </a-popconfirm>\r\n              </a-space>\r\n               </template>\r\n            </template>\r\n          </a-table>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 新建/编辑职位弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"modalTitle\"\r\n      :width=\"600\"\r\n      @ok=\"handleModalOk\"\r\n      @cancel=\"handleModalCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"职位名称\" name=\"name\">\r\n              <a-input v-model:value=\"formData.name\" placeholder=\"请输入职位名称\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"职位编码\" name=\"code\">\r\n              <a-input v-model:value=\"formData.code\" placeholder=\"请输入职位编码\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n        \r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"所属部门\" name=\"department\">\r\n              <a-select\r\n                v-model:value=\"formData.department\"\r\n                placeholder=\"请选择所属部门\"\r\n                allow-clear\r\n              >\r\n                <a-select-option v-for=\"dept in departmentList\" :key=\"dept.id\" :value=\"dept.id\">\r\n                  {{ dept.name }}\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"职位级别\" name=\"level\">\r\n              <a-select v-model:value=\"formData.level\" placeholder=\"请选择职位级别\">\r\n                <a-select-option value=\"junior\">初级</a-select-option>\r\n                <a-select-option value=\"intermediate\">中级</a-select-option>\r\n                <a-select-option value=\"senior\">高级</a-select-option>\r\n                <a-select-option value=\"expert\">专家</a-select-option>\r\n                <a-select-option value=\"manager\">管理</a-select-option>\r\n                <a-select-option value=\"director\">总监</a-select-option>\r\n                <a-select-option value=\"vp\">副总</a-select-option>\r\n                <a-select-option value=\"ceo\">总裁</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"排序\" name=\"sort_order\">\r\n              <a-input-number\r\n                v-model:value=\"formData.sort_order\"\r\n                :min=\"0\"\r\n                :max=\"999\"\r\n                placeholder=\"排序号\"\r\n                style=\"width: 100%\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"状态\" name=\"status\">\r\n              <a-select v-model:value=\"formData.status\" placeholder=\"请选择状态\">\r\n                <a-select-option value=\"active\">启用</a-select-option>\r\n                <a-select-option value=\"inactive\">禁用</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item label=\"职位描述\" name=\"description\">\r\n          <a-textarea\r\n            v-model:value=\"formData.description\"\r\n            placeholder=\"请输入职位描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"职位要求\" name=\"requirements\">\r\n          <a-textarea\r\n            v-model:value=\"formData.requirements\"\r\n            placeholder=\"请输入职位要求\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 职位详情弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"detailModalVisible\"\r\n      title=\"职位详情\"\r\n      :width=\"800\"\r\n      :footer=\"null\"\r\n    >\r\n      <div v-if=\"selectedPosition\" class=\"position-detail\">\r\n        <a-descriptions :column=\"2\" bordered>\r\n          <a-descriptions-item label=\"职位名称\">\r\n            {{ selectedPosition.name }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"职位编码\">\r\n            {{ selectedPosition.code }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"所属部门\">\r\n            {{ selectedPosition.department?.full_name || '未设置' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"职位级别\">\r\n            <a-tag :color=\"getLevelColor(selectedPosition.level)\">\r\n              {{ getLevelText(selectedPosition.level) }}\r\n            </a-tag>\r\n          </a-descriptions-item>\r\n\r\n          <a-descriptions-item label=\"状态\">\r\n            <a-tag :color=\"selectedPosition.status === 'active' ? 'green' : 'red'\">\r\n              {{ selectedPosition.status === 'active' ? '启用' : '禁用' }}\r\n            </a-tag>\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"创建时间\" :span=\"2\">\r\n            {{ formatDate(selectedPosition.created_at) }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"职位描述\" :span=\"2\">\r\n            {{ selectedPosition.description || '无' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"职位要求\" :span=\"2\">\r\n            <div v-if=\"selectedPosition.requirements\" class=\"requirements-text\">\r\n              {{ selectedPosition.requirements }}\r\n            </div>\r\n            <span v-else>无</span>\r\n          </a-descriptions-item>\r\n        </a-descriptions>\r\n      </div>\r\n    </a-modal>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport dayjs from 'dayjs';\r\nimport {\r\n  IdcardOutlined,\r\n  ExportOutlined,\r\n  PlusOutlined,\r\n  SearchOutlined,\r\n  ReloadOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined\r\n} from '@ant-design/icons-vue';\r\nimport {\r\n  getPositions,\r\n  getPositionDetail,\r\n  createPosition,\r\n  updatePosition,\r\n  deletePosition,\r\n  getPositionsByDepartment\r\n} from '@/api/organization';\r\nimport { getDepartments } from '@/api/organization';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst searchText = ref('');\r\nconst statusFilter = ref('');\r\nconst levelFilter = ref('');\r\nconst departmentFilter = ref('');\r\n\r\nconst modalVisible = ref(false);\r\nconst detailModalVisible = ref(false);\r\nconst isEdit = ref(false);\r\nconst selectedPosition = ref(null);\r\nconst formRef = ref();\r\n\r\n// 表单数据\r\nconst formData = reactive({\r\n  name: '',\r\n  code: '',\r\n  department: null,\r\n  level: '',\r\n  sort_order: 0,\r\n  status: 'active',\r\n  description: '',\r\n  requirements: ''\r\n});\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  name: [{ required: true, message: '请输入职位名称', trigger: 'blur' }],\r\n  code: [{ required: true, message: '请输入职位编码', trigger: 'blur' }],\r\n  department: [{ required: true, message: '请选择所属部门', trigger: 'change' }],\r\n  level: [{ required: true, message: '请选择职位级别', trigger: 'change' }],\r\n  status: [{ required: true, message: '请选择状态', trigger: 'change' }]\r\n};\r\n\r\n// 数据\r\nconst positionList = ref([]);\r\nconst departmentList = ref([]);\r\n\r\n\r\n\r\n// 表格列定义\r\nconst columns = [\r\n  {\r\n    title: '职位名称',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    width: 200\r\n  },\r\n  {\r\n    title: '职位编码',\r\n    dataIndex: 'code',\r\n    key: 'code',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '所属部门',\r\n    dataIndex: ['department', 'full_name'],\r\n    key: 'department_full_name',\r\n    width: 120\r\n  },\r\n\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '创建时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at',\r\n    width: 160,\r\n    customRender: ({ text }) => formatDate(text)\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'action',\r\n    width: 150,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 计算属性\r\nconst modalTitle = computed(() => {\r\n  return isEdit.value ? '编辑职位' : '新建职位';\r\n});\r\n\r\n// 方法\r\nconst getLevelColor = (level) => {\r\n  const colors = {\r\n    'junior': 'blue',\r\n    'intermediate': 'orange',\r\n    'senior': 'red',\r\n    'expert': 'purple',\r\n    'manager': 'green',\r\n    'director': 'gold',\r\n    'vp': 'magenta',\r\n    'ceo': 'volcano'\r\n  };\r\n  return colors[level] || 'default';\r\n};\r\n\r\nconst getLevelText = (level) => {\r\n  const texts = {\r\n    'junior': '初级',\r\n    'intermediate': '中级',\r\n    'senior': '高级',\r\n    'expert': '专家',\r\n    'manager': '管理',\r\n    'director': '总监',\r\n    'vp': '副总',\r\n    'ceo': '总裁'\r\n  };\r\n  return texts[level] || '未知';\r\n};\r\n\r\n\r\n// 时间格式化函数\r\nconst formatDate = (date) => {\r\n  return date ? dayjs(date).format('YYYY-MM-DD HH:mm:ss') : '-';\r\n};\r\n\r\nconst handleSearch = () => {\r\n  loadPositions();\r\n};\r\n\r\nconst handleSearchChange = () => {\r\n  if (!searchText.value) {\r\n    loadPositions();\r\n  }\r\n};\r\n\r\nconst handleFilterChange = () => {\r\n  loadPositions();\r\n};\r\n\r\nconst resetFilters = () => {\r\n  searchText.value = '';\r\n  statusFilter.value = '';\r\n  levelFilter.value = '';\r\n  departmentFilter.value = '';\r\n  loadPositions();\r\n};\r\n\r\nconst handleTableChange = (pag, filters, sorter) => {\r\n  pagination.current = pag.current;\r\n  pagination.pageSize = pag.pageSize;\r\n  loadPositions();\r\n};\r\n\r\nconst loadPositions = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const params = {\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize\r\n    };\r\n    \r\n    if (searchText.value) {\r\n      params.search = searchText.value;\r\n    }\r\n    if (statusFilter.value && statusFilter.value !== 'all') {\r\n      params.status = statusFilter.value;\r\n    }\r\n    if (levelFilter.value) {\r\n      params.level = levelFilter.value;\r\n    }\r\n    if (departmentFilter.value) {\r\n      params.department = departmentFilter.value;\r\n    }\r\n    \r\n    const response = await getPositions(params);\r\n    if (response.status == 200){\r\n      const results = response.data.results || [];\r\n      positionList.value = Array.isArray(results) ? results : [];\r\n      pagination.total = response.count || response.total || 0;\r\n      console.log(positionList.value)\r\n    }\r\n  } catch (error) {\r\n    console.error('加载职位列表失败:', error);\r\n    message.error('加载职位列表失败');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst showAddModal = () => {\r\n  isEdit.value = false;\r\n  resetForm();\r\n  loadDepartments();\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst editPosition = (record) => {\r\n  isEdit.value = true;\r\n  Object.assign(formData, {\r\n    id: record.id,\r\n    name: record.name,\r\n    code: record.code,\r\n    department: record.department,\r\n    level: record.level,\r\n    sort_order: record.sort_order,\r\n    status: record.status,\r\n    description: record.description,\r\n    requirements: record.requirements\r\n  });\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst viewPosition = (record) => {\r\n  selectedPosition.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleDeletePosition = async (record) => {\r\n  try {\r\n    await deletePosition(record.id);\r\n    message.success('删除成功');\r\n    loadPositions();\r\n  } catch (error) {\r\n    console.error('删除职位失败:', error);\r\n    message.error('删除失败');\r\n  }\r\n};\r\n\r\nconst handleModalOk = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    // 准备提交数据，将department转换为department_id\r\n    const submitData = { ...formData };\r\n    if (submitData.department) {\r\n      submitData.department_id = submitData.department;\r\n      delete submitData.department;\r\n    }\r\n    \r\n    if (isEdit.value) {\r\n      await updatePosition(submitData.id, submitData);\r\n      message.success('更新成功');\r\n    } else {\r\n      await createPosition(submitData);\r\n      message.success('创建成功');\r\n    }\r\n    \r\n    modalVisible.value = false;\r\n    loadPositions();\r\n  } catch (error) {\r\n    console.error('保存职位失败:', error);\r\n    \r\n    // 处理表单验证错误\r\n    if (error.errorFields) {\r\n      message.error('请检查表单输入');\r\n      return;\r\n    }\r\n    \r\n    // 处理API返回的错误\r\n    if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      \r\n      // 处理字段特定错误\r\n      if (errorData.code && Array.isArray(errorData.code)) {\r\n        message.error(`职位编码错误: ${errorData.code[0]}`);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.name && Array.isArray(errorData.name)) {\r\n        message.error(`职位名称错误: ${errorData.name[0]}`);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.department && Array.isArray(errorData.department)) {\r\n        message.error(`所属部门错误: ${errorData.department[0]}`);\r\n        return;\r\n      }\r\n      \r\n      // 处理其他字段错误\r\n      const firstErrorField = Object.keys(errorData)[0];\r\n      if (firstErrorField && Array.isArray(errorData[firstErrorField])) {\r\n        message.error(`${firstErrorField}: ${errorData[firstErrorField][0]}`);\r\n        return;\r\n      }\r\n      \r\n      // 处理通用错误消息\r\n      if (errorData.detail) {\r\n        message.error(errorData.detail);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.message) {\r\n        message.error(errorData.message);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // 默认错误消息\r\n    message.error(isEdit.value ? '更新失败' : '创建失败');\r\n  }\r\n};\r\n\r\nconst handleModalCancel = () => {\r\n  modalVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\nconst resetForm = () => {\r\n  Object.assign(formData, {\r\n    name: '',\r\n    code: '',\r\n    department: null,\r\n    level: '',\r\n    sort_order: 0,\r\n    status: 'active',\r\n    description: '',\r\n    requirements: ''\r\n  });\r\n  if (formRef.value) {\r\n    formRef.value.resetFields();\r\n  }\r\n};\r\n\r\nconst exportPositions = () => {\r\n  // 导出功能实现\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst getCurrentCategoryName = () => {\r\n  return '职位管理';\r\n};\r\n\r\nconst refreshData = () => {\r\n  loadDepartments();\r\n  loadPositions();\r\n};\r\n\r\n// 加载部门列表\r\nconst loadDepartments = async () => {\r\n  try {\r\n    const response = await getDepartments();\r\n    console.log(response)\r\n    if (response.status == 200){\r\n      const departments = response.data.results || [];\r\n      departmentList.value = Array.isArray(departments) ? departments : [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载部门列表失败:', error);\r\n  }\r\n};\r\n\r\n// 生命周期\r\nonMounted(() => {\r\n  loadDepartments();\r\n  loadPositions();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n.positions-content.full-width {\r\n  flex: 1;\r\n  width: 100%;\r\n  height: calc(100vh - 200px);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.positions-content.full-width .ant-card {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.positions-content.full-width .ant-card-body {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0;\r\n}\r\n\r\n.positions-content.full-width .ant-table-wrapper {\r\n  flex: 1;\r\n  height: 100%;\r\n}\r\n\r\n.positions-content.full-width .ant-table {\r\n  height: 100%;\r\n}\r\n\r\n.positions-content.full-width .ant-table-tbody {\r\n  height: calc(100% - 55px);\r\n  overflow-y: auto;\r\n}\r\n\r\n/* 职位管理页面特有的样式 */\r\n.position-name {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.position-icon {\r\n  color: #1890ff;\r\n}\r\n\r\n.name-text {\r\n  font-weight: 500;\r\n}\r\n\r\n.salary-range {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.salary-text {\r\n  font-weight: 500;\r\n  color: #52c41a;\r\n}\r\n\r\n.no-salary {\r\n  color: #999;\r\n  font-style: italic;\r\n}\r\n\r\n.position-detail {\r\n  padding: 16px 0;\r\n}\r\n\r\n.requirements-text {\r\n  white-space: pre-wrap;\r\n  line-height: 1.6;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\AssetCategoryList.vue",["354","355","356","357","358","359","360","361","362","363","364","365","366"],"<template>\r\n  <div class=\"asset-category-list-container\">\r\n    <div class=\"page-header\">\r\n      <h1>资产分类管理</h1>\r\n      <p>管理资产分类信息</p>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"search-card\">\r\n      <a-row gutter=\"[16, 16]\">\r\n        <a-col :span=\"6\">\r\n          <a-input v-model:value=\"searchKeyword\" placeholder=\"分类名称\" allow-clear />\r\n        </a-col>\r\n        <a-col :span=\"6\">\r\n          <a-select v-model:value=\"parentCategory\" placeholder=\"父级分类\" allow-clear>\r\n            <a-select-option value=\"\">无父级分类</a-select-option>\r\n            <a-select-option v-for=\"category in parentCategories\" :key=\"category.id\" :value=\"category.id\">{{ category.name }}</a-select-option>\r\n          </a-select>\r\n        </a-col>\r\n        <a-col :span=\"12\" style=\"text-align: right;\">\r\n          <a-button type=\"primary\" @click=\"handleSearch\">搜索</a-button>\r\n          <a-button style=\"margin-left: 8px;\" @click=\"handleReset\">重置</a-button>\r\n        </a-col>\r\n      </a-row>\r\n    </a-card>\r\n    \r\n    <div class=\"action-bar\">\r\n      <a-button type=\"primary\" icon=\"plus\" @click=\"handleAddCategory\">新增分类</a-button>\r\n      <a-button icon=\"download\">导出数据</a-button>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"table-card\">\r\n      <a-table \r\n        :columns=\"columns\" \r\n        :data-source=\"categoriesData\" \r\n        row-key=\"id\" \r\n        :pagination=\"pagination\" \r\n        @change=\"handleTableChange\"\r\n      >\r\n        <template #headerCell=\"{ column }\">\r\n          <span v-if=\"column.key === 'id'\">{{ column.title }} ({{ categoriesData.length }})</span>\r\n          <span v-else>{{ column.title }}</span>\r\n        </template>\r\n        <template #bodyCell=\"{ column, record }\">\r\n          <template v-if=\"column.key === 'operation'\">\r\n            <a-button type=\"link\" @click=\"handleEdit(record.id)\">编辑</a-button>\r\n            <a-button type=\"link\" danger @click=\"handleDelete(record.id)\">删除</a-button>\r\n          </template>\r\n        </template>\r\n      </a-table>\r\n    </a-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { Input, Select, Button, Table, Card, Row, Col, Modal, Form } from 'ant-design-vue';\r\nimport { PlusOutlined, DownloadOutlined } from '@ant-design/icons-vue';\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst parentCategory = ref('');\r\n\r\n// 分页配置\r\nconst pagination = {\r\n  current: 1,\r\n  pageSize: 10,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n};\r\n\r\n// 父级分类数据\r\nconst parentCategories = [\r\n  { id: '1', name: '服务器' },\r\n  { id: '2', name: '网络设备' },\r\n  { id: '3', name: '存储设备' },\r\n  { id: '4', name: '办公设备' }\r\n];\r\n\r\n// 模拟数据\r\nconst categoriesData = [\r\n  {\r\n    id: '1',\r\n    name: '服务器',\r\n    parentId: null,\r\n    parentName: '',\r\n    description: '包括物理服务器和虚拟服务器',\r\n    assetCount: 64,\r\n    createTime: '2023-01-01 10:00:00',\r\n    updateTime: '2023-01-01 10:00:00'\r\n  },\r\n  {\r\n    id: '1-1',\r\n    name: '物理服务器',\r\n    parentId: '1',\r\n    parentName: '服务器',\r\n    description: '实体服务器设备',\r\n    assetCount: 32,\r\n    createTime: '2023-01-01 10:05:00',\r\n    updateTime: '2023-01-01 10:05:00'\r\n  },\r\n  {\r\n    id: '1-2',\r\n    name: '虚拟服务器',\r\n    parentId: '1',\r\n    parentName: '服务器',\r\n    description: '虚拟化平台上的虚拟服务器',\r\n    assetCount: 32,\r\n    createTime: '2023-01-01 10:05:00',\r\n    updateTime: '2023-01-01 10:05:00'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: '网络设备',\r\n    parentId: null,\r\n    parentName: '',\r\n    description: '包括交换机、路由器、防火墙等网络设备',\r\n    assetCount: 32,\r\n    createTime: '2023-01-01 10:10:00',\r\n    updateTime: '2023-01-01 10:10:00'\r\n  },\r\n  {\r\n    id: '2-1',\r\n    name: '交换机',\r\n    parentId: '2',\r\n    parentName: '网络设备',\r\n    description: '网络交换设备',\r\n    assetCount: 16,\r\n    createTime: '2023-01-01 10:15:00',\r\n    updateTime: '2023-01-01 10:15:00'\r\n  },\r\n  {\r\n    id: '2-2',\r\n    name: '路由器',\r\n    parentId: '2',\r\n    parentName: '网络设备',\r\n    description: '网络路由设备',\r\n    assetCount: 8,\r\n    createTime: '2023-01-01 10:15:00',\r\n    updateTime: '2023-01-01 10:15:00'\r\n  },\r\n  {\r\n    id: '2-3',\r\n    name: '防火墙',\r\n    parentId: '2',\r\n    parentName: '网络设备',\r\n    description: '网络安全防护设备',\r\n    assetCount: 8,\r\n    createTime: '2023-01-01 10:15:00',\r\n    updateTime: '2023-01-01 10:15:00'\r\n  },\r\n  {\r\n    id: '3',\r\n    name: '存储设备',\r\n    parentId: null,\r\n    parentName: '',\r\n    description: '包括磁盘阵列、磁带库等存储设备',\r\n    assetCount: 16,\r\n    createTime: '2023-01-01 10:20:00',\r\n    updateTime: '2023-01-01 10:20:00'\r\n  },\r\n  {\r\n    id: '4',\r\n    name: '办公设备',\r\n    parentId: null,\r\n    parentName: '',\r\n    description: '包括电脑、打印机、扫描仪等办公设备',\r\n    assetCount: 16,\r\n    createTime: '2023-01-01 10:25:00',\r\n    updateTime: '2023-01-01 10:25:00'\r\n  }\r\n];\r\n\r\n// 表格列定义\r\nconst columns = [\r\n  {\r\n    title: '分类编号',\r\n    dataIndex: 'id',\r\n    key: 'id',\r\n    fixed: 'left',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '分类名称',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '父级分类',\r\n    dataIndex: 'parentName',\r\n    key: 'parentName',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '描述',\r\n    dataIndex: 'description',\r\n    key: 'description',\r\n    width: 250\r\n  },\r\n  {\r\n    title: '资产数量',\r\n    dataIndex: 'assetCount',\r\n    key: 'assetCount',\r\n    width: 100,\r\n    sorter: (a, b) => a.assetCount - b.assetCount\r\n  },\r\n  {\r\n    title: '创建时间',\r\n    dataIndex: 'createTime',\r\n    key: 'createTime',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'updateTime',\r\n    key: 'updateTime',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 120\r\n  }\r\n];\r\n\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  console.log('搜索条件:', {\r\n    keyword: searchKeyword.value,\r\n    parentId: parentCategory.value\r\n  });\r\n  // 这里应该调用API获取数据\r\n};\r\n\r\n// 处理重置\r\nconst handleReset = () => {\r\n  searchKeyword.value = '';\r\n  parentCategory.value = '';\r\n};\r\n\r\n// 处理表格分页变化\r\nconst handleTableChange = (pagination, filters, sorter) => {\r\n  console.log('分页变化:', pagination);\r\n  // 这里应该根据分页信息重新获取数据\r\n};\r\n\r\n// 新增分类\r\nconst handleAddCategory = () => {\r\n  console.log('新增分类');\r\n  // 这里应该打开新增分类的模态框\r\n};\r\n\r\n// 处理编辑操作\r\nconst handleEdit = (id) => {\r\n  console.log('编辑分类:', id);\r\n  // 这里应该打开编辑分类的模态框\r\n};\r\n\r\n// 处理删除操作\r\nconst handleDelete = (id) => {\r\n  console.log('删除分类:', id);\r\n  // 这里应该显示确认删除的模态框，然后调用API删除分类\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.asset-category-list-container {\r\n  padding: 24px;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.page-header h1 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.page-header p {\r\n  margin: 0;\r\n  color: rgba(0, 0, 0, 0.45);\r\n}\r\n\r\n.search-card {\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n}\r\n\r\n.action-bar {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.table-card {\r\n  overflow: hidden;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminEmployees.vue",["367","368","369","370","371","372","373","374","375","376","377","378"],"<template>\r\n  <div class=\"admin-employees admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <ContactsOutlined />\r\n          员工管理\r\n        </h1>\r\n        <p class=\"page-description\">管理组织架构中的员工信息</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-tooltip title=\"导出员工列表为Excel文件\" placement=\"bottom\">\r\n            <a-button @click=\"exportEmployees\">\r\n              <ExportOutlined />\r\n              导出员工\r\n            </a-button>\r\n          </a-tooltip>\r\n          <a-tooltip title=\"创建新的员工\" placement=\"bottom\">\r\n            <a-button type=\"primary\" @click=\"showAddModal\">\r\n              <PlusOutlined />\r\n              新建员工\r\n            </a-button>\r\n          </a-tooltip>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 员工管理布局 -->\r\n    <div class=\"employees-layout admin-layout\">\r\n      <!-- 左侧菜单 -->\r\n      <div class=\"employees-menu admin-menu\">\r\n        <div class=\"menu-title\">部门分类</div>\r\n        <div class=\"menu-list\">\r\n          <div \r\n            v-for=\"category in categoryList\" \r\n            :key=\"category.key\"\r\n            :class=\"['menu-item', { 'active': activeCategory === category.key }]\"\r\n            @click=\"handleCategoryChange(category.key)\"\r\n          >\r\n            <component :is=\"category.icon\" class=\"menu-icon\" />\r\n            <span class=\"menu-text\">{{ category.name }}</span>\r\n            <a-badge \r\n              v-if=\"category.count\" \r\n              :count=\"category.count\" \r\n              class=\"menu-badge\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧内容区域 -->\r\n      <div class=\"employees-content admin-content\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索员工...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n                @change=\"handleSearch\"\r\n              />\r\n              <a-tooltip title=\"刷新员工列表数据\" placement=\"bottom\">\r\n                <a-button @click=\"refreshData\">\r\n                  <ReloadOutlined />\r\n                </a-button>\r\n              </a-tooltip>\r\n            </a-space>\r\n          </template>\r\n\r\n          <!-- 员工表格 -->\r\n          <a-table\r\n            :columns=\"columns\"\r\n            :data-source=\"employeeList\"\r\n            :loading=\"loading\"\r\n            :pagination=\"pagination\"\r\n            row-key=\"id\"\r\n            @change=\"handleTableChange\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <!-- 员工信息列 -->\r\n              <template v-if=\"column.key === 'employee_info'\">\r\n                <div class=\"employee-info\">\r\n                  <a-avatar :size=\"40\" :style=\"{ background: getAvatarColor(record.name) }\">\r\n                    {{ record.name.charAt(0) }}\r\n                  </a-avatar>\r\n                  <div class=\"info-text\">\r\n                    <div class=\"name\">{{ record.name }}</div>\r\n                    <div class=\"employee-no\">工号: {{ record.employee_id }}</div>\r\n                  </div>\r\n                </div>\r\n              </template>\r\n\r\n              <!-- 状态列 -->\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"getStatusColor(record.employment_status)\">\r\n                  {{ getStatusText(record.employment_status) }}\r\n                </a-tag>\r\n              </template>\r\n\r\n              <!-- 部门列 -->\r\n              <template v-else-if=\"column.key === 'department_name'\">\r\n                <span>{{ record.department?.name || '-' }}</span>\r\n              </template>\r\n\r\n              <!-- 职位列 -->\r\n              <template v-else-if=\"column.key === 'position_name'\">\r\n                <span>{{ record.position?.name || '-' }}</span>\r\n              </template>\r\n\r\n              <!-- 直属上级列 -->\r\n              <template v-else-if=\"column.key === 'supervisor_name'\">\r\n                <span>{{ record.direct_supervisor?.name || '-' }}</span>\r\n              </template>\r\n\r\n              <!-- 联系方式列 -->\r\n              <template v-else-if=\"column.key === 'contact'\">\r\n                <div class=\"contact-info\">\r\n                  <div v-if=\"record.mobile || record.phone\" class=\"contact-item\">\r\n                    <PhoneOutlined class=\"contact-icon\" />\r\n                    <span>{{ record.mobile || record.phone }}</span>\r\n                  </div>\r\n                  <div v-if=\"record.email\" class=\"contact-item\">\r\n                    <MailOutlined class=\"contact-icon\" />\r\n                    <span>{{ record.email }}</span>\r\n                  </div>\r\n                </div>\r\n              </template>\r\n\r\n              <!-- 操作列 -->\r\n              <template v-else-if=\"column.key === 'action'\">\r\n              <a-space>\r\n                <a-tooltip title=\"查看详情\">\r\n                  <a-button type=\"text\" size=\"small\" @click=\"viewEmployee(record)\">\r\n                    <EyeOutlined />\r\n                  </a-button>\r\n                </a-tooltip>\r\n                <a-tooltip title=\"编辑员工\">\r\n                  <a-button type=\"text\" size=\"small\" @click=\"editEmployee(record)\">\r\n                    <EditOutlined />\r\n                  </a-button>\r\n                </a-tooltip>\r\n                <a-popconfirm\r\n                  title=\"确定要删除这个员工吗？\"\r\n                  @confirm=\"handleDeleteEmployee(record)\"\r\n                >\r\n                  <a-tooltip title=\"删除员工\">\r\n                    <a-button type=\"text\" size=\"small\" danger>\r\n                      <DeleteOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                </a-popconfirm>\r\n              </a-space>\r\n               </template>\r\n            </template>\r\n          </a-table>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 新建/编辑员工弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"modalTitle\"\r\n      :width=\"800\"\r\n      @ok=\"handleModalOk\"\r\n      @cancel=\"handleModalCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"员工姓名\" name=\"name\">\r\n              <a-input v-model:value=\"formData.name\" placeholder=\"请输入员工姓名\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"员工工号\" name=\"employee_id\">\r\n              <a-input v-model:value=\"formData.employee_id\" placeholder=\"请输入员工工号\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"关联用户\" name=\"user\">\r\n              <a-select\r\n                v-model:value=\"formData.user\"\r\n                placeholder=\"请选择关联用户\"\r\n                allow-clear\r\n                show-search\r\n                :filter-option=\"filterOption\"\r\n              >\r\n                <a-select-option v-for=\"user in userList\" :key=\"user.id\" :value=\"user.id\">\r\n                  {{ user.username }} - {{ user.first_name }} {{ user.last_name }}\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n        \r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"所属部门\" name=\"department\">\r\n              <a-select\r\n                v-model:value=\"formData.department\"\r\n                placeholder=\"请选择所属部门\"\r\n                allow-clear\r\n                @change=\"handleDepartmentChange\"\r\n              >\r\n                <a-select-option v-for=\"dept in departmentList\" :key=\"dept.id\" :value=\"dept.id\">\r\n                  {{ dept.name }}\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"职位\" name=\"position\">\r\n              <a-select\r\n                v-model:value=\"formData.position\"\r\n                placeholder=\"请选择职位\"\r\n                allow-clear\r\n              >\r\n                <a-select-option v-for=\"pos in filteredPositions\" :key=\"pos.id\" :value=\"pos.id\">\r\n                  {{ pos.name }}\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"直属上级\" name=\"supervisor\">\r\n              <a-select\r\n                v-model:value=\"formData.supervisor\"\r\n                placeholder=\"请选择直属上级\"\r\n                allow-clear\r\n                show-search\r\n                :filter-option=\"filterOption\"\r\n              >\r\n                <a-select-option v-for=\"emp in employeeList\" :key=\"emp.id\" :value=\"emp.id\">\r\n                  {{ emp.name }} - {{ emp.employee_no }}\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"手机号码\" name=\"phone\">\r\n              <a-input v-model:value=\"formData.phone\" placeholder=\"请输入手机号码\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"邮箱地址\" name=\"email\">\r\n              <a-input v-model:value=\"formData.email\" placeholder=\"请输入邮箱地址\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"8\">\r\n            <a-form-item label=\"入职日期\" name=\"hire_date\">\r\n              <a-date-picker\r\n                v-model:value=\"formData.hire_date\"\r\n                placeholder=\"请选择入职日期\"\r\n                style=\"width: 100%\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n\r\n\r\n        <a-form-item label=\"备注\" name=\"notes\">\r\n          <a-textarea\r\n            v-model:value=\"formData.notes\"\r\n            placeholder=\"请输入备注信息\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 员工详情弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"detailModalVisible\"\r\n      title=\"员工详情\"\r\n      :width=\"900\"\r\n      :footer=\"null\"\r\n    >\r\n      <div v-if=\"selectedEmployee\" class=\"employee-detail\">\r\n        <a-descriptions :column=\"3\" bordered>\r\n          <a-descriptions-item label=\"员工姓名\">\r\n            {{ selectedEmployee.name }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"员工工号\">\r\n            {{ selectedEmployee.employee_id }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"关联用户\">\r\n            {{ selectedEmployee.user?.username || '未关联' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"所属部门\">\r\n            {{ selectedEmployee.department?.name || '未设置' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"职位\">\r\n            {{ selectedEmployee.position?.name || '未设置' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"直属上级\">\r\n            {{ selectedEmployee.direct_supervisor?.name || '无' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"手机号码\">\r\n            {{ selectedEmployee.mobile || selectedEmployee.phone || '未填写' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"邮箱地址\">\r\n            {{ selectedEmployee.email || '未填写' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"入职日期\">\r\n            {{ selectedEmployee.hire_date || '未设置' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"创建时间\">\r\n            {{ selectedEmployee.created_at ? dayjs(selectedEmployee.created_at).format('YYYY-MM-DD HH:mm:ss') : '未知' }}\r\n          </a-descriptions-item>\r\n          <a-descriptions-item label=\"备注\" :span=\"3\">\r\n            {{ selectedEmployee.notes || '无' }}\r\n          </a-descriptions-item>\r\n        </a-descriptions>\r\n      </div>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport {\r\n  ContactsOutlined,\r\n  ExportOutlined,\r\n  PlusOutlined,\r\n  SearchOutlined,\r\n  ReloadOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  ApartmentOutlined\r\n} from '@ant-design/icons-vue';\r\nimport dayjs from 'dayjs';\r\nimport {\r\n  getEmployees,\r\n  getEmployeeDetail,\r\n  createEmployee,\r\n  updateEmployee,\r\n  deleteEmployee,\r\n  getDepartmentEmployees,\r\n  getPositionEmployees,\r\n  getAvailableUsers,\r\n  changeEmployeeStatus\r\n} from '@/api/organization';\r\nimport { getDepartments, getPositions } from '@/api/organization';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst searchText = ref('');\r\nconst statusFilter = ref('');\r\nconst departmentFilter = ref('');\r\nconst positionFilter = ref('');\r\nconst activeCategory = ref('all');\r\nconst modalVisible = ref(false);\r\nconst detailModalVisible = ref(false);\r\nconst isEdit = ref(false);\r\nconst selectedEmployee = ref(null);\r\nconst formRef = ref();\r\n\r\n// 表单数据\r\nconst formData = reactive({\r\n  name: '',\r\n  employee_id: '',\r\n  user: null,\r\n  department: null,\r\n  position: null,\r\n  supervisor: null,\r\n  phone: '',\r\n  email: '',\r\n  hire_date: null,\r\n  notes: ''\r\n});\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  name: [{ required: true, message: '请输入员工姓名', trigger: 'blur' }],\r\n  employee_id: [{ required: true, message: '请输入员工工号', trigger: 'blur' }],\r\n  department: [{ required: true, message: '请选择所属部门', trigger: 'change' }],\r\n  position: [{ required: true, message: '请选择职位', trigger: 'change' }],\r\n  status: [{ required: true, message: '请选择员工状态', trigger: 'change' }],\r\n  phone: [\r\n    { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\r\n  ],\r\n  email: [\r\n    { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\r\n  ]\r\n};\r\n\r\n// 数据\r\nconst employeeList = ref([]);\r\nconst userList = ref([]);\r\nconst departmentList = ref([]);\r\nconst positionList = ref([]);\r\n\r\n// 分类列表\r\nconst categoryList = ref([]);\r\n\r\n// 表格列定义\r\nconst columns = [\r\n  {\r\n    title: '员工姓名',\r\n    key: 'employee_info',\r\n    width: 200\r\n  },\r\n  {\r\n    title: '所属部门',\r\n    dataIndex: 'department_name',\r\n    key: 'department_name',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '职位',\r\n    dataIndex: 'position_name',\r\n    key: 'position_name',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '直属上级',\r\n    dataIndex: 'supervisor_name',\r\n    key: 'supervisor_name',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '联系方式',\r\n    key: 'contact',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '入职日期',\r\n    dataIndex: 'hire_date',\r\n    key: 'hire_date',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'action',\r\n    width: 150,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 计算属性\r\nconst modalTitle = computed(() => {\r\n  return isEdit.value ? '编辑员工' : '新建员工';\r\n});\r\n\r\nconst filteredPositions = computed(() => {\r\n  console.log('positionList:', positionList.value);\r\n  console.log('formData.department:', formData.department);\r\n  \r\n  if (!Array.isArray(positionList.value)) return [];\r\n  \r\n  // 如果没有选择部门，返回所有职位\r\n  if (!formData.department) {\r\n    return positionList.value;\r\n  }\r\n  \r\n  // 根据选择的部门过滤职位\r\n  const filtered = positionList.value.filter(pos => {\r\n    console.log('pos.department:', pos.department, 'pos.department?.id:', pos.department?.id);\r\n    return pos.department?.id === formData.department;\r\n  });\r\n  \r\n  console.log('filtered positions:', filtered);\r\n  return filtered;\r\n});\r\n\r\n// 方法\r\nconst getAvatarColor = (name) => {\r\n  const colors = ['#f56a00', '#7265e6', '#ffbf00', '#00a2ae', '#87d068'];\r\n  const index = name.charCodeAt(0) % colors.length;\r\n  return colors[index];\r\n};\r\n\r\nconst getStatusColor = (status) => {\r\n  const colors = {\r\n    'active': 'green',\r\n    'inactive': 'red',\r\n    'probation': 'orange'\r\n  };\r\n  return colors[status] || 'default';\r\n};\r\n\r\nconst getStatusText = (status) => {\r\n  const texts = {\r\n    'active': '在职',\r\n    'inactive': '离职',\r\n    'probation': '试用期'\r\n  };\r\n  return texts[status] || '未知';\r\n};\r\n\r\nconst handleCategoryChange = (key) => {\r\n  activeCategory.value = key;\r\n  // 根据选择的分类设置部门筛选\r\n  if (key === 'all') {\r\n    departmentFilter.value = '';\r\n  } else {\r\n    departmentFilter.value = key;\r\n  }\r\n  loadEmployees();\r\n};\r\n\r\nconst handleSearch = () => {\r\n  loadEmployees();\r\n};\r\n\r\nconst handleSearchChange = () => {\r\n  if (!searchText.value) {\r\n    loadEmployees();\r\n  }\r\n};\r\n\r\nconst handleFilterChange = () => {\r\n  loadEmployees();\r\n};\r\n\r\nconst handleDepartmentChange = () => {\r\n  formData.position = null; // 清空职位选择\r\n  console.log('部门选择变更:', formData.department);\r\n};\r\n\r\nconst resetFilters = () => {\r\n  searchText.value = '';\r\n  statusFilter.value = '';\r\n  departmentFilter.value = '';\r\n  positionFilter.value = '';\r\n  activeCategory.value = 'all';\r\n  // 重置部门分类时也要重置部门筛选\r\n  departmentFilter.value = '';\r\n  loadEmployees();\r\n};\r\n\r\nconst handleTableChange = (pag, filters, sorter) => {\r\n  pagination.current = pag.current;\r\n  pagination.pageSize = pag.pageSize;\r\n  loadEmployees();\r\n};\r\n\r\nconst loadEmployees = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const response = await getEmployees({\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize,\r\n      search: searchText.value,\r\n      status: statusFilter.value,\r\n      department: departmentFilter.value,\r\n      position: positionFilter.value\r\n    });\r\n    \r\n    const results = response.data?.results || response.results || [];\r\n    employeeList.value = Array.isArray(results) ? results : [];\r\n    pagination.total = response.data?.total || response.total || response.count || 0;\r\n  } catch (error) {\r\n    console.error('加载员工列表失败:', error);\r\n    message.error('加载员工列表失败');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst showAddModal = () => {\r\n  isEdit.value = false;\r\n  resetForm();\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst editEmployee = (record) => {\r\n  isEdit.value = true;\r\n  Object.assign(formData, {\r\n    id: record.id,\r\n    name: record.name,\r\n    employee_id: record.employee_id,\r\n    user: record.user?.id || null,\r\n    department: record.department?.id || null,\r\n    position: record.position?.id || null,\r\n    supervisor: record.direct_supervisor?.id || null,\r\n    phone: record.phone || record.mobile,\r\n    email: record.email,\r\n    hire_date: record.hire_date ? dayjs(record.hire_date) : null,\r\n    notes: record.notes\r\n  });\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst viewEmployee = (record) => {\r\n  selectedEmployee.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleDeleteEmployee = async (record) => {\r\n  try {\r\n    await deleteEmployee(record.id);\r\n    \r\n    message.success('删除成功');\r\n    loadEmployees();\r\n  } catch (error) {\r\n    console.error('删除员工失败:', error);\r\n    message.error('删除失败');\r\n  }\r\n};\r\n\r\nconst handleModalOk = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    console.log('提交前的formData:', formData);\r\n    \r\n    // 格式化数据，将前端字段名转换为后端API期望的字段名\r\n    const submitData = {\r\n      name: formData.name,\r\n      employee_id: formData.employee_id,\r\n      user_id: formData.user,\r\n      department_id: formData.department,\r\n      position_id: formData.position,\r\n      direct_supervisor_id: formData.supervisor,\r\n      phone: formData.phone,\r\n      mobile: formData.phone, // 后端使用mobile字段\r\n      email: formData.email,\r\n      office_location: null,\r\n      hire_date: formData.hire_date ? formData.hire_date.format('YYYY-MM-DD') : null,\r\n      probation_end_date: null,\r\n      contract_type: 'full_time',\r\n      employment_status: 'probation',\r\n      emergency_contact_name: null,\r\n      emergency_contact_phone: null,\r\n      notes: formData.notes || ''\r\n    };\r\n    \r\n    if (isEdit.value) {\r\n      // 编辑时需要包含ID\r\n      const updateData = { ...submitData, id: formData.id };\r\n      await updateEmployee(formData.id, updateData);\r\n      message.success('更新成功');\r\n    } else {\r\n      await createEmployee(submitData);\r\n      message.success('创建成功');\r\n    }\r\n    \r\n    modalVisible.value = false;\r\n    loadEmployees();\r\n  } catch (error) {\r\n    console.error('保存员工失败:', error);\r\n    \r\n    // 处理表单验证错误\r\n    if (error.errorFields) {\r\n      message.error('请检查表单输入');\r\n      return;\r\n    }\r\n    \r\n    // 处理API返回的错误\r\n    if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      \r\n      // 处理字段特定错误\r\n      if (errorData.employee_id && Array.isArray(errorData.employee_id)) {\r\n        message.error(`员工工号错误: ${errorData.employee_id[0]}`);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.name && Array.isArray(errorData.name)) {\r\n        message.error(`员工姓名错误: ${errorData.name[0]}`);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.user && Array.isArray(errorData.user)) {\r\n        message.error(`关联用户错误: ${errorData.user[0]}`);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.phone && Array.isArray(errorData.phone)) {\r\n        message.error(`手机号码错误: ${errorData.phone[0]}`);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.email && Array.isArray(errorData.email)) {\r\n        message.error(`邮箱地址错误: ${errorData.email[0]}`);\r\n        return;\r\n      }\r\n      \r\n      // 处理其他字段错误\r\n      const firstErrorField = Object.keys(errorData)[0];\r\n      if (firstErrorField && Array.isArray(errorData[firstErrorField])) {\r\n        message.error(`${firstErrorField}: ${errorData[firstErrorField][0]}`);\r\n        return;\r\n      }\r\n      \r\n      // 处理通用错误消息\r\n      if (errorData.detail) {\r\n        message.error(errorData.detail);\r\n        return;\r\n      }\r\n      \r\n      if (errorData.message) {\r\n        message.error(errorData.message);\r\n        return;\r\n      }\r\n    }\r\n    \r\n    // 默认错误消息\r\n    message.error(isEdit.value ? '更新失败' : '创建失败');\r\n  }\r\n};\r\n\r\nconst handleModalCancel = () => {\r\n  modalVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\nconst resetForm = () => {\r\n  Object.assign(formData, {\r\n    name: '',\r\n    employee_id: '',\r\n    user: null,\r\n    department: null,\r\n    position: null,\r\n    supervisor: null,\r\n    phone: '',\r\n    email: '',\r\n    hire_date: null,\r\n    notes: ''\r\n  });\r\n  if (formRef.value) {\r\n    formRef.value.resetFields();\r\n  }\r\n};\r\n\r\nconst exportEmployees = () => {\r\n  // 导出功能实现\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst filterOption = (input, option) => {\r\n  return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\r\n};\r\n\r\nconst getCurrentCategoryName = () => {\r\n  const category = categoryList.value.find(cat => cat.key === activeCategory.value);\r\n  return category ? category.name : '员工管理';\r\n};\r\n\r\nconst refreshData = () => {\r\n  loadDepartments();\r\n  loadPositions();\r\n  loadEmployees();\r\n};\r\n\r\nconst loadDepartments = async () => {\r\n  try {\r\n    const response = await getDepartments();\r\n    console.log(response.data.results)\r\n    if (response.status == 200){\r\n      const departments = response.data.results || response.results || [];\r\n      console.log(departments)\r\n      departmentList.value = Array.isArray(departments) ? departments : [];\r\n      \r\n      // 生成部门分类列表\r\n      const categories = [\r\n        { key: 'all', name: '全部员工', icon: 'ContactsOutlined', count: 0 }\r\n      ];\r\n      \r\n      departments.forEach(dept => {\r\n        categories.push({\r\n          key: dept.id.toString(),\r\n          name: dept.name,\r\n          icon: 'ApartmentOutlined',\r\n          count: dept.employee_count || 0\r\n        });\r\n      });\r\n      \r\n      categoryList.value = categories;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载部门列表失败:', error);\r\n    message.error('加载部门列表失败');\r\n  }\r\n};\r\n\r\nconst loadPositions = async () => {\r\n  try {\r\n    const response = await getPositions();\r\n    if (response.status == 200 ){\r\n      console.log(response.data.results)\r\n      const positions = response.data?.results || response.results || [];\r\n      positionList.value = Array.isArray(positions) ? positions : [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载职位列表失败:', error);\r\n    message.error('加载职位列表失败');\r\n  }\r\n};\r\n\r\n// 生命周期\r\nonMounted(() => {\r\n  loadEmployees();\r\n  loadDepartments();\r\n  loadPositions();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 员工管理页面特有的样式 */\r\n.employees-content {\r\n  height: calc(100vh - 200px);\r\n  overflow: hidden;\r\n}\r\n\r\n:deep(.ant-card) {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n:deep(.ant-card-body) {\r\n  flex: 1;\r\n  overflow: hidden;\r\n  padding: 16px;\r\n}\r\n\r\n:deep(.ant-table-wrapper) {\r\n  height: 100%;\r\n}\r\n\r\n:deep(.ant-table) {\r\n  height: 100%;\r\n}\r\n\r\n.employee-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.info-text {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2px;\r\n}\r\n\r\n.name {\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n.employee-no {\r\n  font-size: 12px;\r\n  color: #999;\r\n}\r\n\r\n.contact-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.contact-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.contact-icon {\r\n  color: #1890ff;\r\n}\r\n\r\n.employee-detail {\r\n  padding: 16px 0;\r\n}\r\n\r\n.salary-text {\r\n  font-weight: 500;\r\n  color: #52c41a;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\NetworkDeviceList.vue",["379","380","381","382","383","384","385","386","387","388","389","390"],"<template>\r\n  <div class=\"network-device-list-container\">\r\n    <div class=\"page-header\">\r\n      <h1>网络设备管理</h1>\r\n      <p>管理所有网络设备资产</p>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"search-card\">\r\n      <a-row gutter=\"[16, 16]\">\r\n        <a-col :span=\"6\">\r\n          <a-input v-model:value=\"searchKeyword\" placeholder=\"设备名称/IP\" allow-clear />\r\n        </a-col>\r\n        <a-col :span=\"6\">\r\n          <a-select v-model:value=\"deviceStatus\" placeholder=\"设备状态\" allow-clear>\r\n            <a-select-option value=\"online\">在线</a-select-option>\r\n            <a-select-option value=\"offline\">离线</a-select-option>\r\n            <a-select-option value=\"maintenance\">维护中</a-select-option>\r\n          </a-select>\r\n        </a-col>\r\n        <a-col :span=\"6\">\r\n          <a-select v-model:value=\"deviceType\" placeholder=\"设备类型\" allow-clear>\r\n            <a-select-option value=\"switch\">交换机</a-select-option>\r\n            <a-select-option value=\"router\">路由器</a-select-option>\r\n            <a-select-option value=\"firewall\">防火墙</a-select-option>\r\n            <a-select-option value=\"ap\">无线AP</a-select-option>\r\n            <a-select-option value=\"other\">其他网络设备</a-select-option>\r\n          </a-select>\r\n        </a-col>\r\n        <a-col :span=\"6\">\r\n          <a-row gutter=\"16\">\r\n            <a-col :span=\"12\">\r\n              <a-button type=\"primary\" @click=\"handleSearch\">搜索</a-button>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-button @click=\"handleReset\">重置</a-button>\r\n            </a-col>\r\n          </a-row>\r\n        </a-col>\r\n      </a-row>\r\n    </a-card>\r\n    \r\n    <div class=\"action-bar\">\r\n      <a-button type=\"primary\" icon=\"plus\">新增网络设备</a-button>\r\n      <a-button icon=\"download\">导出数据</a-button>\r\n      <a-button icon=\"sync\">刷新状态</a-button>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"table-card\">\r\n      <a-table \r\n        :columns=\"columns\" \r\n        :data-source=\"networkDevicesData\" \r\n        row-key=\"id\" \r\n        :pagination=\"pagination\" \r\n        @change=\"handleTableChange\"\r\n      >\r\n        <template #headerCell=\"{ column }\">\r\n          <span v-if=\"column.key === 'id'\">{{ column.title }} ({{ networkDevicesData.length }})</span>\r\n          <span v-else>{{ column.title }}</span>\r\n        </template>\r\n        <template #bodyCell=\"{ column, record }\">\r\n          <template v-if=\"column.key === 'status'\">\r\n            <span v-if=\"record.status === 'online'\" class=\"status-tag online\">在线</span>\r\n            <span v-else-if=\"record.status === 'offline'\" class=\"status-tag offline\">离线</span>\r\n            <span v-else-if=\"record.status === 'maintenance'\" class=\"status-tag maintenance\">维护中</span>\r\n          </template>\r\n          <template v-else-if=\"column.key === 'operation'\">\r\n            <a-button type=\"link\" @click=\"handleView(record.id)\">查看</a-button>\r\n            <a-button type=\"link\" @click=\"handleEdit(record.id)\">编辑</a-button>\r\n            <a-button type=\"link\" danger @click=\"handleDelete(record.id)\">删除</a-button>\r\n          </template>\r\n        </template>\r\n      </a-table>\r\n    </a-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { Input, Select, Button, Table, Card, Row, Col } from 'ant-design-vue';\r\nimport { PlusOutlined, DownloadOutlined, ReloadOutlined } from '@ant-design/icons-vue';\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst deviceStatus = ref('');\r\nconst deviceType = ref('');\r\n\r\n// 分页配置\r\nconst pagination = {\r\n  current: 1,\r\n  pageSize: 10,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n};\r\n\r\n// 模拟数据\r\nconst networkDevicesData = [\r\n  {\r\n    id: 'N001',\r\n    name: '交换机B-001',\r\n    type: '交换机',\r\n    model: 'Cisco Catalyst 9300',\r\n    serialNumber: 'SN20230002',\r\n    ipAddress: '192.168.1.2',\r\n    location: '数据中心A-1楼',\r\n    department: '技术部',\r\n    owner: '李四',\r\n    status: 'online',\r\n    purchaseDate: '2023-02-10',\r\n    warrantyEndDate: '2026-02-09'\r\n  },\r\n  {\r\n    id: 'N002',\r\n    name: '防火墙C-001',\r\n    type: '防火墙',\r\n    model: 'Palo Alto PA-220',\r\n    serialNumber: 'SN20230004',\r\n    ipAddress: '192.168.1.1',\r\n    location: '数据中心A-1楼',\r\n    department: '技术部',\r\n    owner: '王五',\r\n    status: 'maintenance',\r\n    purchaseDate: '2023-03-05',\r\n    warrantyEndDate: '2026-03-04'\r\n  },\r\n  {\r\n    id: 'N003',\r\n    name: '路由器D-001',\r\n    type: '路由器',\r\n    model: 'Cisco ISR 4331',\r\n    serialNumber: 'SN20230006',\r\n    ipAddress: '192.168.0.1',\r\n    location: '数据中心A-1楼',\r\n    department: '技术部',\r\n    owner: '赵六',\r\n    status: 'online',\r\n    purchaseDate: '2023-02-15',\r\n    warrantyEndDate: '2026-02-14'\r\n  },\r\n  {\r\n    id: 'N004',\r\n    name: '无线AP-E001',\r\n    type: '无线AP',\r\n    model: 'Cisco Catalyst 9120AX',\r\n    serialNumber: 'SN20230007',\r\n    ipAddress: '192.168.1.10',\r\n    location: '办公楼1层',\r\n    department: '行政部',\r\n    owner: '钱七',\r\n    status: 'online',\r\n    purchaseDate: '2023-03-10',\r\n    warrantyEndDate: '2026-03-09'\r\n  },\r\n  {\r\n    id: 'N005',\r\n    name: '交换机B-002',\r\n    type: '交换机',\r\n    model: 'H3C S5800-56C-POE+',\r\n    serialNumber: 'SN20230008',\r\n    ipAddress: '192.168.1.3',\r\n    location: '数据中心A-2楼',\r\n    department: '技术部',\r\n    owner: '孙八',\r\n    status: 'offline',\r\n    purchaseDate: '2023-02-20',\r\n    warrantyEndDate: '2026-02-19'\r\n  }\r\n];\r\n\r\n// 表格列定义\r\nconst columns = [\r\n  {\r\n    title: '设备编号',\r\n    dataIndex: 'id',\r\n    key: 'id',\r\n    fixed: 'left',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '设备名称',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '设备类型',\r\n    dataIndex: 'type',\r\n    key: 'type',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '型号',\r\n    dataIndex: 'model',\r\n    key: 'model',\r\n    width: 150\r\n  },\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ipAddress',\r\n    key: 'ipAddress',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '所在位置',\r\n    dataIndex: 'location',\r\n    key: 'location',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '所属部门',\r\n    dataIndex: 'department',\r\n    key: 'department',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '负责人',\r\n    dataIndex: 'owner',\r\n    key: 'owner',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 150\r\n  }\r\n];\r\n\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  console.log('搜索条件:', {\r\n    keyword: searchKeyword.value,\r\n    status: deviceStatus.value,\r\n    type: deviceType.value\r\n  });\r\n  // 这里应该调用API获取数据\r\n};\r\n\r\n// 处理重置\r\nconst handleReset = () => {\r\n  searchKeyword.value = '';\r\n  deviceStatus.value = '';\r\n  deviceType.value = '';\r\n};\r\n\r\n// 处理表格分页变化\r\nconst handleTableChange = (pagination, filters, sorter) => {\r\n  console.log('分页变化:', pagination);\r\n  // 这里应该根据分页信息重新获取数据\r\n};\r\n\r\n// 处理查看操作\r\nconst handleView = (id) => {\r\n  console.log('查看网络设备:', id);\r\n  // 这里应该跳转到网络设备详情页面\r\n};\r\n\r\n// 处理编辑操作\r\nconst handleEdit = (id) => {\r\n  console.log('编辑网络设备:', id);\r\n  // 这里应该跳转到网络设备编辑页面\r\n};\r\n\r\n// 处理删除操作\r\nconst handleDelete = (id) => {\r\n  console.log('删除网络设备:', id);\r\n  // 这里应该调用API删除网络设备\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.network-device-list-container {\r\n  padding: 24px;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.page-header h1 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.page-header p {\r\n  margin: 0;\r\n  color: rgba(0, 0, 0, 0.45);\r\n}\r\n\r\n.search-card {\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n}\r\n\r\n.action-bar {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.table-card {\r\n  overflow: hidden;\r\n}\r\n\r\n.status-tag {\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.status-tag.online {\r\n  background-color: #f6ffed;\r\n  color: #52c41a;\r\n  border: 1px solid #b7eb8f;\r\n}\r\n\r\n.status-tag.offline {\r\n  background-color: #fff2e8;\r\n  color: #fa8c16;\r\n  border: 1px solid #ffd591;\r\n}\r\n\r\n.status-tag.maintenance {\r\n  background-color: #e6f7ff;\r\n  color: #1890ff;\r\n  border: 1px solid #91d5ff;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\AssetStatusList.vue",["391","392","393","394","395","396","397","398","399","400"],"<template>\r\n  <div class=\"asset-status-list-container\">\r\n    <div class=\"page-header\">\r\n      <h1>资产状态管理</h1>\r\n      <p>管理资产状态信息</p>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"search-card\">\r\n      <a-row gutter=\"[16, 16]\">\r\n        <a-col :span=\"6\">\r\n          <a-input v-model:value=\"searchKeyword\" placeholder=\"状态名称\" allow-clear />\r\n        </a-col>\r\n        <a-col :span=\"18\" style=\"text-align: right;\">\r\n          <a-button type=\"primary\" @click=\"handleSearch\">搜索</a-button>\r\n          <a-button style=\"margin-left: 8px;\" @click=\"handleReset\">重置</a-button>\r\n        </a-col>\r\n      </a-row>\r\n    </a-card>\r\n    \r\n    <div class=\"action-bar\">\r\n      <a-button type=\"primary\" icon=\"plus\" @click=\"handleAddStatus\">新增状态</a-button>\r\n      <a-button icon=\"download\">导出数据</a-button>\r\n    </div>\r\n    \r\n    <a-card :bordered=\"false\" class=\"table-card\">\r\n      <a-table \r\n        :columns=\"columns\" \r\n        :data-source=\"statusData\" \r\n        row-key=\"id\" \r\n        :pagination=\"pagination\" \r\n        @change=\"handleTableChange\"\r\n      >\r\n        <template #headerCell=\"{ column }\">\r\n          <span v-if=\"column.key === 'id'\">{{ column.title }} ({{ statusData.length }})</span>\r\n          <span v-else>{{ column.title }}</span>\r\n        </template>\r\n        <template #bodyCell=\"{ column, record }\">\r\n          <template v-if=\"column.key === 'color'\">\r\n            <span class=\"color-sample\" :style=\"{ backgroundColor: record.color }\"></span>\r\n          </template>\r\n          <template v-if=\"column.key === 'operation'\">\r\n            <a-button type=\"link\" @click=\"handleEdit(record.id)\">编辑</a-button>\r\n            <a-button type=\"link\" danger @click=\"handleDelete(record.id)\">删除</a-button>\r\n          </template>\r\n        </template>\r\n      </a-table>\r\n    </a-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { Input, Button, Table, Card, Row, Col } from 'ant-design-vue';\r\nimport { PlusOutlined, DownloadOutlined } from '@ant-design/icons-vue';\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\n\r\n// 分页配置\r\nconst pagination = {\r\n  current: 1,\r\n  pageSize: 10,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n};\r\n\r\n// 模拟数据\r\nconst statusData = [\r\n  {\r\n    id: '1',\r\n    name: '在线',\r\n    color: '#52c41a',\r\n    description: '资产正常运行中',\r\n    assetCount: 112,\r\n    createTime: '2023-01-01 10:00:00',\r\n    updateTime: '2023-01-01 10:00:00'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: '离线',\r\n    color: '#fa8c16',\r\n    description: '资产当前不在线',\r\n    assetCount: 8,\r\n    createTime: '2023-01-01 10:00:00',\r\n    updateTime: '2023-01-01 10:00:00'\r\n  },\r\n  {\r\n    id: '3',\r\n    name: '维护中',\r\n    color: '#1890ff',\r\n    description: '资产正在进行维护',\r\n    assetCount: 4,\r\n    createTime: '2023-01-01 10:00:00',\r\n    updateTime: '2023-01-01 10:00:00'\r\n  },\r\n  {\r\n    id: '4',\r\n    name: '已下线',\r\n    color: '#8c8c8c',\r\n    description: '资产已停止使用',\r\n    assetCount: 4,\r\n    createTime: '2023-01-01 10:00:00',\r\n    updateTime: '2023-01-01 10:00:00'\r\n  },\r\n  {\r\n    id: '5',\r\n    name: '故障',\r\n    color: '#f5222d',\r\n    description: '资产出现故障',\r\n    assetCount: 0,\r\n    createTime: '2023-01-01 10:00:00',\r\n    updateTime: '2023-01-01 10:00:00'\r\n  },\r\n  {\r\n    id: '6',\r\n    name: '待上线',\r\n    color: '#722ed1',\r\n    description: '资产已采购但尚未上线',\r\n    assetCount: 0,\r\n    createTime: '2023-01-01 10:00:00',\r\n    updateTime: '2023-01-01 10:00:00'\r\n  }\r\n];\r\n\r\n// 表格列定义\r\nconst columns = [\r\n  {\r\n    title: '状态编号',\r\n    dataIndex: 'id',\r\n    key: 'id',\r\n    fixed: 'left',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '状态名称',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '状态颜色',\r\n    dataIndex: 'color',\r\n    key: 'color',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '描述',\r\n    dataIndex: 'description',\r\n    key: 'description',\r\n    width: 250\r\n  },\r\n  {\r\n    title: '关联资产数',\r\n    dataIndex: 'assetCount',\r\n    key: 'assetCount',\r\n    width: 120,\r\n    sorter: (a, b) => a.assetCount - b.assetCount\r\n  },\r\n  {\r\n    title: '创建时间',\r\n    dataIndex: 'createTime',\r\n    key: 'createTime',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'updateTime',\r\n    key: 'updateTime',\r\n    width: 180\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 120\r\n  }\r\n];\r\n\r\n// 处理搜索\r\nconst handleSearch = () => {\r\n  console.log('搜索条件:', {\r\n    keyword: searchKeyword.value\r\n  });\r\n  // 这里应该调用API获取数据\r\n};\r\n\r\n// 处理重置\r\nconst handleReset = () => {\r\n  searchKeyword.value = '';\r\n};\r\n\r\n// 处理表格分页变化\r\nconst handleTableChange = (pagination, filters, sorter) => {\r\n  console.log('分页变化:', pagination);\r\n  // 这里应该根据分页信息重新获取数据\r\n};\r\n\r\n// 新增状态\r\nconst handleAddStatus = () => {\r\n  console.log('新增状态');\r\n  // 这里应该打开新增状态的模态框\r\n};\r\n\r\n// 处理编辑操作\r\nconst handleEdit = (id) => {\r\n  console.log('编辑状态:', id);\r\n  // 这里应该打开编辑状态的模态框\r\n};\r\n\r\n// 处理删除操作\r\nconst handleDelete = (id) => {\r\n  console.log('删除状态:', id);\r\n  // 这里应该显示确认删除的模态框，然后调用API删除状态\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.asset-status-list-container {\r\n  padding: 24px;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.page-header h1 {\r\n  margin: 0 0 8px 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.page-header p {\r\n  margin: 0;\r\n  color: rgba(0, 0, 0, 0.45);\r\n}\r\n\r\n.search-card {\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n}\r\n\r\n.action-bar {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.table-card {\r\n  overflow: hidden;\r\n}\r\n\r\n.color-sample {\r\n  display: inline-block;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 50%;\r\n  border: 1px solid #d9d9d9;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\IPAdd.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\BusinessList.vue",["401","402"],"<template>\r\n  <div class=\"business-table-container\">\r\n    <!-- 表格头部 -->\r\n    <div class=\"table-header\">\r\n      <div class=\"table-title\">\r\n        <h3>\r\n          <AppstoreOutlined />\r\n          业务列表\r\n        </h3>\r\n        <div class=\"stats-inline\">\r\n          <span class=\"stat-item total\">\r\n            总业务 <strong>{{ businessList.length || 0 }}</strong>个\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div class=\"table-actions\">\r\n        <a-space size=\"middle\">\r\n          <a-button type=\"primary\" @click=\"showAddModal\">\r\n            <template #icon><PlusOutlined /></template>\r\n            新增业务\r\n          </a-button>\r\n          <a-button @click=\"handleExport\">\r\n            <template #icon><ExportOutlined /></template>\r\n            导出数据\r\n          </a-button>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 查询筛选区域 -->\r\n    <div class=\"filter-section\">\r\n      <div class=\"filter-header\">\r\n        <h4 class=\"filter-title\">\r\n          <SearchOutlined class=\"title-icon\" />\r\n          查询筛选\r\n        </h4>\r\n        <div class=\"filter-actions\">\r\n          <a-space size=\"middle\">\r\n            <a-button type=\"primary\" @click=\"handleSearch\">\r\n              <template #icon><SearchOutlined /></template>\r\n              搜索\r\n            </a-button>\r\n            <a-button @click=\"handleReset\">\r\n              <template #icon><ReloadOutlined /></template>\r\n              重置\r\n            </a-button>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n      <div class=\"filter-content\">\r\n        <a-row :gutter=\"[12, 8]\">\r\n          <a-col :xl=\"8\" :lg=\"8\" :md=\"12\" :sm=\"24\">\r\n            <div class=\"filter-item\">\r\n              <label class=\"filter-label\">业务名称</label>\r\n              <a-input\r\n                v-model:value=\"searchForm.name\"\r\n                placeholder=\"输入业务名称\"\r\n                allow-clear\r\n              >\r\n                <template #prefix><SearchOutlined /></template>\r\n              </a-input>\r\n            </div>\r\n          </a-col>\r\n\r\n          <a-col :xl=\"8\" :lg=\"8\" :md=\"12\" :sm=\"24\">\r\n            <div class=\"filter-item\">\r\n              <label class=\"filter-label\">上线日期</label>\r\n              <a-range-picker\r\n                v-model:value=\"searchForm.dateRange\"\r\n                format=\"YYYY-MM-DD\"\r\n                style=\"width: 100%\"\r\n              />\r\n            </div>\r\n          </a-col>\r\n        </a-row>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 业务列表表格 -->\r\n    <a-table\r\n      :columns=\"columns\"\r\n      :data-source=\"businessList\"\r\n      :pagination=\"pagination\"\r\n      :row-selection=\"rowSelection\"\r\n      :scroll=\"{ x: 1200 }\"\r\n      size=\"middle\"\r\n      @change=\"handleTableChange\"\r\n    >\r\n      <!-- 业务名称列 -->\r\n      <template #bodyCell=\"{ column, record }\">\r\n        <template v-if=\"column.dataIndex === 'name'\">\r\n          <div class=\"business-name\">\r\n            <a-button type=\"link\" @click=\"viewDetail(record)\">\r\n              {{ record.name }}\r\n            </a-button>\r\n          </div>\r\n        </template>\r\n\r\n        <!-- 责任部门|责任人列 -->\r\n        <template v-else-if=\"column.dataIndex === 'responsibility'\">\r\n          <div class=\"responsibility-info\">\r\n            <div class=\"department\">\r\n                  <TeamOutlined class=\"icon\" />\r\n                  {{ record.department_name }}\r\n                </div>\r\n                <div class=\"person\">\r\n                  <UserOutlined class=\"icon\" />\r\n                  {{ record.responsible_person }}\r\n                </div>\r\n              </div>\r\n            </template>\r\n\r\n            <!-- 上线日期列 -->\r\n            <template v-else-if=\"column.dataIndex === 'online_date'\">\r\n              <div class=\"date-info\">\r\n                <CalendarOutlined class=\"icon\" />\r\n                {{ formatDate(record.online_date) }}\r\n              </div>\r\n            </template>\r\n\r\n            <!-- 访问地址列 -->\r\n            <template v-else-if=\"column.dataIndex === 'access_url'\">\r\n              <div class=\"url-info\">\r\n                <a-button\r\n                  v-if=\"record.access_url\"\r\n                  type=\"link\"\r\n                  size=\"small\"\r\n                  @click=\"openUrl(record.access_url)\"\r\n                >\r\n                  <template #icon><LinkOutlined /></template>\r\n                  {{record.access_url}}\r\n                </a-button>\r\n                <span v-else class=\"no-url\">-</span>\r\n              </div>\r\n            </template>\r\n\r\n            <!-- 操作列 -->\r\n            <template v-else-if=\"column.dataIndex === 'action'\">\r\n              <div class=\"action-buttons\">\r\n                <a-tooltip title=\"查看详情\">\r\n                  <a-button \r\n                    type=\"text\" \r\n                    size=\"small\" \r\n                    @click=\"viewDetail(record)\"\r\n                    class=\"action-btn\"\r\n                  >\r\n                    <template #icon><EyeOutlined /></template>\r\n                  </a-button>\r\n                </a-tooltip>\r\n                <a-tooltip title=\"编辑\">\r\n                  <a-button \r\n                    type=\"text\" \r\n                    size=\"small\" \r\n                    @click=\"editBusiness(record)\"\r\n                    class=\"action-btn\"\r\n                  >\r\n                    <template #icon><EditOutlined /></template>\r\n                  </a-button>\r\n                </a-tooltip>\r\n                <a-popconfirm\r\n                  title=\"确定要删除这个业务吗？\"\r\n                  @confirm=\"deleteBusiness(record)\"\r\n                  ok-text=\"确定\"\r\n                  cancel-text=\"取消\"\r\n                >\r\n                  <a-tooltip title=\"删除\">\r\n                    <a-button \r\n                      type=\"text\" \r\n                      size=\"small\" \r\n                      danger\r\n                      class=\"action-btn\"\r\n                    >\r\n                      <template #icon><DeleteOutlined /></template>\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                </a-popconfirm>\r\n              </div>\r\n            </template>\r\n          </template>\r\n        </a-table>\r\n\r\n    <!-- 新增/编辑业务模态框 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"modalTitle\"\r\n      width=\"800px\"\r\n      @ok=\"handleSubmit\"\r\n      @cancel=\"handleCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"业务名称\" name=\"name\">\r\n              <a-input\r\n                v-model:value=\"formData.name\"\r\n                placeholder=\"请输入业务名称\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"上线日期\" name=\"online_date\">\r\n              <a-date-picker\r\n                v-model:value=\"formData.online_date\"\r\n                style=\"width: 100%\"\r\n                format=\"YYYY-MM-DD\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"责任人\" name=\"responsible_person\">\r\n              <a-select\r\n                v-model:value=\"formData.responsible_person\"\r\n                placeholder=\"请选择责任人\"\r\n                show-search\r\n                :filter-option=\"filterOption\"\r\n              >\r\n                <a-select-option\r\n                  v-for=\"user in users\"\r\n                  :key=\"user.id\"\r\n                  :value=\"user.name\"\r\n                >\r\n                  {{ user.name }} ({{ user.employee_id }})\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item label=\"访问地址\" name=\"access_url\">\r\n          <a-input\r\n            v-model:value=\"formData.access_url\"\r\n            placeholder=\"请输入访问地址，如：https://example.com\"\r\n          />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"业务描述\" name=\"description\">\r\n          <a-textarea\r\n            v-model:value=\"formData.description\"\r\n            placeholder=\"请输入业务描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { useRouter } from 'vue-router';\r\nimport dayjs from 'dayjs';\r\nimport { businessAPI } from '@/api/businessManagement';\r\nimport {\r\n  AppstoreOutlined,\r\n  PlusOutlined,\r\n  ExportOutlined,\r\n  SearchOutlined,\r\n  ReloadOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n  CalendarOutlined,\r\n  LinkOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\nconst router = useRouter();\r\n\r\n// 响应式数据\r\nconst businessList = ref([]);\r\nconst selectedRowKeys = ref([]);\r\nconst modalVisible = ref(false);\r\nconst isEdit = ref(false);\r\nconst currentRecord = ref(null);\r\nconst users = ref([]);\r\nconst formRef = ref();\r\n\r\n// 搜索表单\r\nconst searchForm = reactive({\r\n  name: '',\r\n  dateRange: []\r\n});\r\n\r\n// 表单数据\r\nconst formData = reactive({\r\n  name: '',\r\n  responsible_person: '',\r\n  online_date: null,\r\n  access_url: '',\r\n  description: '',\r\n  status: 'active'\r\n});\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  name: [{ required: true, message: '请输入业务名称', trigger: 'blur' }],\r\n  responsible_person: [{ required: true, message: '请选择责任人', trigger: 'change' }],\r\n  online_date: [{ required: true, message: '请选择上线日期', trigger: 'change' }],\r\n  access_url: [\r\n    { \r\n      validator: (rule, value) => {\r\n        if (!value || value.trim() === '') {\r\n          return Promise.resolve();\r\n        }\r\n        const urlPattern = /^(https?:\\/\\/)([\\da-z.-]+\\.[a-z.]{2,6}|127.0.0.1|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})(:\\d+)?([/\\w .-]*)*\\/?$/;\r\n        if (!urlPattern.test(value)) {\r\n          return Promise.reject(new Error('请输入有效的URL地址'));\r\n        }\r\n        return Promise.resolve();\r\n      },\r\n      trigger: 'blur'\r\n    }\r\n  ]\r\n};\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`\r\n});\r\n\r\n// 表格列配置\r\nconst columns = [\r\n  {\r\n    title: '业务名称',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    width: 200,\r\n    sorter: true\r\n  },\r\n  {\r\n    title: '责任人',\r\n    dataIndex: 'responsible_person',\r\n    key: 'responsible_person',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '上线日期',\r\n    dataIndex: 'online_date',\r\n    key: 'online_date',\r\n    width: 150,\r\n    sorter: true\r\n  },\r\n  {\r\n    title: '访问地址',\r\n    dataIndex: 'access_url',\r\n    key: 'access_url',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '创建时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at',\r\n    width: 150,\r\n    sorter: true,\r\n    customRender: ({ text }) => formatDate(text)\r\n  },\r\n  {\r\n    title: '操作',\r\n    dataIndex: 'action',\r\n    key: 'action',\r\n    width: 120,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 行选择配置\r\nconst rowSelection = {\r\n  selectedRowKeys,\r\n  onChange: (keys) => {\r\n    selectedRowKeys.value = keys;\r\n  }\r\n};\r\n\r\n// 计算属性\r\nconst modalTitle = computed(() => {\r\n  return isEdit.value ? '编辑业务' : '新增业务';\r\n});\r\n\r\n// 方法\r\nconst fetchBusinessList = async () => {\r\n  try {\r\n    const params = {\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize,\r\n      ...searchForm\r\n    };\r\n    \r\n    if (searchForm.dateRange && searchForm.dateRange.length === 2) {\r\n      params.start_date = dayjs(searchForm.dateRange[0]).format('YYYY-MM-DD');\r\n      params.end_date = dayjs(searchForm.dateRange[1]).format('YYYY-MM-DD');\r\n    }\r\n    \r\n    const response = await businessAPI.getBusinessList(params);\r\n    businessList.value = response.data.results || [];\r\n    pagination.total = response.data.count || 0;\r\n  } catch (error) {\r\n    message.error('获取业务列表失败');\r\n  }\r\n};\r\n\r\n\r\n\r\nconst fetchUsers = async () => {\r\n  try {\r\n    const response = await businessAPI.getUsers();\r\n    // 处理分页数据结构\r\n    users.value = response.data?.results || response.results || response.data || [];\r\n  } catch (error) {\r\n    console.error('获取用户列表失败:', error);\r\n  }\r\n};\r\n\r\n\r\n\r\nconst handleSearch = () => {\r\n  pagination.current = 1;\r\n  fetchBusinessList();\r\n};\r\n\r\nconst handleReset = () => {\r\n  Object.assign(searchForm, {\r\n    name: '',\r\n    dateRange: []\r\n  });\r\n  handleSearch();\r\n};\r\n\r\nconst handleTableChange = (pag, filters, sorter) => {\r\n  pagination.current = pag.current;\r\n  pagination.pageSize = pag.pageSize;\r\n  fetchBusinessList();\r\n};\r\n\r\nconst showAddModal = () => {\r\n  isEdit.value = false;\r\n  currentRecord.value = null;\r\n  resetForm();\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst editBusiness = (record) => {\r\n  isEdit.value = true;\r\n  currentRecord.value = record;\r\n  Object.assign(formData, {\r\n    name: record.name,\r\n    responsible_person: record.responsible_person,\r\n    online_date: record.online_date ? dayjs(record.online_date) : null,\r\n    access_url: record.access_url,\r\n    description: record.description,\r\n    status: record.status || 'active'\r\n  });\r\n  modalVisible.value = true;\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    const submitData = {\r\n      ...formData,\r\n      online_date: formData.online_date ? dayjs(formData.online_date).format('YYYY-MM-DD') : null,\r\n      access_url: formData.access_url && formData.access_url.trim() ? formData.access_url.trim() : null\r\n    };\r\n    \r\n    if (isEdit.value) {\r\n      await businessAPI.updateBusiness(currentRecord.value.id, submitData);\r\n      message.success('业务更新成功');\r\n    } else {\r\n      await businessAPI.createBusiness(submitData);\r\n      message.success('业务创建成功');\r\n    }\r\n    \r\n    modalVisible.value = false;\r\n    fetchBusinessList();\r\n  } catch (error) {\r\n    if (error.errorFields) {\r\n      message.error('请检查表单输入');\r\n    } else {\r\n      message.error(isEdit.value ? '业务更新失败' : '业务创建失败');\r\n    }\r\n  }\r\n};\r\n\r\nconst handleCancel = () => {\r\n  modalVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\nconst resetForm = () => {\r\n  Object.assign(formData, {\r\n    name: '',\r\n    responsible_person: '',\r\n    online_date: null,\r\n    access_url: '',\r\n    description: '',\r\n    status: 'active'\r\n  });\r\n  formRef.value?.resetFields();\r\n};\r\n\r\nconst deleteBusiness = async (record) => {\r\n  try {\r\n    await businessAPI.deleteBusiness(record.id);\r\n    message.success('删除成功');\r\n    fetchBusinessList();\r\n  } catch (error) {\r\n    message.error('删除失败');\r\n  }\r\n};\r\n\r\nconst viewDetail = (record) => {\r\n  router.push({\r\n    name: 'businessDetail',\r\n    params: { id: record.id }\r\n  });\r\n};\r\n\r\nconst openUrl = (url) => {\r\n  if (url) {\r\n    window.open(url, '_blank');\r\n  }\r\n};\r\n\r\nconst handleExport = async () => {\r\n  try {\r\n    const response = await businessAPI.exportBusiness(searchForm);\r\n    const blob = new Blob([response.data], {\r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `业务列表_${dayjs().format('YYYY-MM-DD')}.xlsx`;\r\n    link.click();\r\n    window.URL.revokeObjectURL(url);\r\n    message.success('导出成功');\r\n  } catch (error) {\r\n    message.error('导出失败');\r\n  }\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  return date ? dayjs(date).format('YYYY-MM-DD') : '-';\r\n};\r\n\r\nconst filterOption = (input, option) => {\r\n  return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\r\n};\r\n\r\n// 组件挂载时获取数据\r\nonMounted(() => {\r\n  fetchBusinessList();\r\n  fetchUsers();\r\n});\r\n\r\n</script>\r\n\r\n<style scoped>\r\n.business-table-container {\r\n  min-height: 100vh;\r\n}\r\n\r\n/* 表格头部样式 */\r\n.table-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 12px 16px;\r\n  background: white;\r\n  border-bottom: 1px solid #e8e8e8;\r\n  margin-bottom: 0;\r\n}\r\n\r\n.table-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n}\r\n\r\n.table-title h3 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.stats-inline {\r\n  display: flex;\r\n  gap: 16px;\r\n}\r\n\r\n.stat-item {\r\n  font-size: 13px;\r\n  color: #8c8c8c;\r\n}\r\n\r\n.stat-item strong {\r\n  color: #1890ff;\r\n}\r\n\r\n.table-actions {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n/* 筛选区域样式 */\r\n.filter-section {\r\n  padding: 12px 16px;\r\n  background: #f8f9fa;\r\n  border-bottom: 1px solid #e8e8e8;\r\n}\r\n\r\n.filter-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.filter-title {\r\n  margin: 0;\r\n  font-size: 13px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n}\r\n\r\n.title-icon {\r\n  color: #1890ff;\r\n}\r\n\r\n.filter-actions {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.filter-content {\r\n  margin: 0;\r\n}\r\n\r\n.filter-item {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.filter-label {\r\n  display: block;\r\n  margin-bottom: 6px;\r\n  font-weight: 500;\r\n  color: #262626;\r\n  font-size: 13px;\r\n}\r\n\r\n/* 业务信息样式 */\r\n.business-name {\r\n  font-weight: 500;\r\n}\r\n\r\n.responsibility-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.department,\r\n.person {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 12px;\r\n}\r\n\r\n.department {\r\n  color: #1890ff;\r\n}\r\n\r\n.person {\r\n  color: #52c41a;\r\n}\r\n\r\n.icon {\r\n  margin-right: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.date-info {\r\n  display: flex;\r\n  align-items: center;\r\n  color: #666;\r\n}\r\n\r\n.url-info {\r\n  text-align: center;\r\n}\r\n\r\n.no-url {\r\n  color: #ccc;\r\n}\r\n\r\n/* 操作按钮样式 */\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 4px;\r\n  align-items: center;\r\n}\r\n\r\n.action-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 4px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: #f5f5f5;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.action-btn.danger:hover {\r\n  background-color: #fff2f0;\r\n  color: #ff4d4f;\r\n}\r\n\r\n.action-btn .anticon {\r\n  font-size: 14px;\r\n}\r\n\r\n/* 表格样式优化 */\r\n:deep(.ant-table) {\r\n  font-size: 13px;\r\n}\r\n\r\n:deep(.ant-table-thead > tr > th) {\r\n  background: #fafafa;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n:deep(.ant-table-tbody > tr:hover > td) {\r\n  background: #f5f5f5;\r\n}\r\n\r\n:deep(.ant-table-row-selected) {\r\n  background: #e6f7ff;\r\n}\r\n\r\n:deep(.ant-table-row-selected:hover > td) {\r\n  background: #bae7ff;\r\n}\r\n\r\n:deep(.ant-pagination) {\r\n  margin: 16px 0;\r\n  text-align: right;\r\n}\r\n\r\n:deep(.ant-tag) {\r\n  margin: 0;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .business-table-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .table-header {\r\n    flex-direction: column;\r\n    gap: 12px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .table-title {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .responsibility-info {\r\n    font-size: 11px;\r\n  }\r\n  \r\n  .action-buttons {\r\n    flex-direction: column;\r\n    gap: 2px;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\IPList.vue",["403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447"],"<template>\r\n  <div class=\"ip-list-container\">\r\n\r\n\r\n    <!-- IP表格组件 -->\r\n    <IPTable\r\n      :dataSource=\"ipData\"\r\n      :loading=\"loading\"\r\n      :pagination=\"pagination\"\r\n      :selectedRowKeys=\"selectedRowKeys\"\r\n      :searchKeyword=\"searchKeyword\"\r\n      :ipStatus=\"ipStatus\"\r\n      :ipType=\"ipType\"\r\n      :totalCount=\"statistics.total\"\r\n      :activeCount=\"statistics.active\"\r\n      :availableCount=\"statistics.available\"\r\n      :onlineCount=\"statistics.online\"\r\n      @select-change=\"onSelectChange\"\r\n      @select-all=\"onSelectAll\"\r\n      @table-change=\"handleTableChange\"\r\n      @view=\"handleView\"\r\n      @edit=\"handleEdit\"\r\n      @delete=\"handleDelete\"\r\n      @ping=\"handlePing\"\r\n      @toggle-monitoring=\"handleToggleMonitoring\"\r\n      @batch-delete=\"handleBatchDelete\"\r\n      @batch-toggle-monitoring=\"handleBatchToggleMonitoring\"\r\n      @clear-selection=\"clearSelection\"\r\n      @add=\"handleAdd\"\r\n      @scan=\"handleScan\"\r\n      @export=\"handleExport\"\r\n      @header-batch-ping=\"handleBatchPing\"\r\n      @list-management=\"handleListManagement\"\r\n      @search=\"handleSearch\"\r\n      @reset=\"handleReset\"\r\n      @search-input=\"handleSearchInput\"\r\n      @status-change=\"handleStatusChange\"\r\n      @type-change=\"handleTypeChange\"\r\n      :batchDeleting=\"batchDeleting\"\r\n      :batchMonitoringToggling=\"batchMonitoringToggling\"\r\n    />\r\n\r\n    <!-- 监控操作组件 -->\r\n    <MonitoringActions\r\n      :selectedIP=\"selectedIP\"\r\n      :detailModalVisible=\"detailModalVisible\"\r\n      :scanModalVisible=\"scanModalVisible\"\r\n      :batchPingState=\"batchPingState\"\r\n      :taskResultModalVisible=\"taskResultModalVisible\"\r\n      :scanFormData=\"scanFormData\"\r\n      :scanRules=\"scanRules\"\r\n      :selectedTask=\"selectedTask\"\r\n      :taskResults=\"taskResults\"\r\n      :resultLoading=\"resultLoading\"\r\n      :resultColumns=\"resultColumns\"\r\n      @close-detail-modal=\"detailModalVisible = false\"\r\n      @close-scan-modal=\"handleScanCancel\"\r\n      @scan-confirm=\"handleScanConfirm\"\r\n      @close-batch-ping=\"closeBatchPingModal\"\r\n      @start-batch-ping=\"startBatchPingTest\"\r\n      @close-task-result=\"taskResultModalVisible = false\"\r\n    />\r\n\r\n    <!-- 模板选择抽屉组件 -->\r\n    <TemplateDrawer \r\n      v-model:visible=\"templateDrawerVisible\"\r\n      v-model:selectedTemplateIds=\"selectedTemplateIds\"\r\n      :loading=\"templateLoading\"\r\n      :selectedIP=\"selectedIP\"\r\n      @confirm=\"handleCreateMonitoring\"\r\n      @close=\"handleCloseTemplateDrawer\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted, onUnmounted, watch, onBeforeUnmount, nextTick, h, createVNode } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { message, Modal } from 'ant-design-vue';\r\nimport { ipAPI } from '@/api';\r\nimport { suppressResizeObserverError } from '@/utils/errorHandler';\r\nimport * as Vue from 'vue';\r\nimport * as antdvIcons from '@ant-design/icons-vue';\r\n\r\n// 导入拆分的组件\r\nimport IPTable from '@/components/business/IPTable.vue';\r\nimport MonitoringActions from '@/components/business/MonitoringActions.vue';\r\nimport TemplateDrawer from '@/components/business/TemplateDrawer.vue';\r\nimport { \r\n  ExclamationCircleOutlined,\r\n} from '@ant-design/icons-vue';\r\n\r\n// 路由实例\r\nconst router = useRouter();\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst ipStatus = ref('');\r\nconst ipType = ref('');\r\n\r\n// IP数据状态 - 确保始终是数组\r\nconst ipData = ref([]);\r\nconst loading = ref(false);\r\n\r\n// 批量操作相关状态\r\nconst selectedRowKeys = ref([]);\r\nconst batchDeleting = ref(false);\r\nconst batchMonitoringToggling = ref(false);\r\n\r\n// 模板选择抽屉相关状态\r\nconst templateDrawerVisible = ref(false);\r\nconst zabbixTemplates = ref([]);\r\nconst selectedTemplateIds = ref([]);\r\nconst templateLoading = ref(false);\r\nconst templateSearchKeyword = ref('');\r\nconst monitoringCreating = ref(false);\r\nconst selectedCategory = ref(''); // 当前选中的分类\r\nconst expandedCategories = ref({}); // 展开的分类\r\n\r\n// 防御性检查，确保ipData始终是数组\r\nconst setIPData = (data) => {\r\n  if (Array.isArray(data)) {\r\n    // 为每个IP记录设置保护状态信息\r\n    const processedData = data.map(ip => {\r\n      // 确保保护状态字段存在\r\n      if (ip.is_protected === undefined) {\r\n        ip.is_protected = ip.is_auto_discovered || false;\r\n      }\r\n      \r\n      // 设置保护原因\r\n      if (!ip.protection_reason && ip.is_auto_discovered) {\r\n        ip.protection_reason = '自动发现的IP地址';\r\n      }\r\n      \r\n      // 设置可编辑字段列表\r\n      if (ip.is_auto_discovered) {\r\n        ip.editable_fields = ['description', 'status'];\r\n      } else {\r\n        ip.editable_fields = 'all';\r\n      }\r\n      \r\n      return ip;\r\n    });\r\n    \r\n    ipData.value = processedData;\r\n  } else {\r\n    console.warn('尝试设置非数组数据到ipData:', data);\r\n    ipData.value = [];\r\n  }\r\n};\r\n\r\n// 统计计算属性 - 添加防御性检查\r\nconst activeCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.status === 'active').length;\r\n});\r\n\r\nconst availableCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.status === 'available').length;\r\n});\r\n\r\nconst onlineCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\r\n});\r\n\r\n// 统计对象\r\nconst statistics = computed(() => ({\r\n  total: ipData.value.length || 0,\r\n  active: activeCount.value,\r\n  available: availableCount.value,\r\n  online: onlineCount.value\r\n}));\r\n\r\n// 计算属性 - 扫描相关\r\nconst needsKey = computed(() => {\r\n  const type = scanFormData.checkType;\r\n  // Zabbix agent, SNMPv1, SNMPv2, SNMPv3 需要key\r\n  return type === 9 || type === 10 || type === 11 || type === 13;\r\n});\r\n\r\nconst isSNMPType = computed(() => {\r\n  const type = scanFormData.checkType;\r\n  return type === 10 || type === 11 || type === 13;\r\n});\r\n\r\nconst needsAuth = computed(() => {\r\n  return scanFormData.checkType === 13 && (scanFormData.snmpv3Config.securityLevel === '1' || scanFormData.snmpv3Config.securityLevel === '2');\r\n});\r\n\r\nconst needsPriv = computed(() => {\r\n  return scanFormData.checkType === 13 && scanFormData.snmpv3Config.securityLevel === '2';\r\n});\r\n\r\nconst getKeyPlaceholder = () => {\r\n  const type = scanFormData.checkType;\r\n  if (type === 9) {\r\n    return '例如：system.uname';\r\n  } else if (type === 10 || type === 11 || type === 13) {\r\n    return '例如：1.3.6.1.2.1.1.1.0';\r\n  }\r\n  return '请输入检查键值';\r\n};\r\n\r\n\r\n\r\n// 工具函数\r\nconst getStatusText = (status) => {\r\n  const textMap = {\r\n    'active': '在用',\r\n    'available': '可用',\r\n    'reserved': '预留',\r\n    'conflict': '冲突'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const typeMap = {\r\n    'static': '静态IP',\r\n    'dynamic': '动态IP',\r\n    'gateway': '网关',\r\n    'dns': 'DNS服务器'\r\n  };\r\n  return typeMap[type] || type;\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  if (!date) return null;\r\n  return new Date(date).toLocaleString('zh-CN');\r\n};\r\n\r\n// 弹窗状态\r\nconst detailModalVisible = ref(false);\r\nconst editModalVisible = ref(false);\r\nconst scanModalVisible = ref(false);\r\nconst scanTaskModalVisible = ref(false);\r\nconst taskDetailModalVisible = ref(false);\r\nconst taskResultModalVisible = ref(false);\r\nconst selectedIP = ref(null);\r\nconst editingIP = ref(null);\r\nconst selectedTask = ref(null);\r\n\r\n// 扫描任务查询相关\r\nconst scanTasks = ref([]);\r\nconst taskResults = ref([]);\r\nconst taskLoading = ref(false);\r\nconst resultLoading = ref(false);\r\nconst taskStatusFilter = ref('');\r\nconst taskDateRange = ref([]);\r\nconst taskNameFilter = ref('');\r\nconst taskPagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 表单相关\r\nconst formRef = ref();\r\nconst scanFormRef = ref();\r\nconst formData = reactive({\r\n  ipAddress: '',\r\n  hostname: '',\r\n  status: 'available',\r\n  type: 'static',\r\n  macAddress: '',\r\n  device: '',\r\n  subnet: '',\r\n  description: ''\r\n});\r\n\r\n// 扫描配置数据\r\nconst scanFormData = reactive({\r\n  ipRanges: '192.168.1.0/24', // IP范围\r\n  checkType: 12, // 默认ICMP ping\r\n  ports: '0',\r\n  key: '',\r\n  // Python扫描器新参数\r\n  maxConcurrent: 100, // 最大并发数\r\n  timeout: 3.0, // 连接超时时间\r\n  pingTimeout: 1.0, // Ping超时时间\r\n  // 保留的Zabbix相关参数(仅用于兼容性)\r\n  snmpCommunity: 'public',\r\n  snmpv3Config: {\r\n    securityLevel: '0',\r\n    securityName: '',\r\n    contextName: '',\r\n    authProtocol: 0,\r\n    authPassphrase: '',\r\n    privProtocol: 0,\r\n    privPassphrase: ''\r\n  },\r\n  uniqueCheck: 0,\r\n  hostSource: 1,\r\n  nameSource: 0\r\n});\r\n\r\n\r\n\r\n// 表单验证规则\r\nconst rules = {\r\n  ipAddress: [\r\n    { required: true, message: '请输入IP地址' },\r\n    { pattern: /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/, message: '请输入有效的IP地址' }\r\n  ],\r\n  status: [{ required: true, message: '请选择IP状态' }],\r\n  type: [{ required: true, message: '请选择IP类型' }]\r\n};\r\n\r\n// 扫描配置验证规则\r\nconst scanRules = {\r\n  ipRanges: [\r\n    { required: true, message: '请输入扫描IP范围' },\r\n    { \r\n      validator: (rule, value) => {\r\n        if (!value) return Promise.reject('请输入IP范围');\r\n        \r\n        const ranges = value.split('\\n').filter(range => range.trim());\r\n        for (const range of ranges) {\r\n          const trimmedRange = range.trim();\r\n          // 验证单个IP\r\n          const singleIpPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n          // 验证IP范围\r\n          const rangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n          // 验证CIDR\r\n          const cidrPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]{1,2}$/;\r\n          // 验证简化范围格式 (192.168.1.1-100)\r\n          const simpleRangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-[0-9]{1,3}$/;\r\n          \r\n          if (!singleIpPattern.test(trimmedRange) && \r\n              !rangePattern.test(trimmedRange) && \r\n              !cidrPattern.test(trimmedRange) &&\r\n              !simpleRangePattern.test(trimmedRange)) {\r\n            return Promise.reject(`无效的IP范围格式: ${trimmedRange}`);\r\n          }\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n  ],\r\n  checkType: [{ required: true, message: '请选择检查类型' }],\r\n  maxConcurrent: [\r\n    { type: 'number', min: 1, max: 200, message: '并发数必须在1-200之间' }\r\n  ],\r\n  timeout: [\r\n    { type: 'number', min: 1, max: 30, message: '超时时间必须在1-30秒之间' }\r\n  ],\r\n  pingTimeout: [\r\n    { type: 'number', min: 0.5, max: 10, message: 'Ping超时时间必须在0.5-10秒之间' }\r\n  ]\r\n};\r\n\r\n\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n});\r\n\r\n// 加载IP列表数据\r\nconst loadIPList = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const params = {\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize  // 使用Django标准的page_size参数名\r\n    };\r\n    \r\n    // 添加搜索条件\r\n    if (searchKeyword.value && searchKeyword.value.trim()) {\r\n      params.search = searchKeyword.value.trim();\r\n    }\r\n    if (ipStatus.value) {\r\n      params.status = ipStatus.value;\r\n    }\r\n    if (ipType.value) {\r\n      params.type = ipType.value;\r\n    }\r\n    \r\n    console.log('正在获取IP列表，参数:', params);\r\n    console.log('当前分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      total: pagination.total\r\n    });\r\n    \r\n    const response = await ipAPI.getIPList(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 特殊检查：如果返回的是URL路径列表，说明API路径错误\r\n      if (response.data.records && response.data['scan-tasks']) {\r\n        console.error('API路径错误：返回的是可用路径列表，而不是数据:', response.data);\r\n        message.error('获取IP列表失败: API路径错误，请检查后端配置');\r\n        setIPData([]);\r\n        pagination.total = 0;\r\n        return;\r\n      }\r\n      \r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 确保获取的数据是数组\r\n          let resultData = [];\r\n          if (data && data.results && Array.isArray(data.results)) {\r\n            resultData = data.results;\r\n          } else if (Array.isArray(data)) {\r\n            resultData = data;\r\n          } else {\r\n            console.warn('API返回的数据不是数组格式:', data);\r\n            resultData = [];\r\n          }\r\n          \r\n          setIPData(resultData);\r\n          pagination.total = data.count || data.total || resultData.length;\r\n          console.log('成功获取IP列表（统一格式）:', ipData.value);\r\n          message.success('IP列表数据已更新', 1);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取IP列表失败: ${response.data.message}`);\r\n          setIPData([]);\r\n          pagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 确保获取的数据是数组\r\n        let resultData = [];\r\n        if (response.data.results && Array.isArray(response.data.results)) {\r\n          resultData = response.data.results;\r\n        } else if (Array.isArray(response.data)) {\r\n          resultData = response.data;\r\n        } else {\r\n          console.warn('API返回的数据不是数组格式:', response.data);\r\n          resultData = [];\r\n        }\r\n        \r\n        setIPData(resultData);\r\n        pagination.total = response.data.count || response.data.total || resultData.length;\r\n        console.log('成功获取IP列表（DRF格式）:', ipData.value);\r\n        message.success('IP列表数据已更新', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取IP列表失败: 无效的响应数据');\r\n      setIPData([]);\r\n      pagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载IP列表失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '获取IP列表失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    \r\n    // 如果API调用失败，显示空数据而不是模拟数据\r\n    setIPData([]);\r\n    pagination.total = 0;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n\r\nconst columns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address', // 数据库字段名\r\n    key: 'ipAddress',\r\n    width: 70,\r\n    fixed: 'left'\r\n  },\r\n  {\r\n    title: '来源',\r\n    dataIndex: 'is_auto_discovered',\r\n    key: 'source',\r\n    width: 100\r\n  },\r\n  {\r\n    title: 'Ping状态',\r\n    dataIndex: 'ping_status', // 数据库字段名\r\n    key: 'pingStatus',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '监控状态',\r\n    dataIndex: 'monitoring_enabled',\r\n    key: 'monitoringStatus',\r\n    width: 90\r\n  },\r\n  {\r\n    title: 'IP类型',\r\n    dataIndex: 'type',\r\n    key: 'type',\r\n    width: 80\r\n  },\r\n  {\r\n    title: 'MAC地址',\r\n    dataIndex: 'mac_address', // 数据库字段名\r\n    key: 'macAddress',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '关联资产',\r\n    dataIndex: 'device',\r\n    key: 'device',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '所属网段',\r\n    dataIndex: 'subnet',\r\n    key: 'subnet',\r\n    width: 140\r\n  },\r\n  {\r\n    title: '最后在线时间',\r\n    dataIndex: 'last_seen', // 数据库字段名\r\n    key: 'lastSeen',\r\n    width: 160\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 280\r\n  }\r\n];\r\n\r\n// 扫描任务表格列定义\r\n\r\n// 扫描结果表格列定义\r\nconst resultColumns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address',\r\n    key: 'ip_address',\r\n    width: 90,\r\n  },\r\n  {\r\n    title: '主机名',\r\n    dataIndex: 'hostname',\r\n    key: 'hostname',\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: 'MAC地址',\r\n    dataIndex: 'mac_address',\r\n    key: 'mac_address'\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status'\r\n  },\r\n  {\r\n    title: '响应时间',\r\n    dataIndex: 'response_time',\r\n    key: 'response_time'\r\n  },\r\n  {\r\n    title: '发现时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at'\r\n  }\r\n];\r\n\r\n// 事件处理函数\r\n// 批量ping状态管理\r\nconst batchPingState = reactive({\r\n  isVisible: false,\r\n  phase: 'confirm', // confirm, testing, result\r\n  stats: {\r\n    total: 0,\r\n    currentOnline: 0,\r\n    currentOffline: 0,\r\n    testResult: null\r\n  },\r\n  testing: {\r\n    progress: 0,\r\n    currentIP: '',\r\n    startTime: null\r\n  }\r\n});\r\n\r\nconst handleBatchPing = async () => {\r\n  try {\r\n    // 获取当前页面的所有IP ID\r\n    const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\r\n    \r\n    if (allIpIds.length === 0) {\r\n      message.warning('没有可以ping的IP记录');\r\n      return;\r\n    }\r\n    \r\n    // 初始化状态\r\n    batchPingState.stats.total = allIpIds.length;\r\n    batchPingState.stats.currentOnline = ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\r\n    batchPingState.stats.currentOffline = allIpIds.length - batchPingState.stats.currentOnline;\r\n    batchPingState.phase = 'confirm';\r\n    batchPingState.isVisible = true;\r\n    \r\n  } catch (error) {\r\n    console.error('初始化批量ping失败:', error);\r\n    message.error('初始化批量ping失败');\r\n  }\r\n};\r\n\r\n// 开始ping测试\r\nconst startBatchPingTest = async () => {\r\n  try {\r\n    const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\r\n    \r\n    // 切换到测试阶段\r\n    batchPingState.phase = 'testing';\r\n    batchPingState.testing.startTime = new Date();\r\n    batchPingState.testing.progress = 0;\r\n    \r\n    loading.value = true;\r\n    \r\n    // 调用批量ping API\r\n    const response = await ipAPI.batchPingIPs(allIpIds);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const batchData = response.data.data;\r\n      const summary = batchData.summary;\r\n      \r\n      // 更新本地数据\r\n      const resultsMap = new Map();\r\n      batchData.results.forEach(result => {\r\n        resultsMap.set(result.ip_id, result);\r\n      });\r\n      \r\n      // 更新ipData中的记录\r\n      ipData.value.forEach(ip => {\r\n        const result = resultsMap.get(ip.id);\r\n        if (result) {\r\n          ip.ping_status = result.status;\r\n          ip.pingStatus = result.status; // 兼容字段\r\n          if (result.is_online) {\r\n            ip.last_seen = new Date().toISOString();\r\n            ip.lastSeen = new Date().toISOString(); // 兼容字段\r\n          }\r\n        }\r\n      });\r\n      \r\n      // 设置测试结果并切换到结果阶段\r\n      batchPingState.stats.testResult = summary;\r\n      batchPingState.phase = 'result';\r\n      \r\n    } else {\r\n      message.error(`批量ping测试失败: ${response.data?.message || '未知错误'}`);\r\n      batchPingState.isVisible = false;\r\n    }\r\n  } catch (error) {\r\n    console.error('批量ping测试失败:', error);\r\n    let errorMessage = '批量ping测试失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n    batchPingState.isVisible = false;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 关闭批量ping弹窗\r\nconst closeBatchPingModal = () => {\r\n  batchPingState.isVisible = false;\r\n  batchPingState.phase = 'confirm';\r\n  batchPingState.stats.testResult = null;\r\n  batchPingState.testing.progress = 0;\r\n};\r\n\r\n// 行选择管理\r\nconst onSelectChange = (newSelectedRowKeys) => {\r\n  console.log('选中的行 keys:', newSelectedRowKeys);\r\n  selectedRowKeys.value = newSelectedRowKeys;\r\n};\r\n\r\nconst onSelectAll = (selected, selectedRows, changeRows) => {\r\n  console.log('全选/反选:', { selected, selectedRows: selectedRows.length, changeRows: changeRows.length });\r\n};\r\n\r\nconst clearSelection = () => {\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 批量删除\r\nconst handleBatchDelete = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要删除的IP地址');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    Modal.confirm({\r\n      title: '批量删除确认',\r\n      content: `您将删除 ${selectedRowKeys.value.length} 个IP地址，此操作不可恢复！`,\r\n      okText: '确认删除',\r\n      okType: 'danger',\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchDeleting.value = true;\r\n        try {\r\n          const response = await ipAPI.batchDeleteIPs(selectedRowKeys.value);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量删除成功！删除: ${result.deleted_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n            \r\n            // 刷新列表\r\n            await loadIPList();\r\n          } else {\r\n            message.error(`批量删除失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('批量删除失败:', error);\r\n          message.error(`批量删除失败: ${error.message}`);\r\n        } finally {\r\n          batchDeleting.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('批量删除操作失败:', error);\r\n    message.error('批量删除操作失败');\r\n  }\r\n};\r\n\r\n// 批量切换监控状态\r\nconst handleBatchToggleMonitoring = async (enableMonitoring) => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要操作的IP地址');\r\n    return;\r\n  }\r\n\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  try {\r\n    Modal.confirm({\r\n      title: `批量${actionText}`,\r\n      content: `您将对 ${selectedRowKeys.value.length} 个IP地址${actionText}，是否继续？`,\r\n      okText: `确认${actionText}`,\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchMonitoringToggling.value = true;\r\n        try {\r\n          const response = await ipAPI.batchToggleMonitoring(selectedRowKeys.value, enableMonitoring);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量${actionText}成功！成功: ${result.success_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 更新本地数据\r\n            ipData.value.forEach(ip => {\r\n              if (selectedRowKeys.value.includes(ip.id)) {\r\n                ip.monitoring_enabled = enableMonitoring;\r\n              }\r\n            });\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n          } else {\r\n            message.error(`批量${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(`批量${actionText}失败:`, error);\r\n          message.error(`批量${actionText}失败: ${error.message}`);\r\n        } finally {\r\n          batchMonitoringToggling.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(`批量${actionText}操作失败:`, error);\r\n    message.error(`批量${actionText}操作失败`);\r\n  }\r\n};\r\n\r\n// 单个监控状态切换\r\nconst handleToggleMonitoring = async (record, enableMonitoring) => {\r\n  if (enableMonitoring) {\r\n    // 启用监控时显示模板选择抽屉\r\n    selectedIP.value = record;\r\n    await loadZabbixTemplates(record.id);\r\n    templateDrawerVisible.value = true;\r\n  } else {\r\n    // 直接禁用监控\r\n    await toggleMonitoringStatus(record, false);\r\n  }\r\n};\r\n\r\n// 切换监控状态的实际方法\r\nconst toggleMonitoringStatus = async (record, enableMonitoring) => {\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  // 设置单个记录的加载状态\r\n  record.monitoringToggling = true;\r\n  \r\n  try {\r\n    const response = await ipAPI.toggleMonitoring(record.id, enableMonitoring);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 更新本地数据\r\n      record.monitoring_enabled = enableMonitoring;\r\n      message.success(`${record.ip_address || record.ipAddress} ${actionText}成功`, 1);\r\n    } else {\r\n      message.error(`${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`${actionText}失败:`, error);\r\n    message.error(`${actionText}失败: ${error.message}`);\r\n  } finally {\r\n    record.monitoringToggling = false;\r\n  }\r\n};\r\n\r\n// 加载Zabbix模板列表\r\nconst loadZabbixTemplates = async (ipId) => {\r\n  templateLoading.value = true;\r\n  try {\r\n    const response = await ipAPI.getZabbixTemplates(ipId, templateSearchKeyword.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      zabbixTemplates.value = response.data.data.templates || [];\r\n      \r\n      // 初始化展开状态，默认展开所有分类\r\n      nextTick(() => {\r\n        try {\r\n          const categories = Object.keys(groupedTemplates.value || {});\r\n          categories.forEach(category => {\r\n            const categoryStr = String(category);\r\n            expandedCategories.value[categoryStr] = true;\r\n          });\r\n        } catch (error) {\r\n          console.warn('初始化展开状态错误:', error);\r\n        }\r\n      });\r\n      \r\n      console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\r\n    } else {\r\n      // 检查是否是Zabbix连接问题\r\n      if (response.data && response.data.message && response.data.message.includes('Zabbix API连接不可用')) {\r\n        // 显示详细的诊断信息\r\n        const errorMessage = '⚠️ Zabbix服务器连接失败';\r\n        const suggestions = [\r\n          '请检查Zabbix服务器是否正常运行',\r\n          '验证网络连接和防火墙设置',\r\n          '检查Zabbix API配置是否正确'\r\n        ];\r\n        \r\n        Modal.error({\r\n          title: '无法加载监控模板',\r\n          content: h('div', [\r\n            h('p', { style: 'margin-bottom: 16px;' }, errorMessage),\r\n            h('div', { style: 'background: #f5f5f5; padding: 12px; border-radius: 6px;' }, [\r\n              h('p', { style: 'margin: 0 0 8px 0; font-weight: 600;' }, '解决建议：'),\r\n              h('ul', { style: 'margin: 0; padding-left: 20px;' }, \r\n                suggestions.map(suggestion => \r\n                  h('li', { style: 'margin-bottom: 4px;' }, suggestion)\r\n                )\r\n              )\r\n            ])\r\n          ]),\r\n          width: 500\r\n        });\r\n      } else {\r\n        message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\r\n      }\r\n      \r\n      zabbixTemplates.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载模板列表失败:', error);\r\n    \r\n    // 检查是否是网络连接问题\r\n    if (error.message && (error.message.includes('Network Error') || error.message.includes('timeout'))) {\r\n      Modal.error({\r\n        title: '网络连接失败',\r\n        content: '无法连接到后端服务器，请检查网络连接和服务器状态。'\r\n      });\r\n    } else {\r\n      message.error(`加载模板列表失败: ${error.message}`);\r\n    }\r\n    \r\n    zabbixTemplates.value = [];\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\n\r\n// 搜索模板\r\nconst handleTemplateSearch = async () => {\r\n  if (selectedIP.value) {\r\n    await loadZabbixTemplates(selectedIP.value.id);\r\n  }\r\n};\r\n\r\n// 模板选择变化 - 确保类型安全\r\nconst handleTemplateSelect = (templateIds) => {\r\n  try {\r\n    // 确保 templateIds 是数组并且所有元素都是字符串\r\n    if (Array.isArray(templateIds)) {\r\n      selectedTemplateIds.value = templateIds.map(id => {\r\n        if (id === null || id === undefined) return '';\r\n        return String(id);\r\n      });\r\n    } else {\r\n      selectedTemplateIds.value = [];\r\n    }\r\n    console.log('已选择模板:', selectedTemplateIds.value);\r\n  } catch (error) {\r\n    console.error('处理模板选择时出错:', error);\r\n    selectedTemplateIds.value = [];\r\n  }\r\n};\r\n\r\n// 创建监控主机\r\nconst handleCreateMonitoring = async () => {\r\n  if (!selectedIP.value) {\r\n    message.error('请先选择IP地址');\r\n    return;\r\n  }\r\n  \r\n  if (selectedTemplateIds.value.length === 0) {\r\n    message.error('请选择至少一个监控模板');\r\n    return;\r\n  }\r\n  \r\n  monitoringCreating.value = true;\r\n  \r\n  try {\r\n    const monitoringData = {\r\n      template_ids: selectedTemplateIds.value,\r\n      host_name: selectedIP.value.hostname || selectedIP.value.ip_address || selectedIP.value.ipAddress,\r\n      group_ids: [] // 使用默认主机组\r\n    };\r\n    \r\n    const response = await ipAPI.createMonitoring(selectedIP.value.id, monitoringData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const result = response.data.data;\r\n      \r\n      message.success({\r\n        content: `监控主机创建成功！\\n主机名: ${result.host_name}\\nIP: ${result.ip_address}\\n模板数量: ${result.template_count}`,\r\n        duration: 5\r\n      });\r\n      \r\n      // 更新本地IP记录的监控状态\r\n      selectedIP.value.monitoring_enabled = true;\r\n      \r\n      // 关闭抽屉\r\n      templateDrawerVisible.value = false;\r\n      \r\n      // 清空选中的模板\r\n      selectedTemplateIds.value = [];\r\n      \r\n    } else {\r\n      message.error(`创建监控主机失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建监控主机失败:', error);\r\n    message.error(`创建监控主机失败: ${error.message}`);\r\n  } finally {\r\n    monitoringCreating.value = false;\r\n  }\r\n};\r\n\r\n// 关闭模板抽屉\r\n// 安全获取模板的唯一key\r\nconst getTemplateKey = (template) => {\r\n  try {\r\n    if (!template) return Math.random().toString();\r\n    if (template.templateid) return String(template.templateid);\r\n    if (template.id) return String(template.id);\r\n    return Math.random().toString();\r\n  } catch (error) {\r\n    console.error('获取模板key失败:', error);\r\n    return Math.random().toString();\r\n  }\r\n};\r\n\r\n// 安全获取模板的value\r\nconst getTemplateValue = (template) => {\r\n  try {\r\n    if (!template) return '';\r\n    if (template.templateid) return String(template.templateid);\r\n    if (template.id) return String(template.id);\r\n    return '';\r\n  } catch (error) {\r\n    console.error('获取模板value失败:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\nconst handleCloseTemplateDrawer = () => {\r\n  templateDrawerVisible.value = false;\r\n  selectedTemplateIds.value = [];\r\n  templateSearchKeyword.value = '';\r\n  selectedCategory.value = '';\r\n  expandedCategories.value = {};\r\n  selectedIP.value = null;\r\n};\r\n\r\n// 模板数据安全验证函数\r\nconst validateTemplateData = (template) => {\r\n  try {\r\n    if (!template || typeof template !== 'object') {\r\n      console.warn('模板不是有效对象:', template);\r\n      return null;\r\n    }\r\n    \r\n    // 安全地获取所有字段\r\n    const safeTemplate = {\r\n      templateid: safeString(template.templateid || template.id || `temp_${Date.now()}`),\r\n      name: safeString(template.name || '未知模板'),\r\n      description: safeString(template.description || ''),\r\n      category: safeString(template.category || '📝 其他'),\r\n      items_count: Number(template.items_count) || 0,\r\n      triggers_count: Number(template.triggers_count) || 0,\r\n      macros_count: Number(template.macros_count) || 0,\r\n      groups: Array.isArray(template.groups) ? template.groups.map(group => ({\r\n        groupid: safeString(group.groupid || group.id || ''),\r\n        name: safeString(group.name || '未知组')\r\n      })) : [],\r\n      icon: safeString(template.icon || 'setting')\r\n    };\r\n    \r\n    // 验证必需字段\r\n    if (!safeTemplate.templateid || !safeTemplate.name) {\r\n      console.warn('模板缺少必需字段:', safeTemplate);\r\n      return null;\r\n    }\r\n    \r\n    return safeTemplate;\r\n  } catch (error) {\r\n    console.error('验证模板时出错:', error, template);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 按分类组织模板 - 增强类型安全\r\nconst groupedTemplates = computed(() => {\r\n  const groups = {};\r\n  \r\n  try {\r\n    if (!Array.isArray(zabbixTemplates.value)) {\r\n      console.warn('zabbixTemplates不是数组:', zabbixTemplates.value);\r\n      return groups;\r\n    }\r\n    \r\n    zabbixTemplates.value.forEach((template) => {\r\n      const safeTemplate = validateTemplateData(template);\r\n      if (!safeTemplate) {\r\n        return; // 跳过无效模板\r\n      }\r\n      \r\n      const category = safeTemplate.category;\r\n      if (!groups[category]) {\r\n        groups[category] = [];\r\n      }\r\n      \r\n      groups[category].push(safeTemplate);\r\n    });\r\n    \r\n    // 对每个分类的模板按名称排序\r\n    Object.keys(groups).forEach(category => {\r\n      try {\r\n        groups[category].sort((a, b) => {\r\n          const nameA = safeString(a.name || '');\r\n          const nameB = safeString(b.name || '');\r\n          return nameA.localeCompare(nameB);\r\n        });\r\n      } catch (sortError) {\r\n        console.warn(`排序分类${category}时出错:`, sortError);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('groupedTemplates计算出错:', error);\r\n  }\r\n  \r\n  return groups;\r\n});\r\n\r\n// 分类图标映射 - 增强类型安全\r\nconst getCategoryIcon = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    const iconMap = {\r\n      '💻 操作系统': 'DesktopOutlined',\r\n      '🗄 数据库': 'DatabaseOutlined', \r\n      '🌐 Web服务器': 'GlobalOutlined',\r\n      '📦 容器平台': 'ContainerOutlined',\r\n      '🌐 网络设备': 'RouterOutlined',\r\n      '☁️ 虚拟化': 'CloudOutlined',\r\n      '📊 网络监控': 'WifiOutlined',\r\n      '☁️ 云服务': 'CloudServerOutlined',\r\n      '🚀 应用服务': 'CodeOutlined',\r\n      '📬 消息队列': 'MessageOutlined',\r\n      '⚡ 缓存系统': 'ThunderboltOutlined',\r\n      '💾 存储系统': 'HddOutlined',\r\n      '🔒 安全监控': 'SafetyOutlined',\r\n      '🌡️ IoT设备': 'NodeIndexOutlined',\r\n      '📝 其他': 'SettingOutlined'\r\n    };\r\n    \r\n    return iconMap[categoryStr] || 'SettingOutlined';\r\n  } catch (error) {\r\n    console.warn('getCategoryIcon处理错误:', error, category);\r\n    return 'SettingOutlined';\r\n  }\r\n};\r\n\r\n// 分类统计信息 - 增强类型安全\r\nconst categoryStats = computed(() => {\r\n  const stats = {};\r\n  \r\n  try {\r\n    if (!groupedTemplates.value || typeof groupedTemplates.value !== 'object') {\r\n      return stats;\r\n    }\r\n    \r\n    Object.entries(groupedTemplates.value).forEach(([category, templates]) => {\r\n      try {\r\n        const categoryKey = safeCategoryToString(category);\r\n        if (!Array.isArray(templates)) {\r\n          console.warn(`分类${categoryKey}的模板不是数组:`, templates);\r\n          stats[categoryKey] = { count: 0, selected: 0 };\r\n          return;\r\n        }\r\n        \r\n        const selectedIds = Array.isArray(selectedTemplateIds.value) ? selectedTemplateIds.value : [];\r\n        \r\n        stats[categoryKey] = {\r\n          count: Number(templates.length) || 0,\r\n          selected: templates.filter(t => {\r\n            try {\r\n              const templateId = safeString(t.templateid || t.id || '');\r\n              return selectedIds.includes(templateId);\r\n            } catch (filterError) {\r\n              console.warn('过滤模板时出错:', filterError, t);\r\n              return false;\r\n            }\r\n          }).length\r\n        };\r\n      } catch (categoryError) {\r\n        console.warn(`处理分类${category}统计时出错:`, categoryError);\r\n        stats[safeCategoryToString(category)] = { count: 0, selected: 0 };\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('categoryStats计算出错:', error);\r\n  }\r\n  \r\n  return stats;\r\n});\r\n\r\n// 筛选后的模板 - 增强类型安全\r\nconst filteredTemplates = computed(() => {\r\n  try {\r\n    let result = groupedTemplates.value || {};\r\n    \r\n    // 分类筛选\r\n    if (selectedCategory.value) {\r\n      const categoryStr = safeString(selectedCategory.value);\r\n      result = {\r\n        [categoryStr]: result[categoryStr] || []\r\n      };\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('filteredTemplates计算出错:', error);\r\n    return {};\r\n  }\r\n});\r\n\r\n// 安全的分类显示名称函数\r\nconst safeCategoryDisplayName = (category) => {\r\n  try {\r\n    return safeCategoryToString(category);\r\n  } catch (error) {\r\n    console.error('safeCategoryDisplayName处理错误:', error, category);\r\n    return '📝 其他';\r\n  }\r\n};\r\n\r\n// 切换分类筛选 - 确保类型安全\r\nconst toggleCategoryFilter = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    if (selectedCategory.value === categoryStr) {\r\n      selectedCategory.value = '';\r\n    } else {\r\n      selectedCategory.value = categoryStr;\r\n    }\r\n  } catch (error) {\r\n    console.warn('toggleCategoryFilter处理错误:', error, category);\r\n    selectedCategory.value = '';\r\n  }\r\n};\r\n\r\n// 清除分类筛选\r\nconst clearCategoryFilter = () => {\r\n  selectedCategory.value = '';\r\n};\r\n\r\n// 切换分类展开状态 - 使用安全的类型转换\r\nconst toggleCategoryExpand = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    expandedCategories.value[categoryStr] = !expandedCategories.value[categoryStr];\r\n  } catch (error) {\r\n    console.warn('toggleCategoryExpand处理错误:', error, category);\r\n  }\r\n};\r\n\r\n// 安全检查分类是否展开 - 避免对象类型转换错误\r\nconst isCategoryExpanded = (category) => {\r\n  // 检查是对象还是字符串\r\n  if (typeof category === 'object') {\r\n    try {\r\n      return isCategoryExpanded(JSON.stringify(category));\r\n    } catch (jsonError) {\r\n      console.warn('对象转字符串失败:', jsonError);\r\n      return true; // 默认展开\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (category === null || category === undefined) {\r\n      return true;\r\n    }\r\n    const categoryStr = safeCategoryToString(category);\r\n    // 默认展开所有分类，除非明确设置为false\r\n    return expandedCategories.value[categoryStr] !== false;\r\n  } catch (error) {\r\n    console.warn('isCategoryExpanded处理错误:', error, category);\r\n    return true; // 默认展开\r\n  }\r\n};\r\n\r\n// 安全的分类转字符串函数 - 根据规范处理各种类型\r\nconst safeCategoryToString = (category) => {\r\n  try {\r\n    if (category === null || category === undefined) {\r\n      return '📝 其他';\r\n    }\r\n    \r\n    if (typeof category === 'string') {\r\n      return category.trim() || '📝 其他';\r\n    }\r\n    \r\n    if (typeof category === 'object') {\r\n      // 如果是对象，尝试提取有效属性\r\n      if (category.name && typeof category.name === 'string') {\r\n        return category.name.trim();\r\n      }\r\n      if (category.title && typeof category.title === 'string') {\r\n        return category.title.trim();\r\n      }\r\n      if (category.label && typeof category.label === 'string') {\r\n        return category.label.trim();\r\n      }\r\n      \r\n      // 尝试使用JSON.stringify安全地转换对象\r\n      try {\r\n        const jsonStr = JSON.stringify(category);\r\n        if (jsonStr && jsonStr !== '[object Object]') {\r\n          return jsonStr;\r\n        }\r\n      } catch (jsonError) {\r\n        // JSON转换失败时继续处理\r\n        console.warn('JSON转换失败:', jsonError);\r\n      }\r\n      \r\n      // 对象转换失败时的安全处理\r\n      console.warn('分类是对象但缺少有效字段:', category);\r\n      return '📝 其他';\r\n    }\r\n    \r\n    // 其他类型的安全转换\r\n    const stringResult = String(category);\r\n    // 检查是否是有效的字符串表示\r\n    if (stringResult && stringResult !== '[object Object]') {\r\n      return stringResult.trim() || '📝 其他';\r\n    } else {\r\n      return '📝 其他';\r\n    }\r\n  } catch (error) {\r\n    console.error('safeCategoryToString处理错误:', error, category);\r\n    return '📝 其他';\r\n  }\r\n};\r\n\r\n// 安全的字符串转换函数 - 增强版，防止\"Cannot convert object to primitive value\"错误\r\nconst safeString = (value) => {\r\n  try {\r\n    // 处理null/undefined\r\n    if (value == null) {\r\n      return '';\r\n    }\r\n    \r\n    // 处理基本类型\r\n    switch (typeof value) {\r\n      case 'string':\r\n        return value;\r\n      case 'number':\r\n      case 'boolean':\r\n      case 'bigint':\r\n        return String(value);\r\n      case 'symbol':\r\n        return value.toString();\r\n    }\r\n    \r\n    // 处理对象类型\r\n    if (typeof value === 'object') {\r\n      // 优先检查常见对象类型\r\n      if (value instanceof Date) {\r\n        return value.toISOString();\r\n      }\r\n      \r\n      if (value instanceof Error) {\r\n        return value.message || value.name || 'Error';\r\n      }\r\n      \r\n      // 尝试获取对象的常见字符串属性\r\n      const stringProps = ['name', 'title', 'label', 'text', 'message', 'value'];\r\n      for (const prop of stringProps) {\r\n        if (typeof value[prop] === 'string') {\r\n          return value[prop];\r\n        }\r\n      }\r\n      \r\n      // 安全地使用JSON.stringify\r\n      try {\r\n        const jsonStr = JSON.stringify(value, (key, val) => {\r\n          if (typeof val === 'object' && val !== null) {\r\n            return Object.prototype.toString.call(val);\r\n          }\r\n          return val;\r\n        });\r\n        if (jsonStr && jsonStr !== '{}' && jsonStr !== '[]') {\r\n          return jsonStr;\r\n        }\r\n      } catch (jsonError) {\r\n        console.warn('JSON.stringify failed:', jsonError);\r\n      }\r\n      \r\n      // 最后尝试调用toString()\r\n      try {\r\n        const toStringResult = Object.prototype.toString.call(value);\r\n        if (toStringResult !== '[object Object]') {\r\n          return toStringResult;\r\n        }\r\n      } catch (toStringError) {\r\n        console.warn('toString call failed:', toStringError);\r\n      }\r\n      \r\n      return '[object]';\r\n    }\r\n    \r\n    // 其他未知类型\r\n    return String(value);\r\n  } catch (error) {\r\n    console.error('safeString处理错误:', error, value);\r\n    return '';\r\n  }\r\n};\r\n\r\n// 获取模板图标 - 根据内存规范增强类型安全和错误处理\r\nconst getTemplateIcon = (template) => {\r\n  try {\r\n    // 基础验证\r\n    if (!template || typeof template !== 'object') {\r\n      console.warn('getTemplateIcon: 模板对象无效', template);\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    if (!template.icon) {\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    // 安全处理图标名称 - 确保必须是字符串类型\r\n    let iconName;\r\n    try {\r\n      if (typeof template.icon === 'string') {\r\n        iconName = template.icon.trim();\r\n      } else if (typeof template.icon === 'object' && template.icon !== null) {\r\n        // 如果是对象，尝试获取有效的字符串属性\r\n        if (template.icon.name && typeof template.icon.name === 'string') {\r\n          iconName = template.icon.name.trim();\r\n        } else if (template.icon.type && typeof template.icon.type === 'string') {\r\n          iconName = template.icon.type.trim();\r\n        } else {\r\n          // 对象转换为字符串时的安全处理\r\n          try {\r\n            const objStr = JSON.stringify(template.icon);\r\n            console.warn('getTemplateIcon: 图标是对象，尝试JSON转换', template.icon, objStr);\r\n            iconName = 'setting'; // 使用默认值\r\n          } catch (jsonError) {\r\n            console.error('getTemplateIcon: JSON转换失败', jsonError);\r\n            iconName = 'setting';\r\n          }\r\n        }\r\n      } else if (template.icon === null || template.icon === undefined) {\r\n        iconName = 'setting';\r\n      } else {\r\n        // 其他类型的安全转换\r\n        iconName = String(template.icon).trim();\r\n      }\r\n    } catch (typeError) {\r\n      console.error('getTemplateIcon: 类型处理错误', typeError, template.icon);\r\n      iconName = 'setting';\r\n    }\r\n    \r\n    // 验证图标名称\r\n    if (!iconName || iconName === '[object Object]' || iconName.length === 0) {\r\n      console.warn('getTemplateIcon: 无效的图标名称', iconName, template);\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    // 如果已经包含Outlined后缀，直接返回\r\n    if (iconName.endsWith('Outlined')) {\r\n      return iconName;\r\n    }\r\n    \r\n    // 特殊图标名称映射\r\n    const iconMap = {\r\n      'global': 'GlobalOutlined',\r\n      'database': 'DatabaseOutlined',\r\n      'server': 'ServerOutlined',\r\n      'network': 'RouterOutlined',\r\n      'cloud': 'CloudOutlined',\r\n      'container': 'ContainerOutlined',\r\n      'security': 'SafetyOutlined',\r\n      'storage': 'HddOutlined',\r\n      'monitor': 'DashboardOutlined',\r\n      'setting': 'SettingOutlined'\r\n    };\r\n    \r\n    // 检查是否有直接映射\r\n    const lowerIconName = iconName.toLowerCase();\r\n    if (iconMap[lowerIconName]) {\r\n      return iconMap[lowerIconName];\r\n    }\r\n    \r\n    // 处理首字母大写并添加Outlined后缀\r\n    try {\r\n      const capitalizedIcon = iconName.charAt(0).toUpperCase() + iconName.slice(1);\r\n      const finalIconName = `${capitalizedIcon}Outlined`;\r\n      \r\n      // 验证图标是否存在于Ant Design图标库中\r\n      const availableIcons = [\r\n        'GlobalOutlined', 'DatabaseOutlined', 'DesktopOutlined', 'RouterOutlined',\r\n        'CloudOutlined', 'ContainerOutlined', 'SafetyOutlined', 'HddOutlined',\r\n        'CodeOutlined', 'MessageOutlined', 'ThunderboltOutlined', 'NodeIndexOutlined',\r\n        'SettingOutlined', 'DashboardOutlined', 'ServerOutlined', 'WifiOutlined'\r\n      ];\r\n      \r\n      if (availableIcons.includes(finalIconName)) {\r\n        return finalIconName;\r\n      }\r\n    } catch (processError) {\r\n      console.error('getTemplateIcon: 图标名称处理错误', processError, iconName);\r\n    }\r\n    \r\n    // 如果图标不存在，返回默认图标\r\n    return 'SettingOutlined';\r\n  } catch (error) {\r\n    console.error('getTemplateIcon处理严重错误:', error, template);\r\n    return 'SettingOutlined';\r\n  }\r\n};\r\n\r\nconst handleSearch = async () => {\r\n  pagination.current = 1;\r\n  await loadIPList();\r\n};\r\n\r\nconst handleReset = async () => {\r\n  searchKeyword.value = '';\r\n  ipStatus.value = '';\r\n  ipType.value = '';\r\n  pagination.current = 1;\r\n  await loadIPList();\r\n};\r\n\r\nconst handleSearchInput = (value) => {\r\n  searchKeyword.value = value;\r\n};\r\n\r\nconst handleStatusChange = (value) => {\r\n  ipStatus.value = value;\r\n};\r\n\r\nconst handleTableChange = async (paginationInfo, filters, sorter) => {\r\n  console.log('handleTableChange 被调用:', {\r\n    paginationInfo, \r\n    当前分页状态: {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    }\r\n  });\r\n  \r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  \r\n  console.log('更新后的分页状态:', {\r\n    current: pagination.current,\r\n    pageSize: pagination.pageSize\r\n  });\r\n  \r\n  // 更新 URL 参数\r\n  const currentUrl = new URL(window.location);\r\n  currentUrl.searchParams.set('page', pagination.current.toString());\r\n  currentUrl.searchParams.set('page_size', pagination.pageSize.toString());\r\n  window.history.replaceState({}, '', currentUrl.toString());\r\n  console.log('已更新 URL:', currentUrl.toString());\r\n  \r\n  await loadIPList();\r\n};\r\n\r\nconst handleAdd = () => {\r\n  router.push({ name: 'ipAdd' });\r\n};\r\n\r\nconst handleView = (record) => {\r\n  selectedIP.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleEdit = (record) => {\r\n  // 检查IP是否受保护\r\n  if (record.is_protected || record.is_auto_discovered) {\r\n    message.warning({\r\n      content: `不能编辑此IP地址：${record.ip_address || record.ipAddress}\\n原因：${record.protection_reason || '自动发现的IP地址不允许编辑'}\\n可编辑字段：${Array.isArray(record.editable_fields) ? record.editable_fields.join(', ') : '备注、状态'}`,\r\n      duration: 5\r\n    });\r\n    return;\r\n  }\r\n  \r\n  editingIP.value = record;\r\n  Object.assign(formData, record);\r\n  editModalVisible.value = true;\r\n};\r\n\r\nconst handleDelete = async (record) => {\r\n  try {\r\n    // 显示加载状态\r\n    const loadingMessage = message.loading('正在检查删除影响...', 0);\r\n    \r\n    try {\r\n      // 检查删除影响\r\n      const impactResponse = await ipAPI.checkDeletionImpact(record.id);\r\n      loadingMessage();\r\n      \r\n      if (impactResponse.data && impactResponse.data.code === 200) {\r\n        const impactData = impactResponse.data.data;\r\n        \r\n        // 构建详细的确认对话框内容\r\n        const confirmContent = await new Promise((resolve) => {\r\n          const { createVNode } = Vue;\r\n          const { ExclamationCircleOutlined, WarningOutlined } = antdvIcons;\r\n          \r\n          const warningItems = impactData.deletion_warnings.map(warning => \r\n            createVNode('li', { style: 'margin: 4px 0; color: #ff4d4f;' }, warning)\r\n          );\r\n          \r\n          // 如果是自动发现的IP，添加特殊警告\r\n          if (impactData.is_auto_discovered) {\r\n            warningItems.unshift(\r\n              createVNode('li', { \r\n                style: 'margin: 4px 0; color: #ff4d4f; font-weight: bold; background: #fff2f0; padding: 8px; border-radius: 4px; border-left: 4px solid #ff4d4f;' \r\n              }, '⚠️ 警告：此IP为Zabbix自动发现，删除后可能影响监控系统！')\r\n            );\r\n          }\r\n          \r\n          const content = createVNode('div', {}, [\r\n            createVNode('p', { style: 'font-weight: bold; margin-bottom: 12px; color: #ff4d4f;' }, \r\n              impactData.is_auto_discovered ? \r\n              `⚠️ 删除自动发现的IP地址: ${impactData.ip_address}` : \r\n              `确认删除 IP地址: ${impactData.ip_address}`\r\n            ),\r\n            \r\n            // 基本信息\r\n            createVNode('div', { style: 'margin-bottom: 12px; padding: 8px; background: #f5f5f5; border-radius: 4px;' }, [\r\n              createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `主机名: ${impactData.hostname || '未设置'}`),\r\n              createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `来源: ${impactData.is_auto_discovered ? 'Zabbix自动发现' : '手动创建'}`),\r\n              impactData.zabbix_drule_id ? createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `Zabbix规则ID: ${impactData.zabbix_drule_id}`) : null\r\n            ]),\r\n            \r\n            // 影响统计\r\n            createVNode('div', { style: 'margin-bottom: 12px;' }, [\r\n              createVNode('p', { style: 'margin: 0; font-weight: bold; color: #fa8c16;' }, '删除影响范围:'),\r\n              impactData.scan_results_count > 0 ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, `· 扫描结果: ${impactData.scan_results_count} 条记录`) : null,\r\n              impactData.related_tasks.length > 0 ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, `· 相关任务: ${impactData.related_tasks.length} 个`) : null,\r\n              impactData.will_cleanup_zabbix ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, '· Zabbix监控数据: 将尝试清理') : null\r\n            ]),\r\n            \r\n            // 警告列表\r\n            createVNode('div', {}, [\r\n              createVNode('p', { style: 'margin: 8px 0 4px 0; font-weight: bold; color: #ff4d4f;' }, [\r\n                createVNode(WarningOutlined, { style: 'margin-right: 4px;' }),\r\n                '警告信息:'\r\n              ]),\r\n              createVNode('ul', { style: 'margin: 0; padding-left: 16px; max-height: 200px; overflow-y: auto;' }, warningItems)\r\n            ]),\r\n            \r\n            createVNode('p', { style: 'margin-top: 12px; font-weight: bold; color: #ff4d4f; text-align: center;' }, '此操作不可恢复！')\r\n          ]);\r\n          \r\n          resolve(content);\r\n        });\r\n        \r\n        // 显示确认对话框\r\n        await new Promise((resolve, reject) => {\r\n          const modal = Modal.confirm({\r\n            title: impactData.is_auto_discovered ? '删除自动发现的IP地址及相关数据' : '删除IP地址及相关数据',\r\n            content: confirmContent,\r\n            width: 600,\r\n            okText: '确认删除',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            icon: createVNode(ExclamationCircleOutlined, { style: 'color: #ff4d4f;' }),\r\n            onOk: () => resolve(true),\r\n            onCancel: () => reject(new Error('User cancelled'))\r\n          });\r\n        });\r\n        \r\n      } else {\r\n        loadingMessage();\r\n        throw new Error('获取删除影响信息失败');\r\n      }\r\n      \r\n    } catch (impactError) {\r\n      loadingMessage();\r\n      console.warn('检查删除影响失败，使用默认确认对话框:', impactError);\r\n      \r\n      // 如果检查影响失败，使用简单的确认对话框\r\n      await new Promise((resolve, reject) => {\r\n        const modal = Modal.confirm({\r\n          title: '确认删除IP',\r\n          content: `确定要删除IP地址 \"${record.ipAddress || record.ip_address}\" 吗？\\n\\n警告：此操作将删除IP记录及所有相关数据（包括扫描结果、Zabbix监控数据等），该操作不可恢复！`,\r\n          okText: '确认删除',\r\n          okType: 'danger',\r\n          cancelText: '取消',\r\n          onOk: () => resolve(true),\r\n          onCancel: () => reject(new Error('User cancelled'))\r\n        });\r\n      });\r\n    }\r\n    \r\n    // 执行删除操作\r\n    const deleteMessage = message.loading('正在删除IP及相关数据...', 0);\r\n    \r\n    try {\r\n      const response = await ipAPI.deleteIP(record.id);\r\n      deleteMessage();\r\n      \r\n      if (response.data && response.data.code === 200) {\r\n        const cleanupData = response.data.data;\r\n        \r\n        // 构建成功消息\r\n        let successMessage = `IP地址 \"${cleanupData.ip_address}\" 已成功删除`;\r\n        \r\n        const cleanupDetails = [];\r\n        if (cleanupData.scan_results_deleted > 0) {\r\n          cleanupDetails.push(`扫描结果: ${cleanupData.scan_results_deleted}条`);\r\n        }\r\n        if (cleanupData.zabbix_cleanup && cleanupData.zabbix_cleanup.success) {\r\n          if (cleanupData.zabbix_cleanup.hosts && cleanupData.zabbix_cleanup.hosts.length > 0) {\r\n            const deletedCount = cleanupData.zabbix_cleanup.hosts.filter(h => h.deleted).length;\r\n            cleanupDetails.push(`Zabbix主机: ${deletedCount}个`);\r\n          }\r\n        }\r\n        \r\n        if (cleanupDetails.length > 0) {\r\n          successMessage += `\\n同时清理了：${cleanupDetails.join('、')}`;\r\n        }\r\n        \r\n        message.success({\r\n          content: successMessage,\r\n          duration: 6\r\n        });\r\n        \r\n        // 直接从列表中移除已删除的IP，而不是刷新整个列表\r\n        ipData.value = ipData.value.filter(ip => ip.id !== record.id);\r\n        pagination.total = ipData.value.length;\r\n      } else {\r\n        message.error('删除IP地址失败');\r\n      }\r\n    } catch (deleteError) {\r\n      deleteMessage();\r\n      throw deleteError;\r\n    }\r\n    \r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除IP地址失败:', error);\r\n      message.error(`删除IP地址失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst handlePing = async (record) => {\r\n  record.pinging = true;\r\n  try {\r\n    // 调用后端ping API\r\n    const response = await ipAPI.pingIP(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const pingData = response.data.data;\r\n      // 更新记录的ping状态\r\n      record.ping_status = pingData.status;\r\n      record.pingStatus = pingData.status; // 兼容字段\r\n      record.last_seen = pingData.last_seen;\r\n      record.lastSeen = pingData.last_seen; // 兼容字段\r\n      \r\n      const statusText = pingData.is_online ? '在线' : '离线';\r\n      const responseTimeText = pingData.response_time ? ` (${pingData.response_time}ms)` : '';\r\n      \r\n      message.success(`Ping ${record.ip_address || record.ipAddress} 完成: ${statusText}${responseTimeText}`, 1);\r\n    } else {\r\n      message.error(`Ping失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Ping测试失败:', error);\r\n    let errorMessage = 'Ping失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n  } finally {\r\n    record.pinging = false;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nconst handleExport = () => {\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst handleListManagement = () => {\r\n  message.info('列表管理功能开发中...');\r\n};\r\n\r\nconst handleScan = () => {\r\n  // 重置扫描表单并设置当前页面可能的IP范围\r\n  resetScanForm();\r\n  \r\n  // 如果有搜索关键词，尝试智能设置IP范围\r\n  if (searchKeyword.value) {\r\n    const keyword = searchKeyword.value.trim();\r\n    // 如果搜索关键词是IP格式，自动设置为扫描范围\r\n    const ipPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n    if (ipPattern.test(keyword)) {\r\n      // 提取网段\r\n      const ipParts = keyword.split('.');\r\n      const networkBase = `${ipParts[0]}.${ipParts[1]}.${ipParts[2]}.0/24`;\r\n      scanFormData.ipRanges = networkBase;\r\n    }\r\n  }\r\n  \r\n  scanModalVisible.value = true;\r\n};\r\n\r\nconst handleScanConfirm = async () => {\r\n  try {\r\n    await scanFormRef.value.validate();\r\n    \r\n    // 处理IP范围数据\r\n    const ipRanges = scanFormData.ipRanges.split('\\n')\r\n      .map(range => range.trim())\r\n      .filter(range => range.length > 0);\r\n    \r\n    // 构建Python扫描配置数据，发送给后端\r\n    const scanConfig = {\r\n      ipRanges: ipRanges,\r\n      checkType: scanFormData.checkType,\r\n      ports: scanFormData.ports,\r\n      key: scanFormData.key,\r\n      // Python扫描器参数\r\n      maxConcurrent: scanFormData.maxConcurrent || 100,\r\n      timeout: scanFormData.timeout || 3.0,\r\n      pingTimeout: scanFormData.pingTimeout || 1.0,\r\n      // 保留一些参数用于服务检测\r\n      snmpCommunity: scanFormData.snmpCommunity,\r\n      snmpv3Config: scanFormData.snmpv3Config\r\n    };\r\n    \r\n    console.log('发送Python扫描配置:', scanConfig);\r\n    \r\n    try {\r\n      // 调用后端Python扫描API\r\n      const response = await ipAPI.createScanTask(scanConfig);\r\n      \r\n      if (response.data && response.data.code === 200) {\r\n        const taskData = response.data.data;\r\n        \r\n        // 显示成功消息\r\n        const scanEngineText = taskData.scanEngine === 'python' ? 'Python原生扫描' : '扫描';\r\n        \r\n        message.success({\r\n          content: `${scanEngineText}任务创建成功！\\n扫描范围: ${ipRanges.join(', ')}\\n检查类型: ${getCheckTypeName(scanFormData.checkType)}\\n任务ID: ${taskData.taskId}\\n并发数: ${scanConfig.maxConcurrent}\\n超时配置: 连接${scanConfig.timeout}s, Ping${scanConfig.pingTimeout}s\\n已启动后台异步处理，系统将自动扫描网络并保存结果到数据库...`,\r\n          duration: 8\r\n        });\r\n        \r\n        // 刷新IP列表\r\n        await loadIPList();\r\n        \r\n        // 自动打开任务查询面板查看进度\r\n        setTimeout(() => {\r\n          handleScanTaskQuery();\r\n        }, 1000);\r\n        \r\n      } else {\r\n        throw new Error(response.data?.message || 'Python扫描任务创建失败');\r\n      }\r\n    } catch (apiError) {\r\n      console.error('后端Python扫描API调用失败:', apiError);\r\n      message.error(`Python扫描任务创建失败: ${apiError.response?.data?.message || apiError.message}`);\r\n      return;\r\n    }\r\n    \r\n    scanModalVisible.value = false;\r\n    resetScanForm();\r\n  } catch (error) {\r\n    console.error('扫描配置验证失败:', error);\r\n    message.error('请检查扫描配置是否正确');\r\n  }\r\n};\r\n\r\n// 获取检查类型名称\r\nconst getCheckTypeName = (type) => {\r\n  const typeNames = {\r\n    0: 'SSH', 1: 'LDAP', 2: 'SMTP', 3: 'FTP', 4: 'HTTP',\r\n    5: 'POP', 6: 'NNTP', 7: 'IMAP', 8: 'TCP', 9: 'Zabbix agent',\r\n    10: 'SNMPv1', 11: 'SNMPv2', 12: 'ICMP ping', 13: 'SNMPv3',\r\n    14: 'HTTPS', 15: 'Telnet'\r\n  };\r\n  return typeNames[type] || '未知类型';\r\n};\r\n\r\nconst handleScanCancel = () => {\r\n  scanModalVisible.value = false;\r\n  resetScanForm();\r\n};\r\n\r\nconst handleTypeChange = (value) => {\r\n  // 根据类型设置默认端口\r\n  const defaultPorts = {\r\n    0: '22',      // SSH\r\n    1: '389',     // LDAP\r\n    2: '25',      // SMTP\r\n    3: '21',      // FTP\r\n    4: '80',      // HTTP\r\n    5: '110',     // POP\r\n    6: '119',     // NNTP\r\n    7: '143',     // IMAP\r\n    8: '0',       // TCP\r\n    9: '10050',   // Zabbix agent\r\n    10: '161',    // SNMPv1\r\n    11: '161',    // SNMPv2\r\n    12: '0',      // ICMP (不需要端口)\r\n    13: '161',    // SNMPv3\r\n    14: '443',    // HTTPS\r\n    15: '23'      // Telnet\r\n  };\r\n  \r\n  scanFormData.ports = defaultPorts[value] || '0';\r\n  \r\n  // 清空相关字段\r\n  scanFormData.key = '';\r\n  if (value !== 10 && value !== 11) {\r\n    scanFormData.snmpCommunity = 'public';\r\n  }\r\n  if (value !== 13) {\r\n    // 清空SNMPv3配置\r\n    scanFormData.snmpv3Config.securityLevel = '0';\r\n    scanFormData.snmpv3Config.securityName = '';\r\n    scanFormData.snmpv3Config.contextName = '';\r\n    scanFormData.snmpv3Config.authProtocol = 0;\r\n    scanFormData.snmpv3Config.authPassphrase = '';\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  }\r\n};\r\n\r\nconst handleSecurityLevelChange = (value) => {\r\n  // 清空认证和隐私配置\r\n  if (value === '0') {\r\n    scanFormData.snmpv3Config.authProtocol = 0;\r\n    scanFormData.snmpv3Config.authPassphrase = '';\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  } else if (value === '1') {\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  }\r\n};\r\n\r\nconst resetScanForm = () => {\r\n  Object.assign(scanFormData, {\r\n    ipRanges: '192.168.1.0/24',\r\n    checkType: 12,\r\n    ports: '0',\r\n    key: '',\r\n    // Python扫描器参数\r\n    maxConcurrent: 100,\r\n    timeout: 3.0,\r\n    pingTimeout: 1.0,\r\n    // 保留参数\r\n    snmpCommunity: 'public',\r\n    snmpv3Config: {\r\n      securityLevel: '0',\r\n      securityName: '',\r\n      contextName: '',\r\n      authProtocol: 0,\r\n      authPassphrase: '',\r\n      privProtocol: 0,\r\n      privPassphrase: ''\r\n    },\r\n    uniqueCheck: 0,\r\n    hostSource: 1,\r\n    nameSource: 0\r\n  });\r\n  scanFormRef.value?.resetFields();\r\n};\r\n\r\n// 扫描任务查询相关函数\r\nconst handleScanTaskQuery = () => {\r\n  scanTaskModalVisible.value = true;\r\n  loadScanTasks();\r\n  \r\n  // 启动异步状态监控\r\n  startAsyncStatusMonitoring();\r\n};\r\n\r\n// 异步状态监控\r\nlet statusCheckInterval = null;\r\n\r\n// 组件初始化状态标记\r\nlet isComponentInitialized = false;\r\nlet isMonitoringActive = false;\r\n\r\nconst startAsyncStatusMonitoring = () => {\r\n  // 防止重复启动\r\n  if (isMonitoringActive) {\r\n    console.log('异步监控已在运行，跳过重复启动');\r\n    return;\r\n  }\r\n  \r\n  // 清理旧的间隔器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  console.log('启动异步状态监控...');\r\n  isMonitoringActive = true;\r\n  \r\n  // 每5秒检查一次任务状态（减少频率）\r\n  statusCheckInterval = setInterval(async () => {\r\n    if (scanTaskModalVisible.value && isMonitoringActive) {\r\n      await checkRunningTasksStatus();\r\n    } else {\r\n      // 弹窗关闭时停止监控\r\n      stopAsyncStatusMonitoring();\r\n    }\r\n  }, 5000); // 从3秒改为5秒\r\n};\r\n\r\nconst stopAsyncStatusMonitoring = () => {\r\n  console.log('停止异步状态监控...');\r\n  \r\n  // 标记监控已停止\r\n  isMonitoringActive = false;\r\n  \r\n  // 清理主定时器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  // 清理可能存在的其他定时器引用\r\n  [statusCheckInterval].forEach(timer => {\r\n    if (timer) {\r\n      clearInterval(timer);\r\n    }\r\n  });\r\n  \r\n  // 等待一个微任务周期，确保正在运行的检查完成\r\n  setTimeout(() => {\r\n    console.log('异步状态监控已停止');\r\n  }, 100);\r\n};\r\n\r\nconst checkRunningTasksStatus = async () => {\r\n  try {\r\n    // 找到所有运行中的任务\r\n    const runningTasks = scanTasks.value.filter(task => \r\n      task.status === 'running' || task.status === 'pending'\r\n    );\r\n    \r\n    // 如果没有运行中的任务，停止监控\r\n    if (runningTasks.length === 0) {\r\n      stopAsyncStatusMonitoring();\r\n      return;\r\n    }\r\n    \r\n    for (const task of runningTasks) {\r\n      try {\r\n        const response = await ipAPI.getAsyncTaskStatus(task.id);\r\n        if (response.data && response.data.code === 200) {\r\n          const statusData = response.data.data;\r\n          \r\n          // 只有当状态发生变化时才更新\r\n          const taskIndex = scanTasks.value.findIndex(t => t.id === task.id);\r\n          if (taskIndex !== -1) {\r\n            const currentTask = scanTasks.value[taskIndex];\r\n            const hasStatusChanged = currentTask.status !== statusData.status;\r\n            const hasProgressChanged = currentTask.progress !== statusData.progress;\r\n            \r\n            if (hasStatusChanged || hasProgressChanged) {\r\n              // 使用 Vue 的响应式更新，减少 DOM 操作\r\n              Object.assign(scanTasks.value[taskIndex], {\r\n                status: statusData.status,\r\n                progress: statusData.progress,\r\n                result_data: statusData.result_data,\r\n                error_message: statusData.error_message\r\n              });\r\n              \r\n              // 如果任务完成，显示通知\r\n              if (statusData.status === 'completed' && hasStatusChanged) {\r\n                const resultData = statusData.result_data || {};\r\n                message.success({\r\n                  content: `任务 ${task.id} 已完成！\\n发现主机: ${resultData.discovered_hosts || 0} 个\\n新增IP: ${resultData.saved_count || 0} 个\\n更新IP: ${resultData.updated_count || 0} 个`,\r\n                  duration: 5\r\n                });\r\n                \r\n                // 延迟刷新IP列表，避免并发更新\r\n                setTimeout(() => {\r\n                  loadIPList();\r\n                }, 1000);\r\n              }\r\n              \r\n              // 如果任务失败，显示错误\r\n              if (statusData.status === 'failed' && hasStatusChanged) {\r\n                message.error({\r\n                  content: `任务 ${task.id} 失败：${statusData.error_message || '未知错误'}`,\r\n                  duration: 5\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // 静默处理单个任务检查失败\r\n        console.debug(`检查任务 ${task.id} 状态失败:`, error.message);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.debug('检查运行任务状态失败:', error.message);\r\n  }\r\n};\r\n\r\n\r\nconst loadScanTasks = async () => {\r\n  taskLoading.value = true;\r\n  try {\r\n    const params = {\r\n      page: taskPagination.current,\r\n      page_size: taskPagination.pageSize\r\n    };\r\n    \r\n    // 添加查询条件\r\n    if (taskStatusFilter.value && taskStatusFilter.value !== '') {\r\n      params.status = taskStatusFilter.value;\r\n    }\r\n    if (taskNameFilter.value && taskNameFilter.value !== '') {\r\n      params.search = taskNameFilter.value;\r\n    }\r\n    if (taskDateRange.value && Array.isArray(taskDateRange.value) && taskDateRange.value.length === 2) {\r\n      params.created_after = taskDateRange.value[0].toISOString();\r\n      params.created_before = taskDateRange.value[1].toISOString();\r\n    }\r\n    \r\n    console.log('调用扫描任务API，参数:', params);\r\n    \r\n    // 调用后端API获取扫描任务列表\r\n    const response = await ipAPI.getScanTasks(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 过滤掉已取消的任务\r\n          let tasks = data.results || [];\r\n          tasks = tasks.filter(task => task.status !== 'cancelled');\r\n          scanTasks.value = tasks;\r\n          taskPagination.total = tasks.length; // 使用过滤后的数量\r\n          console.log('成功获取扫描任务（统一格式，已过滤取消任务）:', scanTasks.value);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取扫描任务列表失败: ${response.data.message}`);\r\n          scanTasks.value = [];\r\n          taskPagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 过滤掉已取消的任务\r\n        let tasks = response.data.results || [];\r\n        tasks = tasks.filter(task => task.status !== 'cancelled');\r\n        scanTasks.value = tasks;\r\n        taskPagination.total = tasks.length; // 使用过滤后的数量\r\n        console.log('成功获取扫描任务（DRF格式，已过滤取消任务）:', scanTasks.value);\r\n        message.success('获取扫描任务列表成功', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取扫描任务列表失败: 无效的响应数据');\r\n      scanTasks.value = [];\r\n      taskPagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载扫描任务失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '加载扫描任务失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    scanTasks.value = [];\r\n    taskPagination.total = 0;\r\n  } finally {\r\n    taskLoading.value = false;\r\n  }\r\n};\r\n\r\nconst handleSearchTasks = () => {\r\n  taskPagination.current = 1;\r\n  loadScanTasks();\r\n};\r\n\r\nconst handleRefreshTasks = () => {\r\n  taskStatusFilter.value = '';\r\n  taskDateRange.value = [];\r\n  taskNameFilter.value = '';\r\n  taskPagination.current = 1;\r\n  loadScanTasks();\r\n};\r\n\r\n\r\nconst handleTaskTableChange = (paginationInfo) => {\r\n  taskPagination.current = paginationInfo.current;\r\n  taskPagination.pageSize = paginationInfo.pageSize;\r\n  loadScanTasks();\r\n};\r\n\r\nconst handleViewTaskDetail = (record) => {\r\n  selectedTask.value = record;\r\n  taskDetailModalVisible.value = true;\r\n};\r\n\r\nconst handleViewTaskResults = async (record) => {\r\n  selectedTask.value = record;\r\n  await loadTaskResults(record.id);\r\n  taskResultModalVisible.value = true;\r\n};\r\n\r\nconst handleCancelTask = async (record) => {\r\n  try {\r\n    // 如果任务正在运行，先停止异步处理\r\n    if (record.status === 'running' || record.status === 'pending') {\r\n      try {\r\n        const stopResponse = await ipAPI.stopAsyncTask(record.id);\r\n        if (stopResponse.data && stopResponse.data.code === 200) {\r\n          message.success('异步任务已停止', 1);\r\n        }\r\n      } catch (stopError) {\r\n        console.warn('停止异步任务失败:', stopError);\r\n      }\r\n    }\r\n    \r\n    // 取消任务\r\n    const response = await ipAPI.cancelScanTask(record.id);\r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`任务 ${record.task_name || record.id} 已取消`, 1);\r\n      // 直接从列表中移除已取消的任务，而不是刷新整个列表\r\n      scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\r\n      taskPagination.total = scanTasks.value.length;\r\n    } else {\r\n      message.error('取消任务失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('取消任务失败:', error);\r\n    message.error(`取消任务失败: ${error.response?.data?.message || error.message}`);\r\n  }\r\n};\r\n\r\nconst handleDeleteTask = async (record) => {\r\n  try {\r\n    // 显示确认对话框\r\n    await new Promise((resolve, reject) => {\r\n      const modal = Modal.confirm({\r\n        title: '确认删除任务',\r\n        content: `确定要删除任务 \"${record.id}\" 吗？该操作不可恢复！`,\r\n        okText: '确认删除',\r\n        okType: 'danger',\r\n        cancelText: '取消',\r\n        onOk: () => resolve(true),\r\n        onCancel: () => reject(new Error('User cancelled'))\r\n      });\r\n    });\r\n    \r\n    // 调用删除API\r\n    const response = await ipAPI.deleteScanTask(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`任务 \"${record.id}\" 已成功删除`, 1);\r\n      \r\n      // 直接从列表中移除已删除的任务，而不是刷新整个列表\r\n      scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\r\n      taskPagination.total = scanTasks.value.length;\r\n    } else {\r\n      message.error('删除任务失败');\r\n    }\r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除任务失败:', error);\r\n      message.error(`删除任务失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst loadTaskResults = async (taskId) => {\r\n  resultLoading.value = true;\r\n  try {\r\n    const response = await ipAPI.getScanTaskResults(taskId);\r\n    if (response.data && response.data.code === 200) {\r\n      taskResults.value = response.data.data || [];\r\n    } else {\r\n      message.error('获取扫描结果失败');\r\n      taskResults.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载扫描结果失败:', error);\r\n    message.error(`加载扫描结果失败: ${error.response?.data?.message || error.message}`);\r\n    taskResults.value = [];\r\n  } finally {\r\n    resultLoading.value = false;\r\n  }\r\n};\r\n\r\n// 任务状态相关工具函数\r\nconst getTaskStatusColor = (status) => {\r\n  const colorMap = {\r\n    'pending': 'default',\r\n    'running': 'processing',\r\n    'completed': 'success',\r\n    'failed': 'error',\r\n    'cancelled': 'warning'\r\n  };\r\n  return colorMap[status] || 'default';\r\n};\r\n\r\nconst getTaskStatusText = (status) => {\r\n  const textMap = {\r\n    'pending': '等待中',\r\n    'running': '运行中',\r\n    'completed': '已完成',\r\n    'failed': '失败',\r\n    'cancelled': '已取消'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\n// 判断是否为长时间运行的任务\r\nconst isLongRunningTask = (task) => {\r\n  if (task.status !== 'running') {\r\n    return false;\r\n  }\r\n  \r\n  // 检查任务的运行时间，如果超过180秒（5分钟）则认为是长时间运行\r\n  if (task.started_at) {\r\n    const startTime = new Date(task.started_at);\r\n    const currentTime = new Date();\r\n    const diffInSeconds = (currentTime - startTime) / 1000;\r\n    return diffInSeconds > 180; // 3分钟\r\n  }\r\n  \r\n  // 根据进度判断：如果进度大于30%但仍在运行，可能是长时间任务\r\n  return task.progress > 30;\r\n};\r\n\r\n// 获取取消按钮的文本\r\nconst getCancelButtonText = (record) => {\r\n  if (record.status === 'running' && isLongRunningTask(record)) {\r\n    return '停止';\r\n  }\r\n  return '取消';\r\n};\r\n\r\n// 获取取消按钮的提示信息\r\nconst getCancelButtonTitle = (record) => {\r\n  if (record.status === 'completed') {\r\n    return '任务已完成，无法取消';\r\n  }\r\n  if (record.status === 'cancelled') {\r\n    return '任务已取消';\r\n  }\r\n  if (record.status === 'failed') {\r\n    return '任务已失败，无法取消';\r\n  }\r\n  if (record.status === 'running') {\r\n    if (isLongRunningTask(record)) {\r\n      return '停止正在持续运行的任务。任务将会立即停止，不再检查新的主机发现';\r\n    }\r\n    return '取消正在运行的任务';\r\n  }\r\n  if (record.status === 'pending') {\r\n    return '取消等待中的任务';\r\n  }\r\n  return '取消任务';\r\n};\r\n\r\n// 获取删除按钮的提示信息\r\nconst getDeleteButtonTitle = (record) => {\r\n  if (record.status === 'running') {\r\n    return '任务正在运行中，无法删除';\r\n  }\r\n  if (record.status === 'pending') {\r\n    return '任务正在等待处理，无法删除';\r\n  }\r\n  return `删除任务 ${record.id} 的记录（不可恢复）`;\r\n};\r\n\r\n\r\n\r\n\r\nconst handleRefresh = () => {\r\n  loadIPList();\r\n  message.success('数据已刷新', 1);\r\n};\r\n\r\nconst handleSave = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    // 转换字段名：前端驼峰命名转后端下划线命名\r\n    const submitData = {\r\n      ip_address: formData.ipAddress,\r\n      hostname: formData.hostname,\r\n      status: formData.status,\r\n      type: formData.type,\r\n      mac_address: formData.macAddress,\r\n      device: formData.device,\r\n      subnet: formData.subnet,\r\n      description: formData.description\r\n    };\r\n    \r\n    if (editingIP.value) {\r\n      // 编辑模式\r\n      await ipAPI.updateIP(editingIP.value.id, submitData);\r\n      message.success('IP信息更新成功', 1);\r\n    } else {\r\n      // 新增模式\r\n      await ipAPI.createIP(submitData);\r\n      message.success('IP添加成功', 1);\r\n    }\r\n    \r\n    editModalVisible.value = false;\r\n    resetForm();\r\n    await loadIPList();\r\n  } catch (error) {\r\n    console.error('保存IP失败:', error);\r\n    message.error(`保存失败: ${error.response?.data?.message || error.message}`);\r\n  }\r\n};\r\n\r\nconst handleCancel = () => {\r\n  editModalVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\nconst resetForm = () => {\r\n  Object.assign(formData, {\r\n    ipAddress: '',\r\n    hostname: '',\r\n    status: 'available',\r\n    type: 'static',\r\n    macAddress: '',\r\n    device: '',\r\n    subnet: '',\r\n    description: ''\r\n  });\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 组件挂载时初始化数据\r\nonMounted(() => {\r\n  // 防止重复初始化\r\n  if (isComponentInitialized) {\r\n    console.log('IP列表组件已初始化，跳过重复初始化');\r\n    return;\r\n  }\r\n  \r\n  console.log('IP列表组件挂载，开始加载IP数据...');\r\n  isComponentInitialized = true;\r\n  \r\n  // 从 URL 参数中读取分页设置\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const pageParam = urlParams.get('page');\r\n  const pageSizeParam = urlParams.get('page_size');\r\n  \r\n  if (pageParam && !isNaN(parseInt(pageParam))) {\r\n    pagination.current = parseInt(pageParam);\r\n    console.log('从 URL 读取到 page 参数:', pagination.current);\r\n  }\r\n  \r\n  if (pageSizeParam && !isNaN(parseInt(pageSizeParam))) {\r\n    const requestedPageSize = parseInt(pageSizeParam);\r\n    // 检查是否在允许的选项中\r\n    const allowedSizes = [10, 20, 50, 100];\r\n    if (allowedSizes.includes(requestedPageSize)) {\r\n      pagination.pageSize = requestedPageSize;\r\n      console.log('从 URL 读取到 page_size 参数:', pagination.pageSize);\r\n    } else {\r\n      console.warn(`URL 中的 page_size=${requestedPageSize} 不在允许范围内，使用默认值 ${pagination.pageSize}`);\r\n    }\r\n  }\r\n  \r\n  // 全局抑制 ResizeObserver 错误\r\n  const originalError = console.error;\r\n  console.error = function(...args) {\r\n    if (args[0] && args[0].toString().includes('ResizeObserver loop completed')) {\r\n      return; // 忽略 ResizeObserver 错误\r\n    }\r\n    originalError.apply(console, args);\r\n  };\r\n  \r\n  // 使用现有的错误抑制函数\r\n  suppressResizeObserverError();\r\n  \r\n  // 延迟加载数据，避免DOM渲染冲突\r\n  nextTick(() => {\r\n    loadIPList();\r\n  });\r\n});\r\n\r\n// 组件即将卸载时的预清理\r\nonBeforeUnmount(() => {\r\n  console.log('IP列表组件即将卸载，进行预清理...');\r\n  \r\n  // 立即停止所有监控活动\r\n  stopAsyncStatusMonitoring();\r\n  \r\n  // 关闭所有弹窗，避免残留的DOM元素\r\n  scanTaskModalVisible.value = false;\r\n  taskDetailModalVisible.value = false;\r\n  taskResultModalVisible.value = false;\r\n  editModalVisible.value = false;\r\n  detailModalVisible.value = false;\r\n  scanModalVisible.value = false;\r\n});\r\n\r\n// 组件销毁时清理资源\r\nonUnmounted(() => {\r\n  console.log('IP列表组件销毁，清理监控定时器...');\r\n  \r\n  // 1. 停止异步状态监控\r\n  stopAsyncStatusMonitoring();\r\n  \r\n  // 2. 清理所有可能的定时器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  // 3. 强制清理所有ResizeObserver实例\r\n  try {\r\n    // 查找页面中所有的ResizeObserver实例并断开连接\r\n    const tableElements = document.querySelectorAll('.modern-table, .ant-table, .ant-progress');\r\n    tableElements.forEach(element => {\r\n      // 移除可能的观察器\r\n      if (element._resizeObserver) {\r\n        element._resizeObserver.disconnect();\r\n        delete element._resizeObserver;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.debug('清理ResizeObserver时出错:', error.message);\r\n  }\r\n  \r\n  // 4. 清理组件状态\r\n  scanTasks.value = [];\r\n  ipData.value = [];\r\n  taskResults.value = [];\r\n  \r\n  // 5. 重置初始化状态标记\r\n  isComponentInitialized = false;\r\n  isMonitoringActive = false;\r\n  \r\n  console.log('IP列表组件资源清理完成');\r\n});\r\n\r\n// 监听扫描任务弹窗状态\r\nwatch(scanTaskModalVisible, (newValue, oldValue) => {\r\n  console.log(`扫描任务弹窗状态变化: ${oldValue} -> ${newValue}`);\r\n  \r\n  if (!newValue) {\r\n    // 弹窗关闭时停止监控\r\n    console.log('弹窗关闭，停止异步监控');\r\n    stopAsyncStatusMonitoring();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* 简洁蓝白背景 */\r\n.ip-list-container {\r\n  background: #f8fafc;\r\n  min-height: 100vh;\r\n}\r\n\r\n/* 简洁卡片样式 */\r\n.table-card {\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n  background: #ffffff;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.table-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px 24px;\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.table-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin: 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #1e40af;\r\n}\r\n\r\n.table-extra {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n/* 简洁表格样式 */\r\n:deep(.modern-table) {\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n  background: #ffffff;\r\n}\r\n\r\n:deep(.modern-table .ant-table-thead > tr > th) {\r\n  background: #f1f5f9;\r\n  border: none;\r\n  color: #374151;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr > td) {\r\n  border: none;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #f1f5f9;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr:hover > td) {\r\n  background: #f8fafc;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr:last-child > td) {\r\n  border-bottom: none;\r\n}\r\n\r\n/* 简洁按钮样式 */\r\n:deep(.ant-btn-primary) {\r\n  background: #2563eb;\r\n  border: 1px solid #2563eb;\r\n  border-radius: 6px;\r\n  height: 36px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background: #1d4ed8;\r\n  border-color: #1d4ed8;\r\n}\r\n\r\n:deep(.ant-btn:not(.ant-btn-primary)) {\r\n  border-radius: 6px;\r\n  height: 36px;\r\n\r\n  background: #ffffff;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn:not(.ant-btn-primary):hover) {\r\n  border-color: #2563eb;\r\n  color: #2563eb;\r\n}\r\n\r\n/* 简洁标签样式 */\r\n:deep(.ant-tag) {\r\n  border-radius: 4px;\r\n  padding: 2px 8px;\r\n  font-weight: 500;\r\n  border: 1px solid;\r\n  font-size: 12px;\r\n}\r\n\r\n/* 状态标签简洁色彩 */\r\n:deep(.ant-tag-success) {\r\n  background: #dcfce7;\r\n  color: #166534;\r\n  border-color: #bbf7d0;\r\n}\r\n\r\n:deep(.ant-tag-processing) {\r\n  background: #dbeafe;\r\n  color: #1e40af;\r\n  border-color: #93c5fd;\r\n}\r\n\r\n:deep(.ant-tag-warning) {\r\n  background: #fef3c7;\r\n  color: #92400e;\r\n  border-color: #fde68a;\r\n}\r\n\r\n:deep(.ant-tag-error) {\r\n  background: #fee2e2;\r\n  color: #dc2626;\r\n  border-color: #fecaca;\r\n}\r\n\r\n:deep(.ant-tag-default) {\r\n  background: #f3f4f6;\r\n  color: #374151;\r\n  border-color: #d1d5db;\r\n}\r\n\r\n/* 保护状态样式 */\r\n.protected-button {\r\n  opacity: 0.5;\r\n  cursor: not-allowed !important;\r\n}\r\n\r\n.protected-button:hover {\r\n  background: none !important;\r\n  border-color: transparent !important;\r\n  transform: none !important;\r\n}\r\n\r\n/* 保护信息提示 */\r\n.protection-info {\r\n  margin-top: 4px;\r\n  color: #718096;\r\n  font-style: italic;\r\n}\r\n\r\n/* 统计卡片样式 */\r\n:deep(.ant-statistic) {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n:deep(.ant-statistic-title) {\r\n  color: #4a5568;\r\n  font-weight: 600;\r\n}\r\n\r\n:deep(.ant-statistic-content) {\r\n  color: #2d3748;\r\n  font-weight: 700;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .ip-list-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .table-header {\r\n    padding: 16px 20px;\r\n    flex-wrap: wrap;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .table-title {\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .table-extra {\r\n    flex-wrap: wrap;\r\n    gap: 8px;\r\n  }\r\n  \r\n  :deep(.modern-table .ant-table-thead > tr > th),\r\n  :deep(.modern-table .ant-table-tbody > tr > td) {\r\n    padding: 12px 16px;\r\n  }\r\n}\r\n\r\n/* 滚动条美化 */\r\n:deep(.ant-table-body)::-webkit-scrollbar {\r\n  width: 8px;\r\n  height: 8px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-track {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-thumb {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-thumb:hover {\r\n  background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);\r\n  font-size: 12px;\r\n  line-height: 1.4;\r\n}\r\n\r\n.table-header-text {\r\n  font-weight: 600;\r\n  color: #374151;\r\n}\r\n\r\n/* IP地址单元格 */\r\n.ip-address-cell {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.ip-info {\r\n  flex: 1;\r\n}\r\n\r\n.ip-address {\r\n  font-family: 'Courier New', monospace;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  font-size: 14px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.ip-hostname {\r\n  font-size: 12px;\r\n  color: #6b7280;\r\n}\r\n\r\n/* 状态标签 */\r\n.status-tag {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  font-size: 12px;\r\n  padding: 4px 8px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n/* 类型标签 */\r\n.type-tag {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n/* Ping状态 */\r\n.ping-status {\r\n  font-weight: 500;\r\n}\r\n\r\n/* 最后在线时间 */\r\n.last-seen {\r\n  color: #6b7280;\r\n  font-size: 12px;\r\n}\r\n\r\n.no-data {\r\n  color: #9ca3af;\r\n  font-style: italic;\r\n}\r\n\r\n.form-section {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.section-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin: 0 0 16px 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  padding-bottom: 8px;\r\n  border-bottom: 1px solid #e8f3ff;\r\n}\r\n\r\n.input-hint {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  margin-top: 4px;\r\n}\r\n\r\n/* 扫描弹窗样式 */\r\n:deep(.ant-modal-body) {\r\n  max-height: 600px;\r\n  overflow-y: auto;\r\n}\r\n:deep(.detail-modal .ant-modal-content) {\r\n  border-radius: 8px;\r\n}\r\n\r\n:deep(.edit-modal .ant-modal-content) {\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 按钮样式优化 */\r\n:deep(.ant-btn-primary) {\r\n  background: #1890ff;\r\n  border-color: #1890ff;\r\n  border-radius: 6px;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background: #40a9ff;\r\n  border-color: #40a9ff;\r\n}\r\n\r\n:deep(.ant-btn) {\r\n  border-radius: 6px;\r\n}\r\n\r\n/* 输入框样式 */\r\n:deep(.ant-input) {\r\n  border-radius: 6px;\r\n  border-color: #e8f3ff;\r\n}\r\n\r\n:deep(.ant-input:focus) {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n:deep(.ant-select .ant-select-selector) {\r\n  border-radius: 6px;\r\n  border-color: #e8f3ff;\r\n}\r\n\r\n:deep(.ant-select:not(.ant-select-disabled):hover .ant-select-selector) {\r\n  border-color: #1890ff;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  \r\n  .filter-header {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: flex-start;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .ip-list-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .filter-content {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .filter-header {\r\n    gap: 12px;\r\n  }\r\n  \r\n  .filter-title {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .title-icon {\r\n    font-size: 18px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .ip-list-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .ip-address-cell {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .filter-content {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .filter-actions {\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n}\r\n\r\n/* 表格容器样式 */\r\n.table-container {\r\n  overflow: hidden;\r\n  background: white;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 批量操作工具栏 */\r\n.batch-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background: #f0f7ff;\r\n  border: 1px solid #d6e4ff;\r\n  border-radius: 8px;\r\n  margin-bottom: 16px;\r\n  animation: slideDown 0.3s ease;\r\n}\r\n\r\n@keyframes slideDown {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.batch-info {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  color: #1890ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.batch-info strong {\r\n  color: #1890ff;\r\n  margin: 0 4px;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 监控状态按钮样式 */\r\n.monitoring-enabled {\r\n  background: #f6ffed !important;\r\n  border-color: #b7eb8f !important;\r\n}\r\n\r\n.monitoring-enabled:hover {\r\n  background: #d9f7be !important;\r\n  border-color: #95de64 !important;\r\n}\r\n\r\n/* 统计卡片样式 */\r\n.stat-card {\r\n  border-radius: 8px;\r\n  border: 1px solid #e8f3ff;\r\n  background: #ffffff;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.08);\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 批量Ping弹窗样式 - 重新设计 */\r\n.ping-confirm-phase,\r\n.ping-testing-phase,\r\n.ping-result-phase {\r\n  padding: 8px 0;\r\n}\r\n\r\n/* 阶段头部 */\r\n.phase-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n  border-radius: 12px;\r\n  border: 2px solid;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.ping-confirm-phase .phase-header {\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  border-color: #91caff;\r\n}\r\n\r\n.ping-testing-phase .phase-header {\r\n  background: linear-gradient(135deg, #fff7e6 0%, #fff2e8 100%);\r\n  border-color: #ffec8b;\r\n}\r\n\r\n.ping-result-phase .phase-header {\r\n  background: linear-gradient(135deg, #f6ffed 0%, #f0f9e8 100%);\r\n  border-color: #d9f7be;\r\n}\r\n\r\n.phase-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 56px;\r\n  height: 56px;\r\n  border-radius: 50%;\r\n  font-size: 24px;\r\n  position: relative;\r\n}\r\n\r\n.phase-icon.confirm {\r\n  background: rgba(24, 144, 255, 0.1);\r\n  color: #1890ff;\r\n}\r\n\r\n.phase-icon.testing {\r\n  background: rgba(250, 140, 22, 0.1);\r\n  color: #fa8c16;\r\n}\r\n\r\n.phase-icon.success {\r\n  background: rgba(82, 196, 26, 0.1);\r\n  color: #52c41a;\r\n}\r\n\r\n.phase-content {\r\n  flex: 1;\r\n}\r\n\r\n.phase-title {\r\n  margin: 0 0 8px 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.phase-description {\r\n  margin: 0;\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 统计网格 */\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.stat-card {\r\n  text-align: center;\r\n  padding: 20px 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-number {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n  line-height: 1;\r\n}\r\n\r\n.stat-number.primary { color: #1890ff; }\r\n.stat-number.success { color: #52c41a; }\r\n.stat-number.error { color: #ff4d4f; }\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n/* 测试参数 */\r\n.test-parameters {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.param-title {\r\n  margin: 0 0 16px 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.param-list {\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.param-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.param-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.param-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n.param-value {\r\n  color: #262626;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 提示信息 */\r\n.warning-tip,\r\n.tech-tip {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.warning-tip {\r\n  background: rgba(250, 140, 22, 0.05);\r\n  border: 1px solid rgba(250, 140, 22, 0.2);\r\n}\r\n\r\n.tech-tip {\r\n  background: rgba(24, 144, 255, 0.05);\r\n  border: 1px solid rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.tip-icon {\r\n  font-size: 16px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tip-text {\r\n  font-size: 13px;\r\n  color: #595959;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* 测试中的动画和状态 */\r\n.loading-spinner {\r\n  width: 24px;\r\n  height: 24px;\r\n  border: 2px solid #f3f3f3;\r\n  border-top: 2px solid #fa8c16;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  position: absolute;\r\n  top: 16px;\r\n  left: 16px;\r\n}\r\n\r\n.testing-icon {\r\n  margin-left: 4px;\r\n  z-index: 1;\r\n}\r\n\r\n.testing-info {\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.info-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.info-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n.info-value {\r\n  color: #262626;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n.info-value.status-active {\r\n  color: #fa8c16;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n/* 进度条 */\r\n.progress-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.progress-bar {\r\n  width: 100%;\r\n  height: 6px;\r\n  background: #f5f5f5;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.progress-fill {\r\n  height: 100%;\r\n  background: linear-gradient(90deg, #1890ff, #40a9ff, #69c0ff, #40a9ff, #1890ff);\r\n  background-size: 200% 100%;\r\n  border-radius: 3px;\r\n  animation: progressFlow 2s ease-in-out infinite;\r\n}\r\n\r\n.progress-text {\r\n  text-align: center;\r\n  font-size: 13px;\r\n  color: #8c8c8c;\r\n  font-style: italic;\r\n}\r\n\r\n/* 结果阶段 */\r\n.success-icon {\r\n  font-size: 32px;\r\n  animation: bounce 0.6s ease-out;\r\n}\r\n\r\n.result-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.result-card {\r\n  text-align: center;\r\n  padding: 24px 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n  transition: all 0.3s ease;\r\n  animation: fadeInUp 0.5s ease-out;\r\n}\r\n\r\n.result-card.success {\r\n  border-color: #d9f7be;\r\n  background: #f6ffed;\r\n}\r\n\r\n.result-card.error {\r\n  border-color: #ffccc7;\r\n  background: #fff2f0;\r\n}\r\n\r\n.result-card.primary {\r\n  border-color: #91caff;\r\n  background: #f0f7ff;\r\n}\r\n\r\n.result-card:nth-child(1) { animation-delay: 0.1s; }\r\n.result-card:nth-child(2) { animation-delay: 0.2s; }\r\n.result-card:nth-child(3) { animation-delay: 0.3s; }\r\n\r\n.result-number {\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n  line-height: 1;\r\n}\r\n\r\n.result-card.success .result-number { color: #52c41a; }\r\n.result-card.error .result-number { color: #ff4d4f; }\r\n.result-card.primary .result-number { color: #1890ff; }\r\n\r\n.result-label {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.result-summary {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: rgba(82, 196, 26, 0.05);\r\n  border-radius: 8px;\r\n  border: 1px solid rgba(82, 196, 26, 0.2);\r\n  margin-bottom: 24px;\r\n  animation: fadeIn 0.5s ease-in 0.4s both;\r\n}\r\n\r\n.summary-item {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.summary-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.summary-item.success-rate .summary-value {\r\n  color: #52c41a;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n}\r\n\r\n.summary-item.test-time .summary-value {\r\n  color: #8c8c8c;\r\n  font-size: 13px;\r\n}\r\n\r\n.summary-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 按钮操作区域 */\r\n.modal-actions {\r\n  text-align: center;\r\n  margin-top: 8px;\r\n}\r\n\r\n/* 动画定义 */\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@keyframes pulse {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.6; }\r\n}\r\n\r\n@keyframes progressFlow {\r\n  0% { background-position: 200% 0; }\r\n  100% { background-position: -200% 0; }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes bounce {\r\n  0%, 20%, 53%, 80%, 100% {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n  40%, 43% {\r\n    transform: translate3d(0, -8px, 0);\r\n  }\r\n  70% {\r\n    transform: translate3d(0, -4px, 0);\r\n  }\r\n  90% {\r\n    transform: translate3d(0, -2px, 0);\r\n  }\r\n}\r\n\r\n:deep(.ping-info-header) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n  padding: 16px;\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  border-radius: 8px;\r\n  border: 1px solid #d4edda;\r\n}\r\n\r\n:deep(.ping-icon) {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 48px;\r\n  height: 48px;\r\n  background: rgba(24, 144, 255, 0.1);\r\n  border-radius: 50%;\r\n}\r\n\r\n:deep(.ping-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.ping-stats) {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n  background: #fafafa;\r\n  border-radius: 6px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n:deep(.stat-item) {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n:deep(.stat-label) {\r\n  font-size: 14px;\r\n  color: #666;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.stat-value) {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.stat-value.primary) {\r\n  color: #1890ff;\r\n  background: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n:deep(.stat-value.success) {\r\n  color: #52c41a;\r\n  background: rgba(82, 196, 26, 0.1);\r\n}\r\n\r\n:deep(.stat-value.error) {\r\n  color: #ff4d4f;\r\n  background: rgba(255, 77, 79, 0.1);\r\n}\r\n\r\n:deep(.ping-description) {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n:deep(.ping-warning) {\r\n  padding: 12px;\r\n  background: rgba(250, 140, 22, 0.05);\r\n  border: 1px solid rgba(250, 140, 22, 0.2);\r\n  border-radius: 6px;\r\n}\r\n\r\n/* 批量Ping结果弹窗样式 */\r\n:deep(.ping-result-content) {\r\n  padding: 8px 0;\r\n}\r\n\r\n:deep(.result-header) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n  background: linear-gradient(135deg, #f6ffed 0%, #f0f9e8 100%);\r\n  border-radius: 8px;\r\n  border: 1px solid #d9f7be;\r\n}\r\n\r\n:deep(.result-icon.success) {\r\n  font-size: 32px;\r\n  color: #52c41a;\r\n}\r\n\r\n:deep(.result-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #52c41a;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.result-stats) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.result-grid) {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n:deep(.result-item) {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n:deep(.result-number) {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n:deep(.result-number.success) {\r\n  color: #52c41a;\r\n}\r\n\r\n:deep(.result-number.error) {\r\n  color: #ff4d4f;\r\n}\r\n\r\n:deep(.result-number.primary) {\r\n  color: #1890ff;\r\n}\r\n\r\n:deep(.result-label) {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.result-summary) {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: rgba(82, 196, 26, 0.05);\r\n  border-radius: 6px;\r\n  border: 1px solid rgba(82, 196, 26, 0.2);\r\n}\r\n\r\n/* 进度消息美化 */\r\n:deep(.ant-message-custom-content) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n/* 弹窗按钮美化 */\r\n:deep(.ant-modal-confirm .ant-btn-primary) {\r\n  background: linear-gradient(135deg, #1890ff 0%, #40a9ff 100%);\r\n  border: none;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.3);\r\n}\r\n\r\n:deep(.ant-modal-confirm .ant-btn-primary:hover) {\r\n  background: linear-gradient(135deg, #40a9ff 0%, #69c0ff 100%);\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.4);\r\n}\r\n\r\n/* Zabbix模板选择抽屉样式 */\r\n.template-drawer-content {\r\n  padding: 0;\r\n}\r\n\r\n.ip-info-card {\r\n  margin-bottom: 24px;\r\n  border-radius: 12px;\r\n  border: 1px solid #e8f3ff;\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n.ip-info-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.ip-icon {\r\n  font-size: 24px;\r\n  color: #1890ff;\r\n}\r\n\r\n.ip-details h4 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.ip-details p {\r\n  margin: 0;\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n}\r\n\r\n/* 搜索和筛选区域 */\r\n.template-search-section {\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n  background: #fafafa;\r\n  border-radius: 12px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.search-bar {\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n}\r\n\r\n.search-bar .ant-input-search {\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.search-bar .ant-input-search:hover {\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.15);\r\n}\r\n\r\n.search-bar .ant-input-search:focus-within {\r\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.category-filter {\r\n  margin: 16px 0;\r\n  padding-bottom: 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n.category-filter-tag {\r\n  margin-bottom: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  padding: 8px 12px;\r\n  font-size: 13px;\r\n  border-radius: 8px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  background: #f5f5f5;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.category-filter-tag:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  background: white;\r\n}\r\n\r\n.category-filter-tag-selected {\r\n  background: #1890ff !important;\r\n  color: white !important;\r\n  border-color: #1890ff !important;\r\n}\r\n\r\n.category-filter-tag-selected .category-count {\r\n  color: rgba(255, 255, 255, 0.8) !important;\r\n}\r\n\r\n.category-filter-tag-selected .category-selected {\r\n  background: white !important;\r\n  color: #1890ff !important;\r\n}\r\n\r\n.category-tag-selected {\r\n  background: #1890ff !important;\r\n  color: white !important;\r\n  border-color: #1890ff !important;\r\n}\r\n\r\n.category-filter-icon {\r\n  font-size: 14px;\r\n}\r\n\r\n.category-count {\r\n  font-weight: 600;\r\n  margin-left: 4px;\r\n}\r\n\r\n.category-selected {\r\n  background: rgba(255, 255, 255, 0.3);\r\n  padding: 2px 6px;\r\n  border-radius: 8px;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  margin-left: 4px;\r\n}\r\n\r\n.clear-filter-tag {\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 模板列表 */\r\n.template-list {\r\n  max-height: calc(100vh - 400px);\r\n  overflow-y: auto;\r\n}\r\n\r\n.empty-templates {\r\n  text-align: center;\r\n  padding: 80px 20px;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n.empty-templates .ant-empty {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.empty-templates .ant-empty-image {\r\n  height: 120px;\r\n}\r\n\r\n.empty-templates .ant-empty-description {\r\n  font-size: 15px;\r\n  color: #666;\r\n}\r\n\r\n.empty-templates .ant-btn {\r\n  margin-top: 16px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.template-loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 300px;\r\n  padding: 40px;\r\n}\r\n\r\n.template-loading-spinner {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 4px solid #f0f0f0;\r\n  border-top: 4px solid #1890ff;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n.selected-templates-info {\r\n  margin-bottom: 20px;\r\n  animation: slideDown 0.3s ease-out;\r\n}\r\n\r\n.search-results-info {\r\n  margin: 12px 0;\r\n  padding: 12px 16px;\r\n  background: #f6f6f6;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  color: #666;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n.search-results-info strong {\r\n  color: #1890ff;\r\n  font-weight: 600;\r\n}\r\n\r\n@keyframes slideDown {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.template-grid {\r\n  animation: fadeIn 0.5s ease;\r\n}\r\n\r\n.template-card {\r\n  animation: fadeInUp 0.4s ease-out;\r\n  animation-fill-mode: both;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n/* 分类样式 */\r\n.template-category {\r\n  margin-bottom: 20px;\r\n  border: 1px solid #f0f0f0;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background: white;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.category-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 12px 16px;\r\n  background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.category-title-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  flex: 1;\r\n}\r\n\r\n.category-title {\r\n  margin: 0;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.category-icon {\r\n  font-size: 16px;\r\n  color: #1890ff;\r\n}\r\n\r\n.category-stats {\r\n  display: flex;\r\n  gap: 8px;\r\n  align-items: center;\r\n}\r\n\r\n.selected-badge {\r\n  margin-left: 8px;\r\n}\r\n\r\n.expand-button {\r\n  color: #666;\r\n  border: none;\r\n  background: transparent;\r\n}\r\n\r\n.expand-button:hover {\r\n  color: #1890ff;\r\n  background: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n/* 模板网格 */\r\n.template-grid-wrapper {\r\n  padding: 16px;\r\n  overflow: hidden;\r\n  max-width: 100%;\r\n}\r\n\r\n.template-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\r\n  gap: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0;\r\n  justify-content: start;\r\n}\r\n\r\n.template-card-container {\r\n  position: relative;\r\n}\r\n\r\n.template-checkbox {\r\n  width: 100%;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.template-checkbox .ant-checkbox) {\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 12px;\r\n  z-index: 10;\r\n  background: white;\r\n  border-radius: 50%;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.template-card {\r\n  width: 100%;\r\n  max-width: 260px;\r\n  height: 140px;\r\n  border-radius: 8px;\r\n  border: 1px solid #e8e8e8;\r\n  transition: all 0.2s ease;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  background: #ffffff;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.06);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.template-card:hover {\r\n  border-color: #40a9ff;\r\n  box-shadow: 0 12px 24px rgba(24, 144, 255, 0.25);\r\n  transform: translateY(-6px);\r\n}\r\n\r\n.template-card.selected {\r\n  border-color: #40a9ff;\r\n  background: linear-gradient(135deg, #e6f7ff 0%, #d6f0ff 100%);\r\n  box-shadow: 0 12px 28px rgba(24, 144, 255, 0.35);\r\n  transform: translateY(-6px);\r\n}\r\n\r\n.template-card.selected::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 0;\r\n  height: 0;\r\n  border-style: solid;\r\n  border-width: 0 36px 36px 0;\r\n  border-color: transparent #40a9ff transparent transparent;\r\n}\r\n\r\n.template-card.selected::before {\r\n  content: '✓';\r\n  position: absolute;\r\n  top: 6px;\r\n  right: 6px;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  z-index: 2;\r\n}\r\n\r\n:deep(.template-card .ant-card-head) {\r\n  min-height: auto;\r\n  padding: 12px 16px 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);\r\n}\r\n\r\n:deep(.template-card .ant-card-head-title) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.template-card .ant-card-body) {\r\n  padding: 12px 16px;\r\n  height: calc(100% - 50px);\r\n  overflow: hidden;\r\n}\r\n\r\n.template-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  width: 100%;\r\n  padding: 8px 10px;\r\n  background: #fafafa;\r\n  border-bottom: 1px solid #e8e8e8;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.template-icon {\r\n  font-size: 14px;\r\n  color: #1890ff;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.template-name {\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  flex: 1;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.template-card:hover .template-name {\r\n  color: #40a9ff;\r\n}\r\n\r\n.template-content {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 8px 10px;\r\n  flex: 1;\r\n}\r\n\r\n.template-description {\r\n  font-size: 12px;\r\n  color: #666;\r\n  line-height: 1.4;\r\n  margin-bottom: 8px;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.template-stats {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 6px 0;\r\n  padding: 6px 8px;\r\n  background: #f8f9fa;\r\n  border-radius: 4px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.stat-item {\r\n  text-align: center;\r\n  flex: 1;\r\n}\r\n\r\n.stat-label {\r\n  display: block;\r\n  font-size: 10px;\r\n  color: #666;\r\n  margin-bottom: 1px;\r\n  font-weight: 400;\r\n}\r\n\r\n.stat-value {\r\n  display: block;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n}\r\n\r\n.template-groups {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 3px;\r\n  align-items: center;\r\n  margin-top: auto;\r\n  padding-top: 4px;\r\n}\r\n\r\n.template-groups .ant-tag {\r\n  font-size: 9px;\r\n  padding: 1px 4px;\r\n  margin: 0;\r\n  border-radius: 8px;\r\n  background: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n  color: #1890ff;\r\n  line-height: 1.2;\r\n}\r\n\r\n.template-groups .ant-tag:hover {\r\n  background: linear-gradient(135deg, #e0e0e0 0%, #d0d0d0 100%);\r\n}\r\n\r\n.more-groups {\r\n  font-size: 10px;\r\n  color: #888;\r\n  font-weight: 500;\r\n  background: #f5f5f5;\r\n  padding: 1px 4px;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 模板抽屉响应式设计 */\r\n@media (max-width: 1400px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 14px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 12px;\r\n  }\r\n  \r\n  .template-card {\r\n    height: 140px;\r\n  }\r\n  \r\n  .template-header {\r\n    padding: 10px 10px 5px;\r\n  }\r\n  \r\n  .template-name {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .template-icon {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .template-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .template-grid-wrapper {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .template-card {\r\n    height: 120px;\r\n  }\r\n  \r\n  .template-header {\r\n    padding: 8px 8px 4px;\r\n    gap: 6px;\r\n  }\r\n  \r\n  .template-name {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-icon {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-stats {\r\n    margin: 6px 0;\r\n    padding: 6px 0;\r\n  }\r\n  \r\n  .stat-label {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .stat-value {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-groups {\r\n    margin-top: 6px;\r\n    padding: 0 8px;\r\n    gap: 3px;\r\n  }\r\n  \r\n  .template-groups .ant-tag {\r\n    font-size: 9px;\r\n    padding: 1px 4px;\r\n  }\r\n  \r\n  .more-groups {\r\n    font-size: 9px;\r\n    padding: 1px 3px;\r\n  }\r\n  \r\n  .category-header {\r\n    padding: 10px 12px;\r\n  }\r\n  \r\n  .category-title {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .category-icon {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .template-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .category-header {\r\n    padding: 12px 16px;\r\n  }\r\n  \r\n  .template-search-section {\r\n    padding: 16px;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\BusinessDetail.vue",["448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463"],"<template>\r\n  <div class=\"business-detail\">\r\n    <!-- 页面头部 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <div class=\"header-left\">\r\n          <a-button type=\"text\" @click=\"goBack\" class=\"back-btn\">\r\n            <template #icon><ArrowLeftOutlined /></template>\r\n            返回\r\n          </a-button>\r\n          <h2 class=\"page-title\">\r\n            <AppstoreOutlined class=\"title-icon\" />\r\n            {{ businessInfo.name || '业务详情' }}\r\n          </h2>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n          <a-space>\r\n            <a-button @click=\"editBusiness\">\r\n              <template #icon><EditOutlined /></template>\r\n              编辑\r\n            </a-button>\r\n            <a-button type=\"primary\" @click=\"refreshData\">\r\n              <template #icon><ReloadOutlined /></template>\r\n              刷新\r\n            </a-button>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 业务基本信息 -->\r\n    <div class=\"info-section\">\r\n      <a-card title=\"基本信息\" :bordered=\"false\">\r\n        <a-row :gutter=\"24\">\r\n          <a-col :span=\"12\">\r\n            <div class=\"info-item\">\r\n              <span class=\"label\">业务名称：</span>\r\n              <span class=\"value\">{{ businessInfo.name }}</span>\r\n            </div>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <div class=\"info-item\">\r\n              <span class=\"label\">责任人：</span>\r\n              <span class=\"value\">\r\n                <UserOutlined class=\"icon\" />\r\n                {{ businessInfo.responsible_person }}\r\n              </span>\r\n            </div>\r\n          </a-col>\r\n        </a-row>\r\n        <a-row :gutter=\"24\" style=\"margin-top: 16px\">\r\n          <a-col :span=\"12\">\r\n            <div class=\"info-item\">\r\n              <span class=\"label\">上线日期：</span>\r\n              <span class=\"value\">\r\n                <CalendarOutlined class=\"icon\" />\r\n                {{ formatDate(businessInfo.online_date) }}\r\n              </span>\r\n            </div>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <div class=\"info-item\">\r\n              <span class=\"label\">访问地址：</span>\r\n              <span class=\"value\">\r\n                <a-button\r\n                  v-if=\"businessInfo.access_url\"\r\n                  type=\"link\"\r\n                  size=\"small\"\r\n                  @click=\"openUrl(businessInfo.access_url)\"\r\n                >\r\n                  <template #icon><LinkOutlined /></template>\r\n                  {{ businessInfo.access_url }}\r\n                </a-button>\r\n                <span v-else class=\"no-data\">未设置</span>\r\n              </span>\r\n            </div>\r\n          </a-col>\r\n        </a-row>\r\n        <a-row :gutter=\"24\" style=\"margin-top: 16px\">\r\n          <a-col :span=\"24\">\r\n            <div class=\"info-item\">\r\n              <span class=\"label\">功能用途：</span>\r\n              <span class=\"value\">\r\n                <span v-if=\"businessInfo.description\" class=\"function-purpose-text\">\r\n                  {{ businessInfo.description }}\r\n                </span>\r\n                <span v-else class=\"no-data\">暂无功能用途描述</span>\r\n              </span>\r\n            </div>\r\n          </a-col>\r\n        </a-row>\r\n      </a-card>\r\n    </div>\r\n\r\n\r\n\r\n    <!-- 关联IP列表 -->\r\n    <div class=\"ip-section\">\r\n      <a-card :bordered=\"false\">\r\n        <template #title>\r\n          <div class=\"section-title\">\r\n            <GlobalOutlined class=\"title-icon\" />\r\n            关联IP列表\r\n            <a-badge :count=\"relatedIPs.length\" class=\"count-badge\" />\r\n          </div>\r\n        </template>\r\n        <template #extra>\r\n          <a-space>\r\n            <a-button size=\"small\" @click=\"showAddIPModal\">\r\n              <template #icon><PlusOutlined /></template>\r\n              添加IP\r\n            </a-button>\r\n            <a-button size=\"small\" @click=\"refreshIPs\">\r\n              <template #icon><ReloadOutlined /></template>\r\n              刷新\r\n            </a-button>\r\n          </a-space>\r\n        </template>\r\n        \r\n        <a-table\r\n          :columns=\"ipColumns\"\r\n          :data-source=\"relatedIPs\"\r\n          :loading=\"ipLoading\"\r\n          :pagination=\"false\"\r\n          size=\"small\"\r\n        >\r\n          <template #bodyCell=\"{ column, record }\">\r\n            <template v-if=\"column.dataIndex === 'ip_address'\">\r\n              <div class=\"ip-info\">\r\n                <a-tag color=\"blue\">{{ record.ip_address }}</a-tag>\r\n              </div>\r\n            </template>\r\n            \r\n            <template v-else-if=\"column.dataIndex === 'status'\">\r\n              <a-tag :color=\"getStatusColor(record.status)\">\r\n                {{ getStatusText(record.status) }}\r\n              </a-tag>\r\n            </template>\r\n            \r\n            <template v-else-if=\"column.dataIndex === 'service_type'\">\r\n              <a-tag color=\"purple\">\r\n                {{ getServiceTypeText(record.service_type) }}\r\n              </a-tag>\r\n            </template>\r\n            \r\n            <template v-else-if=\"column.dataIndex === 'ping_status'\">\r\n              <div class=\"ping-status\">\r\n                <span :class=\"['status-dot', record.ping_status]\" />\r\n                {{ getPingStatusText(record.ping_status) }}\r\n              </div>\r\n            </template>\r\n            \r\n            <template v-else-if=\"column.dataIndex === 'action'\">\r\n              <a-space>\r\n                <a-tooltip title=\"移除关联\">\r\n                  <a-button\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    danger\r\n                    @click=\"removeIP(record)\"\r\n                  >\r\n                    <template #icon><DeleteOutlined /></template>\r\n                  </a-button>\r\n                </a-tooltip>\r\n              </a-space>\r\n            </template>\r\n          </template>\r\n        </a-table>\r\n      </a-card>\r\n    </div>\r\n\r\n    <!-- 业务拓扑 -->\r\n    <div class=\"topology-section\">\r\n      <a-card title=\"业务拓扑\" :bordered=\"false\">\r\n        <template #extra>\r\n          <a-space>\r\n            <a-button size=\"small\" @click=\"refreshTopology\">\r\n              <template #icon><ReloadOutlined /></template>\r\n              刷新拓扑\r\n            </a-button>\r\n            <a-button size=\"small\" @click=\"exportTopology\">\r\n              <template #icon><ExportOutlined /></template>\r\n              导出\r\n            </a-button>\r\n            <!-- 拓扑图控制面板 -->\r\n            <a-divider type=\"vertical\" v-if=\"relatedIPs.length > 0\" />\r\n            <a-tag v-if=\"relatedIPs.length > 0\" color=\"green\" @click=\"resetNodePositions\" style=\"cursor: pointer\">\r\n              重置位置\r\n            </a-tag>\r\n            <a-tag v-if=\"isConnecting\" color=\"orange\" @click=\"cancelConnection\" style=\"cursor: pointer\">\r\n              <CloseOutlined /> 取消连线\r\n            </a-tag>\r\n            <a-tag v-if=\"customConnections.length > 0\" color=\"red\" @click=\"clearAllConnections\" style=\"cursor: pointer\">\r\n              <DeleteOutlined /> 清除自定义连线\r\n            </a-tag>\r\n            <a-tag v-if=\"isConnecting\" color=\"purple\" class=\"connecting-tip\">\r\n              点击节点完成连线\r\n            </a-tag>\r\n          </a-space>\r\n        </template>\r\n        \r\n        <div class=\"topology-container\">\r\n          <div v-if=\"topologyLoading\" class=\"topology-loading\">\r\n            <a-spin size=\"large\" />\r\n            <p>正在生成业务拓扑图...</p>\r\n          </div>\r\n          <div v-else-if=\"relatedIPs.length === 0\" class=\"no-topology\">\r\n            <a-empty description=\"暂无关联IP，无法生成拓扑图\" />\r\n          </div>\r\n          <div v-else class=\"topology-content\">\r\n            <!-- 业务拓扑图 -->\r\n            <div class=\"topology-layout\">\r\n              <!-- 左侧IP节点列表 -->\r\n              <div class=\"ip-nodes-sidebar\">\r\n                <div class=\"sidebar-header\">\r\n                  <h4 class=\"sidebar-title\">IP节点列表</h4>\r\n                  <span class=\"node-count\">{{ relatedIPs.length }} 个节点</span>\r\n                </div>\r\n                <div class=\"sidebar-nodes\">\r\n                  <div\r\n                    v-for=\"(ip, index) in relatedIPs\"\r\n                    :key=\"ip.id\"\r\n                    class=\"sidebar-ip-node\"\r\n                    :class=\"[ip.ping_status, { \r\n                      'connecting-from': connectingFrom && connectingFrom.type === 'ip' && connectingFrom.id === ip.id \r\n                    }]\"\r\n                    @mousedown=\"startDragFromSidebar($event, ip)\"\r\n                    @click=\"handleSidebarNodeClick($event, ip)\"\r\n                    @contextmenu.prevent=\"startConnection({ type: 'ip', id: ip.id, name: ip.ip_address, x: 50, y: 50 + index * 90 })\"\r\n                  >\r\n                    <div class=\"node-icon\">\r\n                      <component :is=\"getServiceIcon(ip.service_type)\" />\r\n                    </div>\r\n                    <div class=\"node-info\">\r\n                      <div class=\"node-title\">{{ ip.ip_address }}</div>\r\n                      <div class=\"node-subtitle\">{{ getServiceTypeText(ip.service_type) }}</div>\r\n                    </div>\r\n                    <div class=\"node-status\" :class=\"ip.ping_status\">\r\n                      <span class=\"status-dot\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- 主画布区域 -->\r\n              <div class=\"main-canvas\" :class=\"{ 'connecting-mode': isConnecting }\">\r\n                <!-- 网络连接层 -->\r\n                <div class=\"topology-network\" @mousemove=\"onMouseMove\">\r\n                  <svg width=\"100%\" height=\"100%\" class=\"connection-svg\">\r\n                    <!-- 定义箭头标记和渐变 -->\r\n                    <defs>\r\n                      <!-- 科技风渐变 -->\r\n                      <linearGradient id=\"techGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\r\n                        <stop offset=\"0%\" style=\"stop-color:#00d4ff;stop-opacity:1\" />\r\n                        <stop offset=\"50%\" style=\"stop-color:#0099ff;stop-opacity:1\" />\r\n                        <stop offset=\"100%\" style=\"stop-color:#0066ff;stop-opacity:1\" />\r\n                      </linearGradient>\r\n                      \r\n                      <!-- 发光效果滤镜 -->\r\n                      <filter id=\"glow\">\r\n                        <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\r\n                        <feMerge> \r\n                          <feMergeNode in=\"coloredBlur\"/>\r\n                          <feMergeNode in=\"SourceGraphic\"/>\r\n                        </feMerge>\r\n                      </filter>\r\n                      \r\n                      <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n                              refX=\"9\" refY=\"3.5\" orient=\"auto\">\r\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#1890ff\" />\r\n                      </marker>\r\n                      <marker id=\"custom-arrowhead\" markerWidth=\"12\" markerHeight=\"8\" \r\n                              refX=\"11\" refY=\"4\" orient=\"auto\">\r\n                        <polygon points=\"0 0, 12 4, 0 8\" fill=\"url(#techGradient)\" filter=\"url(#glow)\" />\r\n                      </marker>\r\n                    </defs>\r\n                    \r\n                    <!-- 自定义连线 -->\r\n                    <g>\r\n                      <!-- 背景连线 -->\r\n                      <line\r\n                        v-for=\"connection in customConnections\"\r\n                        :key=\"'bg-' + connection.id\"\r\n                        :x1=\"connection.from.x\"\r\n                        :y1=\"connection.from.y\"\r\n                        :x2=\"connection.to.x\"\r\n                        :y2=\"connection.to.y\"\r\n                        stroke=\"#1a1a2e\"\r\n                        stroke-width=\"6\"\r\n                        class=\"connection-background\"\r\n                      />\r\n                      <!-- 主连线 -->\r\n                      <line\r\n                        v-for=\"connection in customConnections\"\r\n                        :key=\"'main-' + connection.id\"\r\n                        :x1=\"connection.from.x\"\r\n                        :y1=\"connection.from.y\"\r\n                        :x2=\"connection.to.x\"\r\n                        :y2=\"connection.to.y\"\r\n                        stroke=\"url(#techGradient)\"\r\n                        stroke-width=\"3\"\r\n                        marker-end=\"url(#custom-arrowhead)\"\r\n                        class=\"custom-connection-line tech-line\"\r\n                        @click=\"removeConnection(connection.id)\"\r\n                      />\r\n                      <!-- 流动光效 -->\r\n                      <line\r\n                        v-for=\"connection in customConnections\"\r\n                        :key=\"'flow-' + connection.id\"\r\n                        :x1=\"connection.from.x\"\r\n                        :y1=\"connection.from.y\"\r\n                        :x2=\"connection.to.x\"\r\n                        :y2=\"connection.to.y\"\r\n                        stroke=\"#00ffff\"\r\n                        stroke-width=\"1\"\r\n                        stroke-dasharray=\"10,20\"\r\n                        class=\"flow-effect\"\r\n                      />\r\n                    </g>\r\n                    \r\n                    <!-- 临时连线（连线过程中显示） -->\r\n                    <g v-if=\"tempConnection\">\r\n                      <!-- 临时连线背景 -->\r\n                      <line\r\n                        :x1=\"tempConnection.from.x\"\r\n                        :y1=\"tempConnection.from.y\"\r\n                        :x2=\"tempConnection.to.x\"\r\n                        :y2=\"tempConnection.to.y\"\r\n                        stroke=\"#1a1a2e\"\r\n                        stroke-width=\"4\"\r\n                        class=\"temp-connection-bg\"\r\n                      />\r\n                      <!-- 临时连线主体 -->\r\n                      <line\r\n                        :x1=\"tempConnection.from.x\"\r\n                        :y1=\"tempConnection.from.y\"\r\n                        :x2=\"tempConnection.to.x\"\r\n                        :y2=\"tempConnection.to.y\"\r\n                        stroke=\"url(#techGradient)\"\r\n                        stroke-width=\"2\"\r\n                        stroke-dasharray=\"8,4\"\r\n                        class=\"temp-connection-line tech-temp-line\"\r\n                        filter=\"url(#glow)\"\r\n                      />\r\n                    </g>\r\n                  </svg>\r\n                </div>\r\n                \r\n                <!-- 业务中心节点 -->\r\n                <div \r\n                  class=\"business-center-node\"\r\n                  :class=\"{ 'connecting-from': connectingFrom && connectingFrom.type === 'business' }\"\r\n                  :style=\"{ left: businessInfo.x + 'px', top: businessInfo.y + 'px' }\"\r\n                  @mousedown=\"startBusinessDrag($event)\"\r\n                  @click=\"handleBusinessNodeClick($event)\"\r\n                  @contextmenu.prevent=\"startConnection({ type: 'business', id: businessInfo.id, name: businessInfo.name })\"\r\n                >\r\n                  <AppstoreOutlined class=\"node-icon\" />\r\n                  <div class=\"node-info\">\r\n                    <div class=\"node-title\">{{ businessInfo.name }}</div>\r\n                    <div class=\"node-subtitle\">业务中心</div>\r\n                  </div>\r\n                  <div v-if=\"connectingFrom && connectingFrom.type === 'business'\" class=\"connecting-indicator\">\r\n                    连线起点\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- 画布中的IP节点（从侧边栏拖拽过来的） -->\r\n                <div\r\n                  v-for=\"ip in canvasIPs\"\r\n                  :key=\"'canvas-' + ip.id\"\r\n                  class=\"canvas-ip-node\"\r\n                  :class=\"[ip.ping_status, { \r\n                    'connecting-from': connectingFrom && connectingFrom.type === 'ip' && connectingFrom.id === ip.id \r\n                  }]\"\r\n                  :style=\"{\r\n                    left: ip.x + 'px',\r\n                    top: ip.y + 'px'\r\n                  }\"\r\n                  @mousedown=\"startDrag($event, ip)\"\r\n                  @click=\"handleCanvasNodeClick($event, ip)\"\r\n                  @contextmenu.prevent=\"startConnection({ type: 'ip', id: ip.id, name: ip.ip_address, x: ip.x + 60, y: ip.y + 40 })\"\r\n                >\r\n                  <div class=\"node-icon\">\r\n                    <component :is=\"getServiceIcon(ip.service_type)\" />\r\n                  </div>\r\n                  <div class=\"node-info\">\r\n                    <div class=\"node-title\">{{ ip.ip_address }}</div>\r\n                    <div class=\"node-subtitle\">{{ getServiceTypeText(ip.service_type) }}</div>\r\n                  </div>\r\n                  <div class=\"node-status\" :class=\"ip.ping_status\">\r\n                    <span class=\"status-dot\" />\r\n                    {{ getPingStatusText(ip.ping_status) }}\r\n                  </div>\r\n                  <div v-if=\"connectingFrom && connectingFrom.type === 'ip' && connectingFrom.id === ip.id\" class=\"connecting-indicator\">\r\n                    连线起点\r\n                  </div>\r\n                  <!-- 删除按钮 -->\r\n                  <div class=\"node-remove-btn\" @click.stop=\"removeCanvasNode(ip.id)\" title=\"从画布移除\">\r\n                    <CloseOutlined />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n\r\n      </a-card>\r\n    </div>\r\n\r\n    <!-- 添加IP模态框 -->\r\n    <a-modal\r\n      v-model:open=\"addIPModalVisible\"\r\n      title=\"添加关联IP\"\r\n      @ok=\"handleAddIP\"\r\n      @cancel=\"handleCancelAddIP\"\r\n    >\r\n      <a-form layout=\"vertical\">\r\n        <a-form-item label=\"选择IP\" required>\r\n          <a-select\r\n            v-model:value=\"ipForm.ip_id\"\r\n            placeholder=\"请选择要关联的IP\"\r\n            show-search\r\n            :filter-option=\"false\"\r\n            @search=\"handleIPSearch\"\r\n            :loading=\"ipLoading\"\r\n          >\r\n            <a-select-option\r\n              v-for=\"ip in availableIPs\"\r\n              :key=\"ip.id\"\r\n              :value=\"ip.id\"\r\n            >\r\n              {{ ip.ip_address }} - {{ ip.hostname || '未知主机' }}\r\n            </a-select-option>\r\n          </a-select>\r\n        </a-form-item>\r\n        <a-form-item label=\"服务类型\">\r\n          <a-select\r\n            v-model:value=\"ipForm.service_type\"\r\n            placeholder=\"请选择服务类型\"\r\n          >\r\n            <a-select-option value=\"web\">Web服务</a-select-option>\r\n            <a-select-option value=\"database\">数据库</a-select-option>\r\n            <a-select-option value=\"cache\">缓存服务</a-select-option>\r\n            <a-select-option value=\"message_queue\">消息队列</a-select-option>\r\n            <a-select-option value=\"file_storage\">文件存储</a-select-option>\r\n            <a-select-option value=\"monitoring\">监控服务</a-select-option>\r\n            <a-select-option value=\"other\">其他</a-select-option>\r\n          </a-select>\r\n        </a-form-item>\r\n        <a-form-item label=\"关联说明\">\r\n          <a-textarea\r\n            v-model:value=\"ipForm.description\"\r\n            placeholder=\"请输入关联说明（可选）\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 编辑业务模态框 -->\r\n    <a-modal\r\n      v-model:open=\"editModalVisible\"\r\n      title=\"编辑业务\"\r\n      width=\"800px\"\r\n      @ok=\"handleEditSubmit\"\r\n      @cancel=\"handleEditCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"editFormRef\"\r\n        :model=\"editForm\"\r\n        :rules=\"editFormRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"业务名称\" name=\"name\">\r\n              <a-input\r\n                v-model:value=\"editForm.name\"\r\n                placeholder=\"请输入业务名称\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"上线日期\" name=\"online_date\">\r\n              <a-date-picker\r\n                v-model:value=\"editForm.online_date\"\r\n                style=\"width: 100%\"\r\n                format=\"YYYY-MM-DD\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"责任人\" name=\"responsible_person\">\r\n              <a-input\r\n                v-model:value=\"editForm.responsible_person\"\r\n                placeholder=\"请输入责任人\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"访问地址\" name=\"access_url\">\r\n              <a-input\r\n                v-model:value=\"editForm.access_url\"\r\n                placeholder=\"请输入访问地址\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item label=\"功能用途\" name=\"function_purpose\">\r\n          <a-textarea\r\n            v-model:value=\"editForm.function_purpose\"\r\n            placeholder=\"请输入功能用途\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"业务描述\" name=\"description\">\r\n          <a-textarea\r\n            v-model:value=\"editForm.description\"\r\n            placeholder=\"请输入业务描述\"\r\n            :rows=\"4\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed, nextTick } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport { message, Modal } from 'ant-design-vue';\r\nimport dayjs from 'dayjs';\r\nimport { businessAPI } from '@/api/businessManagement';\r\nimport { ipAPI } from '@/api/ipManagement';\r\nimport {\r\n  ArrowLeftOutlined,\r\n  AppstoreOutlined,\r\n  EditOutlined,\r\n  ReloadOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n  CalendarOutlined,\r\n  LinkOutlined,\r\n  GlobalOutlined,\r\n  PlusOutlined,\r\n  EyeOutlined,\r\n  DeleteOutlined,\r\n  ExportOutlined,\r\n  NodeIndexOutlined,\r\n  CloseOutlined,\r\n  DatabaseOutlined,\r\n  ThunderboltOutlined,\r\n  MessageOutlined,\r\n  FolderOutlined,\r\n  SettingOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\nconst route = useRoute();\r\nconst router = useRouter();\r\n\r\n// 响应式数据\r\nconst businessInfo = ref({});\r\nconst relatedIPs = ref([]);\r\nconst availableIPs = ref([]);\r\nconst loading = ref(false);\r\nconst ipLoading = ref(false);\r\nconst topologyLoading = ref(false);\r\nconst addIPModalVisible = ref(false);\r\nconst editModalVisible = ref(false);\r\nconst editFormRef = ref();\r\n\r\n// 表单数据\r\nconst ipForm = reactive({\r\n  ip_id: undefined,\r\n  description: '',\r\n  service_type: 'web'\r\n});\r\n\r\n// 拓扑图相关数据\r\nconst showConnections = ref(true);\r\nconst customConnections = ref([]);\r\nconst isConnecting = ref(false);\r\nconst connectingFrom = ref(null);\r\nconst tempConnection = ref(null);\r\nconst mousePosition = ref({ x: 0, y: 0 });\r\nconst isDragging = ref(false);\r\nconst dragTarget = ref(null);\r\nconst dragOffset = ref({ x: 0, y: 0 });\r\nconst canvasIPs = ref([]); // 画布中的IP节点\r\n\r\nconst editForm = reactive({\r\n  name: '',\r\n  responsible_person: '',\r\n  online_date: null,\r\n  access_url: '',\r\n  function_purpose: '',\r\n  description: ''\r\n});\r\n\r\n// 编辑表单验证规则\r\nconst editFormRules = {\r\n  name: [{ required: true, message: '请输入业务名称', trigger: 'blur' }],\r\n  responsible_person: [{ required: true, message: '请输入责任人', trigger: 'blur' }],\r\n  online_date: [{ required: true, message: '请选择上线日期', trigger: 'change' }],\r\n  access_url: [\r\n    { \r\n      validator: (rule, value) => {\r\n        if (!value || value.trim() === '') {\r\n          return Promise.resolve();\r\n        }\r\n        return Promise.resolve();\r\n      },\r\n      trigger: 'blur'\r\n    }\r\n  ]\r\n};\r\n\r\n// IP列表表格列配置\r\nconst ipColumns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address',\r\n    key: 'ip_address',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '主机名',\r\n    dataIndex: 'hostname',\r\n    key: 'hostname',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '服务类型',\r\n    dataIndex: 'service_type',\r\n    key: 'service_type',\r\n    width: 120\r\n  },\r\n  {\r\n    title: 'Ping状态',\r\n    dataIndex: 'ping_status',\r\n    key: 'ping_status',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '最后检测',\r\n    dataIndex: 'last_seen',\r\n    key: 'last_seen',\r\n    width: 150,\r\n    customRender: ({ text }) => formatDate(text)\r\n  },\r\n  {\r\n    title: '关联说明',\r\n    dataIndex: 'description',\r\n    key: 'description',\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: '操作',\r\n    dataIndex: 'action',\r\n    key: 'action',\r\n    width: 100,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 方法\r\nconst fetchBusinessDetail = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const response = await businessAPI.getBusinessDetail(route.params.id);\r\n    businessInfo.value = response.data;\r\n    \r\n    // 确保业务中心节点的坐标是数值类型\r\n    if (!businessInfo.value.x || typeof businessInfo.value.x !== 'number') {\r\n      businessInfo.value.x = 400; // 默认X坐标\r\n    }\r\n    if (!businessInfo.value.y || typeof businessInfo.value.y !== 'number') {\r\n      businessInfo.value.y = 260; // 默认Y坐标\r\n    }\r\n  } catch (error) {\r\n    message.error('获取业务详情失败');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst fetchRelatedIPs = async () => {\r\n  ipLoading.value = true;\r\n  try {\r\n    const response = await businessAPI.getBusinessIPs(route.params.id);\r\n    relatedIPs.value = response.data || [];\r\n    \r\n    // 数据加载完成后，重置IP节点位置\r\n    nextTick(() => {\r\n      resetNodePositions();\r\n    });\r\n  } catch (error) {\r\n    message.error('获取关联IP失败');\r\n  } finally {\r\n    ipLoading.value = false;\r\n  }\r\n};\r\n\r\nconst fetchAvailableIPs = async (searchKeyword = '') => {\r\n  try {\r\n    const response = await ipAPI.getIPList({\r\n      search: searchKeyword,\r\n      page_size: 100 // 获取更多IP供选择\r\n    });\r\n    \r\n    let allIPs = response.data.results || response.data || [];\r\n    \r\n    // 过滤掉已经关联到当前业务的IP\r\n    const relatedIPIds = relatedIPs.value.map(ip => ip.ip_address);\r\n    availableIPs.value = allIPs.filter(ip => !relatedIPIds.includes(ip.ip_address));\r\n  } catch (error) {\r\n    console.error('获取可用IP列表失败:', error);\r\n    message.error('获取可用IP列表失败');\r\n  }\r\n};\r\n\r\nconst handleIPSearch = (value) => {\r\n  fetchAvailableIPs(value);\r\n};\r\n\r\nconst goBack = () => {\r\n  router.go(-1);\r\n};\r\n\r\nconst editBusiness = () => {\r\n  // 将当前业务信息填充到编辑表单\r\n  Object.assign(editForm, {\r\n    name: businessInfo.value.name || '',\r\n    responsible_person: businessInfo.value.responsible_person || '',\r\n    online_date: businessInfo.value.online_date ? dayjs(businessInfo.value.online_date) : null,\r\n    access_url: businessInfo.value.access_url || '',\r\n    description: businessInfo.value.description || ''\r\n  });\r\n  editModalVisible.value = true;\r\n};\r\n\r\nconst refreshData = () => {\r\n  fetchBusinessDetail();\r\n  fetchRelatedIPs();\r\n};\r\n\r\nconst refreshIPs = () => {\r\n  fetchRelatedIPs();\r\n};\r\n\r\nconst refreshTopology = () => {\r\n  topologyLoading.value = true;\r\n  // 模拟拓扑图刷新\r\n  setTimeout(() => {\r\n    topologyLoading.value = false;\r\n    message.success('拓扑图已刷新');\r\n  }, 1500);\r\n};\r\n\r\nconst exportTopology = () => {\r\n  message.info('拓扑图导出功能开发中...');\r\n};\r\n\r\nconst showAddIPModal = () => {\r\n  fetchAvailableIPs();\r\n  addIPModalVisible.value = true;\r\n};\r\n\r\nconst handleAddIP = async () => {\r\n  if (!ipForm.ip_id) {\r\n    message.error('请选择要关联的IP');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    // 找到选中的IP信息\r\n    const selectedIP = availableIPs.value.find(ip => ip.id === ipForm.ip_id);\r\n    if (!selectedIP) {\r\n      message.error('选中的IP信息无效');\r\n      return;\r\n    }\r\n    \r\n    // 构造后端所需的数据格式\r\n    const submitData = {\r\n      ip_address: selectedIP.ip_address,\r\n      hostname: selectedIP.hostname || '',\r\n      description: ipForm.description || '',\r\n      service_type: ipForm.service_type || 'web',\r\n      status: 'unknown'\r\n    };\r\n    \r\n    await businessAPI.addBusinessIP(route.params.id, submitData);\r\n    message.success('IP关联成功');\r\n    addIPModalVisible.value = false;\r\n    Object.assign(ipForm, { ip_id: undefined, description: '', service_type: 'web' });\r\n    fetchRelatedIPs();\r\n  } catch (error) {\r\n    console.error('IP关联失败:', error);\r\n    message.error('IP关联失败');\r\n  }\r\n};\r\n\r\nconst handleCancelAddIP = () => {\r\n  addIPModalVisible.value = false;\r\n  Object.assign(ipForm, { ip_id: undefined, description: '', service_type: 'web' });\r\n};\r\n\r\nconst handleEditSubmit = async () => {\r\n  try {\r\n    await editFormRef.value.validate();\r\n    \r\n    const submitData = {\r\n      name: editForm.name,\r\n      responsible_person: editForm.responsible_person,\r\n      online_date: editForm.online_date ? dayjs(editForm.online_date).format('YYYY-MM-DD') : null,\r\n      access_url: editForm.access_url && editForm.access_url.trim() ? editForm.access_url.trim() : null,\r\n      function_purpose: editForm.function_purpose || '',\r\n      description: editForm.description || ''\r\n    };\r\n    \r\n    await businessAPI.updateBusiness(route.params.id, submitData);\r\n    message.success('业务更新成功');\r\n    editModalVisible.value = false;\r\n    fetchBusinessDetail(); // 重新获取业务详情\r\n  } catch (error) {\r\n    if (error.errorFields) {\r\n      message.error('请检查表单输入');\r\n    } else {\r\n      message.error('业务更新失败');\r\n    }\r\n  }\r\n};\r\n\r\nconst handleEditCancel = () => {\r\n  editModalVisible.value = false;\r\n  editFormRef.value?.resetFields();\r\n};\r\n\r\nconst removeIP = (record) => {\r\n  Modal.confirm({\r\n    title: '确认移除',\r\n    content: `确定要移除IP \"${record.ip_address}\" 的关联吗？`,\r\n    okText: '确定',\r\n    cancelText: '取消',\r\n    onOk: async () => {\r\n      try {\r\n        await businessAPI.removeBusinessIP(route.params.id, record.id);\r\n        message.success('移除成功');\r\n        fetchRelatedIPs();\r\n      } catch (error) {\r\n        message.error('移除失败');\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nconst viewIPDetail = (record) => {\r\n  router.push({\r\n    name: 'ipManagement',\r\n    query: { highlight: record.ip_address }\r\n  });\r\n};\r\n\r\nconst openUrl = (url) => {\r\n  if (url) {\r\n    window.open(url, '_blank');\r\n  }\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  return date ? dayjs(date).format('YYYY-MM-DD HH:mm:ss') : '-';\r\n};\r\n\r\nconst getStatusColor = (status) => {\r\n  const colors = {\r\n    'active': 'green',\r\n    'inactive': 'red',\r\n    'pending': 'orange',\r\n    'unknown': 'default'\r\n  };\r\n  return colors[status] || 'default';\r\n};\r\n\r\nconst getStatusText = (status) => {\r\n  const texts = {\r\n    'active': '活跃',\r\n    'inactive': '非活跃',\r\n    'pending': '待确认',\r\n    'unknown': '未知'\r\n  };\r\n  return texts[status] || '未知';\r\n};\r\n\r\nconst getPingStatusText = (status) => {\r\n  const texts = {\r\n    'online': '在线',\r\n    'offline': '离线',\r\n    'timeout': '超时'\r\n  };\r\n  return texts[status] || '未知';\r\n};\r\n\r\nconst getServiceTypeText = (serviceType) => {\r\n  const texts = {\r\n    'web': 'Web服务',\r\n    'database': '数据库',\r\n    'cache': '缓存服务',\r\n    'message_queue': '消息队列',\r\n    'file_storage': '文件存储',\r\n    'monitoring': '监控服务',\r\n    'other': '其他'\r\n  };\r\n  return texts[serviceType] || '其他';\r\n};\r\n\r\nconst filterOption = (input, option) => {\r\n  return option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0;\r\n};\r\n\r\n// 计算节点中心点坐标的统一方法\r\nconst getNodeCenterCoordinates = (node) => {\r\n  if (node.type === 'business') {\r\n    // 业务中心节点：120x80px，中心点偏移60,40\r\n    return {\r\n      x: businessInfo.value.x + 60,\r\n      y: businessInfo.value.y + 40\r\n    };\r\n  } else {\r\n    // IP节点：120x80px，中心点偏移60,40\r\n    return {\r\n      x: (node.x || 0) + 60,\r\n      y: (node.y || 0) + 40\r\n    };\r\n  }\r\n};\r\n\r\n// 自定义连线相关方法\r\nconst startConnection = (node) => {\r\n  if (isConnecting.value) {\r\n    // 如果已经在连线模式，完成连线\r\n    finishConnection(node);\r\n  } else {\r\n    // 开始连线\r\n    isConnecting.value = true;\r\n    connectingFrom.value = { ...node };\r\n    \r\n    // 计算起点坐标\r\n    const centerCoords = getNodeCenterCoordinates(node);\r\n    connectingFrom.value.x = centerCoords.x;\r\n    connectingFrom.value.y = centerCoords.y;\r\n  }\r\n};\r\n\r\nconst finishConnection = (toNode) => {\r\n  if (!connectingFrom.value || !toNode) return;\r\n  \r\n  // 不能连接到自己\r\n  if (connectingFrom.value.type === toNode.type && connectingFrom.value.id === toNode.id) {\r\n    return;\r\n  }\r\n  \r\n  // 计算目标节点的中心点坐标\r\n  const toCenterCoords = getNodeCenterCoordinates(toNode);\r\n  const toX = toCenterCoords.x;\r\n  const toY = toCenterCoords.y;\r\n  \r\n  // 创建连线\r\n  const connection = {\r\n    id: Date.now() + Math.random(),\r\n    from: {\r\n      type: connectingFrom.value.type,\r\n      id: connectingFrom.value.id,\r\n      name: connectingFrom.value.name,\r\n      x: connectingFrom.value.x,\r\n      y: connectingFrom.value.y\r\n    },\r\n    to: {\r\n      type: toNode.type,\r\n      id: toNode.id,\r\n      name: toNode.name,\r\n      x: toX,\r\n      y: toY\r\n    }\r\n  };\r\n  \r\n  customConnections.value.push(connection);\r\n  \r\n  // 重置连线状态\r\n  isConnecting.value = false;\r\n  connectingFrom.value = null;\r\n  tempConnection.value = null;\r\n  \r\n  message.success(`已创建从 ${connection.from.name} 到 ${connection.to.name} 的连线`);\r\n};\r\n\r\nconst cancelConnection = () => {\r\n  isConnecting.value = false;\r\n  connectingFrom.value = null;\r\n  tempConnection.value = null;\r\n};\r\n\r\nconst removeConnection = (connectionId) => {\r\n  const index = customConnections.value.findIndex(conn => conn.id === connectionId);\r\n  if (index > -1) {\r\n    customConnections.value.splice(index, 1);\r\n    message.success('连线已删除');\r\n  }\r\n};\r\n\r\nconst clearAllConnections = () => {\r\n  Modal.confirm({\r\n    title: '确认清除',\r\n    content: '确定要清除所有自定义连线吗？',\r\n    onOk() {\r\n      customConnections.value = [];\r\n      message.success('已清除所有自定义连线');\r\n    }\r\n  });\r\n};\r\n\r\nconst getNodeCenter = (node) => {\r\n  return {\r\n    x: node.x + 60, // 节点宽度的一半\r\n    y: node.y + 40  // 节点高度的一半\r\n  };\r\n};\r\n\r\nconst onMouseMove = (event) => {\r\n  if (isConnecting.value && connectingFrom.value) {\r\n    const rect = event.currentTarget.getBoundingClientRect();\r\n    mousePosition.value = {\r\n      x: event.clientX - rect.left,\r\n      y: event.clientY - rect.top\r\n    };\r\n    \r\n    tempConnection.value = {\r\n      from: {\r\n        x: connectingFrom.value.x,\r\n        y: connectingFrom.value.y\r\n      },\r\n      to: {\r\n        x: mousePosition.value.x,\r\n        y: mousePosition.value.y\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n// 获取节点默认位置（围绕中心点排列）\r\nconst getDefaultNodePosition = (index) => {\r\n  // 获取业务中心节点的中心坐标\r\n  const businessCenter = getNodeCenterCoordinates({ type: 'business' });\r\n  const centerX = businessCenter.x;\r\n  const centerY = businessCenter.y;\r\n  const radius = 150; // 围绕中心的半径\r\n  const totalNodes = relatedIPs.value.length;\r\n  \r\n  if (totalNodes === 1) {\r\n    // 单个节点放在中心右侧\r\n    return { x: centerX + 120, y: centerY - 40 };\r\n  }\r\n  \r\n  // 多个节点围绕中心排列\r\n  const angle = (2 * Math.PI * index) / totalNodes;\r\n  const x = centerX + radius * Math.cos(angle) - 60; // 减去节点宽度的一半\r\n  const y = centerY + radius * Math.sin(angle) - 40; // 减去节点高度的一半\r\n  \r\n  return { x: Math.max(0, x), y: Math.max(0, y) };\r\n};\r\n\r\nconst resetNodePositions = () => {\r\n  relatedIPs.value.forEach((ip, index) => {\r\n    const pos = getDefaultNodePosition(index);\r\n    ip.x = pos.x;\r\n    ip.y = pos.y;\r\n  });\r\n  message.success('节点位置已重置');\r\n};\r\n\r\n// 处理侧边栏节点点击事件\r\nconst handleSidebarNodeClick = (event, ip) => {\r\n  // 如果刚刚完成拖拽，不触发连线\r\n  if (isDragging.value) {\r\n    return;\r\n  }\r\n  \r\n  // 检查是否已在画布中\r\n  const existsInCanvas = canvasIPs.value.find(canvasIP => canvasIP.id === ip.id);\r\n  if (existsInCanvas) {\r\n    message.info('该IP节点已在画布中');\r\n    return;\r\n  }\r\n  \r\n  // 显示IP详情或其他操作\r\n  console.log('点击侧边栏IP节点:', ip);\r\n};\r\n\r\n// 处理画布节点点击事件\r\nconst handleCanvasNodeClick = (event, ip) => {\r\n  // 如果刚刚完成拖拽，不触发连线\r\n  if (isDragging.value) {\r\n    return;\r\n  }\r\n  \r\n  // 触发连线\r\n  startConnection({ \r\n    type: 'ip', \r\n    id: ip.id, \r\n    name: ip.ip_address, \r\n    x: ip.x, \r\n    y: ip.y \r\n  });\r\n};\r\n\r\n// 从画布移除IP节点\r\nconst removeCanvasNode = (ipId) => {\r\n  const index = canvasIPs.value.findIndex(ip => ip.id === ipId);\r\n  if (index !== -1) {\r\n    canvasIPs.value.splice(index, 1);\r\n    \r\n    // 移除相关连线\r\n    customConnections.value = customConnections.value.filter(conn => \r\n      !(conn.from.id === ipId || conn.to.id === ipId)\r\n    );\r\n    \r\n    message.success('已从画布移除IP节点');\r\n  }\r\n};\r\n\r\n// 处理业务节点点击事件\r\nconst handleBusinessNodeClick = (event) => {\r\n  // 如果刚刚完成拖拽，不触发连线\r\n  if (isDragging.value) {\r\n    return;\r\n  }\r\n  \r\n  // 触发连线\r\n  startConnection({ type: 'business', id: businessInfo.value.id, name: businessInfo.value.name });\r\n};\r\n\r\nconst startDrag = (event, ip) => {\r\n  if (isConnecting.value) return; // 连线模式下不允许拖拽\r\n  \r\n  isDragging.value = true;\r\n  dragTarget.value = ip;\r\n  \r\n  // 获取容器的位置\r\n  const container = document.querySelector('.main-canvas');\r\n  if (!container) return;\r\n  \r\n  const containerRect = container.getBoundingClientRect();\r\n  \r\n  // 设置较小的偏移，让节点中心跟随鼠标\r\n  dragOffset.value = {\r\n    x: 60, // 节点宽度的一半\r\n    y: 40  // 节点高度的一半\r\n  };\r\n  \r\n  document.addEventListener('mousemove', onDrag);\r\n  document.addEventListener('mouseup', stopDrag);\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n};\r\n\r\n// 从侧边栏拖拽IP节点到画布\r\nconst startDragFromSidebar = (event, ip) => {\r\n  if (isConnecting.value) return; // 连线模式下不允许拖拽\r\n  \r\n  // 检查IP是否已经在画布中\r\n  const existingIndex = canvasIPs.value.findIndex(canvasIP => canvasIP.id === ip.id);\r\n  if (existingIndex !== -1) {\r\n    message.warning('该IP节点已在画布中');\r\n    return;\r\n  }\r\n  \r\n  // 创建新的画布IP节点\r\n  const newCanvasIP = {\r\n    ...ip,\r\n    x: 100, // 默认位置\r\n    y: 100\r\n  };\r\n  \r\n  canvasIPs.value.push(newCanvasIP);\r\n  \r\n  isDragging.value = true;\r\n  dragTarget.value = newCanvasIP;\r\n  \r\n  // 设置较小的偏移，让节点中心跟随鼠标\r\n  dragOffset.value = {\r\n    x: 60, // 节点宽度的一半\r\n    y: 40  // 节点高度的一半\r\n  };\r\n  \r\n  document.addEventListener('mousemove', onCanvasDrag);\r\n  document.addEventListener('mouseup', stopCanvasDrag);\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n};\r\n\r\n// 业务中心节点拖拽处理\r\nconst startBusinessDrag = (event) => {\r\n  if (isConnecting.value) return; // 连线模式下不允许拖拽\r\n  \r\n  isDragging.value = true;\r\n  dragTarget.value = { type: 'business', data: businessInfo.value };\r\n  \r\n  // 获取容器的位置\r\n  const container = document.querySelector('.enhanced-topology');\r\n  if (!container) return;\r\n  \r\n  const containerRect = container.getBoundingClientRect();\r\n  \r\n  // 设置较小的偏移，让节点中心跟随鼠标\r\n  dragOffset.value = {\r\n    x: 60, // 节点宽度的一半\r\n    y: 40  // 节点高度的一半\r\n  };\r\n  \r\n  document.addEventListener('mousemove', onBusinessDrag);\r\n  document.addEventListener('mouseup', stopBusinessDrag);\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n};\r\n\r\nconst onDrag = (event) => {\r\n  if (!isDragging.value || !dragTarget.value) return;\r\n  \r\n  const container = document.querySelector('.main-canvas');\r\n  if (!container) return;\r\n  \r\n  const rect = container.getBoundingClientRect();\r\n  \r\n  // 计算新位置（鼠标位置减去偏移量）\r\n  const newX = event.clientX - rect.left - dragOffset.value.x;\r\n  const newY = event.clientY - rect.top - dragOffset.value.y;\r\n  \r\n  // 限制在容器范围内\r\n  dragTarget.value.x = Math.max(0, Math.min(newX, rect.width - 120));\r\n  dragTarget.value.y = Math.max(0, Math.min(newY, rect.height - 80));\r\n  \r\n  // 更新相关的自定义连线\r\n  const centerCoords = getNodeCenterCoordinates(dragTarget.value);\r\n  customConnections.value.forEach(connection => {\r\n    if (connection.from.type === 'ip' && connection.from.id === dragTarget.value.id) {\r\n      connection.from.x = centerCoords.x;\r\n      connection.from.y = centerCoords.y;\r\n    }\r\n    if (connection.to.type === 'ip' && connection.to.id === dragTarget.value.id) {\r\n      connection.to.x = centerCoords.x;\r\n      connection.to.y = centerCoords.y;\r\n    }\r\n  });\r\n};\r\n\r\nconst stopDrag = () => {\r\n  document.removeEventListener('mousemove', onDrag);\r\n  document.removeEventListener('mouseup', stopDrag);\r\n  \r\n  // 延迟重置拖拽状态，避免立即触发点击事件\r\n  setTimeout(() => {\r\n    isDragging.value = false;\r\n    dragTarget.value = null;\r\n  }, 100);\r\n};\r\n\r\n// 画布IP节点拖拽移动\r\nconst onCanvasDrag = (event) => {\r\n  if (!isDragging.value || !dragTarget.value) return;\r\n  \r\n  const container = document.querySelector('.main-canvas');\r\n  if (!container) return;\r\n  \r\n  const rect = container.getBoundingClientRect();\r\n  \r\n  // 计算新位置（鼠标位置减去偏移量）\r\n  const newX = event.clientX - rect.left - dragOffset.value.x;\r\n  const newY = event.clientY - rect.top - dragOffset.value.y;\r\n  \r\n  // 限制在容器范围内\r\n  dragTarget.value.x = Math.max(0, Math.min(newX, rect.width - 120));\r\n  dragTarget.value.y = Math.max(0, Math.min(newY, rect.height - 80));\r\n  \r\n  // 更新相关的自定义连线\r\n  const centerCoords = getNodeCenterCoordinates(dragTarget.value);\r\n  customConnections.value.forEach(connection => {\r\n    if (connection.from.type === 'ip' && connection.from.id === dragTarget.value.id) {\r\n      connection.from.x = centerCoords.x;\r\n      connection.from.y = centerCoords.y;\r\n    }\r\n    if (connection.to.type === 'ip' && connection.to.id === dragTarget.value.id) {\r\n      connection.to.x = centerCoords.x;\r\n      connection.to.y = centerCoords.y;\r\n    }\r\n  });\r\n};\r\n\r\n// 停止画布IP节点拖拽\r\nconst stopCanvasDrag = () => {\r\n  document.removeEventListener('mousemove', onCanvasDrag);\r\n  document.removeEventListener('mouseup', stopCanvasDrag);\r\n  \r\n  // 延迟重置拖拽状态，避免立即触发点击事件\r\n  setTimeout(() => {\r\n    isDragging.value = false;\r\n    dragTarget.value = null;\r\n  }, 100);\r\n};\r\n\r\n// 业务中心节点拖拽移动\r\nconst onBusinessDrag = (event) => {\r\n  if (!isDragging.value || !dragTarget.value || dragTarget.value.type !== 'business') return;\r\n  \r\n  const container = document.querySelector('.main-canvas');\r\n  if (!container) return;\r\n  \r\n  const rect = container.getBoundingClientRect();\r\n  \r\n  // 计算新位置（鼠标位置减去偏移量）\r\n  const newX = event.clientX - rect.left - dragOffset.value.x;\r\n  const newY = event.clientY - rect.top - dragOffset.value.y;\r\n  \r\n  // 限制在容器范围内\r\n  businessInfo.value.x = Math.max(0, Math.min(newX, rect.width - 120));\r\n  businessInfo.value.y = Math.max(0, Math.min(newY, rect.height - 80));\r\n  \r\n  // 更新相关的自定义连线\r\n  const centerCoords = getNodeCenterCoordinates({ type: 'business' });\r\n  customConnections.value.forEach(connection => {\r\n    if (connection.from.type === 'business') {\r\n      connection.from.x = centerCoords.x;\r\n      connection.from.y = centerCoords.y;\r\n    }\r\n    if (connection.to.type === 'business') {\r\n      connection.to.x = centerCoords.x;\r\n      connection.to.y = centerCoords.y;\r\n    }\r\n  });\r\n};\r\n\r\n// 业务中心节点停止拖拽\r\nconst stopBusinessDrag = () => {\r\n  document.removeEventListener('mousemove', onBusinessDrag);\r\n  document.removeEventListener('mouseup', stopBusinessDrag);\r\n  \r\n  // 延迟重置拖拽状态，避免立即触发点击事件\r\n  setTimeout(() => {\r\n    isDragging.value = false;\r\n    dragTarget.value = null;\r\n  }, 100);\r\n};\r\n\r\nconst getServiceIcon = (serviceType) => {\r\n  const icons = {\r\n    'web': 'GlobalOutlined',\r\n    'database': 'DatabaseOutlined',\r\n    'cache': 'ThunderboltOutlined',\r\n    'message_queue': 'MessageOutlined',\r\n    'file_storage': 'FolderOutlined',\r\n    'monitoring': 'EyeOutlined',\r\n    'other': 'SettingOutlined'\r\n  };\r\n  return icons[serviceType] || 'SettingOutlined';\r\n};\r\n\r\n// 生命周期\r\nonMounted(() => {\r\n  fetchBusinessDetail();\r\n  fetchRelatedIPs();\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.business-detail {\r\n  min-height: 100vh;\r\n}\r\n\r\n.page-header {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.header-content {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: white;\r\n  padding: 16px 24px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.header-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.back-btn {\r\n  margin-right: 16px;\r\n  color: #666;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.title-icon {\r\n  margin-right: 8px;\r\n  color: #1890ff;\r\n}\r\n\r\n.info-section,\r\n.ip-section,\r\n.topology-section {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.label {\r\n  font-weight: 500;\r\n  color: #666;\r\n  margin-right: 8px;\r\n  min-width: 80px;\r\n}\r\n\r\n.value {\r\n  color: #262626;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.icon {\r\n  margin-right: 4px;\r\n  color: #1890ff;\r\n}\r\n\r\n.no-data {\r\n  color: #ccc;\r\n}\r\n\r\n.function-purpose-text {\r\n  line-height: 1.6;\r\n  color: #262626;\r\n}\r\n\r\n.section-title {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.count-badge {\r\n  margin-left: 8px;\r\n}\r\n\r\n.ip-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.ping-status {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.status-dot {\r\n  width: 8px;\r\n  height: 8px;\r\n  border-radius: 50%;\r\n  margin-right: 6px;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n.status-dot.online {\r\n  background-color: #52c41a;\r\n}\r\n\r\n.status-dot.offline {\r\n  background-color: #ff4d4f;\r\n}\r\n\r\n.status-dot.timeout {\r\n  background-color: #faad14;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    box-shadow: 0 0 0 0 rgba(82, 196, 26, 0.7);\r\n  }\r\n  70% {\r\n    box-shadow: 0 0 0 10px rgba(82, 196, 26, 0);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 0 0 rgba(82, 196, 26, 0);\r\n  }\r\n}\r\n\r\n.topology-container {\r\n  min-height: 300px;\r\n  width: 100%;\r\n  overflow-x: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 16px;\r\n}\r\n\r\n.topology-loading {\r\n  text-align: center;\r\n  color: #666;\r\n}\r\n\r\n.topology-placeholder {\r\n  text-align: center;\r\n  color: #666;\r\n}\r\n\r\n.topology-icon {\r\n  font-size: 48px;\r\n  color: #1890ff;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.topology-desc {\r\n  color: #999;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.simple-topology {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 24px;\r\n}\r\n\r\n.business-node {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background: #e6f7ff;\r\n  border: 2px solid #1890ff;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 增强拓扑图样式 - 蓝色简约风格 */\r\n.topology-layout {\r\n  display: flex;\r\n  width: 100%;\r\n  height: 600px;\r\n  border: 2px solid #1890ff;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 16px rgba(24, 144, 255, 0.1);\r\n  margin: 16px 0;\r\n}\r\n\r\n.ip-nodes-sidebar {\r\n  width: 250px;\r\n  background: linear-gradient(180deg, #f0f8ff 0%, #e6f3ff 100%);\r\n  border-right: 1px solid #d9d9d9;\r\n  padding: 16px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.sidebar-title {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  margin-bottom: 12px;\r\n  text-align: center;\r\n}\r\n\r\n.sidebar-ip-node {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px 12px;\r\n  margin-bottom: 8px;\r\n  background: white;\r\n  border: 1px solid #d9d9d9;\r\n  border-radius: 6px;\r\n  cursor: grab;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.sidebar-ip-node:hover {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.15);\r\n}\r\n\r\n.sidebar-ip-node:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n.main-canvas {\r\n  flex: 1;\r\n  position: relative;\r\n  background: linear-gradient(135deg, #f8fbff 0%, #f0f7ff 50%, #e8f3ff 100%);\r\n  overflow: visible;\r\n}\r\n\r\n.enhanced-topology {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 600px;\r\n  background: linear-gradient(135deg, #f8fbff 0%, #f0f7ff 50%, #e8f3ff 100%);\r\n  border: 1px solid rgba(0, 102, 255, 0.2);\r\n  border-radius: 20px;\r\n  overflow: visible;\r\n  box-shadow: 0 8px 32px rgba(0, 102, 255, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.8);\r\n  margin: 16px 0;\r\n  backdrop-filter: blur(10px);\r\n}\r\n\r\n\r\n\r\n.topology-network {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.connection-lines {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  pointer-events: none;\r\n}\r\n\r\n.connection-lines line {\r\n  pointer-events: stroke;\r\n}\r\n\r\n.connection-line {\r\n  transition: all 0.3s ease;\r\n  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));\r\n}\r\n\r\n.connection-line.success {\r\n  stroke: #52c41a;\r\n  animation: pulse-success 2s infinite;\r\n}\r\n\r\n.connection-line.failed {\r\n  stroke: #ff4d4f;\r\n  animation: pulse-failed 2s infinite;\r\n}\r\n\r\n.connection-line.timeout {\r\n  stroke: #faad14;\r\n  animation: pulse-timeout 2s infinite;\r\n}\r\n\r\n@keyframes pulse-success {\r\n  0%, 100% { opacity: 0.6; }\r\n  50% { opacity: 1; }\r\n}\r\n\r\n@keyframes pulse-failed {\r\n  0%, 100% { opacity: 0.4; }\r\n  50% { opacity: 0.8; }\r\n}\r\n\r\n@keyframes pulse-timeout {\r\n  0%, 100% { opacity: 0.5; }\r\n  50% { opacity: 0.9; }\r\n}\r\n\r\n.center-node {\r\n  position: absolute;\r\n  width: 120px;\r\n  height: 120px;\r\n  background: linear-gradient(135deg, #1890ff 0%, #40a9ff 100%);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-weight: 600;\r\n  box-shadow: 0 6px 20px rgba(24, 144, 255, 0.3);\r\n  border: 3px solid #ffffff;\r\n  transition: all 0.3s ease;\r\n  z-index: 10;\r\n}\r\n\r\n.center-node:hover {\r\n  box-shadow: 0 8px 24px rgba(24, 144, 255, 0.4);\r\n}\r\n\r\n.business-center {\r\n  background: linear-gradient(135deg, #1890ff 0%, #40a9ff 100%);\r\n}\r\n\r\n.ip-topology-node {\r\n  position: absolute;\r\n  width: 80px;\r\n  height: 80px;\r\n  background: #ffffff;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #1890ff;\r\n  font-size: 11px;\r\n  font-weight: 500;\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.15);\r\n  border: 2px solid #1890ff;\r\n  transition: all 0.3s ease;\r\n  cursor: move;\r\n  user-select: none;\r\n  z-index: 5;\r\n}\r\n\r\n.ip-topology-node:hover {\r\n  box-shadow: 0 6px 16px rgba(24, 144, 255, 0.25);\r\n  background: #f0f8ff;\r\n}\r\n\r\n.ip-topology-node.success {\r\n  background: #f6ffed;\r\n  border-color: #52c41a;\r\n  color: #52c41a;\r\n}\r\n\r\n.ip-topology-node.failed {\r\n  background: #fff2f0;\r\n  border-color: #ff4d4f;\r\n  color: #ff4d4f;\r\n}\r\n\r\n.ip-topology-node.timeout {\r\n  background: #fffbe6;\r\n  border-color: #faad14;\r\n  color: #faad14;\r\n}\r\n\r\n.node-icon {\r\n  font-size: 24px;\r\n  margin-bottom: 4px;\r\n  opacity: 0.8;\r\n}\r\n\r\n.center-node .node-icon {\r\n  font-size: 32px;\r\n  color: rgba(255, 255, 255, 0.9);\r\n}\r\n\r\n.node-info {\r\n  text-align: center;\r\n  line-height: 1.2;\r\n}\r\n\r\n.node-title {\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 2px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 70px;\r\n}\r\n\r\n.center-node .node-title {\r\n  font-size: 14px;\r\n  color: rgba(255, 255, 255, 0.95);\r\n  max-width: 100px;\r\n}\r\n\r\n.node-subtitle {\r\n  font-size: 10px;\r\n  opacity: 0.7;\r\n  white-space: nowrap;\r\n}\r\n\r\n.center-node .node-subtitle {\r\n  color: rgba(255, 255, 255, 0.8);\r\n}\r\n\r\n.node-type {\r\n  font-size: 9px;\r\n  opacity: 0.6;\r\n  margin-top: 2px;\r\n}\r\n\r\n.node-status {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  font-size: 9px;\r\n  margin-top: 4px;\r\n  padding: 2px 6px;\r\n  border-radius: 10px;\r\n  background: rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n.node-status.success {\r\n  color: #52c41a;\r\n  background: rgba(82, 196, 26, 0.1);\r\n}\r\n\r\n.node-status.failed {\r\n  color: #ff4d4f;\r\n  background: rgba(255, 77, 79, 0.1);\r\n}\r\n\r\n.node-status.timeout {\r\n  color: #faad14;\r\n  background: rgba(250, 173, 20, 0.1);\r\n}\r\n\r\n.status-dot {\r\n  width: 6px;\r\n  height: 6px;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n}\r\n\r\n.status-dot.success {\r\n  background-color: #52c41a;\r\n  box-shadow: 0 0 6px rgba(82, 196, 26, 0.6);\r\n}\r\n\r\n.status-dot.failed {\r\n  background-color: #ff4d4f;\r\n  box-shadow: 0 0 6px rgba(255, 77, 79, 0.6);\r\n}\r\n\r\n.status-dot.timeout {\r\n  background-color: #faad14;\r\n  box-shadow: 0 0 6px rgba(250, 173, 20, 0.6);\r\n}\r\n\r\n/* 自定义连线相关样式 */\r\n.connecting-mode {\r\n  cursor: crosshair !important;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.connecting-mode:hover {\r\n  box-shadow: 0 0 15px rgba(24, 144, 255, 0.5);\r\n}\r\n\r\n.connecting-from {\r\n  border: 2px solid #1890ff;\r\n  box-shadow: 0 0 10px rgba(24, 144, 255, 0.6);\r\n  animation: pulse 1.5s infinite;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    box-shadow: 0 0 10px rgba(24, 144, 255, 0.6);\r\n  }\r\n  50% {\r\n    box-shadow: 0 0 20px rgba(24, 144, 255, 0.8);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 10px rgba(24, 144, 255, 0.6);\r\n  }\r\n}\r\n\r\n.connecting-indicator {\r\n  position: absolute;\r\n  top: -25px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background: #1890ff;\r\n  color: white;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  font-size: 10px;\r\n  white-space: nowrap;\r\n  z-index: 1000;\r\n}\r\n\r\n.connecting-indicator::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: 4px solid transparent;\r\n  border-top-color: #1890ff;\r\n}\r\n\r\n/* 连线背景样式 */\r\n.connection-background {\r\n  opacity: 0.3;\r\n}\r\n\r\n/* 主连线样式 */\r\n.custom-connection-line {\r\n  transition: all 0.3s ease;\r\n  filter: url(#glow);\r\n}\r\n\r\n.custom-connection-line:hover {\r\n  stroke-width: 4;\r\n  filter: url(#glow) brightness(1.5);\r\n}\r\n\r\n/* 科技风连线动画 */\r\n.tech-line {\r\n  animation: techPulse 2s ease-in-out infinite;\r\n}\r\n\r\n@keyframes techPulse {\r\n  0%, 100% {\r\n    opacity: 0.8;\r\n    stroke-width: 3;\r\n  }\r\n  50% {\r\n    opacity: 1;\r\n    stroke-width: 3.5;\r\n  }\r\n}\r\n\r\n/* 流动光效动画 */\r\n.flow-effect {\r\n  animation: flowAnimation 2s linear infinite;\r\n  opacity: 0.7;\r\n}\r\n\r\n@keyframes flowAnimation {\r\n  0% {\r\n    stroke-dashoffset: 0;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 30;\r\n  }\r\n}\r\n\r\n/* 临时连线样式 */\r\n.temp-connection-line {\r\n  pointer-events: none;\r\n}\r\n\r\n.temp-connection-bg {\r\n  opacity: 0.2;\r\n}\r\n\r\n.tech-temp-line {\r\n  animation: tempLineFlow 1s linear infinite;\r\n}\r\n\r\n@keyframes tempLineFlow {\r\n  0% {\r\n    stroke-dashoffset: 0;\r\n    opacity: 0.6;\r\n  }\r\n  100% {\r\n    stroke-dashoffset: 12;\r\n    opacity: 0.9;\r\n  }\r\n}\r\n\r\n.topology-controls .ant-tag {\r\n  margin: 0;\r\n  animation: blink 1s infinite;\r\n}\r\n\r\n/* 头部控制标签样式 */\r\n.ant-card-extra .ant-tag {\r\n  margin: 2px;\r\n  font-size: 12px;\r\n  border-radius: 6px;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.ant-card-extra .ant-tag:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.ant-card-extra .connecting-tip {\r\n  animation: blink 1s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 50% {\r\n    opacity: 1;\r\n  }\r\n  51%, 100% {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.ip-nodes {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 12px;\r\n  justify-content: center;\r\n  max-width: 600px;\r\n}\r\n\r\n.ip-node {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 8px 12px;\r\n  background: #f6ffed;\r\n  border: 1px solid #b7eb8f;\r\n  border-radius: 6px;\r\n  font-size: 12px;\r\n  min-width: 80px;\r\n}\r\n\r\n.ip-node.offline {\r\n  background: #fff2f0;\r\n  border-color: #ffccc7;\r\n}\r\n\r\n.ip-node.timeout {\r\n  background: #fffbe6;\r\n  border-color: #ffe58f;\r\n}\r\n\r\n.more-nodes {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 8px 12px;\r\n  background: #fafafa;\r\n  border: 1px dashed #d9d9d9;\r\n  border-radius: 6px;\r\n  color: #666;\r\n  font-size: 12px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .business-detail {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .header-content {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .header-left {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .info-item {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n  \r\n  .label {\r\n    margin-bottom: 4px;\r\n  }\r\n  \r\n  .ip-nodes {\r\n    max-width: 100%;\r\n  }\r\n}\r\n\r\n/* 自定义连线功能样式 */\r\n.connecting-mode {\r\n  cursor: crosshair;\r\n}\r\n\r\n.connecting-mode .ip-topology-node:hover,\r\n.connecting-mode .business-center-node:hover {\r\n  box-shadow: 0 0 20px rgba(0, 102, 255, 0.6);\r\n  border-color: rgba(0, 102, 255, 0.8);\r\n}\r\n\r\n.connecting-from {\r\n  animation: pulse 1.5s infinite;\r\n  box-shadow: 0 0 20px rgba(24, 144, 255, 0.8) !important;\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    box-shadow: 0 0 20px rgba(24, 144, 255, 0.8);\r\n  }\r\n  50% {\r\n    box-shadow: 0 0 30px rgba(24, 144, 255, 1);\r\n  }\r\n  100% {\r\n    box-shadow: 0 0 20px rgba(24, 144, 255, 0.8);\r\n  }\r\n}\r\n\r\n.connecting-indicator {\r\n  position: absolute;\r\n  top: -25px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background: #1890ff;\r\n  color: white;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  font-size: 10px;\r\n  white-space: nowrap;\r\n  z-index: 10;\r\n}\r\n\r\n.connecting-indicator::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: 4px solid transparent;\r\n  border-top-color: #1890ff;\r\n}\r\n\r\n.custom-connection-line {\r\n  cursor: pointer;\r\n  transition: stroke-width 0.2s;\r\n}\r\n\r\n.custom-connection-line:hover {\r\n  stroke-width: 5;\r\n  stroke: #ff4d4f;\r\n}\r\n\r\n.temp-connection-line {\r\n  pointer-events: none;\r\n}\r\n\r\n\r\n\r\n@keyframes blink {\r\n  0%, 50% {\r\n    opacity: 1;\r\n  }\r\n  51%, 100% {\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.business-center-node {\r\n  position: absolute;\r\n  width: 120px;\r\n  height: 80px;\r\n  background: #1890ff;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  border: 1px solid #1890ff;\r\n  z-index: 5;\r\n}\r\n\r\n.business-center-node:hover {\r\n  background: #40a9ff;\r\n  border-color: #40a9ff;\r\n}\r\n\r\n.business-center-node .node-icon {\r\n  font-size: 24px;\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.business-center-node .node-info {\r\n  text-align: center;\r\n}\r\n\r\n.business-center-node .node-title {\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.business-center-node .node-subtitle {\r\n  font-size: 10px;\r\n  opacity: 0.8;\r\n}\r\n.topology-content{\r\n  width: 100%;\r\n}\r\n\r\n/* 画布中的IP节点样式 */\r\n.canvas-ip-node {\r\n  position: absolute;\r\n  width: 120px;\r\n  height: 80px;\r\n  background: #f0f8ff;\r\n  border-radius: 6px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #1890ff;\r\n  font-size: 11px;\r\n  font-weight: 600;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  border: 1px solid #d9d9d9;\r\n  transition: all 0.2s ease;\r\n  cursor: move;\r\n  user-select: none;\r\n  z-index: 5;\r\n}\r\n\r\n\r\n\r\n.canvas-ip-node:hover {\r\n  background: #e6f7ff;\r\n  border-color: #1890ff;\r\n}\r\n\r\n.canvas-ip-node.success {\r\n  background: #f6ffed;\r\n  border-color: #52c41a;\r\n  color: #389e0d;\r\n}\r\n\r\n.canvas-ip-node.failed {\r\n  background: #fff2f0;\r\n  border-color: #ff4d4f;\r\n  color: #cf1322;\r\n}\r\n\r\n.canvas-ip-node.timeout {\r\n  background: #fffbe6;\r\n  border-color: #faad14;\r\n  color: #d48806;\r\n}\r\n\r\n.canvas-ip-node.connecting-from {\r\n  background: #e6f7ff;\r\n  border-color: #1890ff;\r\n  color: #1890ff;\r\n  border-width: 2px;\r\n}\r\n\r\n.canvas-ip-node .node-icon {\r\n  font-size: 24px;\r\n  margin-bottom: 4px;\r\n  opacity: 0.8;\r\n}\r\n\r\n.canvas-ip-node .node-info {\r\n  text-align: center;\r\n  line-height: 1.2;\r\n}\r\n\r\n.canvas-ip-node .node-title {\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 2px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  max-width: 100px;\r\n}\r\n\r\n.canvas-ip-node .node-subtitle {\r\n  font-size: 10px;\r\n  opacity: 0.7;\r\n  white-space: nowrap;\r\n}\r\n\r\n.canvas-ip-node .node-status {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  font-size: 9px;\r\n  margin-top: 4px;\r\n  padding: 2px 6px;\r\n  border-radius: 10px;\r\n  background: rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n.canvas-ip-node .status-dot {\r\n  width: 6px;\r\n  height: 6px;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n}\r\n\r\n.canvas-ip-node.success .status-dot {\r\n  background: #52c41a;\r\n}\r\n\r\n.canvas-ip-node.failed .status-dot {\r\n  background: #ff4d4f;\r\n}\r\n\r\n.canvas-ip-node.timeout .status-dot {\r\n  background: #faad14;\r\n}\r\n\r\n.canvas-ip-node .connecting-indicator {\r\n  position: absolute;\r\n  top: -8px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  background: #1890ff;\r\n  color: white;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n  font-size: 10px;\r\n  white-space: nowrap;\r\n  z-index: 10;\r\n}\r\n\r\n.canvas-ip-node .connecting-indicator::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  border: 4px solid transparent;\r\n  border-top-color: #1890ff;\r\n}\r\n\r\n/* 删除按钮样式 */\r\n.node-remove-btn {\r\n  position: absolute;\r\n  top: -8px;\r\n  right: -8px;\r\n  width: 20px;\r\n  height: 20px;\r\n  background: #ff4d4f;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-size: 10px;\r\n  cursor: pointer;\r\n  opacity: 0;\r\n  transition: all 0.2s ease;\r\n  z-index: 10;\r\n}\r\n\r\n.canvas-ip-node:hover .node-remove-btn {\r\n  opacity: 1;\r\n}\r\n\r\n.node-remove-btn:hover {\r\n  background: #ff7875;\r\n  transform: scale(1.1);\r\n}\r\n\r\n/* 优化侧边栏样式 */\r\n.sidebar-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.sidebar-title {\r\n  margin: 0;\r\n  color: #1890ff;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n}\r\n\r\n.node-count {\r\n  color: #666;\r\n  font-size: 12px;\r\n  background: #f0f0f0;\r\n  padding: 2px 8px;\r\n  border-radius: 12px;\r\n}\r\n\r\n.sidebar-ip-node:hover {\r\n  transform: translateY(-1px);\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\HardwareAssetList.vue",["464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496"],"<template>\r\n  <div class=\"hardware-asset-list-container\">\r\n    <!-- 设备内容区域 -->\r\n    <div class=\"device-content\">\r\n        <!-- 在用设备表格 -->\r\n        <div class=\"content-container\">\r\n          <HardwareAssetTable\r\n            :dataSource=\"currentFilter === 'scrapped' ? scrappedAssets : activeAssets\"\r\n            :loading=\"loading\"\r\n            :pagination=\"activePagination\"\r\n            :selectedRowKeys=\"selectedRowKeys\"\r\n            :searchKeyword=\"searchKeyword\"\r\n            :assetStatus=\"assetStatus\"\r\n            :assetType=\"assetType\"\r\n            :totalCount=\"totalCount\"\r\n            :activeCount=\"activeCount\"\r\n            :maintenanceCount=\"0\"\r\n            :retiredCount=\"0\"\r\n            :scrappedCount=\"scrappedCount\"\r\n            :tableMode=\"currentFilter\"\r\n            :currentFilter=\"currentFilter\"\r\n            @select-change=\"onSelectChange\"\r\n            @select-all=\"onSelectAll\"\r\n            @table-change=\"handleActiveTableChange\"\r\n            @view=\"handleView\"\r\n            @edit=\"handleEdit\"\r\n            @delete=\"handleDelete\"\r\n            @check-warranty=\"handleCheckWarranty\"\r\n            @toggle-monitoring=\"handleToggleMonitoring\"\r\n            @batch-delete=\"handleBatchDelete\"\r\n            @batch-toggle-monitoring=\"handleBatchToggleMonitoring\"\r\n            @clear-selection=\"clearSelection\"\r\n            @add=\"handleAdd\"\r\n            @export=\"handleExport\"\r\n            @import=\"handleImport\"\r\n            @search=\"handleSearch\"\r\n            @reset=\"handleReset\"\r\n            @search-input=\"handleSearchInput\"\r\n            @status-change=\"handleStatusChange\"\r\n            @type-change=\"handleTypeChange\"\r\n            @view-history=\"handleViewHistory\"\r\n            @stats-filter=\"handleStatsFilter\"\r\n            :batchDeleting=\"batchDeleting\"\r\n            :batchMonitoringToggling=\"batchMonitoringToggling\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 监控操作组件 -->\r\n    <MonitoringActions\r\n      :selectedAsset=\"selectedAsset\"\r\n      :detailModalVisible=\"detailModalVisible\"\r\n      :warrantyModalVisible=\"warrantyModalVisible\"\r\n      :batchWarrantyState=\"batchWarrantyState\"\r\n      :taskResultModalVisible=\"taskResultModalVisible\"\r\n      :warrantyFormData=\"warrantyFormData\"\r\n      :warrantyRules=\"warrantyRules\"\r\n      :selectedTask=\"selectedTask\"\r\n      :taskResults=\"taskResults\"\r\n      :resultLoading=\"resultLoading\"\r\n      :resultColumns=\"resultColumns\"\r\n      @close-detail-modal=\"detailModalVisible = false\"\r\n      @close-warranty-modal=\"handleWarrantyCancel\"\r\n      @warranty-confirm=\"handleWarrantyConfirm\"\r\n      @close-batch-warranty=\"closeBatchWarrantyModal\"\r\n      @start-batch-warranty=\"startBatchWarrantyCheck\"\r\n      @close-task-result=\"taskResultModalVisible = false\"\r\n    />\r\n\r\n    <!-- 模板选择抽屉组件 -->\r\n    <TemplateDrawer \r\n      v-model:visible=\"templateDrawerVisible\"\r\n      v-model:selectedTemplateIds=\"selectedTemplateIds\"\r\n      :loading=\"templateLoading\"\r\n      :selectedAsset=\"selectedAsset\"\r\n      @confirm=\"handleCreateMonitoring\"\r\n    />\r\n    <!-- 资产详情弹窗 -->\r\n    <HardwareAssetForm\r\n      ref=\"assetFormRef\"\r\n      v-model:visible=\"formDialogVisible\"\r\n      :selectedAsset=\"selectedAsset\"\r\n      :assetTypes=\"assetTypeOptions\"\r\n      :statusOptions=\"assetStatusOptions\"\r\n      @close=\"formDialogVisible = false\"\r\n      @submit=\"handleSubmit\"\r\n    />\r\n\r\n    <!-- 历史记录弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"historyModalVisible\"\r\n      title=\"更新历史记录\"\r\n      width=\"1200px\"\r\n      :footer=\"null\"\r\n      @cancel=\"historyModalVisible = false\"\r\n    >\r\n      <a-tabs v-model:activeKey=\"historyActiveTab\">\r\n        <a-tab-pane tab=\"规格参数更新记录\" key=\"spec\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>规格参数更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadSpecHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"specHistory\"\r\n              :columns=\"specHistoryColumns\"\r\n              bordered\r\n              :loading=\"specHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n        \r\n        <a-tab-pane tab=\"保修更新记录\" key=\"warranty\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>保修更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadWarrantyHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"warrantyHistory\"\r\n              :columns=\"warrantyHistoryColumns\"\r\n              bordered\r\n              :loading=\"warrantyHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n    </a-modal>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted, onUnmounted, watch, onBeforeUnmount, nextTick, h, createVNode } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { message, Modal } from 'ant-design-vue';\r\nimport hardwareAssetApi from '@/api/hardwareAsset';\r\nimport { suppressResizeObserverError } from '@/utils/errorHandler';\r\nimport * as Vue from 'vue';\r\nimport * as antdvIcons from '@ant-design/icons-vue';\r\nimport HardwareAssetForm from '@/components/business/HardwareAssetForm.vue';\r\n\r\n// 导入拆分的组件\r\nimport HardwareAssetTable from '@/components/business/HardwareAssetTable.vue';\r\nimport MonitoringActions from '@/components/business/MonitoringActions.vue';\r\nimport TemplateDrawer from '@/components/business/TemplateDrawer.vue';\r\nimport { \r\n  ExclamationCircleOutlined,\r\n} from '@ant-design/icons-vue';\r\n\r\n// 路由实例\r\nconst router = useRouter();\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst assetStatus = ref([]);\r\nconst assetType = ref('');\r\nconst formDialogVisible = ref(false);\r\n\r\n// 资产类型选项\r\nconst assetTypeOptions = ref([\r\n  { label: '服务器', value: 'server' },\r\n  { label: '网络设备', value: 'network' },\r\n  { label: '存储设备', value: 'storage' },\r\n  { label: '安全设备', value: 'security' }\r\n]);\r\n\r\n// 资产状态选项\r\nconst assetStatusOptions = ref([\r\n  { label: '在用', value: 'active' },\r\n  { label: '维护中', value: 'maintenance' },\r\n  { label: '已退役', value: 'retired' },\r\n  { label: '预留', value: 'reserved' }\r\n]);\r\n\r\n// 硬件资产数据状态 - 确保始终是数组\r\nconst assetData = ref([]);\r\nconst loading = ref(false);\r\n\r\n// 批量操作相关状态\r\nconst selectedRowKeys = ref([]);\r\nconst batchDeleting = ref(false);\r\nconst batchMonitoringToggling = ref(false);\r\n\r\n// 模板选择抽屉相关状态\r\nconst templateDrawerVisible = ref(false);\r\nconst zabbixTemplates = ref([]);\r\nconst selectedTemplateIds = ref([]);\r\nconst templateLoading = ref(false);\r\nconst templateSearchKeyword = ref('');\r\nconst monitoringCreating = ref(false);\r\nconst selectedCategory = ref(''); // 当前选中的分类\r\nconst expandedCategories = ref({}); // 展开的分类\r\n\r\n// 历史记录相关状态\r\nconst historyModalVisible = ref(false);\r\nconst historyActiveTab = ref('spec');\r\nconst currentHistoryAsset = ref(null);\r\nconst specHistory = ref([]);\r\nconst warrantyHistory = ref([]);\r\nconst specHistoryLoading = ref(false);\r\nconst warrantyHistoryLoading = ref(false);\r\n\r\n// 历史记录表格列配置\r\nconst specHistoryColumns = [\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'update_time',\r\n    key: 'update_time',\r\n    width: 180,\r\n    customRender: ({ text }) => {\r\n      return text ? new Date(text).toLocaleString() : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新方式',\r\n    dataIndex: 'update_method',\r\n    key: 'update_method',\r\n    width: 100,\r\n    customRender: ({ text }) => {\r\n      return text === 'manual' ? '手动' : '自动';\r\n    }\r\n  },\r\n  {\r\n    title: '更新前规格参数',\r\n    dataIndex: 'old_specifications',\r\n    key: 'old_specifications',\r\n    minWidth: 200,\r\n    customRender: ({ text }) => {\r\n      return text ? JSON.stringify(text, null, 2) : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新后规格参数',\r\n    dataIndex: 'new_specifications',\r\n    key: 'new_specifications',\r\n    minWidth: 200,\r\n    customRender: ({ text }) => {\r\n      return text ? JSON.stringify(text, null, 2) : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新人',\r\n    dataIndex: 'updated_by',\r\n    key: 'updated_by',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '备注',\r\n    dataIndex: 'remarks',\r\n    key: 'remarks',\r\n    width: 150\r\n  }\r\n];\r\n\r\nconst warrantyHistoryColumns = [\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'update_time',\r\n    key: 'update_time',\r\n    width: 180,\r\n    customRender: ({ text }) => {\r\n      return text ? new Date(text).toLocaleString() : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新前保修类型',\r\n    dataIndex: 'old_warranty_type',\r\n    key: 'old_warranty_type',\r\n    width: 120,\r\n    customRender: ({ text }) => {\r\n      return text === 'original' ? '原厂保修' : '第三方保修';\r\n    }\r\n  },\r\n  {\r\n    title: '更新后保修类型',\r\n    dataIndex: 'new_warranty_type',\r\n    key: 'new_warranty_type',\r\n    width: 120,\r\n    customRender: ({ text }) => {\r\n      return text === 'original' ? '原厂保修' : '第三方保修';\r\n    }\r\n  },\r\n  {\r\n    title: '更新前保修期',\r\n    key: 'old_warranty_period',\r\n    width: 200,\r\n    customRender: ({ record }) => {\r\n      return `${record.old_warranty_start_date} ~ ${record.old_warranty_end_date}`;\r\n    }\r\n  },\r\n  {\r\n    title: '更新后保修期',\r\n    key: 'new_warranty_period',\r\n    width: 200,\r\n    customRender: ({ record }) => {\r\n      return `${record.new_warranty_start_date} ~ ${record.new_warranty_end_date}`;\r\n    }\r\n  },\r\n  {\r\n    title: '更新人',\r\n    dataIndex: 'updated_by',\r\n    key: 'updated_by',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '备注',\r\n    dataIndex: 'remarks',\r\n    key: 'remarks',\r\n    width: 150\r\n  }\r\n];\r\n\r\n// 防御性检查，确保assetData始终是数组\r\nconst setAssetData = (data) => {\r\n  if (Array.isArray(data)) {\r\n    // 为每个硬件资产记录设置保护状态信息\r\n    const processedData = data.map(asset => {\r\n      // 确保保护状态字段存在\r\n      if (asset.is_protected === undefined) {\r\n        asset.is_protected = asset.is_auto_discovered || false;\r\n      }\r\n      \r\n      // 设置保护原因\r\n      if (!asset.protection_reason && asset.is_auto_discovered) {\r\n        asset.protection_reason = '自动发现的硬件资产';\r\n      }\r\n      \r\n      // 设置可编辑字段列表\r\n      if (asset.is_auto_discovered) {\r\n        asset.editable_fields = ['description', 'status'];\r\n      } else {\r\n        asset.editable_fields = 'all';\r\n      }\r\n      \r\n      return asset;\r\n    });\r\n    \r\n    assetData.value = processedData;\r\n  } else {\r\n    console.warn('尝试设置非数组数据到assetData:', data);\r\n    assetData.value = [];\r\n  }\r\n};\r\n\r\n// 统计计算属性 - 添加防御性检查\r\nconst activeCount = computed(() => {\r\n  if (!Array.isArray(assetData.value)) {\r\n    console.warn('assetData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return assetData.value.filter(asset => asset.asset_status === 'active').length;\r\n});\r\n\r\nconst maintenanceCount = computed(() => {\r\n  if (!Array.isArray(assetData.value)) {\r\n    console.warn('assetData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return assetData.value.filter(asset => asset.asset_status === 'maintenance').length;\r\n});\r\n\r\nconst retiredCount = computed(() => {\r\n  if (!Array.isArray(assetData.value)) {\r\n    console.warn('assetData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return assetData.value.filter(asset => asset.asset_status === 'retired').length;\r\n});\r\n\r\n// 统计对象\r\nconst statistics = computed(() => ({\r\n  total: assetData.value.length || 0,\r\n  active: activeCount.value,\r\n  maintenance: maintenanceCount.value,\r\n  retired: retiredCount.value\r\n}));\r\n\r\n// 计算属性：分离在用和报废设备\r\nconst inUseAssets = computed(() => {\r\n  return assetData.value.filter(asset => asset.asset_status === 'in_use');\r\n});\r\n\r\nconst scrappedAssets = computed(() => {\r\n  return assetData.value.filter(asset => asset.asset_status === 'scrapped');\r\n});\r\n\r\n// 计算属性：统计数据\r\nconst totalCount = computed(() => assetData.value.length);\r\nconst inUseCount = computed(() => inUseAssets.value.length);\r\nconst scrappedCount = computed(() => scrappedAssets.value.length);\r\n\r\n// 计算属性：按状态分离设备\r\nconst activeAssets = computed(() => {\r\n  return assetData.value.filter(asset => asset.asset_status === 'active' || asset.asset_status === 'in_use');\r\n});\r\n\r\n// 统计按钮过滤状态\r\nconst currentFilter = ref('active');\r\n\r\n// 计算属性 - 保修相关\r\nconst needsWarrantyCheck = computed(() => {\r\n  const type = warrantyFormData.checkType;\r\n  return type === 'auto' || type === 'manual';\r\n});\r\n\r\n// 工具函数\r\nconst getStatusText = (status) => {\r\n  const textMap = {\r\n    'active': '在用',\r\n    'maintenance': '维护中',\r\n    'retired': '已退役',\r\n    'reserved': '预留'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const typeMap = {\r\n    'server': '服务器',\r\n    'network': '网络设备',\r\n    'storage': '存储设备',\r\n    'security': '安全设备'\r\n  };\r\n  return typeMap[type] || type;\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  if (!date) return null;\r\n  return new Date(date).toLocaleString('zh-CN');\r\n};\r\n\r\n// 弹窗状态\r\nconst detailModalVisible = ref(false);\r\nconst editModalVisible = ref(false);\r\nconst warrantyModalVisible = ref(false);\r\nconst taskDetailModalVisible = ref(false);\r\nconst taskResultModalVisible = ref(false);\r\nconst selectedAsset = ref(null);\r\nconst editingAsset = ref(null);\r\nconst selectedTask = ref(null);\r\n\r\n// 保修查询相关\r\nconst warrantyTasks = ref([]);\r\nconst taskResults = ref([]);\r\nconst taskLoading = ref(false);\r\nconst resultLoading = ref(false);\r\nconst taskStatusFilter = ref('');\r\nconst taskDateRange = ref([]);\r\nconst taskNameFilter = ref('');\r\nconst taskPagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 表单相关\r\nconst formRef = ref();\r\nconst warrantyFormRef = ref();\r\nconst formData = reactive({\r\n  assetTag: '',\r\n  assetName: '',\r\n  status: 'active',\r\n  type: 'server',\r\n  brand: '',\r\n  model: '',\r\n  serialNumber: '',\r\n  location: '',\r\n  description: ''\r\n});\r\n\r\n// 保修配置数据\r\nconst warrantyFormData = reactive({\r\n  checkType: 'auto', // 默认自动检查\r\n  warrantyPeriod: 36, // 保修期（月）\r\n  purchaseDate: null,\r\n  warrantyStartDate: null,\r\n  warrantyEndDate: null,\r\n  supplierInfo: {\r\n    name: '',\r\n    contact: '',\r\n    phone: '',\r\n    email: ''\r\n  }\r\n});\r\n\r\n// 表单验证规则\r\nconst rules = {\r\n  assetTag: [\r\n    { required: true, message: '请输入资产标签' },\r\n    { pattern: /^[A-Za-z0-9-_]+$/, message: '资产标签只能包含字母、数字、横线和下划线' }\r\n  ],\r\n  assetName: [{ required: true, message: '请输入资产名称' }],\r\n  status: [{ required: true, message: '请选择资产状态' }],\r\n  type: [{ required: true, message: '请选择资产类型' }]\r\n};\r\n\r\n// 保修配置验证规则\r\nconst warrantyRules = {\r\n  checkType: [{ required: true, message: '请选择检查类型' }],\r\n  warrantyPeriod: [\r\n    { type: 'number', min: 1, max: 120, message: '保修期必须在1-120个月之间' }\r\n  ],\r\n  purchaseDate: [{ required: true, message: '请选择采购日期' }]\r\n};\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n});\r\n\r\n// 在用设备分页配置\r\nconst inUsePagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n// 报废设备分页配置\r\nconst scrappedPagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n// 正常设备分页配置\r\nconst activePagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n\r\n\r\n// 加载硬件资产列表数据\r\nconst loadAssetList = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const params = {\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize\r\n    };\r\n    \r\n    // 添加搜索条件\r\n    if (searchKeyword.value && searchKeyword.value.trim()) {\r\n      params.search = searchKeyword.value.trim();\r\n    }\r\n    if (assetStatus.value) {\r\n      params.status = assetStatus.value;\r\n    }\r\n    if (assetType.value) {\r\n      params.type = assetType.value;\r\n    }\r\n    \r\n    console.log('正在获取硬件资产列表，参数:', params);\r\n    console.log('当前分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      total: pagination.total\r\n    });\r\n    \r\n    const response = await hardwareAssetApi.getList(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 确保获取的数据是数组\r\n          let resultData = [];\r\n          if (data && data.results && Array.isArray(data.results)) {\r\n            resultData = data.results;\r\n          } else if (Array.isArray(data)) {\r\n            resultData = data;\r\n          } else {\r\n            console.warn('API返回的数据不是数组格式:', data);\r\n            resultData = [];\r\n          }\r\n          \r\n          setAssetData(resultData);\r\n          pagination.total = data.count || data.total || resultData.length;\r\n          // 更新各表格的分页总数\r\n          inUsePagination.total = inUseCount.value;\r\n          scrappedPagination.total = scrappedCount.value;\r\n          console.log('成功获取硬件资产列表（统一格式）:', assetData.value);\r\n          message.success('硬件资产列表数据已更新', 1);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取硬件资产列表失败: ${response.data.message}`);\r\n          setAssetData([]);\r\n          pagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 确保获取的数据是数组\r\n        let resultData = [];\r\n        if (response.data.results && Array.isArray(response.data.results)) {\r\n          resultData = response.data.results;\r\n        } else if (Array.isArray(response.data)) {\r\n          resultData = response.data;\r\n        } else {\r\n          console.warn('API返回的数据不是数组格式:', response.data);\r\n          resultData = [];\r\n        }\r\n        \r\n        setAssetData(resultData);\r\n        pagination.total = response.data.count || response.data.total || resultData.length;\r\n        // 更新各表格的分页总数\r\n        inUsePagination.total = inUseCount.value;\r\n        scrappedPagination.total = scrappedCount.value;\r\n        console.log('成功获取硬件资产列表（DRF格式）:', assetData.value);\r\n        message.success('硬件资产列表数据已更新', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取硬件资产列表失败: 无效的响应数据');\r\n      setAssetData([]);\r\n      pagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载硬件资产列表失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '获取硬件资产列表失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    \r\n    // 如果API调用失败，显示空数据\r\n    setAssetData([]);\r\n    pagination.total = 0;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: '资产标签',\r\n    dataIndex: 'asset_tag',\r\n    key: 'assetTag',\r\n    width: 120,\r\n    fixed: 'left'\r\n  },\r\n  {\r\n    title: '资产名称',\r\n    dataIndex: 'asset_name',\r\n    key: 'assetName',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '类型',\r\n    dataIndex: 'type',\r\n    key: 'type',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '品牌',\r\n    dataIndex: 'brand',\r\n    key: 'brand',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '型号',\r\n    dataIndex: 'model',\r\n    key: 'model',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '序列号',\r\n    dataIndex: 'serial_number',\r\n    key: 'serialNumber',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '位置',\r\n    dataIndex: 'location',\r\n    key: 'location',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '保修状态',\r\n    dataIndex: 'warranty_status',\r\n    key: 'warrantyStatus',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '最后更新',\r\n    dataIndex: 'updated_at',\r\n    key: 'updatedAt',\r\n    width: 160\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 280\r\n  }\r\n];\r\n\r\n// 保修结果表格列定义\r\nconst resultColumns = [\r\n  {\r\n    title: '资产标签',\r\n    dataIndex: 'asset_tag',\r\n    key: 'asset_tag',\r\n    width: 120,\r\n  },\r\n  {\r\n    title: '资产名称',\r\n    dataIndex: 'asset_name',\r\n    key: 'asset_name',\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: '保修状态',\r\n    dataIndex: 'warranty_status',\r\n    key: 'warranty_status'\r\n  },\r\n  {\r\n    title: '保修到期日',\r\n    dataIndex: 'warranty_end_date',\r\n    key: 'warranty_end_date'\r\n  },\r\n  {\r\n    title: '检查时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at'\r\n  }\r\n];\r\n\r\n// 事件处理函数\r\n// 批量保修检查状态管理\r\nconst batchWarrantyState = reactive({\r\n  isVisible: false,\r\n  phase: 'confirm', // confirm, checking, result\r\n  stats: {\r\n    total: 0,\r\n    currentValid: 0,\r\n    currentExpired: 0,\r\n    testResult: null\r\n  },\r\n  checking: {\r\n    progress: 0,\r\n    currentAsset: '',\r\n    startTime: null\r\n  }\r\n});\r\n\r\nconst handleBatchWarrantyCheck = async () => {\r\n  try {\r\n    // 获取当前页面的所有资产ID\r\n    const allAssetIds = assetData.value.map(asset => asset.id).filter(id => id);\r\n    \r\n    if (allAssetIds.length === 0) {\r\n      message.warning('没有可以检查保修的资产记录');\r\n      return;\r\n    }\r\n    \r\n    // 初始化状态\r\n    batchWarrantyState.stats.total = allAssetIds.length;\r\n    batchWarrantyState.stats.currentValid = assetData.value.filter(asset => asset.warranty_status === 'valid').length;\r\n    batchWarrantyState.stats.currentExpired = allAssetIds.length - batchWarrantyState.stats.currentValid;\r\n    batchWarrantyState.phase = 'confirm';\r\n    batchWarrantyState.isVisible = true;\r\n    \r\n  } catch (error) {\r\n    console.error('初始化批量保修检查失败:', error);\r\n    message.error('初始化批量保修检查失败');\r\n  }\r\n};\r\n\r\n// 开始保修检查\r\nconst startBatchWarrantyCheck = async () => {\r\n  try {\r\n    const allAssetIds = assetData.value.map(asset => asset.id).filter(id => id);\r\n    \r\n    // 切换到检查阶段\r\n    batchWarrantyState.phase = 'checking';\r\n    batchWarrantyState.checking.startTime = new Date();\r\n    batchWarrantyState.checking.progress = 0;\r\n    \r\n    loading.value = true;\r\n    \r\n    // 调用批量保修检查API\r\n    const response = await hardwareAssetApi.batchCheckWarranty(allAssetIds);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const batchData = response.data.data;\r\n      const summary = batchData.summary;\r\n      \r\n      // 更新本地数据\r\n      const resultsMap = new Map();\r\n      batchData.results.forEach(result => {\r\n        resultsMap.set(result.asset_id, result);\r\n      });\r\n      \r\n      // 更新assetData中的记录\r\n      assetData.value.forEach(asset => {\r\n        const result = resultsMap.get(asset.id);\r\n        if (result) {\r\n          asset.warranty_status = result.status;\r\n          asset.warranty_end_date = result.warranty_end_date;\r\n          asset.updated_at = new Date().toISOString();\r\n        }\r\n      });\r\n      \r\n      // 设置检查结果并切换到结果阶段\r\n      batchWarrantyState.stats.testResult = summary;\r\n      batchWarrantyState.phase = 'result';\r\n      \r\n    } else {\r\n      message.error(`批量保修检查失败: ${response.data?.message || '未知错误'}`);\r\n      batchWarrantyState.isVisible = false;\r\n    }\r\n  } catch (error) {\r\n    console.error('批量保修检查失败:', error);\r\n    let errorMessage = '批量保修检查失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n    batchWarrantyState.isVisible = false;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 关闭批量保修检查弹窗\r\nconst closeBatchWarrantyModal = () => {\r\n  batchWarrantyState.isVisible = false;\r\n  batchWarrantyState.phase = 'confirm';\r\n  batchWarrantyState.stats.testResult = null;\r\n  batchWarrantyState.checking.progress = 0;\r\n};\r\n\r\n// 行选择管理\r\nconst onSelectChange = (newSelectedRowKeys) => {\r\n  console.log('选中的行 keys:', newSelectedRowKeys);\r\n  selectedRowKeys.value = newSelectedRowKeys;\r\n};\r\n\r\nconst onSelectAll = (selected, selectedRows, changeRows) => {\r\n  console.log('全选/反选:', { selected, selectedRows: selectedRows.length, changeRows: changeRows.length });\r\n};\r\n\r\nconst clearSelection = () => {\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 批量删除\r\nconst handleBatchDelete = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要删除的硬件资产');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    Modal.confirm({\r\n      title: '批量删除确认',\r\n      content: `您将删除 ${selectedRowKeys.value.length} 个硬件资产，此操作不可恢复！`,\r\n      okText: '确认删除',\r\n      okType: 'danger',\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchDeleting.value = true;\r\n        try {\r\n          const response = await hardwareAssetApi.batchDeleteAssets(selectedRowKeys.value);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量删除成功！删除: ${result.deleted_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n            \r\n            // 刷新列表\r\n            await loadAssetList();\r\n          } else {\r\n            message.error(`批量删除失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('批量删除失败:', error);\r\n          message.error(`批量删除失败: ${error.message}`);\r\n        } finally {\r\n          batchDeleting.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('批量删除操作失败:', error);\r\n    message.error('批量删除操作失败');\r\n  }\r\n};\r\n\r\n// 批量切换监控状态\r\nconst handleBatchToggleMonitoring = async (enableMonitoring) => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要操作的硬件资产');\r\n    return;\r\n  }\r\n\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  try {\r\n    Modal.confirm({\r\n      title: `批量${actionText}`,\r\n      content: `您将对 ${selectedRowKeys.value.length} 个硬件资产${actionText}，是否继续？`,\r\n      okText: `确认${actionText}`,\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchMonitoringToggling.value = true;\r\n        try {\r\n          const response = await hardwareAssetApi.batchToggleMonitoring(selectedRowKeys.value, enableMonitoring);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量${actionText}成功！成功: ${result.success_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 更新本地数据\r\n            assetData.value.forEach(asset => {\r\n              if (selectedRowKeys.value.includes(asset.id)) {\r\n                asset.monitoring_enabled = enableMonitoring;\r\n              }\r\n            });\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n          } else {\r\n            message.error(`批量${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(`批量${actionText}失败:`, error);\r\n          message.error(`批量${actionText}失败: ${error.message}`);\r\n        } finally {\r\n          batchMonitoringToggling.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(`批量${actionText}操作失败:`, error);\r\n    message.error(`批量${actionText}操作失败`);\r\n  }\r\n};\r\n\r\n// 单个监控状态切换\r\nconst handleToggleMonitoring = async (record, enableMonitoring) => {\r\n  if (enableMonitoring) {\r\n    // 启用监控时显示模板选择抽屉\r\n    selectedAsset.value = record;\r\n    await loadZabbixTemplates(record.id);\r\n    templateDrawerVisible.value = true;\r\n  } else {\r\n    // 直接禁用监控\r\n    await toggleMonitoringStatus(record, false);\r\n  }\r\n};\r\n\r\n// 切换监控状态的实际方法\r\nconst toggleMonitoringStatus = async (record, enableMonitoring) => {\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  // 设置单个记录的加载状态\r\n  record.monitoringToggling = true;\r\n  \r\n  try {\r\n    const response = await hardwareAssetApi.toggleMonitoring(record.id, enableMonitoring);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 更新本地数据\r\n      record.monitoring_enabled = enableMonitoring;\r\n      message.success(`${record.asset_name || record.asset_tag} ${actionText}成功`, 1);\r\n    } else {\r\n      message.error(`${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`${actionText}失败:`, error);\r\n    message.error(`${actionText}失败: ${error.message}`);\r\n  } finally {\r\n    record.monitoringToggling = false;\r\n  }\r\n};\r\n\r\n// 加载Zabbix模板列表\r\nconst loadZabbixTemplates = async (assetId) => {\r\n  templateLoading.value = true;\r\n  try {\r\n    const response = await hardwareAssetApi.getZabbixTemplates(assetId, templateSearchKeyword.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      zabbixTemplates.value = response.data.data.templates || [];\r\n      \r\n      // 初始化展开状态，默认展开所有分类\r\n      nextTick(() => {\r\n        try {\r\n          const categories = Object.keys(groupedTemplates.value || {});\r\n          categories.forEach(category => {\r\n            const categoryStr = String(category);\r\n            expandedCategories.value[categoryStr] = true;\r\n          });\r\n        } catch (error) {\r\n          console.warn('初始化展开状态错误:', error);\r\n        }\r\n      });\r\n      \r\n      console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\r\n    } else {\r\n      message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\r\n      zabbixTemplates.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载模板列表失败:', error);\r\n    message.error(`加载模板列表失败: ${error.message}`);\r\n    zabbixTemplates.value = [];\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\n\r\n// 创建监控主机\r\nconst handleCreateMonitoring = async () => {\r\n  if (!selectedAsset.value) {\r\n    message.error('请先选择硬件资产');\r\n    return;\r\n  }\r\n  \r\n  if (selectedTemplateIds.value.length === 0) {\r\n    message.error('请选择至少一个监控模板');\r\n    return;\r\n  }\r\n  \r\n  monitoringCreating.value = true;\r\n  \r\n  try {\r\n    const monitoringData = {\r\n      template_ids: selectedTemplateIds.value,\r\n      host_name: selectedAsset.value.asset_name || selectedAsset.value.asset_tag,\r\n      group_ids: []\r\n    };\r\n    \r\n    const response = await hardwareAssetApi.createMonitoring(selectedAsset.value.id, monitoringData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const result = response.data.data;\r\n      \r\n      message.success({\r\n        content: `监控主机创建成功！\\n主机名: ${result.host_name}\\n资产: ${result.asset_tag}\\n模板数量: ${result.template_count}`,\r\n        duration: 5\r\n      });\r\n      \r\n      // 更新本地资产记录的监控状态\r\n      selectedAsset.value.monitoring_enabled = true;\r\n      \r\n      // 关闭抽屉\r\n      templateDrawerVisible.value = false;\r\n      \r\n      // 清空选中的模板\r\n      selectedTemplateIds.value = [];\r\n      \r\n    } else {\r\n      message.error(`创建监控主机失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建监控主机失败:', error);\r\n    message.error(`创建监控主机失败: ${error.message}`);\r\n  } finally {\r\n    monitoringCreating.value = false;\r\n  }\r\n};\r\n\r\n// 关闭模板抽屉\r\nconst handleCloseTemplateDrawer = () => {\r\n  templateDrawerVisible.value = false;\r\n  selectedTemplateIds.value = [];\r\n  templateSearchKeyword.value = '';\r\n  selectedCategory.value = '';\r\n  expandedCategories.value = {};\r\n  selectedAsset.value = null;\r\n};\r\n\r\n// 按分类组织模板\r\nconst groupedTemplates = computed(() => {\r\n  const groups = {};\r\n  \r\n  try {\r\n    if (!Array.isArray(zabbixTemplates.value)) {\r\n      console.warn('zabbixTemplates不是数组:', zabbixTemplates.value);\r\n      return groups;\r\n    }\r\n    \r\n    zabbixTemplates.value.forEach((template) => {\r\n      if (!template || typeof template !== 'object') {\r\n        return;\r\n      }\r\n      \r\n      const category = template.category || '📝 其他';\r\n      if (!groups[category]) {\r\n        groups[category] = [];\r\n      }\r\n      \r\n      groups[category].push(template);\r\n    });\r\n    \r\n    // 对每个分类的模板按名称排序\r\n    Object.keys(groups).forEach(category => {\r\n      try {\r\n        groups[category].sort((a, b) => {\r\n          const nameA = a.name || '';\r\n          const nameB = b.name || '';\r\n          return nameA.localeCompare(nameB);\r\n        });\r\n      } catch (sortError) {\r\n        console.warn(`排序分类${category}时出错:`, sortError);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('groupedTemplates计算出错:', error);\r\n  }\r\n  \r\n  return groups;\r\n});\r\n\r\nconst handleSearch = async () => {\r\n  pagination.current = 1;\r\n  await loadAssetList();\r\n};\r\n\r\nconst handleReset = async () => {\r\n  searchKeyword.value = '';\r\n  assetStatus.value = [];\r\n  assetType.value = '';\r\n  pagination.current = 1;\r\n  await loadAssetList();\r\n};\r\n\r\nconst handleSearchInput = (value) => {\r\n  searchKeyword.value = value;\r\n};\r\n\r\nconst handleStatusChange = (value) => {\r\n  assetStatus.value = value;\r\n};\r\n\r\nconst handleTypeChange = (value) => {\r\n  assetType.value = value;\r\n};\r\n\r\n// 处理统计按钮点击事件\r\nconst handleStatsFilter = (filterType) => {\r\n  currentFilter.value = filterType;\r\n  console.log('统计按钮点击:', filterType);\r\n  \r\n  // 根据点击的统计按钮类型进行相应的过滤或操作\r\n  switch (filterType) {\r\n    case 'total':\r\n      // 显示所有设备\r\n      assetStatus.value = [];\r\n      break;\r\n    case 'active':\r\n      // 显示在用设备\r\n      assetStatus.value = ['active'];\r\n      break;\r\n    case 'available':\r\n      // 显示可用设备（这里可以根据实际业务逻辑调整）\r\n      assetStatus.value = ['reserved'];\r\n      break;\r\n    case 'scrapped':\r\n      // 显示报废设备\r\n      assetStatus.value = ['scrapped'];\r\n      break;\r\n    case 'warranty':\r\n      // 显示保修中的设备（这里可以根据实际业务逻辑调整）\r\n      // 可以添加特定的过滤逻辑\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  \r\n  // 更新当前过滤器状态\r\n  currentFilter.value = filterType;\r\n  \r\n  // 重新加载数据\r\n  pagination.current = 1;\r\n  loadAssetList();\r\n};\r\n\r\n// 查看历史记录\r\nconst handleViewHistory = (record) => {\r\n  currentHistoryAsset.value = record;\r\n  historyModalVisible.value = true;\r\n  historyActiveTab.value = 'spec';\r\n  // 自动加载规格参数历史\r\n  loadSpecHistory();\r\n};\r\n\r\n// 加载规格参数更新历史\r\nconst loadSpecHistory = async () => {\r\n  if (!currentHistoryAsset.value) return;\r\n  \r\n  specHistoryLoading.value = true;\r\n  try {\r\n    const response = await hardwareAssetApi.getSpecHistory(currentHistoryAsset.value.id);\r\n    if (response.data && response.data.code === 200) {\r\n      specHistory.value = response.data.data || [];\r\n    } else {\r\n      message.error('加载规格参数历史失败');\r\n      specHistory.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载规格参数历史失败:', error);\r\n    message.error('加载规格参数历史失败');\r\n    specHistory.value = [];\r\n  } finally {\r\n    specHistoryLoading.value = false;\r\n  }\r\n};\r\n\r\n// 加载保修更新历史\r\nconst loadWarrantyHistory = async () => {\r\n  if (!currentHistoryAsset.value) return;\r\n  \r\n  warrantyHistoryLoading.value = true;\r\n  try {\r\n    const response = await hardwareAssetApi.getWarrantyHistory(currentHistoryAsset.value.id);\r\n    if (response.data && response.data.code === 200) {\r\n      warrantyHistory.value = response.data.data || [];\r\n    } else {\r\n      message.error('加载保修历史失败');\r\n      warrantyHistory.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载保修历史失败:', error);\r\n    message.error('加载保修历史失败');\r\n    warrantyHistory.value = [];\r\n  } finally {\r\n    warrantyHistoryLoading.value = false;\r\n  }\r\n};\r\n\r\n// 历史记录标签页切换\r\nconst handleHistoryTabChange = (activeKey) => {\r\n  historyActiveTab.value = activeKey;\r\n  if (activeKey === 'warranty' && warrantyHistory.value.length === 0) {\r\n    loadWarrantyHistory();\r\n  }\r\n};\r\n\r\n// 关闭历史记录弹窗\r\nconst handleHistoryModalClose = () => {\r\n  historyModalVisible.value = false;\r\n  currentHistoryAsset.value = null;\r\n  specHistory.value = [];\r\n  warrantyHistory.value = [];\r\n  historyActiveTab.value = 'spec';\r\n};\r\n\r\nconst handleTableChange = async (paginationInfo, filters, sorter) => {\r\n  console.log('handleTableChange 被调用:', {\r\n    paginationInfo, \r\n    当前分页状态: {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    }\r\n  });\r\n  \r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  \r\n  console.log('更新后的分页状态:', {\r\n    current: pagination.current,\r\n    pageSize: pagination.pageSize\r\n  });\r\n  \r\n  // 更新 URL 参数\r\n  const currentUrl = new URL(window.location);\r\n  currentUrl.searchParams.set('page', pagination.current.toString());\r\n  currentUrl.searchParams.set('page_size', pagination.pageSize.toString());\r\n  window.history.replaceState({}, '', currentUrl.toString());\r\n  console.log('已更新 URL:', currentUrl.toString());\r\n  \r\n  await loadAssetList();\r\n};\r\n\r\n// 在用设备表格变化处理\r\nconst handleActiveTableChange = async (paginationInfo, filters, sorter) => {\r\n  activePagination.current = paginationInfo.current;\r\n  activePagination.pageSize = paginationInfo.pageSize;\r\n  // 更新查询参数\r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  await loadAssetList();\r\n};\r\n\r\nconst handleView = (record) => {\r\n  selectedAsset.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleEdit = (record) => {\r\n  // 检查资产是否受保护\r\n  if (record.is_protected || record.is_auto_discovered) {\r\n    message.warning({\r\n      content: `不能编辑此硬件资产：${record.asset_name || record.asset_tag}\\n原因：${record.protection_reason || '自动发现的硬件资产不允许编辑'}\\n可编辑字段：${Array.isArray(record.editable_fields) ? record.editable_fields.join(', ') : '备注、状态'}`,\r\n      duration: 5\r\n    });\r\n    return;\r\n  }\r\n  \r\n  editingAsset.value = record;\r\n  Object.assign(formData, record);\r\n  editModalVisible.value = true;\r\n};\r\n\r\nconst handleDelete = async (record) => {\r\n  try {\r\n    Modal.confirm({\r\n      title: '确认删除硬件资产',\r\n      content: `确定要删除硬件资产 \"${record.asset_name || record.asset_tag}\" 吗？\\n\\n警告：此操作将删除资产记录及所有相关数据（包括保修记录、监控数据等），该操作不可恢复！`,\r\n      okText: '确认删除',\r\n      okType: 'danger',\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        const deleteMessage = message.loading('正在删除硬件资产及相关数据...', 0);\r\n        \r\n        try {\r\n          const response = await hardwareAssetApi.deleteAsset(record.id);\r\n          deleteMessage();\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const cleanupData = response.data.data;\r\n            \r\n            let successMessage = `硬件资产 \"${cleanupData.asset_name || cleanupData.asset_tag}\" 已成功删除`;\r\n            \r\n            const cleanupDetails = [];\r\n            if (cleanupData.warranty_records_deleted > 0) {\r\n              cleanupDetails.push(`保修记录: ${cleanupData.warranty_records_deleted}条`);\r\n            }\r\n            if (cleanupData.monitoring_cleanup && cleanupData.monitoring_cleanup.success) {\r\n              cleanupDetails.push('监控数据: 已清理');\r\n            }\r\n            \r\n            if (cleanupDetails.length > 0) {\r\n              successMessage += `\\n同时清理了：${cleanupDetails.join('、')}`;\r\n            }\r\n            \r\n            message.success({\r\n              content: successMessage,\r\n              duration: 6\r\n            });\r\n            \r\n            // 直接从列表中移除已删除的资产\r\n            assetData.value = assetData.value.filter(asset => asset.id !== record.id);\r\n            pagination.total = assetData.value.length;\r\n          } else {\r\n            message.error('删除硬件资产失败');\r\n          }\r\n        } catch (deleteError) {\r\n          deleteMessage();\r\n          throw deleteError;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除硬件资产失败:', error);\r\n      message.error(`删除硬件资产失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst handleCheckWarranty = async (record) => {\r\n  record.warrantyChecking = true;\r\n  try {\r\n    const response = await hardwareAssetApi.checkWarranty(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const warrantyData = response.data.data;\r\n      // 更新记录的保修状态\r\n      record.warranty_status = warrantyData.status;\r\n      record.warranty_end_date = warrantyData.warranty_end_date;\r\n      record.updated_at = new Date().toISOString();\r\n      \r\n      const statusText = warrantyData.is_valid ? '有效' : '已过期';\r\n      const endDateText = warrantyData.warranty_end_date ? ` (到期日: ${warrantyData.warranty_end_date})` : '';\r\n      \r\n      message.success(`保修检查 ${record.asset_name || record.asset_tag} 完成: ${statusText}${endDateText}`, 1);\r\n    } else {\r\n      message.error(`保修检查失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('保修检查失败:', error);\r\n    let errorMessage = '保修检查失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n  } finally {\r\n    record.warrantyChecking = false;\r\n  }\r\n};\r\n\r\nconst handleExport = () => {\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst handleImport = () => {\r\n  message.info('导入功能开发中...');\r\n};\r\n\r\n// 处理新增设备\r\nconst handleAdd = () => {\r\n  formDialogVisible.value = true;\r\n};\r\n\r\n// 处理表单提交\r\nconst handleSubmit = async (formData) => {\r\n  try {\r\n    const response = await hardwareAssetApi.createAsset(formData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('硬件资产创建成功');\r\n      formDialogVisible.value = false;\r\n      // 刷新列表\r\n      await loadAssetList();\r\n    } else {\r\n      message.error(`创建失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建硬件资产失败:', error);\r\n    message.error(`创建失败: ${error.message}`);\r\n  }\r\n};\r\n\r\nconst handleWarrantyCancel = () => {\r\n  warrantyModalVisible.value = false;\r\n};\r\n\r\nconst handleWarrantyConfirm = () => {\r\n  message.info('保修配置功能开发中...');\r\n  warrantyModalVisible.value = false;\r\n};\r\n\r\n// 生命周期钩子\r\nonMounted(async () => {\r\n  try {\r\n    // 抑制ResizeObserver错误\r\n    suppressResizeObserverError();\r\n    \r\n    // 从URL参数恢复分页状态\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const page = urlParams.get('page');\r\n    const pageSize = urlParams.get('page_size');\r\n    \r\n    if (page && !isNaN(parseInt(page))) {\r\n      pagination.current = parseInt(page);\r\n    }\r\n    if (pageSize && !isNaN(parseInt(pageSize))) {\r\n      pagination.pageSize = parseInt(pageSize);\r\n    }\r\n    \r\n    console.log('从URL恢复分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    });\r\n    \r\n    // 加载硬件资产列表\r\n    await loadAssetList();\r\n  } catch (error) {\r\n    console.error('初始化硬件资产列表失败:', error);\r\n    message.error('初始化硬件资产列表失败');\r\n  }\r\n});\r\n\r\n// 清理函数\r\nonBeforeUnmount(() => {\r\n  // 清理定时器或其他资源\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.hardware-asset-list-container {\r\n  min-height: 100vh;\r\n}\r\n\r\n.ant-table-wrapper {\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.search-form {\r\n  background: white;\r\n  padding: 24px;\r\n  border-radius: 6px;\r\n  margin-bottom: 16px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.batch-actions {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.statistics-cards {\r\n  display: flex;\r\n  gap: 16px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.stat-card {\r\n  flex: 1;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #1890ff;\r\n}\r\n\r\n.stat-label {\r\n  color: #666;\r\n  margin-top: 8px;\r\n}\r\n\r\n/* 标签页样式 */\r\n.device-tabs {\r\n  background: white;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n\r\n\r\n.device-content {\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n.device-tabs :deep(.ant-tabs-content-holder) {\r\n  padding: 16px;\r\n  background: white;\r\n}\r\n\r\n.device-tabs :deep(.ant-tabs-tabpane) {\r\n  padding: 0;\r\n}\r\n\r\n.device-tabs .ant-table-wrapper {\r\n  border-radius: 8px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.device-tabs .ant-table {\r\n  border-radius: 8px;\r\n}\r\n\r\n.device-tabs .ant-table-thead > tr > th {\r\n  background: #fafafa;\r\n  border-bottom: 2px solid #f0f0f0;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 历史记录弹窗样式 */\r\n.history-section {\r\n  padding: 16px 0;\r\n}\r\n\r\n.history-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n  padding-bottom: 12px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.history-header h4 {\r\n  margin: 0;\r\n  color: #333;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\SoftwareAssetList.vue",["497","498","499","500","501","502","503","504","505"],"<template>\r\n  <div class=\"software-asset-list-container\">\r\n    <!-- 软件资产表格组件 -->\r\n    <SoftwareAssetTable\r\n      ref=\"softwareTableRef\"\r\n      :loading=\"loading\"\r\n      :dataSource=\"tableData\"\r\n      :pagination=\"pagination\"\r\n      :currentFilter=\"currentFilter\"\r\n      :assetStatus=\"assetStatus\"\r\n      :selected-row-keys=\"selectedRowKeys\"\r\n      :totalCount=\"statistics.total\"\r\n      :activeCount=\"statistics.active\"\r\n      :retiredCount=\"statistics.retired\"\r\n      :searchKeyword=\"searchKeyword\"\r\n      :blockUpCount=\"statistics.block_up\"\r\n      :detailDialogVisible=\"detailDialogVisible\"\r\n      @search=\"handleSearch\"\r\n      @reset=\"handleReset\"\r\n      @page-change=\"handlePageChange\"\r\n      @size-change=\"handleSizeChange\"\r\n      @selection-change=\"handleSelectionChange\"\r\n      @view=\"handleView\"\r\n      @delete=\"handleDelete\"\r\n      @license=\"handleLicense\"\r\n      @history=\"handleHistory\"\r\n      @batch-delete=\"handleBatchDelete\"\r\n      @batch-export=\"handleBatchExport\"\r\n      @export=\"handleExport\"\r\n      @statsFilter=\"handleStatsFilter\"\r\n      @add=\"showAddDialog\"\r\n      @viewDetails=\"viewDetails\"\r\n      @import=\"showImportDialog\"\r\n      @searchInput=\"handleSearchInput\"\r\n      @editAsset=\"handleEdit\"\r\n      @table-change=\"handleTableChange\"\r\n    />\r\n\r\n    <!-- 软件监控操作组件 -->\r\n    <SoftwareMonitoringActions\r\n      ref=\"monitoringActionsRef\"\r\n      :visible=\"false\"\r\n      @refresh=\"fetchData\"\r\n    />\r\n\r\n    <!-- 新增/编辑对话框 -->\r\n    <SoftwareAssetForm\r\n      v-model:visible=\"formDialogVisible\"\r\n      :currentItem=\"currentItem\"\r\n      :is-edit=\"isEdit\"\r\n      @success=\"handleFormSuccess\"\r\n    />\r\n\r\n    <!-- 详情对话框 -->\r\n    <SoftwareAssetDetail\r\n      v-model:visible=\"detailDialogVisible\"\r\n      :softwareAssetId=\"currentAssetId\"\r\n    />\r\n\r\n\r\n    <!-- 导入对话框 -->\r\n    <SoftwareAssetImport\r\n      v-model:visible=\"importDialogVisible\"\r\n      @success=\"handleImportSuccess\"\r\n    />\r\n\r\n    <!-- 许可证管理对话框 -->\r\n    <a-modal\r\n      v-model:open=\"licenseModalVisible\"\r\n      title=\"许可证管理\"\r\n      width=\"800px\"\r\n      @ok=\"handleLicenseConfirm\"\r\n      @cancel=\"handleLicenseCancel\"\r\n    >\r\n      <a-form :model=\"licenseFormData\" layout=\"vertical\">\r\n        <a-form-item label=\"许可证数量\">\r\n          <a-input-number\r\n            v-model:value=\"licenseFormData.license_count\"\r\n            :min=\"0\"\r\n            style=\"width: 100%\"\r\n          />\r\n        </a-form-item>\r\n        <a-form-item label=\"许可证到期日期\">\r\n          <a-date-picker\r\n            v-model:value=\"licenseFormData.license_expiry_date\"\r\n            style=\"width: 100%\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 历史记录弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"historyModalVisible\"\r\n      title=\"更新历史记录\"\r\n      width=\"1200px\"\r\n      :footer=\"null\"\r\n      @cancel=\"historyModalVisible = false\"\r\n    >\r\n      <a-tabs v-model:activeKey=\"historyActiveTab\">\r\n        <a-tab-pane tab=\"许可证更新记录\" key=\"license\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>许可证更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadLicenseHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"licenseHistory\"\r\n              :columns=\"licenseHistoryColumns\"\r\n              bordered\r\n              :loading=\"licenseHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n        \r\n        <a-tab-pane tab=\"版本更新记录\" key=\"version\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>版本更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadVersionHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"versionHistory\"\r\n              :columns=\"versionHistoryColumns\"\r\n              bordered\r\n              :loading=\"versionHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted , nextTick } from 'vue'\r\nimport { message, Modal } from 'ant-design-vue'\r\nimport SoftwareAssetTable from '@/components/business/SoftwareAssetTable.vue'\r\nimport SoftwareMonitoringActions from '@/components/business/SoftwareMonitoringActions.vue'\r\nimport SoftwareAssetForm from '@/components/business/SoftwareAssetForm.vue'\r\nimport SoftwareAssetDetail from '@/components/business/SoftwareAssetDetail.vue'\r\nimport SoftwareAssetImport from '@/components/business/SoftwareAssetImport.vue'\r\nimport softwareAssetApi from '@/api/softwareAsset'\r\nimport { dictionaryAPI } from '@/api'\r\nimport { formatDate } from '@/utils/date'\r\n\r\n// 组件引用\r\nconst softwareTableRef = ref(null)\r\nconst monitoringActionsRef = ref(null)\r\n\r\n// 响应式数据\r\nconst loading = ref(false)\r\nconst tableData = ref([])\r\nconst selectedItems = ref([])\r\nconst selectedRowKeys = ref([])\r\nconst formDialogVisible = ref(false)\r\nconst detailDialogVisible = ref(false)\r\nconst importDialogVisible = ref(false)\r\nconst licenseModalVisible = ref(false)\r\nconst historyModalVisible = ref(false)\r\nconst isEdit = ref(false)\r\nconst currentItem = ref({})\r\nconst currentAssetId = ref(null)\r\nconst licenseFormData = ref({})\r\nconst historyActiveTab = ref('license')\r\nconst currentHistoryAsset = ref(null)\r\nconst licenseHistory = ref([])\r\nconst versionHistory = ref([])\r\nconst licenseHistoryLoading = ref(false)\r\nconst versionHistoryLoading = ref(false)\r\nconst assetStatusCount = ref(null)\r\n\r\n// 软件资产搜索条件\r\nconst searchKeyword = ref(\"\")\r\nconst assetStatus = ref(\"\") ;\r\nconst softwareType = ref(\"\") ;\r\nconst manufacturer = ref(\"\") ;\r\n// 获取软件列表数据指向参数\r\nconst currentFilter = ref(\"in_use\") ; \r\n\r\n// 字典数据\r\nconst assetStatusOptions = ref([])\r\nconst softwareTypeOptions = ref([])\r\n\r\n// 搜索表单\r\nconst searchForm = reactive({\r\n  software_name: '',\r\n  version: '',\r\n  manufacturer: '',\r\n  asset_status: '',\r\n  software_type: ''\r\n})\r\n\r\n// 分页\r\nconst pagination = reactive({\r\n  page: 1,\r\n  size: 10,\r\n  total: 0\r\n})\r\n\r\n\r\n// 统计计算属性\r\nconst statistics = computed(() => {\r\n  const total = assetStatusCount.value.use_count + assetStatusCount.value.block_up_count\r\n  const active = assetStatusCount.value.use_count\r\n  const block_up = assetStatusCount.value.block_up_count\r\n  console.log(total , active, block_up)\r\n  return {\r\n    total: pagination.total || 0,\r\n    active,\r\n    block_up\r\n  }\r\n})\r\n\r\n\r\n// 历史记录表格列配置\r\nconst licenseHistoryColumns = [\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'update_time',\r\n    key: 'update_time',\r\n    width: 180,\r\n    customRender: ({ text }) => {\r\n      return text ? new Date(text).toLocaleString() : '-'\r\n    }\r\n  },\r\n  {\r\n    title: '更新方式',\r\n    dataIndex: 'update_method',\r\n    key: 'update_method',\r\n    width: 100,\r\n    customRender: ({ text }) => {\r\n      return text === 'manual' ? '手动' : '自动'\r\n    }\r\n  },\r\n  {\r\n    title: '更新前许可证信息',\r\n    dataIndex: 'old_license_info',\r\n    key: 'old_license_info',\r\n    customRender: ({ text }) => {\r\n      if (!text) return '-'\r\n      try {\r\n        const info = typeof text === 'string' ? JSON.parse(text) : text\r\n        return `许可证数量: ${info.license_count || '-'}, 到期日期: ${info.expiry_date || '-'}`\r\n      } catch (e) {\r\n        return text\r\n      }\r\n    }\r\n  },\r\n  {\r\n    title: '更新后许可证信息',\r\n    dataIndex: 'new_license_info',\r\n    key: 'new_license_info',\r\n    customRender: ({ text }) => {\r\n      if (!text) return '-'\r\n      try {\r\n        const info = typeof text === 'string' ? JSON.parse(text) : text\r\n        return `许可证数量: ${info.license_count || '-'}, 到期日期: ${info.expiry_date || '-'}`\r\n      } catch (e) {\r\n        return text\r\n      }\r\n    }\r\n  },\r\n  {\r\n    title: '更新人',\r\n    dataIndex: 'updated_by',\r\n    key: 'updated_by',\r\n    width: 120\r\n  }\r\n]\r\nconst versionHistoryColumns = [\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'update_time',\r\n    key: 'update_time',\r\n    width: 180,\r\n    customRender: ({ text }) => {\r\n      return text ? new Date(text).toLocaleString() : '-'\r\n    }\r\n  },\r\n  {\r\n    title: '更新方式',\r\n    dataIndex: 'update_method',\r\n    key: 'update_method',\r\n    width: 100,\r\n    customRender: ({ text }) => {\r\n      return text === 'manual' ? '手动' : '自动'\r\n    }\r\n  },\r\n  {\r\n    title: '更新前版本',\r\n    dataIndex: 'old_version',\r\n    key: 'old_version',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '更新后版本',\r\n    dataIndex: 'new_version',\r\n    key: 'new_version',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '更新人',\r\n    dataIndex: 'updated_by',\r\n    key: 'updated_by',\r\n    width: 120\r\n  }\r\n]\r\n\r\n// 加载软件资产列表数据\r\nconst fetchData = async () => {\r\n  loading.value = true\r\n  try {\r\n    const params = {\r\n      page: pagination.page,\r\n      page_size: pagination.size,\r\n      ...searchForm\r\n    }\r\n    // 添加搜索条件\r\n    if (searchKeyword.value && searchKeyword.value.trim()) {\r\n      params.search = searchKeyword.value.trim();\r\n    }\r\n    if (assetStatus.value) {\r\n      params.status = assetStatus.value;\r\n    }\r\n    if (softwareType.value) {\r\n      params.type = softwareType.value;\r\n    }\r\n    if (manufacturer.value) {\r\n      params.manufacturer = manufacturer.value;\r\n    }\r\n\r\n    console.log('当前分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      total: pagination.total\r\n    });\r\n    // 过滤空值\r\n    Object.keys(params).forEach(key => {\r\n      if (params[key] === '' || params[key] === null || params[key] === undefined) {\r\n        delete params[key]\r\n      }\r\n    })\r\n    // 向后端请求数据\r\n    console.log('请求参数:', params);\r\n    const response = await  softwareAssetApi.getInUseList(params)\r\n    // 更新传入子组件数据\r\n    tableData.value = response.data.results\r\n    pagination.total = response.data.count\r\n    message.success('资产数据更新成功')\r\n  } catch (error) {\r\n    message.error('获取数据失败：' + (error.message || '未知错误'))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst groupedTemplates = computed(() => {\r\n  const groups = {};\r\n  \r\n  try {\r\n    if (!Array.isArray(zabbixTemplates.value)) {\r\n      console.warn('zabbixTemplates不是数组:', zabbixTemplates.value);\r\n      return groups;\r\n    }\r\n    \r\n    zabbixTemplates.value.forEach((template) => {\r\n      if (!template || typeof template !== 'object') {\r\n        return;\r\n      }\r\n      \r\n      const category = template.category || '📝 其他';\r\n      if (!groups[category]) {\r\n        groups[category] = [];\r\n      }\r\n      \r\n      groups[category].push(template);\r\n    });\r\n    \r\n    // 对每个分类的模板按名称排序\r\n    Object.keys(groups).forEach(category => {\r\n      try {\r\n        groups[category].sort((a, b) => {\r\n          const nameA = a.name || '';\r\n          const nameB = b.name || '';\r\n          return nameA.localeCompare(nameB);\r\n        });\r\n      } catch (sortError) {\r\n        console.warn(`排序分类${category}时出错:`, sortError);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('groupedTemplates计算出错:', error);\r\n  }\r\n  \r\n  return groups;\r\n});\r\n\r\n\r\n// 模板选择抽屉相关状态\r\nconst templateDrawerVisible = ref(false);\r\nconst zabbixTemplates = ref([]);\r\nconst selectedTemplateIds = ref([]);\r\nconst templateLoading = ref(false);\r\nconst templateSearchKeyword = ref('');\r\nconst monitoringCreating = ref(false);\r\nconst selectedCategory = ref(''); // 当前选中的分类\r\nconst expandedCategories = ref({}); // 展开的分类\r\n// 加载Zabbix模板列表\r\nconst loadZabbixTemplates = async (assetId) => {\r\n  templateLoading.value = true;\r\n  try {\r\n    const response = await softwareAssetApi.getZabbixTemplates(assetId, templateSearchKeyword.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      zabbixTemplates.value = response.data.data.templates || [];\r\n      \r\n      // 初始化展开状态，默认展开所有分类\r\n      nextTick(() => {\r\n        try {\r\n          const categories = Object.keys(groupedTemplates.value || {});\r\n          categories.forEach(category => {\r\n            const categoryStr = String(category);\r\n            expandedCategories.value[categoryStr] = true;\r\n          });\r\n        } catch (error) {\r\n          console.warn('初始化展开状态错误:', error);\r\n        }\r\n      });\r\n      \r\n      console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\r\n    } else {\r\n      message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\r\n      zabbixTemplates.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载模板列表失败:', error);\r\n    message.error(`加载模板列表失败: ${error.message}`);\r\n    zabbixTemplates.value = [];\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\nconst selectedAsset = ref(null);\r\n// 单个监控状态切换\r\nconst handleToggleMonitoring = async (record, enableMonitoring) => {\r\n  if (enableMonitoring) {\r\n    // 启用监控时显示模板选择抽屉\r\n    selectedAsset.value = record;\r\n    await loadZabbixTemplates(record.id);\r\n    templateDrawerVisible.value = true;\r\n  } else {\r\n    // 直接禁用监控\r\n    await toggleMonitoringStatus(record, false);\r\n  }\r\n};\r\n\r\n// 切换监控状态的实际方法\r\nconst toggleMonitoringStatus = async (record, enableMonitoring) => {\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  // 设置单个记录的加载状态\r\n  record.monitoringToggling = true;\r\n  \r\n  try {\r\n    const response = await softwareAssetApi.toggleMonitoring(record.id, enableMonitoring);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 更新本地数据\r\n      record.monitoring_enabled = enableMonitoring;\r\n      message.success(`${record.asset_name || record.asset_tag} ${actionText}成功`, 1);\r\n    } else {\r\n      message.error(`${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`${actionText}失败:`, error);\r\n    message.error(`${actionText}失败: ${error.message}`);\r\n  } finally {\r\n    record.monitoringToggling = false;\r\n  }\r\n};\r\n// 新的事件处理方法\r\nconst handleSearch = (searchParams) => {\r\n  Object.assign(searchForm, searchParams)\r\n  pagination.page = 1\r\n  fetchData()\r\n}\r\n\r\nconst handleReset = () => {\r\n  Object.keys(searchForm).forEach(key => {\r\n    searchForm[key] = ''\r\n  })\r\n  pagination.page = 1\r\n  fetchData()\r\n}\r\n\r\nconst viewDetails = () => {\r\n  detailDialogVisible.value = true ;\r\n}\r\n\r\nconst handlePageChange = (page) => {\r\n  pagination.page = page\r\n  fetchData()\r\n}\r\n\r\nconst handleSizeChange = (size) => {\r\n  pagination.size = size\r\n  pagination.page = 1\r\n  fetchData()\r\n}\r\n\r\n// 输入时间处理\r\nconst handleSearchInput = (value) => {\r\n  searchKeyword.value = value;\r\n};\r\n\r\n// 处理新增/编辑表单提交\r\n\r\n// 处理统计按钮点击事件\r\nconst handleStatsFilter = async(filterType) => {\r\n  currentFilter.value = filterType;    \r\n  // 根据点击的统计按钮类型进行相应的过滤或操作\r\n  switch (filterType) {\r\n    case 'in_use':\r\n      // 显示在用软件\r\n      assetStatus.value = \"in_use\";\r\n      break;\r\n    case \"block_up\":\r\n      assetStatus.value = \"block_up\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  // 更新当前过滤器状态\r\n  currentFilter.value = filterType;\r\n  // 重新加载数据\r\n  pagination.current = 1;\r\n  fetchData() ; \r\n};\r\n\r\nconst handleSelectionChange = (selectedKeys, selectedRows) => {\r\n  selectedRowKeys.value = selectedKeys\r\n  selectedItems.value = selectedRows\r\n}\r\n\r\n// 表格操作事件处理\r\nconst handleView = (record) => {\r\n  currentAssetId.value = record.id\r\n  detailDialogVisible.value = true\r\n}\r\n\r\n// 软件资产编辑\r\nconst handleEdit = (record) => {\r\n  currentItem.value = { ...record }\r\n  isEdit.value = true\r\n  formDialogVisible.value = true\r\n}\r\n\r\n\r\n// 软件资产删除\r\nconst handleDelete = (record) => {\r\n  Modal.confirm({\r\n    title: '确认删除',\r\n    content: `确定要删除软件资产 \"${record.software_name}\" 吗？`,\r\n    okText: '确定',\r\n    cancelText: '取消',\r\n    onOk: async () => {\r\n      try {\r\n        await softwareAssetApi.delete(record.id)\r\n        message.success('删除成功')\r\n        fetchData()\r\n      } catch (error) {\r\n        message.error('删除失败：' + (error.message || '未知错误'))\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// 处理分页\r\nconst handleTableChange = async (paginationInfo, filters, sorter) => {\r\n  console.log('handleTableChange 被调用:', {\r\n    paginationInfo, \r\n    当前分页状态: {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    }\r\n  });\r\n  \r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  \r\n  console.log('更新后的分页状态:', {\r\n    current: pagination.current,\r\n    pageSize: pagination.pageSize\r\n  });\r\n  \r\n  // 更新 URL 参数\r\n  const currentUrl = new URL(window.location);\r\n  currentUrl.searchParams.set('page', pagination.current.toString());\r\n  currentUrl.searchParams.set('page_size', pagination.pageSize.toString());\r\n  window.history.replaceState({}, '', currentUrl.toString());\r\n  console.log('已更新 URL:', currentUrl.toString());\r\n  \r\n  await fetchData();\r\n};\r\n\r\n\r\nconst handleLicense = (record) => {\r\n  currentItem.value = record\r\n  licenseFormData.value = {\r\n    license_count: record.license_count,\r\n    license_expiry_date: record.license_expiry_date\r\n  }\r\n  licenseModalVisible.value = true\r\n}\r\n\r\nconst handleHistory = (record) => {\r\n  currentHistoryAsset.value = record\r\n  historyModalVisible.value = true\r\n  loadLicenseHistory()\r\n}\r\nconst handleBatchDelete = () => {\r\n  Modal.confirm({\r\n    title: '确认批量删除',\r\n    content: `确定要删除选中的 ${selectedItems.value.length} 项软件资产吗？`,\r\n    okText: '确定',\r\n    cancelText: '取消',\r\n    onOk: async () => {\r\n      try {\r\n        const ids = selectedItems.value.map(item => item.id)\r\n        await softwareAssetApi.batchDelete({ ids })\r\n        message.success('批量删除成功')\r\n        selectedItems.value = []\r\n        selectedRowKeys.value = []\r\n        fetchData()\r\n      } catch (error) {\r\n        message.error('批量删除失败：' + (error.message || '未知错误'))\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nconst handleBatchExport = async () => {\r\n  try {\r\n    loading.value = true\r\n    const ids = selectedItems.value.map(item => item.id)\r\n    const response = await softwareAssetApi.export({ ids })\r\n    \r\n    // 创建下载链接\r\n    const blob = new Blob([response.data], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const link = document.createElement('a')\r\n    link.href = url\r\n    link.download = `软件资产数据_选中项_${formatDate(new Date(), 'YYYY-MM-DD')}.xlsx`\r\n    link.click()\r\n    window.URL.revokeObjectURL(url)\r\n    \r\n    message.success('批量导出成功')\r\n  } catch (error) {\r\n    message.error('批量导出失败：' + (error.message || '未知错误'))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst handleExport = async () => {\r\n  try {\r\n    loading.value = true\r\n    const params = { ...searchForm }\r\n    \r\n    // 过滤空值\r\n    Object.keys(params).forEach(key => {\r\n      if (params[key] === '' || params[key] === null || params[key] === undefined) {\r\n        delete params[key]\r\n      }\r\n    })\r\n\r\n    const response = await softwareAssetApi.export(params)\r\n    \r\n    // 创建下载链接\r\n    const blob = new Blob([response.data], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const link = document.createElement('a')\r\n    link.href = url\r\n    link.download = `软件资产数据_${formatDate(new Date(), 'YYYY-MM-DD')}.xlsx`\r\n    link.click()\r\n    window.URL.revokeObjectURL(url)\r\n    \r\n    message.success('导出成功')\r\n  } catch (error) {\r\n    message.error('导出失败：' + (error.message || '未知错误'))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 新增\r\nconst showAddDialog = () => {\r\n  currentItem.value = {}\r\n  isEdit.value = false\r\n  formDialogVisible.value = true\r\n}\r\n\r\n// 导出数据\r\nconst exportData = async () => {\r\n  try {\r\n    loading.value = true\r\n    const params = { ...searchForm }\r\n    \r\n    // 过滤空值\r\n    Object.keys(params).forEach(key => {\r\n      if (params[key] === '' || params[key] === null || params[key] === undefined) {\r\n        delete params[key]\r\n      }\r\n    })\r\n\r\n    const response = await softwareAssetApi.export(params)\r\n    \r\n    // 创建下载链接\r\n    const blob = new Blob([response.data], { \r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n    })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const link = document.createElement('a')\r\n    link.href = url\r\n    link.download = `软件资产数据_${formatDate(new Date(), 'YYYY-MM-DD')}.xlsx`\r\n    link.click()\r\n    window.URL.revokeObjectURL(url)\r\n    \r\n    message.success('导出成功')\r\n  } catch (error) {\r\n    message.error('导出失败：' + (error.message || '未知错误'))\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\n// 显示导入对话框\r\nconst showImportDialog = () => {\r\n  importDialogVisible.value = true\r\n}\r\n\r\n// 显示扫描配置\r\nconst showScanConfig = () => {\r\n  if (monitoringActionsRef.value) {\r\n    monitoringActionsRef.value.showScanConfig()\r\n  }\r\n}\r\n\r\n// 许可证处理\r\nconst handleLicenseCancel = () => {\r\n  licenseModalVisible.value = false\r\n  licenseFormData.value = {}\r\n}\r\n\r\nconst handleLicenseConfirm = async () => {\r\n  try {\r\n    await softwareAssetApi.updateLicense(currentItem.value.id, licenseFormData.value)\r\n    message.success('许可证信息更新成功')\r\n    licenseModalVisible.value = false\r\n    fetchData()\r\n  } catch (error) {\r\n    message.error('许可证信息更新失败：' + (error.message || '未知错误'))\r\n  }\r\n}\r\n\r\n// 历史记录加载函数\r\nconst loadLicenseHistory = async () => {\r\n  if (!currentHistoryAsset.value) return\r\n  \r\n  try {\r\n    licenseHistoryLoading.value = true\r\n    const response = await softwareAssetApi.getLicenseHistory(currentHistoryAsset.value.id)\r\n    licenseHistory.value = response.data || []\r\n  } catch (error) {\r\n    message.error('加载许可证历史记录失败：' + (error.message || '未知错误'))\r\n  } finally {\r\n    licenseHistoryLoading.value = false\r\n  }\r\n}\r\n\r\nconst loadVersionHistory = async () => {\r\n  if (!currentHistoryAsset.value) return\r\n  \r\n  try {\r\n    versionHistoryLoading.value = true\r\n    const response = await softwareAssetApi.getVersionHistory(currentHistoryAsset.value.id)\r\n    versionHistory.value = response.data || []\r\n  } catch (error) {\r\n    message.error('加载版本历史记录失败：' + (error.message || '未知错误'))\r\n  } finally {\r\n    versionHistoryLoading.value = false\r\n  }\r\n}\r\n\r\n// 表单成功回调\r\nconst handleFormSuccess = () => {\r\n  fetchData()\r\n}\r\n\r\n// 导入成功回调\r\nconst handleImportSuccess = () => {\r\n  fetchData()\r\n}\r\n\r\n// 获取字典数据\r\nconst fetchDictionaryData = async () => {\r\n  try {\r\n    const [assetStatusRes, softwareTypeRes] = await Promise.all([\r\n      dictionaryAPI.getDictionaryByCategory('asset_status'),\r\n      dictionaryAPI.getDictionaryByCategory('software_type')\r\n    ])\r\n    \r\n    if (assetStatusRes.data && assetStatusRes.data.results) {\r\n      assetStatusOptions.value = assetStatusRes.data.results.map(item => ({\r\n        value: item.value,\r\n        label: item.label\r\n      }))\r\n    }\r\n    \r\n    if (softwareTypeRes.data && softwareTypeRes.data.results) {\r\n      softwareTypeOptions.value = softwareTypeRes.data.results.map(item => ({\r\n        value: item.value,\r\n        label: item.label\r\n      }))\r\n    }\r\n  } catch (error) {\r\n    console.error('获取字典数据失败:', error)\r\n    message.error('获取字典数据失败')\r\n  }\r\n}\r\n\r\n// 获取软件类型文本\r\nconst getSoftwareTypeText = (type) => {\r\n  const option = softwareTypeOptions.value.find(item => item.value === type)\r\n  return option ? option.label : '未知'\r\n}\r\n\r\nconst assetCount = async () => {\r\n  const res = await softwareAssetApi.getStatusCount() \r\n  assetStatusCount.value = res.data.data ;\r\n}\r\n\r\n// 生命周期\r\nonMounted(() => {\r\n  fetchDictionaryData() ;\r\n  fetchData() ;\r\n  assetCount()  ;\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.software-asset-list-container {\r\n  min-height: 100vh;\r\n}\r\n\r\n.ant-table-wrapper {\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.search-form {\r\n  background: white;\r\n  padding: 24px;\r\n  border-radius: 6px;\r\n  margin-bottom: 16px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.batch-actions {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.statistics-cards {\r\n  display: flex;\r\n  gap: 16px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.history-section {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.history-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.history-header h4 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 表格样式 */\r\n:deep(.ant-table) {\r\n  border-radius: 0;\r\n}\r\n\r\n:deep(.ant-table-thead > tr > th) {\r\n  background-color: #f9fafb;\r\n  color: #374151;\r\n  font-weight: 500;\r\n  border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n:deep(.ant-table-tbody > tr:hover > td) {\r\n  background-color: #f9fafb;\r\n}\r\n\r\n:deep(.ant-table-tbody > tr > td) {\r\n  border-bottom: 1px solid #f3f4f6;\r\n}\r\n\r\n/* 按钮样式 */\r\n:deep(.ant-btn) {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn-primary) {\r\n  background-color: #3b82f6;\r\n  border-color: #3b82f6;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background-color: #2563eb;\r\n  border-color: #2563eb;\r\n}\r\n\r\n:deep(.ant-btn-danger) {\r\n  background-color: #ef4444;\r\n  border-color: #ef4444;\r\n}\r\n\r\n:deep(.ant-btn-danger:hover) {\r\n  background-color: #dc2626;\r\n  border-color: #dc2626;\r\n}\r\n\r\n/* 标签样式 */\r\n:deep(.ant-tag) {\r\n  border-radius: 4px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 表单样式 */\r\n:deep(.ant-form-item-label > label) {\r\n  font-weight: 500;\r\n  color: #374151;\r\n}\r\n\r\n/* 对话框样式 */\r\n:deep(.ant-modal) {\r\n  border-radius: 8px;\r\n}\r\n\r\n:deep(.ant-modal-header) {\r\n  border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n:deep(.ant-modal-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #1f2937;\r\n}\r\n\r\n:deep(.ant-modal-body) {\r\n  padding: 24px;\r\n}\r\n\r\n:deep(.ant-modal-footer) {\r\n  border-top: 1px solid #e5e7eb;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .software-asset-list {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .page-header {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .header-actions {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .search-section {\r\n    padding: 16px;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetForm.vue",["506","507","508"],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\routeGuard.js",["509"],"/**\r\n * 路由守卫 - 专门处理ResizeObserver和资源清理\r\n */\r\n\r\n// 全局资源清理函数\r\nexport const cleanupGlobalResources = () => {\r\n  console.log('执行全局资源清理...');\r\n  \r\n  try {\r\n    // 1. 清理所有定时器\r\n    const highestTimeoutId = setTimeout(function(){}, 1);\r\n    for (let i = 0; i < highestTimeoutId; i++) {\r\n      clearTimeout(i);\r\n    }\r\n    \r\n    const highestIntervalId = setInterval(function(){}, 1);\r\n    for (let i = 0; i < highestIntervalId; i++) {\r\n      clearInterval(i);\r\n    }\r\n    \r\n    // 2. 强制断开所有ResizeObserver\r\n    const allElements = document.querySelectorAll('*');\r\n    allElements.forEach(element => {\r\n      if (element._resizeObserver) {\r\n        try {\r\n          element._resizeObserver.disconnect();\r\n          delete element._resizeObserver;\r\n        } catch (error) {\r\n          // 静默处理\r\n        }\r\n      }\r\n    });\r\n    \r\n    // 3. 清理可能的事件监听器\r\n    const events = ['resize', 'scroll', 'load'];\r\n    events.forEach(eventType => {\r\n      const listeners = window[`__${eventType}_listeners__`];\r\n      if (listeners && Array.isArray(listeners)) {\r\n        listeners.forEach(listener => {\r\n          try {\r\n            window.removeEventListener(eventType, listener);\r\n          } catch (error) {\r\n            // 静默处理\r\n          }\r\n        });\r\n        window[`__${eventType}_listeners__`] = [];\r\n      }\r\n    });\r\n    \r\n    // 4. 强制垃圾回收提示（如果支持）\r\n    if (window.gc && typeof window.gc === 'function') {\r\n      window.gc();\r\n    }\r\n    \r\n    console.log('全局资源清理完成');\r\n  } catch (error) {\r\n    console.debug('全局资源清理时出错:', error.message);\r\n  }\r\n};\r\n\r\n// 路由切换前的清理\r\nexport const beforeRouteLeave = (to, from, next) => {\r\n  console.log(`路由切换: ${from.path} -> ${to.path}`);\r\n  \r\n  // 如果是从IP管理页面离开\r\n  if (from.path && from.path.includes('ip')) {\r\n    console.log('从IP管理页面离开，执行深度清理...');\r\n    \r\n    // 延迟执行清理，确保组件生命周期完成\r\n    setTimeout(() => {\r\n      cleanupGlobalResources();\r\n    }, 100);\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\n// 路由切换后的初始化\r\nexport const afterRouteEnter = (to, from) => {\r\n  console.log(`路由进入: ${to.path}`);\r\n  \r\n  // 如果是进入IP管理页面\r\n  if (to.path && to.path.includes('ip')) {\r\n    console.log('进入IP管理页面，重新初始化错误处理...');\r\n    \r\n    // 延迟重新初始化错误处理\r\n    setTimeout(() => {\r\n      if (window.suppressResizeObserverError) {\r\n        window.suppressResizeObserverError();\r\n      }\r\n    }, 200);\r\n  }\r\n};\r\n\r\n// 创建安全的路由切换处理器\r\nexport const createSafeRouteHandler = (router) => {\r\n  // 路由前置守卫\r\n  router.beforeEach((to, from, next) => {\r\n    beforeRouteLeave(to, from, next);\r\n  });\r\n  \r\n  // 路由后置守卫\r\n  router.afterEach((to, from) => {\r\n    afterRouteEnter(to, from);\r\n  });\r\n  \r\n  return router;\r\n};\r\n\r\nexport default {\r\n  cleanupGlobalResources,\r\n  beforeRouteLeave,\r\n  afterRouteEnter,\r\n  createSafeRouteHandler\r\n};","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\MonitoringCard.vue",["510","511"],"<template>\r\n  <a-card class=\"monitoring-card\" :bordered=\"false\">\r\n    <template #title>\r\n      <div class=\"card-header\">\r\n        <span class=\"card-title\">{{ card.title }}</span>\r\n        <div class=\"card-actions\">\r\n          <a-tooltip title=\"刷新数据\">\r\n            <a-button \r\n              type=\"text\" \r\n              size=\"small\" \r\n              @click=\"$emit('refresh', card.id)\"\r\n              :loading=\"refreshing\"\r\n            >\r\n              <ReloadOutlined />\r\n            </a-button>\r\n          </a-tooltip>\r\n        </div>\r\n      </div>\r\n    </template>\r\n    \r\n    <div class=\"card-content\">\r\n      <!-- 图表显示 -->\r\n      <div v-if=\"card.type === 'chart'\" class=\"chart-container\">\r\n        <div \r\n          v-for=\"(item, index) in card.data\" \r\n          :key=\"index\"\r\n          class=\"chart-item\"\r\n        >\r\n          <div class=\"item-info\">\r\n            <div class=\"item-name\">{{ item.name }}</div>\r\n            <div class=\"item-value\">{{ item.value }}{{ card.unit }}</div>\r\n          </div>\r\n          <div class=\"item-bar\">\r\n            <div \r\n              class=\"bar-fill\"\r\n              :style=\"{ \r\n                width: `${getPercentage(item.value)}%`,\r\n                backgroundColor: card.color \r\n              }\"\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 列表显示 -->\r\n      <div v-else-if=\"card.type === 'list'\" class=\"list-container\">\r\n        <div \r\n          v-for=\"(item, index) in card.data\" \r\n          :key=\"index\"\r\n          class=\"list-item\"\r\n        >\r\n          <div class=\"item-rank\">{{ index + 1 }}</div>\r\n          <div class=\"item-content\">\r\n            <div class=\"item-name\">{{ item.name }}</div>\r\n            <div class=\"item-detail\">{{ item.detail }}</div>\r\n          </div>\r\n          <div class=\"item-value\">{{ item.value }}{{ card.unit }}</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 空数据状态 -->\r\n      <div v-if=\"!card.data || card.data.length === 0\" class=\"empty-state\">\r\n        <InboxOutlined class=\"empty-icon\" />\r\n        <p>暂无数据</p>\r\n      </div>\r\n    </div>\r\n  </a-card>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport { ReloadOutlined, InboxOutlined } from '@ant-design/icons-vue';\r\n\r\nconst props = defineProps({\r\n  card: {\r\n    type: Object,\r\n    required: true\r\n  }\r\n});\r\n\r\nconst emit = defineEmits(['refresh']);\r\n\r\nconst refreshing = ref(false);\r\n\r\n// 计算百分比\r\nconst getPercentage = (value) => {\r\n  if (!props.card.data || props.card.data.length === 0) return 0;\r\n  \r\n  const maxValue = Math.max(...props.card.data.map(item => item.value));\r\n  return (value / maxValue) * 100;\r\n};\r\n\r\n// 处理刷新\r\nconst handleRefresh = async () => {\r\n  refreshing.value = true;\r\n  try {\r\n    emit('refresh', props.card.id);\r\n    // 模拟刷新延迟\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n  } finally {\r\n    refreshing.value = false;\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.monitoring-card {\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(24, 144, 255, 0.06);\r\n  border: 1px solid rgba(24, 144, 255, 0.04);\r\n  overflow: hidden;\r\n  height: 100%;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.monitoring-card:hover {\r\n  box-shadow: 0 4px 20px rgba(24, 144, 255, 0.1);\r\n  transform: translateY(-1px);\r\n}\r\n\r\n:deep(.monitoring-card .ant-card-head) {\r\n  background: linear-gradient(135deg, #f8faff 0%, #ffffff 100%);\r\n  border-bottom: 1px solid rgba(24, 144, 255, 0.08);\r\n  padding: 12px 16px;\r\n  min-height: auto;\r\n}\r\n\r\n:deep(.monitoring-card .ant-card-body) {\r\n  background: linear-gradient(135deg, #ffffff 0%, #fafbff 100%);\r\n  padding: 16px;\r\n  height: calc(100% - 60px);\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n\r\n.card-title {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #434343;\r\n}\r\n\r\n.card-actions {\r\n  display: flex;\r\n  gap: 4px;\r\n}\r\n\r\n.card-content {\r\n  height: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 图表样式 */\r\n.chart-container {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n}\r\n\r\n.chart-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 6px 0;\r\n}\r\n\r\n.item-info {\r\n  min-width: 80px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.item-name {\r\n  font-size: 12px;\r\n  color: #595959;\r\n  margin-bottom: 2px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.item-value {\r\n  font-size: 13px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.item-bar {\r\n  flex: 1;\r\n  height: 8px;\r\n  background: rgba(0, 0, 0, 0.04);\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\n\r\n.bar-fill {\r\n  height: 100%;\r\n  border-radius: 4px;\r\n  transition: width 0.6s ease;\r\n  position: relative;\r\n}\r\n\r\n.bar-fill::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 4px;\r\n  height: 100%;\r\n  background: rgba(255, 255, 255, 0.3);\r\n  border-radius: 0 4px 4px 0;\r\n}\r\n\r\n/* 列表样式 */\r\n.list-container {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 6px;\r\n}\r\n\r\n.list-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 8px 0;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.list-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.item-rank {\r\n  width: 20px;\r\n  height: 20px;\r\n  background: #1890ff;\r\n  color: white;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 11px;\r\n  font-weight: 600;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.item-content {\r\n  flex: 1;\r\n}\r\n\r\n.item-detail {\r\n  font-size: 11px;\r\n  color: #8c8c8c;\r\n  margin-top: 2px;\r\n}\r\n\r\n/* 空状态 */\r\n.empty-state {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #bfbfbf;\r\n}\r\n\r\n.empty-icon {\r\n  font-size: 32px;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.empty-state p {\r\n  font-size: 12px;\r\n  margin: 0;\r\n}\r\n\r\n/* 响应式 */\r\n@media (max-width: 768px) {\r\n  .chart-item {\r\n    gap: 8px;\r\n    padding: 4px 0;\r\n  }\r\n  \r\n  .item-info {\r\n    min-width: 70px;\r\n  }\r\n  \r\n  .item-name {\r\n    font-size: 11px;\r\n  }\r\n  \r\n  .item-value {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .item-bar {\r\n    height: 6px;\r\n  }\r\n  \r\n  .list-item {\r\n    gap: 8px;\r\n    padding: 6px 0;\r\n  }\r\n  \r\n  .item-rank {\r\n    width: 18px;\r\n    height: 18px;\r\n    font-size: 10px;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\DynamicMetrics.vue",["512"],"<template>\r\n  <div class=\"dynamic-metrics-container\">\r\n    <div \r\n      class=\"metrics-grid\" \r\n      :style=\"gridStyle\"\r\n    >\r\n      <MetricCard \r\n        v-for=\"(metric, index) in metricsData\" \r\n        :key=\"metric.id || index\"\r\n        :metric=\"metric\"\r\n        :style=\"getMetricAnimation(index)\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed, ref, onMounted } from 'vue';\r\nimport MetricCard from './MetricCard.vue';\r\n\r\nconst props = defineProps({\r\n  // JSON 配置数据\r\n  config: {\r\n    type: Object,\r\n    default: () => ({\r\n      grid: {\r\n        columns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n        gap: '24px',\r\n        responsive: {\r\n          mobile: 'repeat(1, 1fr)',\r\n          tablet: 'repeat(2, 1fr)'\r\n        }\r\n      },\r\n      animation: {\r\n        enabled: true,\r\n        delay: 0.1\r\n      }\r\n    })\r\n  },\r\n  \r\n  // 指标数据数组\r\n  metrics: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n\r\n  // 网格布局配置\r\n  gridColumns: {\r\n    type: String,\r\n    default: 'repeat(auto-fit, minmax(200px, 1fr))'\r\n  },\r\n\r\n  // 网格间距\r\n  gridGap: {\r\n    type: String,\r\n    default: '16px'\r\n  },\r\n\r\n  // 是否启用动画\r\n  enableAnimation: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n});\r\n\r\nconst emit = defineEmits(['metric-click', 'metrics-loaded']);\r\n\r\nconst metricsData = computed(() => {\r\n  if (props.metrics && props.metrics.length > 0) {\r\n    return props.metrics;\r\n  }\r\n  \r\n  return props.config.metrics || [];\r\n});\r\n\r\nconst gridStyle = computed(() => {\r\n  const columns = props.gridColumns || props.config.grid?.columns || 'repeat(auto-fit, minmax(200px, 1fr))';\r\n  const gap = props.gridGap || props.config.grid?.gap || '16px';\r\n  \r\n  return {\r\n    display: 'grid',\r\n    gridTemplateColumns: columns,\r\n    gap: gap\r\n  };\r\n});\r\n\r\nconst getMetricAnimation = (index) => {\r\n  const animationEnabled = props.enableAnimation && (props.config.animation?.enabled !== false);\r\n  \r\n  if (!animationEnabled) return {};\r\n  \r\n  const delay = (props.config.animation?.delay || 0.1) * index;\r\n  \r\n  return {\r\n    animation: `fadeIn 0.6s ease-out ${delay}s both`\r\n  };\r\n};\r\n\r\n// 从 API 获取数据的方法\r\nconst fetchMetrics = async (apiUrl) => {\r\n  try {\r\n    const response = await fetch(apiUrl);\r\n    const data = await response.json();\r\n    emit('metrics-loaded', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('获取指标数据失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 更新单个指标数据\r\nconst updateMetric = (metricId, newData) => {\r\n  const index = metricsData.value.findIndex(m => m.id === metricId);\r\n  if (index !== -1) {\r\n    Object.assign(metricsData.value[index], newData);\r\n  }\r\n};\r\n\r\n// 添加新指标\r\nconst addMetric = (metric) => {\r\n  metricsData.value.push(metric);\r\n};\r\n\r\n// 移除指标\r\nconst removeMetric = (metricId) => {\r\n  const index = metricsData.value.findIndex(m => m.id === metricId);\r\n  if (index !== -1) {\r\n    metricsData.value.splice(index, 1);\r\n  }\r\n};\r\n\r\n// 暴露方法给父组件使用\r\ndefineExpose({\r\n  fetchMetrics,\r\n  updateMetric,\r\n  addMetric,\r\n  removeMetric\r\n});\r\n\r\nonMounted(() => {\r\n  // 如果配置中有 API URL，自动获取数据\r\n  if (props.config.apiUrl) {\r\n    fetchMetrics(props.config.apiUrl);\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.dynamic-metrics-container {\r\n  width: 100%;\r\n}\r\n\r\n.metrics-grid {\r\n  animation: fadeIn 0.6s ease-out;\r\n}\r\n\r\n/* 动画效果 */\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .metrics-grid {\r\n    grid-template-columns: repeat(2, 1fr) !important;\r\n    gap: 12px !important;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .metrics-grid {\r\n    grid-template-columns: 1fr !important;\r\n    gap: 10px !important;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\webSocketIntegration.js",["513"],"/**\r\n * WebSocket集成模块\r\n * 处理用户登录时的WebSocket连接建立和踢出通知处理\r\n */\r\n\r\nimport websocketManager from './websocketManager';\r\nimport { message } from 'ant-design-vue';\r\n\r\nclass WebSocketIntegration {\r\n  constructor() {\r\n    this.isInitialized = false;\r\n    this.currentUser = null;\r\n    \r\n    // 绑定事件处理器\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * 初始化WebSocket集成\r\n   * 在用户登录后调用\r\n   */\r\n  initialize() {\r\n    if (this.isInitialized) {\r\n      console.log('WebSocket集成已初始化，跳过重复初始化');\r\n      \r\n      // 检查是否需要重新连接\r\n      const token = localStorage.getItem('token');\r\n      const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n      \r\n      if (token && isLoggedIn === 'true' && !websocketManager.isConnected()) {\r\n        console.log('检测到未连接，尝试重新连接WebSocket...');\r\n        this.connectWebSocket(token);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const token = localStorage.getItem('token');\r\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n    \r\n    if (token && isLoggedIn === 'true') {\r\n      console.log('初始化WebSocket连接...');\r\n      this.connectWebSocket(token);\r\n    } else {\r\n      console.log('用户未登录，跳过WebSocket初始化');\r\n    }\r\n    \r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * 建立WebSocket连接\r\n   * @param {string} token - 用户认证token\r\n   */\r\n  connectWebSocket(token) {\r\n    if (!token) {\r\n      console.warn('无法建立WebSocket连接：缺少token');\r\n      return;\r\n    }\r\n\r\n    // 如果已经有连接，先检查状态\r\n    if (websocketManager.isConnected()) {\r\n      console.log('WebSocket已连接，跳过重复连接');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('开始建立WebSocket连接...');\r\n      const success = websocketManager.connect(token);\r\n      if (success) {\r\n        console.log('WebSocket连接已启动');\r\n      } else {\r\n        console.log('WebSocket连接被跳过（可能已存在连接）');\r\n      }\r\n    } catch (error) {\r\n      console.error('启动WebSocket连接失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 断开WebSocket连接\r\n   */\r\n  disconnectWebSocket() {\r\n    try {\r\n      websocketManager.disconnect();\r\n      console.log('WebSocket连接已断开');\r\n    } catch (error) {\r\n      console.error('断开WebSocket连接失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置事件处理器\r\n   */\r\n  setupEventHandlers() {\r\n    // 连接建立事件\r\n    websocketManager.on('onConnected', (event) => {\r\n      console.log('WebSocket连接已建立');\r\n      \r\n      // 可以在这里添加连接成功的提示\r\n      // message.success({\r\n      //   content: '实时通信连接已建立',\r\n      //   duration: 2\r\n      // });\r\n    });\r\n\r\n    // 连接断开事件\r\n    websocketManager.on('onDisconnected', (event) => {\r\n      console.log('WebSocket连接已断开');\r\n      \r\n      // 如果是异常断开，可以提示用户\r\n      if (event.code !== 1000 && this.isLoggedIn()) {\r\n        console.warn('WebSocket连接异常断开，将尝试重连');\r\n      }\r\n    });\r\n\r\n    // 被踢出事件\r\n    websocketManager.on('onKickedOut', (data) => {\r\n      console.warn('收到踢出通知:', data);\r\n      this.handleKickedOut(data);\r\n    });\r\n\r\n    // 强制登出事件\r\n    websocketManager.on('onForceLogout', (data) => {\r\n      console.warn('收到强制登出通知:', data);\r\n      this.handleForceLogout(data);\r\n    });\r\n\r\n    // 连接错误事件\r\n    websocketManager.on('onError', (error) => {\r\n      console.error('WebSocket连接错误:', error);\r\n      \r\n      // 如果用户已登录但WebSocket连接失败，可以提示\r\n      if (this.isLoggedIn()) {\r\n        console.warn('实时通信连接出现问题，某些功能可能受到影响');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理被踢出通知\r\n   * @param {Object} data - 踢出通知数据\r\n   */\r\n  handleKickedOut(data) {\r\n    const { message: kickMessage, reason, kicked_by } = data;\r\n    \r\n    console.log('处理被踢出通知:', data);\r\n    console.log('kickMessage:', kickMessage);\r\n    console.log('reason:', reason);\r\n    console.log('kicked_by:', kicked_by);\r\n    console.log('即将显示倒计时提示');\r\n    \r\n    // 创建倒计时功能\r\n    this.showKickOutCountdown(kickMessage, reason, kicked_by);\r\n    \r\n    console.log('倒计时功能已启动');\r\n  }\r\n\r\n  /**\r\n   * 显示被踢出倒计时提示\r\n   * @param {string} kickMessage - 踢出消息\r\n   * @param {string} reason - 踢出原因\r\n   * @param {string} kicked_by - 操作者\r\n   */\r\n  showKickOutCountdown(kickMessage, reason, kicked_by) {\r\n    console.log('开始显示踢出倒计时提示');\r\n    console.log('参数:', { kickMessage, reason, kicked_by });\r\n    \r\n    let countdown = 5; // 5秒倒计时\r\n    \r\n    // 创建带倒计时的消息内容\r\n    const updateMessage = () => {\r\n      const messageObj = {\r\n        content: `${kickMessage} - ${countdown}秒后自动退出`,\r\n        description: `原因：${reason} (操作者：${kicked_by})`,\r\n        duration: 0, // 不自动消失\r\n        key: 'kick-out-notification', // 唯一标识符，用于更新消息\r\n        onClose: () => {\r\n          console.log('用户手动关闭踢出提示');\r\n          // 如果用户手动关闭，也要执行登出\r\n          this.performLogout('kicked');\r\n        }\r\n      };\r\n      console.log('生成的消息对象:', messageObj);\r\n      return messageObj;\r\n    };\r\n    \r\n    // 显示初始消息\r\n    console.log('显示初始踢出消息');\r\n    message.error(updateMessage());\r\n    console.log('初始消息已显示');\r\n    \r\n    // 开始倒计时\r\n    console.log('开始5秒倒计时');\r\n    const timer = setInterval(() => {\r\n      countdown--;\r\n      console.log(`倒计时: ${countdown}秒`);\r\n      \r\n      if (countdown > 0) {\r\n        // 更新消息\r\n        console.log('更新踢出消息');\r\n        message.error(updateMessage());\r\n      } else {\r\n        // 倒计时结束，清除定时器并执行登出\r\n        console.log('倒计时结束，清除定时器');\r\n        clearInterval(timer);\r\n        \r\n        // 显示最后一个消息\r\n        console.log('显示最后一个踢出消息');\r\n        message.error({\r\n          content: `${kickMessage} - 正在退出登录...`,\r\n          description: `原因：${reason} (操作者：${kicked_by})`,\r\n          duration: 2,\r\n          key: 'kick-out-notification'\r\n        });\r\n        \r\n        // 执行登出\r\n        console.log('即将执行登出操作');\r\n        setTimeout(() => {\r\n          this.performLogout('kicked');\r\n        }, 500);\r\n      }\r\n    }, 1000);\r\n    \r\n    console.log('倒计时定时器已设置');\r\n  }\r\n\r\n  /**\r\n   * 处理强制登出通知\r\n   * @param {Object} data - 强制登出通知数据\r\n   */\r\n  handleForceLogout(data) {\r\n    const { message: logoutMessage, reason } = data;\r\n    \r\n    console.log('处理强制登出通知:', data);\r\n    \r\n    // 创建倒计时功能\r\n    this.showForceLogoutCountdown(logoutMessage, reason);\r\n  }\r\n\r\n  /**\r\n   * 显示强制登出倒计时提示\r\n   * @param {string} logoutMessage - 登出消息\r\n   * @param {string} reason - 登出原因\r\n   */\r\n  showForceLogoutCountdown(logoutMessage, reason) {\r\n    let countdown = 5; // 5秒倒计时\r\n    \r\n    // 创建带倒计时的消息内容\r\n    const updateMessage = () => {\r\n      return {\r\n        content: `${logoutMessage} - ${countdown}秒后自动退出`,\r\n        description: `原因：${reason}`,\r\n        duration: 0, // 不自动消失\r\n        key: 'force-logout-notification', // 唯一标识符\r\n        onClose: () => {\r\n          // 如果用户手动关闭，也要执行登出\r\n          this.performLogout('force');\r\n        }\r\n      };\r\n    };\r\n    \r\n    // 显示初始消息\r\n    message.warning(updateMessage());\r\n    \r\n    // 开始倒计时\r\n    const timer = setInterval(() => {\r\n      countdown--;\r\n      \r\n      if (countdown > 0) {\r\n        // 更新消息\r\n        message.warning(updateMessage());\r\n      } else {\r\n        // 倒计时结束，清除定时器并执行登出\r\n        clearInterval(timer);\r\n        \r\n        // 显示最后一个消息\r\n        message.warning({\r\n          content: `${logoutMessage} - 正在退出登录...`,\r\n          description: `原因：${reason}`,\r\n          duration: 2,\r\n          key: 'force-logout-notification'\r\n        });\r\n        \r\n        // 执行登出\r\n        setTimeout(() => {\r\n          this.performLogout('force');\r\n        }, 500);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  /**\r\n   * 执行登出操作\r\n   * @param {string} reason - 登出原因\r\n   */\r\n  performLogout(reason = 'normal') {\r\n    console.log(`执行登出操作，原因：${reason}`);\r\n    \r\n    try {\r\n      // 断开WebSocket连接\r\n      this.disconnectWebSocket();\r\n      \r\n      // 清除本地存储的登录状态\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userInfo');\r\n      localStorage.removeItem('isLoggedIn');\r\n      localStorage.removeItem('userType');\r\n      localStorage.removeItem('username');\r\n      localStorage.removeItem('isAdmin');\r\n      localStorage.removeItem('userRole');\r\n      localStorage.removeItem('remember_user');\r\n      localStorage.removeItem('remember_mode');\r\n      \r\n      // 根据登出原因显示不同的消息\r\n      const messages = {\r\n        kicked: '', // 不再显示，因为已经在handleKickedOut中显示过了\r\n        force: '',  // 不再显示，因为已经在handleForceLogout中显示过了\r\n        normal: '已退出登录'\r\n      };\r\n      \r\n      // 只有在非WebSocket触发的登出情况下才显示消息\r\n      if (reason === 'normal') {\r\n        message.info({\r\n          content: messages[reason] || messages.normal,\r\n          duration: 2\r\n        });\r\n      }\r\n      \r\n      // 跳转到登录页面\r\n      setTimeout(() => {\r\n        window.location.href = '/#/login';\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.error('执行登出操作时出错:', error);\r\n      \r\n      // 即使出错也要强制跳转到登录页\r\n      setTimeout(() => {\r\n        window.location.href = '/#/login';\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查用户是否已登录\r\n   */\r\n  isLoggedIn() {\r\n    const token = localStorage.getItem('token');\r\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n    return token && isLoggedIn === 'true';\r\n  }\r\n\r\n  /**\r\n   * 获取WebSocket连接状态\r\n   */\r\n  getConnectionStatus() {\r\n    return websocketManager.getStatus();\r\n  }\r\n\r\n  /**\r\n   * 检查WebSocket是否已连接\r\n   */\r\n  isWebSocketConnected() {\r\n    return websocketManager.isConnected();\r\n  }\r\n\r\n  /**\r\n   * 发送WebSocket消息\r\n   * @param {Object} message - 消息对象\r\n   */\r\n  sendMessage(message) {\r\n    return websocketManager.send(message);\r\n  }\r\n\r\n  /**\r\n   * 添加自定义事件监听器\r\n   * @param {string} eventType - 事件类型\r\n   * @param {Function} callback - 回调函数\r\n   */\r\n  addEventListener(eventType, callback) {\r\n    websocketManager.on(eventType, callback);\r\n  }\r\n\r\n  /**\r\n   * 移除自定义事件监听器\r\n   * @param {string} eventType - 事件类型\r\n   * @param {Function} callback - 回调函数\r\n   */\r\n  removeEventListener(eventType, callback) {\r\n    websocketManager.off(eventType, callback);\r\n  }\r\n\r\n  /**\r\n   * 清理资源\r\n   */\r\n  cleanup() {\r\n    this.disconnectWebSocket();\r\n    this.isInitialized = false;\r\n    this.currentUser = null;\r\n  }\r\n\r\n  /**\r\n   * 重置 WebSocket 集成状态\r\n   * 用于新的登录会话\r\n   */\r\n  reset() {\r\n    console.log('重置 WebSocket 集成状态...');\r\n    this.disconnectWebSocket();\r\n    this.isInitialized = false;\r\n    this.currentUser = null;\r\n  }\r\n}\r\n\r\n// 创建全局WebSocket集成实例\r\nconst webSocketIntegration = new WebSocketIntegration();\r\n\r\n// 初始化逻辑已移到用户登录成功后的API调用中\r\n\r\nexport default webSocketIntegration;","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\admin\\CardManager.vue",["514","515","516","517","518"],"<template>\r\n  <a-modal\r\n    v-model:open=\"visible\"\r\n    title=\"监控卡片管理\"\r\n    width=\"800px\"\r\n    @ok=\"handleSave\"\r\n    @cancel=\"handleCancel\"\r\n  >\r\n    <div class=\"card-manager\">\r\n      <div class=\"manager-header\">\r\n        <div class=\"header-info\">\r\n          <span class=\"grid-info\">2×2田字格布局 | 最多显示4个TOP5监控卡片</span>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n          <a-button \r\n            type=\"primary\" \r\n            size=\"small\" \r\n            :disabled=\"cards.length >= 4\"\r\n            @click=\"addCard\"\r\n          >\r\n            <PlusOutlined /> 添加卡片 ({{ cards.length }}/4)\r\n          </a-button>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 2×2田字格预览 -->\r\n      <div class=\"grid-preview\">\r\n        <div \r\n          v-for=\"index in 4\" \r\n          :key=\"index\"\r\n          class=\"grid-slot\"\r\n          :class=\"{ \r\n            'has-card': cards[index - 1],\r\n            'drag-over': dragOverIndex === index - 1,\r\n            'valid-drop': isValidDropZone(index - 1)\r\n          }\"\r\n          @dragover.prevent=\"handleGridDragOver($event, index - 1)\"\r\n          @dragleave=\"handleGridDragLeave($event, index - 1)\"\r\n          @drop=\"handleGridDrop($event, index - 1)\"\r\n        >\r\n          <div \r\n            v-if=\"cards[index - 1]\" \r\n            class=\"preview-card\"\r\n            :class=\"{ 'dragging': dragSourceIndex === index - 1 }\"\r\n            draggable=\"true\"\r\n            @dragstart=\"handleCardDragStart($event, index - 1)\"\r\n            @dragend=\"handleCardDragEnd($event)\"\r\n          >\r\n            <div class=\"card-header\">\r\n              <span class=\"card-title\">\r\n                <HolderOutlined class=\"drag-handle\" />\r\n                {{ cards[index - 1].title }}\r\n              </span>\r\n              <div class=\"card-actions\">\r\n                <a-button \r\n                  type=\"text\" \r\n                  size=\"small\" \r\n                  @click.stop=\"editCard(index - 1)\"\r\n                >\r\n                  <EditOutlined />\r\n                </a-button>\r\n                <a-button \r\n                  type=\"text\" \r\n                  size=\"small\" \r\n                  danger\r\n                  @click.stop=\"removeCard(index - 1)\"\r\n                >\r\n                  <DeleteOutlined />\r\n                </a-button>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-content\">\r\n              <div class=\"chart-mini\">\r\n                <div \r\n                  v-for=\"item in cards[index - 1].data.slice(0, 3)\" \r\n                  :key=\"item.name\"\r\n                  class=\"mini-bar\"\r\n                >\r\n                  <span class=\"mini-label\">{{ item.name }}</span>\r\n                  <div class=\"mini-value\">{{ item.value }}{{ cards[index - 1].unit }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div v-else class=\"empty-slot\">\r\n            <PlusOutlined class=\"add-icon\" />\r\n            <span>空位置</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 卡片列表管理 -->\r\n    </div>\r\n    \r\n    <!-- 卡片配置弹窗 -->\r\n    <CardConfigModal\r\n      v-model:open=\"configModalVisible\"\r\n      :card-data=\"currentEditCard\"\r\n      @save=\"handleSaveCard\"\r\n    />\r\n  </a-modal>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, watch, computed } from 'vue';\r\nimport {\r\n  PlusOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  HolderOutlined\r\n} from '@ant-design/icons-vue';\r\nimport CardConfigModal from './CardConfigModal.vue';\r\n\r\nconst props = defineProps({\r\n  open: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  modelValue: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  showAlertCard: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  showMetricsCard: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  alertData: {\r\n    type: Array,\r\n    default: () => []\r\n  }\r\n});\r\n\r\nconst emit = defineEmits(['update:open', 'update:modelValue', 'update:showAlertCard', 'update:showMetricsCard', 'save']);\r\n\r\n// 响应式数据\r\nconst visible = ref(false);\r\nconst cards = ref([]);\r\nconst configModalVisible = ref(false);\r\nconst currentEditCard = ref({});\r\nconst dragIndex = ref(-1);\r\nconst dragSourceIndex = ref(-1);\r\nconst dragOverIndex = ref(-1);\r\n\r\n// 监听弹窗显示状态\r\nwatch(() => props.open, (newVal) => {\r\n  visible.value = newVal;\r\n  if (newVal) {\r\n    loadCards();\r\n  }\r\n});\r\n\r\nwatch(visible, (newVal) => {\r\n  emit('update:open', newVal);\r\n});\r\n\r\n// 加载卡片数据\r\nconst loadCards = () => {\r\n  cards.value = [...props.modelValue];\r\n};\r\n\r\n// 添加新卡片\r\nconst addCard = () => {\r\n  if (cards.value.length >= 4) {\r\n    return;\r\n  }\r\n  \r\n  currentEditCard.value = {\r\n    id: `card_${Date.now()}`,\r\n    title: 'CPU使用率 TOP5',\r\n    type: 'chart',\r\n    chartType: 'bar',\r\n    dataType: 'cpu',\r\n    unit: '%',\r\n    color: '#ff7875',\r\n    refreshInterval: 60,\r\n    data: [\r\n      { name: 'web-server-01', value: 85.2 },\r\n      { name: 'db-server-02', value: 78.5 },\r\n      { name: 'app-server-03', value: 72.8 },\r\n      { name: 'proxy-server-01', value: 68.3 },\r\n      { name: 'cache-server-01', value: 65.7 }\r\n    ]\r\n  };\r\n  \r\n  configModalVisible.value = true;\r\n};\r\n\r\n// 编辑卡片\r\nconst editCard = (index) => {\r\n  currentEditCard.value = { ...cards.value[index] };\r\n  currentEditCard.value.index = index;\r\n  configModalVisible.value = true;\r\n};\r\n\r\n// 删除卡片\r\nconst removeCard = (index) => {\r\n  cards.value.splice(index, 1);\r\n  saveChanges();\r\n};\r\n\r\n// 保存卡片配置\r\nconst handleSaveCard = (cardConfig) => {\r\n  if (cardConfig.index !== undefined) {\r\n    // 编辑现有卡片\r\n    cards.value[cardConfig.index] = { ...cardConfig };\r\n    delete cards.value[cardConfig.index].index;\r\n  } else {\r\n    // 添加新卡片\r\n    if (cards.value.length < 4) {\r\n      cards.value.push(cardConfig);\r\n    }\r\n  }\r\n  \r\n  saveChanges();\r\n  configModalVisible.value = false;\r\n};\r\n\r\n// 田字格卡片拖拽开始\r\nconst handleCardDragStart = (event, sourceIndex) => {\r\n  dragSourceIndex.value = sourceIndex;\r\n  event.dataTransfer.effectAllowed = 'move';\r\n  event.dataTransfer.setData('text/plain', sourceIndex.toString());\r\n};\r\n\r\n// 田字格卡片拖拽结束\r\nconst handleCardDragEnd = (event) => {\r\n  dragSourceIndex.value = -1;\r\n  dragOverIndex.value = -1;\r\n};\r\n\r\n// 田字格拖拽悬停\r\nconst handleGridDragOver = (event, targetIndex) => {\r\n  event.preventDefault();\r\n  if (dragSourceIndex.value !== -1 && dragSourceIndex.value !== targetIndex) {\r\n    dragOverIndex.value = targetIndex;\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }\r\n};\r\n\r\n// 田字格拖拽离开\r\nconst handleGridDragLeave = (event, targetIndex) => {\r\n  if (dragOverIndex.value === targetIndex) {\r\n    dragOverIndex.value = -1;\r\n  }\r\n};\r\n\r\n// 田字格拖拽放置\r\nconst handleGridDrop = (event, targetIndex) => {\r\n  event.preventDefault();\r\n  \r\n  const sourceIndex = dragSourceIndex.value;\r\n  if (sourceIndex !== -1 && sourceIndex !== targetIndex) {\r\n    // 交换位置\r\n    const draggedCard = cards.value[sourceIndex];\r\n    const targetCard = cards.value[targetIndex];\r\n    \r\n    if (targetCard) {\r\n      // 交换两个卡片的位置\r\n      cards.value[sourceIndex] = targetCard;\r\n      cards.value[targetIndex] = draggedCard;\r\n    } else {\r\n      // 移动到空位置\r\n      cards.value[targetIndex] = draggedCard;\r\n      cards.value[sourceIndex] = undefined;\r\n      // 清理数组中的undefined\r\n      cards.value = cards.value.filter(card => card !== undefined);\r\n    }\r\n    \r\n    saveChanges();\r\n  }\r\n  \r\n  dragSourceIndex.value = -1;\r\n  dragOverIndex.value = -1;\r\n};\r\n\r\n// 检查是否是有效的放置区域\r\nconst isValidDropZone = (targetIndex) => {\r\n  return dragSourceIndex.value !== -1 && dragSourceIndex.value !== targetIndex;\r\n};\r\n\r\n// 拖拽开始\r\nconst handleDragStart = (event, index) => {\r\n  dragIndex.value = index;\r\n  event.dataTransfer.effectAllowed = 'move';\r\n};\r\n\r\n// 拖拽放置（列表拖拽到田字格）\r\nconst handleDrop = (event, targetIndex) => {\r\n  event.preventDefault();\r\n  \r\n  if (dragIndex.value !== -1 && dragIndex.value !== targetIndex) {\r\n    // 交换位置\r\n    const draggedCard = cards.value[dragIndex.value];\r\n    const targetCard = cards.value[targetIndex];\r\n    \r\n    if (targetCard) {\r\n      // 交换两个卡片的位置\r\n      cards.value[dragIndex.value] = targetCard;\r\n      cards.value[targetIndex] = draggedCard;\r\n    } else {\r\n      // 移动到空位置\r\n      cards.value[targetIndex] = draggedCard;\r\n      cards.value.splice(dragIndex.value, 1);\r\n    }\r\n    \r\n    saveChanges();\r\n  }\r\n  \r\n  dragIndex.value = -1;\r\n};\r\n\r\n// 保存更改\r\nconst saveChanges = () => {\r\n  emit('update:modelValue', cards.value);\r\n  emit('save', {\r\n    cards: cards.value,\r\n    showAlert: props.showAlertCard,\r\n    showMetrics: props.showMetricsCard\r\n  });\r\n};\r\n\r\n// 确认保存\r\nconst handleSave = () => {\r\n  saveChanges();\r\n  visible.value = false;\r\n};\r\n\r\n// 取消\r\nconst handleCancel = () => {\r\n  visible.value = false;\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.card-manager {\r\n  padding: 0;\r\n}\r\n\r\n.manager-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n  padding-bottom: 12px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.header-info {\r\n  flex: 1;\r\n}\r\n\r\n.grid-info {\r\n  color: #666;\r\n  font-size: 12px;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n/* 2×2网格预览 */\r\n.grid-preview {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr;\r\n  gap: 16px;\r\n  height: 400px;\r\n  margin-bottom: 24px;\r\n  background: #fafafa;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.grid-slot {\r\n  border: 2px dashed #d9d9d9;\r\n  border-radius: 8px;\r\n  background: #fff;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.grid-slot:hover {\r\n  border-color: #1890ff;\r\n  background: #f0f8ff;\r\n}\r\n\r\n.grid-slot.has-card {\r\n  border-style: solid;\r\n  border-color: #1890ff;\r\n  background: #fff;\r\n}\r\n\r\n.grid-slot.drag-over {\r\n  border-color: #52c41a !important;\r\n  background: #f6ffed !important;\r\n  border-style: solid !important;\r\n  transform: scale(1.02);\r\n  box-shadow: 0 4px 12px rgba(82, 196, 26, 0.3);\r\n}\r\n\r\n.grid-slot.valid-drop {\r\n  border-color: #faad14;\r\n  background: #fffbe6;\r\n  border-style: dashed;\r\n}\r\n\r\n/* 预览卡片 */\r\n.preview-card {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n  cursor: grab;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.preview-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 16px rgba(24, 144, 255, 0.15);\r\n}\r\n\r\n.preview-card:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n.preview-card.dragging {\r\n  opacity: 0.5;\r\n  transform: rotate(2deg) scale(0.95);\r\n  box-shadow: 0 8px 24px rgba(24, 144, 255, 0.3);\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 8px 12px;\r\n  background: rgba(24, 144, 255, 0.05);\r\n  border-bottom: 1px solid rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n.card-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  color: #262626;\r\n  flex: 1;\r\n}\r\n\r\n.drag-handle {\r\n  color: #1890ff;\r\n  cursor: grab;\r\n  font-size: 10px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.drag-handle:hover {\r\n  color: #40a9ff;\r\n  transform: scale(1.2);\r\n}\r\n\r\n.drag-handle:active {\r\n  cursor: grabbing;\r\n  color: #096dd9;\r\n}\r\n\r\n.card-actions {\r\n  display: flex;\r\n  gap: 4px;\r\n}\r\n\r\n.card-content {\r\n  flex: 1;\r\n  padding: 8px 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n\r\n/* 图表预览 */\r\n.chart-mini {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.mini-bar {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 10px;\r\n}\r\n\r\n.mini-label {\r\n  width: 60px;\r\n  color: #666;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.mini-value {\r\n  font-weight: 500;\r\n  color: #1890ff;\r\n}\r\n\r\n/* 空位置样式 */\r\n.empty-slot {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #bbb;\r\n  font-size: 12px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.grid-slot.drag-over .empty-slot {\r\n  color: #52c41a;\r\n}\r\n\r\n.add-icon {\r\n  font-size: 24px;\r\n  margin-bottom: 8px;\r\n  color: #d9d9d9;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.grid-slot.drag-over .add-icon {\r\n  color: #52c41a;\r\n  transform: scale(1.2);\r\n}\r\n\r\n/* 卡片列表管理 */\r\n.card-list {\r\n  border-top: 1px solid #f0f0f0;\r\n  padding-top: 20px;\r\n}\r\n\r\n.card-list h4 {\r\n  margin: 0 0 16px 0;\r\n  font-size: 14px;\r\n  color: #262626;\r\n  font-weight: 600;\r\n}\r\n\r\n.list-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n  max-height: 200px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.list-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 12px;\r\n  background: #fafafa;\r\n  border: 1px solid #f0f0f0;\r\n  border-radius: 6px;\r\n  cursor: grab;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.list-item:hover {\r\n  background: #f0f8ff;\r\n  border-color: #1890ff;\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.15);\r\n}\r\n\r\n.list-item:active {\r\n  cursor: grabbing;\r\n}\r\n\r\n.item-title {\r\n  flex: 1;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  color: #262626;\r\n}\r\n\r\n.item-type {\r\n  font-size: 11px;\r\n  color: #666;\r\n  background: #f0f0f0;\r\n  padding: 2px 6px;\r\n  border-radius: 3px;\r\n}\r\n\r\n.item-actions {\r\n  display: flex;\r\n  gap: 4px;\r\n}\r\n\r\n.empty-list {\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n  color: #bbb;\r\n  font-size: 12px;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .grid-preview {\r\n    height: 300px;\r\n    gap: 12px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .manager-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .header-actions {\r\n    align-self: stretch;\r\n    justify-content: flex-end;\r\n  }\r\n  \r\n  .card-header {\r\n    padding: 6px 8px;\r\n  }\r\n  \r\n  .card-title {\r\n    font-size: 11px;\r\n  }\r\n  \r\n  .card-content {\r\n    padding: 6px 8px;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\TemplateDrawer.vue",["519"],"<template>\r\n  <a-drawer\r\n    :open=\"visible\"\r\n    title=\"选择监控模板\"\r\n    width=\"1200\"\r\n    placement=\"right\"\r\n    :onClose=\"handleClose\"\r\n    @update:open=\"$emit('update:visible', $event)\"\r\n  >\r\n    <template #extra>\r\n      <a-space>\r\n        <a-button @click=\"handleClose\">取消</a-button>\r\n        <a-button \r\n          type=\"primary\" \r\n          @click=\"handleCreateMonitoring\"\r\n          :loading=\"monitoringCreating\"\r\n          :disabled=\"selectedTemplateIds.length === 0\"\r\n        >\r\n          启用监控 ({{ selectedTemplateIds.length }})\r\n        </a-button>\r\n      </a-space>\r\n    </template>\r\n\r\n    <div v-if=\"selectedIP\" class=\"template-drawer-content\">\r\n      <!-- 模板搜索和筛选 -->\r\n      <div class=\"template-search-section\">\r\n        <div class=\"search-bar\">\r\n          <a-input-search\r\n            v-model:value=\"templateSearchKeyword\"\r\n            placeholder=\"搜索模板名称...\"\r\n            @search=\"handleTemplateSearch\"\r\n            @pressEnter=\"handleTemplateSearch\"\r\n            allow-clear\r\n            size=\"large\"\r\n          />\r\n        </div>\r\n        \r\n        <!-- 分类筛选 -->\r\n        <div class=\"category-filter\">\r\n          <a-space wrap>\r\n            <a-tag\r\n              v-for=\"(stats, category) in categoryStats\"\r\n              :key=\"safeCategoryToString(category)\"\r\n              :color=\"selectedCategory === safeCategoryToString(category) ? 'blue' : 'default'\"\r\n              :class=\"{ 'category-tag-selected': selectedCategory === safeCategoryToString(category) }\"\r\n              @click=\"toggleCategoryFilter(category)\"\r\n              class=\"category-filter-tag\"\r\n            >\r\n              <component :is=\"getCategoryIcon(category)\" class=\"category-filter-icon\" />\r\n              {{ safeCategoryToString(category).replace(/^\\S+ /, '') }}\r\n              <span class=\"category-count\">({{ Number(stats?.count) || 0 }})</span>\r\n              <span v-if=\"Number(stats?.selected) > 0\" class=\"category-selected\">✓{{ Number(stats.selected) }}</span>\r\n            </a-tag>\r\n            <a-tag \r\n              v-if=\"selectedCategory\"\r\n              color=\"red\"\r\n              @click=\"clearCategoryFilter\"\r\n              class=\"clear-filter-tag\"\r\n            >\r\n              清除筛选\r\n            </a-tag>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 模板列表 -->\r\n      <div class=\"template-list\">\r\n        <a-spin :spinning=\"templateLoading\" tip=\"正在加载模板...\">\r\n          <div v-if=\"Object.keys(groupedTemplates).length === 0\" class=\"empty-templates\">\r\n            <a-empty description=\"暂无可用模板\" />\r\n          </div>\r\n          \r\n          <div v-else>\r\n            <!-- 已选模板提示 -->\r\n            <div v-if=\"selectedTemplateIds.length > 0\" class=\"selected-templates-info\">\r\n              <a-alert\r\n                :message=\"`已选择 ${selectedTemplateIds.length} 个模板`\"\r\n                type=\"info\"\r\n                show-icon\r\n                closable\r\n                @close=\"selectedTemplateIds = []\"\r\n              />\r\n            </div>\r\n\r\n            <!-- 按分类展示模板 -->\r\n            <div \r\n              v-for=\"(templates, category) in filteredTemplates\" \r\n              :key=\"category\" \r\n              class=\"template-category\"\r\n            >\r\n              <div class=\"category-header\">\r\n                <div class=\"category-title-wrapper\">\r\n                  <component :is=\"getCategoryIcon(category)\" class=\"category-icon\" />\r\n                  <h4 class=\"category-title\">{{ safeCategoryToString(category) }}</h4>\r\n                  <div class=\"category-stats\">\r\n                    <a-badge \r\n                      :count=\"Number(categoryStats[safeCategoryToString(category)]?.count) || 0\" \r\n                      :number-style=\"{ backgroundColor: '#f0f0f0', color: '#666' }\"\r\n                    />\r\n                    <a-badge \r\n                      v-if=\"Number(categoryStats[safeCategoryToString(category)]?.selected) > 0\"\r\n                      :count=\"Number(categoryStats[safeCategoryToString(category)]?.selected)\" \r\n                      :number-style=\"{ backgroundColor: '#1890ff', color: '#fff' }\"\r\n                      class=\"selected-badge\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <a-button\r\n                  v-if=\"Number(categoryStats[safeCategoryToString(category)]?.count) > 0\"\r\n                  type=\"text\"\r\n                  size=\"small\"\r\n                  @click=\"toggleCategoryExpand(category)\"\r\n                  class=\"expand-button\"\r\n                >\r\n                  <UpOutlined v-if=\"isCategoryExpanded(category)\" />\r\n                  <DownOutlined v-else />\r\n                </a-button>\r\n              </div>\r\n              <transition name=\"collapse\">\r\n                <div class=\"template-grid-wrapper\" v-show=\"isCategoryExpanded(category)\">\r\n                  <div class=\"template-grid\">\r\n                    <TemplateCard\r\n                      v-for=\"template in templates\" \r\n                      :key=\"template.templateid\"\r\n                      :template=\"template\"\r\n                      :selected=\"selectedTemplateIds.includes(template.templateid)\"\r\n                      @select=\"handleTemplateSelect\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </transition>\r\n            </div>\r\n          </div>\r\n        </a-spin>\r\n      </div>\r\n    </div>\r\n  </a-drawer>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, watch, nextTick, h } from 'vue';\r\nimport { message, Modal } from 'ant-design-vue';\r\nimport { ipAPI } from '@/api';\r\nimport TemplateCard from './TemplateCard.vue';\r\nimport {\r\n  UpOutlined,\r\n  DownOutlined,\r\n  DatabaseOutlined,\r\n  CloudOutlined,\r\n  SettingOutlined,\r\n  MonitorOutlined,\r\n  SecurityScanOutlined,\r\n  AppstoreOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// Props\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  selectedIP: {\r\n    type: Object,\r\n    default: null\r\n  }\r\n});\r\n\r\n// Emits\r\nconst emit = defineEmits(['update:visible', 'monitoring-created']);\r\n\r\n// 响应式数据\r\nconst zabbixTemplates = ref([]);\r\nconst selectedTemplateIds = ref([]);\r\nconst templateLoading = ref(false);\r\nconst templateSearchKeyword = ref('');\r\nconst monitoringCreating = ref(false);\r\nconst selectedCategory = ref('');\r\nconst expandedCategories = ref({});\r\n\r\n// 计算属性\r\nconst groupedTemplates = computed(() => {\r\n  if (!Array.isArray(zabbixTemplates.value)) {\r\n    return {};\r\n  }\r\n  \r\n  const grouped = {};\r\n  zabbixTemplates.value.forEach(template => {\r\n    const category = template.category || '其他';\r\n    if (!grouped[category]) {\r\n      grouped[category] = [];\r\n    }\r\n    grouped[category].push(template);\r\n  });\r\n  \r\n  return grouped;\r\n});\r\n\r\nconst filteredTemplates = computed(() => {\r\n  let filtered = { ...groupedTemplates.value };\r\n  \r\n  // 分类筛选\r\n  if (selectedCategory.value) {\r\n    const categoryKey = selectedCategory.value;\r\n    filtered = {\r\n      [categoryKey]: filtered[categoryKey] || []\r\n    };\r\n  }\r\n  \r\n  // 搜索筛选\r\n  if (templateSearchKeyword.value) {\r\n    const keyword = templateSearchKeyword.value.toLowerCase();\r\n    Object.keys(filtered).forEach(category => {\r\n      filtered[category] = filtered[category].filter(template => \r\n        template.name.toLowerCase().includes(keyword)\r\n      );\r\n      if (filtered[category].length === 0) {\r\n        delete filtered[category];\r\n      }\r\n    });\r\n  }\r\n  \r\n  return filtered;\r\n});\r\n\r\nconst categoryStats = computed(() => {\r\n  const stats = {};\r\n  \r\n  Object.keys(groupedTemplates.value).forEach(category => {\r\n    const templates = groupedTemplates.value[category];\r\n    const selectedCount = templates.filter(t => \r\n      selectedTemplateIds.value.includes(t.templateid)\r\n    ).length;\r\n    \r\n    stats[category] = {\r\n      count: templates.length,\r\n      selected: selectedCount\r\n    };\r\n  });\r\n  \r\n  return stats;\r\n});\r\n\r\n// 方法\r\nconst safeCategoryToString = (category) => {\r\n  if (category === null || category === undefined) {\r\n    return '其他';\r\n  }\r\n  return String(category);\r\n};\r\n\r\nconst getCategoryIcon = (category) => {\r\n  const categoryStr = safeCategoryToString(category).toLowerCase();\r\n  \r\n  if (categoryStr.includes('database') || categoryStr.includes('数据库')) {\r\n    return DatabaseOutlined;\r\n  } else if (categoryStr.includes('network') || categoryStr.includes('网络')) {\r\n    return CloudOutlined;\r\n  } else if (categoryStr.includes('system') || categoryStr.includes('系统')) {\r\n    return SettingOutlined;\r\n  } else if (categoryStr.includes('application') || categoryStr.includes('应用')) {\r\n    return AppstoreOutlined;\r\n  } else if (categoryStr.includes('security') || categoryStr.includes('安全')) {\r\n    return SecurityScanOutlined;\r\n  }\r\n  \r\n  return MonitorOutlined;\r\n};\r\n\r\nconst toggleCategoryFilter = (category) => {\r\n  const categoryStr = safeCategoryToString(category);\r\n  if (selectedCategory.value === categoryStr) {\r\n    selectedCategory.value = '';\r\n  } else {\r\n    selectedCategory.value = categoryStr;\r\n  }\r\n};\r\n\r\nconst clearCategoryFilter = () => {\r\n  selectedCategory.value = '';\r\n};\r\n\r\nconst toggleCategoryExpand = (category) => {\r\n  const categoryStr = safeCategoryToString(category);\r\n  expandedCategories.value[categoryStr] = !expandedCategories.value[categoryStr];\r\n};\r\n\r\nconst isCategoryExpanded = (category) => {\r\n  const categoryStr = safeCategoryToString(category);\r\n  return expandedCategories.value[categoryStr] !== false;\r\n};\r\n\r\nconst handleTemplateSelect = (templateId, checked) => {\r\n  if (checked) {\r\n    if (!selectedTemplateIds.value.includes(templateId)) {\r\n      selectedTemplateIds.value.push(templateId);\r\n    }\r\n  } else {\r\n    const index = selectedTemplateIds.value.indexOf(templateId);\r\n    if (index > -1) {\r\n      selectedTemplateIds.value.splice(index, 1);\r\n    }\r\n  }\r\n};\r\n\r\nconst handleTemplateSearch = async () => {\r\n  if (props.selectedIP) {\r\n    await loadZabbixTemplates(props.selectedIP.id);\r\n  }\r\n};\r\n\r\nconst loadZabbixTemplates = async (ipId) => {\r\n  templateLoading.value = true;\r\n  try {\r\n    const response = await ipAPI.getZabbixTemplates(ipId, templateSearchKeyword.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      zabbixTemplates.value = response.data.data.templates || [];\r\n      \r\n      // 初始化展开状态，默认展开所有分类\r\n      nextTick(() => {\r\n        try {\r\n          const categories = Object.keys(groupedTemplates.value || {});\r\n          categories.forEach(category => {\r\n            const categoryStr = String(category);\r\n            expandedCategories.value[categoryStr] = true;\r\n          });\r\n        } catch (error) {\r\n          console.warn('初始化展开状态错误:', error);\r\n        }\r\n      });\r\n      \r\n      console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\r\n    } else {\r\n      // 检查是否是Zabbix连接问题\r\n      if (response.data && response.data.message && response.data.message.includes('Zabbix API连接不可用')) {\r\n        // 显示详细的诊断信息\r\n        const errorMessage = '⚠️ Zabbix服务器连接失败';\r\n        const suggestions = [\r\n          '请检查Zabbix服务器是否正常运行',\r\n          '验证网络连接和防火墙设置',\r\n          '检查Zabbix API配置是否正确'\r\n        ];\r\n        \r\n        Modal.error({\r\n          title: '无法加载监控模板',\r\n          content: h('div', [\r\n            h('p', { style: 'margin-bottom: 16px;' }, errorMessage),\r\n            h('div', { style: 'background: #f5f5f5; padding: 12px; border-radius: 6px;' }, [\r\n              h('p', { style: 'margin: 0 0 8px 0; font-weight: 600;' }, '解决建议：'),\r\n              h('ul', { style: 'margin: 0; padding-left: 20px;' }, \r\n                suggestions.map(suggestion => \r\n                  h('li', { style: 'margin-bottom: 4px;' }, suggestion)\r\n                )\r\n              )\r\n            ])\r\n          ]),\r\n          width: 500\r\n        });\r\n      } else {\r\n        message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\r\n      }\r\n      \r\n      zabbixTemplates.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载模板列表失败:', error);\r\n    \r\n    // 检查是否是网络连接问题\r\n    if (error.message && (error.message.includes('Network Error') || error.message.includes('timeout'))) {\r\n      Modal.error({\r\n        title: '网络连接失败',\r\n        content: '无法连接到后端服务器，请检查网络连接和服务器状态。'\r\n      });\r\n    } else {\r\n      message.error(`加载模板列表失败: ${error.message}`);\r\n    }\r\n    \r\n    zabbixTemplates.value = [];\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\n\r\nconst handleCreateMonitoring = async () => {\r\n  if (!props.selectedIP) {\r\n    message.error('请先选择IP地址');\r\n    return;\r\n  }\r\n  \r\n  if (selectedTemplateIds.value.length === 0) {\r\n    message.error('请选择至少一个监控模板');\r\n    return;\r\n  }\r\n  \r\n  monitoringCreating.value = true;\r\n  \r\n  try {\r\n    const monitoringData = {\r\n      template_ids: selectedTemplateIds.value,\r\n      host_name: props.selectedIP.hostname || props.selectedIP.ip_address || props.selectedIP.ipAddress,\r\n      group_ids: [] // 使用默认主机组\r\n    };\r\n    \r\n    const response = await ipAPI.createMonitoring(props.selectedIP.id, monitoringData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('监控启用成功！');\r\n      emit('monitoring-created', props.selectedIP);\r\n      handleClose();\r\n    } else {\r\n      message.error(`启用监控失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('启用监控失败:', error);\r\n    message.error(`启用监控失败: ${error.message}`);\r\n  } finally {\r\n    monitoringCreating.value = false;\r\n  }\r\n};\r\n\r\nconst handleClose = () => {\r\n  emit('update:visible', false);\r\n  // 清理状态\r\n  selectedTemplateIds.value = [];\r\n  templateSearchKeyword.value = '';\r\n  selectedCategory.value = '';\r\n  expandedCategories.value = {};\r\n};\r\n\r\n// 监听props变化\r\nwatch(() => props.visible, (newVal) => {\r\n  if (newVal && props.selectedIP) {\r\n    loadZabbixTemplates(props.selectedIP.id);\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* 简洁抽屉内容 */\r\n.template-drawer-content {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: #f8fafc;\r\n}\r\n\r\n/* 简洁搜索区域 */\r\n.template-search-section {\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n}\r\n\r\n.search-bar {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* 简洁搜索输入框 */\r\n:deep(.ant-input-search) {\r\n  border-radius: 6px;\r\n}\r\n\r\n:deep(.ant-input-search .ant-input) {\r\n  border-radius: 6px 0 0 6px;\r\n  border: 1px solid #d1d5db;\r\n  background: #ffffff;\r\n  transition: all 0.2s ease;\r\n  height: 40px;\r\n  font-size: 14px;\r\n}\r\n\r\n:deep(.ant-input-search .ant-input:focus) {\r\n  border-color: #2563eb;\r\n  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\r\n}\r\n\r\n:deep(.ant-input-search .ant-input-search-button) {\r\n  border-radius: 0 6px 6px 0;\r\n  background: #2563eb;\r\n  border: 1px solid #2563eb;\r\n  height: 40px;\r\n  width: 40px;\r\n}\r\n\r\n:deep(.ant-input-search .ant-input-search-button:hover) {\r\n  background: #1d4ed8;\r\n  border-color: #1d4ed8;\r\n}\r\n\r\n/* 简洁分类过滤 */\r\n.category-filter {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 8px;\r\n  align-items: center;\r\n}\r\n\r\n.category-filter-tag {\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n  border-radius: 6px;\r\n  padding: 6px 12px;\r\n  font-weight: 500;\r\n  border: 1px solid #d1d5db;\r\n  background: #ffffff;\r\n  user-select: none;\r\n}\r\n\r\n.category-filter-tag:hover {\r\n  border-color: #2563eb;\r\n  color: #2563eb;\r\n}\r\n\r\n.category-tag-selected {\r\n  background: #2563eb !important;\r\n  color: white !important;\r\n  border-color: #2563eb !important;\r\n}\r\n\r\n.category-filter-icon {\r\n  font-size: 12px;\r\n}\r\n\r\n.category-count {\r\n  font-size: 11px;\r\n  opacity: 0.8;\r\n}\r\n\r\n.category-selected {\r\n  font-size: 10px;\r\n  background: #4ecdc4;\r\n  color: white;\r\n  padding: 1px 4px;\r\n  border-radius: 8px;\r\n  margin-left: 2px;\r\n}\r\n\r\n.clear-filter-tag {\r\n  cursor: pointer;\r\n  background: #dc2626 !important;\r\n  color: white !important;\r\n  border-color: #dc2626 !important;\r\n}\r\n\r\n.clear-filter-tag:hover {\r\n  background: #b91c1c !important;\r\n  border-color: #b91c1c !important;\r\n}\r\n\r\n/* 简洁模板列表 */\r\n.template-list {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 0 20px 20px;\r\n}\r\n\r\n.template-list::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.template-list::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n.template-list::-webkit-scrollbar-track {\r\n  display: none;\r\n}\r\n\r\n.template-list::-webkit-scrollbar-thumb {\r\n  display: none;\r\n}\r\n\r\n.template-list::-webkit-scrollbar-thumb:hover {\r\n  display: none;\r\n}\r\n\r\n/* 简洁空状态 */\r\n.empty-templates {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 300px;\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  border: 2px dashed #d1d5db;\r\n  color: #6b7280;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 简洁选中信息 */\r\n.selected-templates-info {\r\n  margin-bottom: 16px;\r\n  padding: 12px 16px;\r\n  background: #eff6ff;\r\n  border-radius: 6px;\r\n  border: 1px solid #bfdbfe;\r\n  color: #1e40af;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 简洁模板分类 */\r\n.template-category {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.category-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px 20px;\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  margin-bottom: 12px;\r\n  border: 1px solid #e2e8f0;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.category-header:hover {\r\n  border-color: #cbd5e1;\r\n}\r\n\r\n.category-title-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.category-icon {\r\n  font-size: 16px;\r\n  color: #2563eb;\r\n}\r\n\r\n.category-title {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #1f2937;\r\n}\r\n\r\n.category-stats {\r\n  display: flex;\r\n  gap: 12px;\r\n  align-items: center;\r\n}\r\n\r\n.selected-badge {\r\n  margin-left: 8px;\r\n  background: #10b981;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 6px;\r\n  padding: 2px 6px;\r\n  font-size: 11px;\r\n  font-weight: 500;\r\n}\r\n\r\n.expand-button {\r\n  padding: 6px;\r\n  height: auto;\r\n  min-width: auto;\r\n  border-radius: 6px;\r\n  border: 1px solid #d1d5db;\r\n  background: #ffffff;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.expand-button:hover {\r\n  border-color: #2563eb;\r\n  color: #2563eb;\r\n}\r\n\r\n/* 简洁模板网格 */\r\n.template-grid-wrapper {\r\n  overflow: hidden;\r\n  max-width: 100%;\r\n}\r\n\r\n.template-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  gap: 16px;\r\n  justify-content: start;\r\n}\r\n\r\n/* 折叠动画 */\r\n.collapse-enter-active,\r\n.collapse-leave-active {\r\n  transition: all 0.3s ease;\r\n  max-height: 1000px;\r\n  opacity: 1;\r\n}\r\n\r\n.collapse-enter-from,\r\n.collapse-leave-to {\r\n  max-height: 0;\r\n  opacity: 0;\r\n  transform: translateY(-10px);\r\n}\r\n\r\n/* 简洁模板卡片 */\r\n:deep(.template-card) {\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n  transition: all 0.2s ease;\r\n  overflow: hidden;\r\n}\r\n\r\n:deep(.template-card:hover) {\r\n  border-color: #cbd5e1;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n:deep(.template-card.selected) {\r\n  border-color: #2563eb;\r\n  background: #eff6ff;\r\n  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.15);\r\n}\r\n\r\n:deep(.template-card .ant-card-body) {\r\n  padding: 20px;\r\n}\r\n\r\n:deep(.template-card .ant-card-meta-title) {\r\n  font-weight: 700;\r\n  color: #2d3748;\r\n  font-size: 14px;\r\n}\r\n\r\n:deep(.template-card .ant-card-meta-description) {\r\n  color: #718096;\r\n  font-size: 12px;\r\n  line-height: 1.4;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1400px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 14px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 12px;\r\n  }\r\n  \r\n  .template-search-section {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .template-list {\r\n    padding: 0 20px 20px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .template-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .template-search-section {\r\n    padding: 16px;\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .template-list {\r\n    padding: 0 16px 16px;\r\n  }\r\n  \r\n  .category-header {\r\n    padding: 16px 20px;\r\n  }\r\n  \r\n  .category-filter {\r\n    gap: 8px;\r\n  }\r\n  \r\n  .category-filter-tag {\r\n    padding: 6px 12px;\r\n    font-size: 12px;\r\n  }\r\n}\r\n\r\n/* 简洁抽屉样式 */\r\n:deep(.ant-drawer-content) {\r\n  background: #f8fafc;\r\n}\r\n\r\n:deep(.ant-drawer-header) {\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #e2e8f0;\r\n  padding: 20px 24px;\r\n}\r\n\r\n:deep(.ant-drawer-title) {\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  color: #1f2937;\r\n}\r\n\r\n:deep(.ant-drawer-body) {\r\n  padding: 24px;\r\n}\r\n\r\n:deep(.ant-drawer-extra) {\r\n  gap: 8px;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\IPTable.vue",["520","521"],"<template>\r\n  <div class=\"ip-table-container\">\r\n    <!-- IP统计按钮组 -->\r\n    <div class=\"ip-stats-container\">\r\n      <div class=\"stats-header\">\r\n        <h3 class=\"page-title\">\r\n          <UnorderedListOutlined class=\"title-icon\" />\r\n          IP地址管理\r\n        </h3>\r\n        <div class=\"table-actions\">\r\n          <a-space size=\"middle\">\r\n            <a-button type=\"primary\" @click=\"handleAdd\">\r\n              <template #icon><PlusOutlined /></template>\r\n              新增IP\r\n            </a-button>\r\n            <a-button @click=\"handleScan\">\r\n              <template #icon><ScanOutlined /></template>\r\n              IP扫描\r\n            </a-button>\r\n            <a-button @click=\"handleExport\">\r\n              <template #icon><DownloadOutlined /></template>\r\n              导出数据\r\n            </a-button>\r\n            <a-divider type=\"vertical\" />\r\n            <a-tooltip title=\"批量Ping\">\r\n              <a-button @click=\"handleHeaderBatchPing\">\r\n                <template #icon><ApiOutlined /></template>\r\n              </a-button>\r\n            </a-tooltip>\r\n            <a-tooltip title=\"列表管理\">\r\n              <a-button @click=\"handleListManagement\">\r\n                <template #icon><UnorderedListOutlined /></template>\r\n              </a-button>\r\n            </a-tooltip>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- IP统计按钮组 -->\r\n      <div class=\"ip-stats-buttons\">\r\n        <div class=\"stats-button total\">\r\n          <div class=\"button-icon\">\r\n            <i class=\"anticon anticon-appstore\"></i>\r\n          </div>\r\n          <div class=\"button-content\">\r\n            <div class=\"button-title\">总IP</div>\r\n            <div class=\"button-count\">{{ totalCount || 0 }}</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"stats-button active\">\r\n          <div class=\"button-icon\">\r\n            <i class=\"anticon anticon-check-circle\"></i>\r\n          </div>\r\n          <div class=\"button-content\">\r\n            <div class=\"button-title\">在用</div>\r\n            <div class=\"button-count\">{{ activeCount || 0 }}</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"stats-button available\">\r\n          <div class=\"button-icon\">\r\n            <i class=\"anticon anticon-clock-circle\"></i>\r\n          </div>\r\n          <div class=\"button-content\">\r\n            <div class=\"button-title\">可用</div>\r\n            <div class=\"button-count\">{{ availableCount || 0 }}</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"stats-button online\">\r\n          <div class=\"button-icon\">\r\n            <i class=\"anticon anticon-wifi\"></i>\r\n          </div>\r\n          <div class=\"button-content\">\r\n            <div class=\"button-title\">在线</div>\r\n            <div class=\"button-count\">{{ onlineCount || 0 }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 查询筛选区域 -->\r\n    <div class=\"filter-section\">\r\n      <div class=\"filter-header\">\r\n        <h4 class=\"filter-title\">\r\n          <SearchOutlined class=\"title-icon\" />\r\n          查询筛选\r\n        </h4>\r\n        <div class=\"filter-actions\">\r\n          <a-space size=\"middle\">\r\n            <a-button type=\"link\" @click=\"toggleAdvancedFilter\" class=\"expand-btn\">\r\n              {{ showAdvancedFilter ? '收起' : '展开' }}\r\n              <DownOutlined :class=\"{ 'rotate-180': showAdvancedFilter }\" />\r\n            </a-button>\r\n            <a-button type=\"primary\" @click=\"handleSearch\">\r\n              <template #icon><SearchOutlined /></template>\r\n              搜索\r\n            </a-button>\r\n            <a-button @click=\"handleReset\">\r\n              <template #icon><ReloadOutlined /></template>\r\n              重置\r\n            </a-button>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n      <div class=\"filter-content\">\r\n        <!-- 基础搜索 - 始终显示 -->\r\n        <a-row :gutter=\"[12, 8]\">\r\n            <a-col :span=\"24\">\r\n              <div class=\"filter-item\">\r\n                <label class=\"filter-label\">IP地址/主机名</label>\r\n              <a-input\r\n                  :value=\"searchKeyword\"\r\n                  @input=\"handleSearchInput\"\r\n                  placeholder=\"输入IP地址或主机名\" \r\n                  allow-clear\r\n                >\r\n                  <template #prefix><SearchOutlined /></template>\r\n                </a-input>\r\n            </div>\r\n          </a-col>\r\n        </a-row>\r\n        \r\n        <!-- 高级筛选 - 可折叠 -->\r\n        <div v-show=\"showAdvancedFilter\" class=\"advanced-filter\">\r\n          <a-divider>高级筛选</a-divider>\r\n          <a-row :gutter=\"[12, 8]\">\r\n             <a-col :xl=\"12\" :lg=\"12\" :md=\"24\" :sm=\"24\">\r\n              <div class=\"filter-item\">\r\n                <label class=\"filter-label\">IP状态</label>\r\n                <a-select \r\n                  :value=\"ipStatus\" \r\n                  @change=\"handleStatusChange\"\r\n                  placeholder=\"选择IP状态\" \r\n                  allow-clear\r\n                  style=\"width: 100%\"\r\n                >\r\n                  <a-select-option value=\"active\">\r\n                    <CheckCircleOutlined style=\"color: #52c41a\" /> 在用\r\n                  </a-select-option>\r\n                  <a-select-option value=\"available\">\r\n                    <ClockCircleOutlined style=\"color: #1890ff\" /> 可用\r\n                  </a-select-option>\r\n                  <a-select-option value=\"reserved\">\r\n                    <LockOutlined style=\"color: #fa8c16\" /> 预留\r\n                  </a-select-option>\r\n                  <a-select-option value=\"conflict\">\r\n                    <ExclamationCircleOutlined style=\"color: #ff4d4f\" /> 冲突\r\n                  </a-select-option>\r\n                </a-select>\r\n              </div>\r\n            </a-col>\r\n            <a-col :xl=\"12\" :lg=\"12\" :md=\"24\" :sm=\"24\">\r\n              <div class=\"filter-item\">\r\n                <label class=\"filter-label\">IP类型</label>\r\n                <a-select \r\n                  :value=\"ipType\" \r\n                  @change=\"handleTypeChange\"\r\n                  placeholder=\"选择IP类型\" \r\n                  allow-clear\r\n                  style=\"width: 100%\"\r\n                >\r\n                  <a-select-option value=\"static\">\r\n                    <DatabaseOutlined style=\"color: #1890ff\" /> 静态IP\r\n                  </a-select-option>\r\n                  <a-select-option value=\"dynamic\">\r\n                    <ThunderboltOutlined style=\"color: #52c41a\" /> 动态IP\r\n                  </a-select-option>\r\n                  <a-select-option value=\"gateway\">\r\n                    <NodeIndexOutlined style=\"color: #fa8c16\" /> 网关\r\n                  </a-select-option>\r\n                  <a-select-option value=\"dns\">\r\n                    <CloudOutlined style=\"color: #722ed1\" /> DNS服务器\r\n                  </a-select-option>\r\n                </a-select>\r\n              </div>\r\n            </a-col>\r\n          </a-row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 批量操作工具栏 -->\r\n    <div class=\"batch-toolbar\" v-if=\"selectedRowKeys.length > 0\">\r\n      <div class=\"selected-info\">\r\n        <span>已选择 {{ selectedRowKeys.length }} 项</span>\r\n        <a-button type=\"link\" size=\"small\" @click=\"clearSelection\">清空</a-button>\r\n      </div>\r\n      <div class=\"batch-actions\">\r\n        <a-button \r\n          type=\"primary\" \r\n          size=\"small\" \r\n          @click=\"batchPing\"\r\n          :loading=\"batchPingLoading\"\r\n        >\r\n          批量Ping\r\n        </a-button>\r\n        <a-button \r\n          size=\"small\" \r\n          @click=\"batchToggleMonitoring\"\r\n          :loading=\"batchToggleLoading\"\r\n        >\r\n          批量{{ allSelectedMonitored ? '停止' : '启用' }}监控\r\n        </a-button>\r\n        <a-button \r\n          type=\"danger\" \r\n          size=\"small\" \r\n          @click=\"batchDelete\"\r\n          :loading=\"batchDeleteLoading\"\r\n        >\r\n          批量删除\r\n        </a-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- IP列表表格 -->\r\n    <div class=\"table-wrapper\">\r\n      <a-table\r\n        :columns=\"columns\"\r\n        :data-source=\"dataSource\"\r\n        :row-key=\"record => record.id\"\r\n        :pagination=\"pagination\"\r\n        :loading=\"loading\"\r\n        :row-selection=\"rowSelection\"\r\n\r\n        size=\"middle\"\r\n        @change=\"handleTableChange\"\r\n      >\r\n      <!-- 使用新的v-slot语法 -->\r\n      <template #bodyCell=\"{ column, record }\">\r\n        <!-- IP地址列 -->\r\n        <template v-if=\"column.key === 'ip_address'\">\r\n          <div>\r\n            <span class=\"ip-address\">{{ record.ip_address }}</span>\r\n          </div>\r\n        </template>\r\n\r\n        <!-- 主机名列 -->\r\n        <template v-else-if=\"column.key === 'hostname'\">\r\n          <span :title=\"record.hostname\">{{ record.hostname || '-' }}</span>\r\n        </template>\r\n\r\n        <!-- IP状态列 -->\r\n        <template v-else-if=\"column.key === 'status'\">\r\n          <a-tag :color=\"getIPStatusColor(record.status)\" size=\"small\">\r\n            {{ getIPStatusText(record.status) }}\r\n          </a-tag>\r\n        </template>\r\n\r\n        <!-- IP类型列 -->\r\n        <template v-else-if=\"column.key === 'type'\">\r\n          <a-tag :color=\"getTypeColor(record.type)\" size=\"small\">\r\n            {{ getTypeText(record.type) }}\r\n          </a-tag>\r\n        </template>\r\n\r\n        <!-- 监控状态列 -->\r\n        <template v-else-if=\"column.key === 'monitoring_enabled'\">\r\n          <a-switch\r\n            :checked=\"record.monitoring_enabled\"\r\n            :loading=\"record.toggleLoading\"\r\n            @change=\"(checked) => toggleMonitoring(record, checked)\"\r\n            size=\"small\"\r\n          />\r\n          <span class=\"monitoring-text\">\r\n            {{ record.monitoring_enabled ? '已监控' : '未监控' }}\r\n          </span>\r\n        </template>\r\n\r\n\r\n        <!-- 创建时间列 -->\r\n        <template v-else-if=\"column.key === 'created_at'\">\r\n          <div class=\"time-cell\">\r\n            <span v-if=\"record.created_at\" class=\"time-text\">\r\n              {{ formatTime(record.created_at) }}\r\n            </span>\r\n            <span v-else class=\"no-data\">-</span>\r\n            <div v-if=\"record.created_at\" class=\"time-relative\">\r\n              {{ getRelativeTime(record.created_at) }}\r\n            </div>\r\n          </div>\r\n        </template>\r\n\r\n\r\n        <!-- 操作列 -->\r\n        <template v-else-if=\"column.key === 'action'\">\r\n          <div class=\"action-buttons\">\r\n            <a-tooltip title=\"查看详情\">\r\n              <a-button \r\n                type=\"text\" \r\n                size=\"small\" \r\n                @click=\"viewDetails(record)\"\r\n                class=\"action-btn\"\r\n              >\r\n                <template #icon><EyeOutlined /></template>\r\n              </a-button>\r\n            </a-tooltip>\r\n            <a-tooltip title=\"Ping测试\">\r\n              <a-button \r\n                type=\"text\" \r\n                size=\"small\" \r\n                @click=\"pingIP(record)\"\r\n                :loading=\"record.pingLoading\"\r\n                class=\"action-btn\"\r\n              >\r\n                <template #icon><ApiOutlined /></template>\r\n              </a-button>\r\n            </a-tooltip>\r\n            <a-tooltip title=\"编辑\">\r\n              <a-button \r\n                type=\"text\" \r\n                size=\"small\" \r\n                @click=\"editIP(record)\"\r\n                class=\"action-btn\"\r\n              >\r\n                <template #icon><EditOutlined /></template>\r\n              </a-button>\r\n            </a-tooltip>\r\n            <a-popconfirm\r\n              title=\"确定要删除这个IP吗？\"\r\n              @confirm=\"deleteIP(record)\"\r\n              ok-text=\"确定\"\r\n              cancel-text=\"取消\"\r\n            >\r\n              <a-tooltip title=\"删除\">\r\n                <a-button \r\n                  type=\"text\" \r\n                  size=\"small\" \r\n                  danger\r\n                  :loading=\"record.deleteLoading\"\r\n                  class=\"action-btn danger\"\r\n                >\r\n                  <template #icon><DeleteOutlined /></template>\r\n                </a-button>\r\n              </a-tooltip>\r\n            </a-popconfirm>\r\n          </div>\r\n        </template>\r\n      </template>\r\n      </a-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport dayjs from 'dayjs';\r\nimport {\r\n  PlusOutlined,\r\n  ScanOutlined,\r\n  DownloadOutlined,\r\n  ApiOutlined,\r\n  UnorderedListOutlined,\r\n  SearchOutlined,\r\n  ReloadOutlined,\r\n  CheckCircleOutlined,\r\n  ClockCircleOutlined,\r\n  LockOutlined,\r\n  ExclamationCircleOutlined,\r\n  DatabaseOutlined,\r\n  ThunderboltOutlined,\r\n  NodeIndexOutlined,\r\n  CloudOutlined,\r\n  DownOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// Props\r\nconst props = defineProps({\r\n  dataSource: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  loading: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  pagination: {\r\n    type: Object,\r\n    default: () => ({\r\n      current: 1,\r\n      pageSize: 20,\r\n      total: 0,\r\n      showSizeChanger: true,\r\n      showQuickJumper: true,\r\n      showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n    })\r\n  },\r\n  searchKeyword: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  ipStatus: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  ipType: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  totalCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  activeCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  availableCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  onlineCount: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n});\r\n\r\n// Emits\r\nconst emit = defineEmits([\r\n  'tableChange',\r\n  'viewDetails',\r\n  'pingIP',\r\n  'editIP',\r\n  'deleteIP',\r\n  'toggleMonitoring',\r\n  'batchPing',\r\n  'batchDelete',\r\n  'batchToggleMonitoring',\r\n  'add',\r\n  'scan',\r\n  'export',\r\n  'headerBatchPing',\r\n  'listManagement',\r\n  'search',\r\n  'reset',\r\n  'searchInput',\r\n  'statusChange',\r\n  'typeChange'\r\n]);\r\n\r\n// 响应式数据\r\nconst selectedRowKeys = ref([]);\r\nconst batchPingLoading = ref(false);\r\nconst batchDeleteLoading = ref(false);\r\nconst batchToggleLoading = ref(false);\r\nconst showAdvancedFilter = ref(false);\r\n\r\n\r\n// 表格列配置\r\nconst columns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address',\r\n    key: 'ip_address',\r\n    width: 120,\r\n    sorter: true\r\n  },\r\n  {\r\n    title: '主机名',\r\n    dataIndex: 'hostname',\r\n    key: 'hostname',\r\n    width: 150,\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: 'IP状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '监控状态',\r\n    dataIndex: 'monitoring_enabled',\r\n    key: 'monitoring_enabled',\r\n    width: 90\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'action',\r\n    align: 'center',\r\n    width: 50\r\n  }\r\n];\r\n\r\n// 行选择配置\r\nconst rowSelection = {\r\n  selectedRowKeys: selectedRowKeys,\r\n  onChange: (keys) => {\r\n    selectedRowKeys.value = keys;\r\n  },\r\n  onSelectAll: (selected, selectedRows, changeRows) => {\r\n    console.log('onSelectAll:', selected, selectedRows, changeRows);\r\n  }\r\n};\r\n\r\n// 计算属性\r\nconst allSelectedMonitored = computed(() => {\r\n  if (selectedRowKeys.value.length === 0) return false;\r\n  const selectedRecords = props.dataSource.filter(item => \r\n    selectedRowKeys.value.includes(item.id)\r\n  );\r\n  return selectedRecords.every(record => record.is_monitored);\r\n});\r\n\r\n// 方法\r\n// IP状态相关\r\nconst getIPStatusColor = (status) => {\r\n  const statusMap = {\r\n    'active': 'success',\r\n    'available': 'processing',\r\n    'reserved': 'warning',\r\n    'conflict': 'error'\r\n  };\r\n  return statusMap[status] || 'default';\r\n};\r\n\r\nconst getIPStatusText = (status) => {\r\n  const statusMap = {\r\n    'active': '在用',\r\n    'available': '可用',\r\n    'reserved': '预留',\r\n    'conflict': '冲突'\r\n  };\r\n  return statusMap[status] || status;\r\n};\r\n\r\n// IP类型相关\r\nconst getTypeColor = (type) => {\r\n  const typeMap = {\r\n    'static': 'blue',\r\n    'dynamic': 'green',\r\n    'gateway': 'orange',\r\n    'dns': 'purple'\r\n  };\r\n  return typeMap[type] || 'default';\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const typeMap = {\r\n    'static': '静态IP',\r\n    'dynamic': '动态IP',\r\n    'gateway': '网关',\r\n    'dns': 'DNS服务器'\r\n  };\r\n  return typeMap[type] || type;\r\n};\r\n\r\n// Ping状态相关\r\nconst getPingStatusColor = (status) => {\r\n  const statusMap = {\r\n    'online': 'success',\r\n    'offline': 'error',\r\n    'unknown': 'warning'\r\n  };\r\n  return statusMap[status] || 'default';\r\n};\r\n\r\nconst getPingStatusText = (status) => {\r\n  const statusMap = {\r\n    'online': '在线',\r\n    'offline': '离线',\r\n    'unknown': '未知'\r\n  };\r\n  return statusMap[status] || status;\r\n};\r\n\r\n// 时间格式化\r\nconst formatTime = (time) => {\r\n  if (!time) return '-';\r\n  return dayjs(time).format('YYYY-MM-DD HH:mm:ss');\r\n};\r\n\r\n// 相对时间显示\r\nconst getRelativeTime = (time) => {\r\n  if (!time) return '';\r\n  const now = dayjs();\r\n  const target = dayjs(time);\r\n  const diffInMinutes = now.diff(target, 'minute');\r\n  const diffInHours = now.diff(target, 'hour');\r\n  const diffInDays = now.diff(target, 'day');\r\n  \r\n  if (diffInMinutes < 1) {\r\n    return '刚刚';\r\n  } else if (diffInMinutes < 60) {\r\n    return `${diffInMinutes}分钟前`;\r\n  } else if (diffInHours < 24) {\r\n    return `${diffInHours}小时前`;\r\n  } else if (diffInDays < 30) {\r\n    return `${diffInDays}天前`;\r\n  } else {\r\n    return target.format('YYYY-MM-DD');\r\n  }\r\n};\r\n\r\n// 兼容旧方法\r\nconst getStatusColor = getPingStatusColor;\r\nconst getStatusText = getPingStatusText;\r\n\r\nconst clearSelection = () => {\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\nconst handleTableChange = (pagination, filters, sorter) => {\r\n  emit('tableChange', pagination, filters, sorter);\r\n};\r\n\r\nconst viewDetails = (record) => {\r\n  emit('viewDetails', record);\r\n};\r\n\r\nconst editIP = (record) => {\r\n  emit('editIP', record);\r\n};\r\n\r\nconst pingIP = async (record) => {\r\n  record.pingLoading = true;\r\n  try {\r\n    await emit('pingIP', record);\r\n  } finally {\r\n    record.pingLoading = false;\r\n  }\r\n};\r\n\r\nconst deleteIP = async (record) => {\r\n  record.deleteLoading = true;\r\n  try {\r\n    await emit('deleteIP', record);\r\n    // 如果删除成功，从选中列表中移除\r\n    const index = selectedRowKeys.value.indexOf(record.id);\r\n    if (index > -1) {\r\n      selectedRowKeys.value.splice(index, 1);\r\n    }\r\n  } finally {\r\n    record.deleteLoading = false;\r\n  }\r\n};\r\n\r\nconst toggleMonitoring = async (record, checked) => {\r\n  record.toggleLoading = true;\r\n  try {\r\n    await emit('toggleMonitoring', record, checked);\r\n  } finally {\r\n    record.toggleLoading = false;\r\n  }\r\n};\r\n\r\nconst batchPing = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请先选择要操作的IP');\r\n    return;\r\n  }\r\n  \r\n  batchPingLoading.value = true;\r\n  try {\r\n    const selectedRecords = props.dataSource.filter(item => \r\n      selectedRowKeys.value.includes(item.id)\r\n    );\r\n    await emit('batchPing', selectedRecords);\r\n  } finally {\r\n    batchPingLoading.value = false;\r\n  }\r\n};\r\n\r\nconst batchDelete = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请先选择要删除的IP');\r\n    return;\r\n  }\r\n  \r\n  batchDeleteLoading.value = true;\r\n  try {\r\n    const selectedRecords = props.dataSource.filter(item => \r\n      selectedRowKeys.value.includes(item.id)\r\n    );\r\n    await emit('batchDelete', selectedRecords);\r\n    // 清空选择\r\n    selectedRowKeys.value = [];\r\n  } finally {\r\n    batchDeleteLoading.value = false;\r\n  }\r\n};\r\n\r\nconst batchToggleMonitoring = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请先选择要操作的IP');\r\n    return;\r\n  }\r\n  \r\n  batchToggleLoading.value = true;\r\n  try {\r\n    const selectedRecords = props.dataSource.filter(item => \r\n      selectedRowKeys.value.includes(item.id)\r\n    );\r\n    await emit('batchToggleMonitoring', selectedRecords, !allSelectedMonitored.value);\r\n  } finally {\r\n    batchToggleLoading.value = false;\r\n  }\r\n};\r\n\r\n// 表格头部按钮事件处理\r\nconst handleAdd = () => {\r\n  emit('add');\r\n};\r\n\r\nconst handleScan = () => {\r\n  emit('scan');\r\n};\r\n\r\nconst handleExport = () => {\r\n  emit('export');\r\n};\r\n\r\nconst handleHeaderBatchPing = () => {\r\n  emit('headerBatchPing');\r\n};\r\n\r\nconst handleListManagement = () => {\r\n  emit('listManagement');\r\n};\r\n\r\n// 筛选相关事件处理\r\nconst handleSearch = () => {\r\n  emit('search');\r\n};\r\n\r\nconst handleReset = () => {\r\n  emit('reset');\r\n};\r\n\r\nconst handleSearchInput = (e) => {\r\n  emit('searchInput', e.target.value);\r\n};\r\n\r\nconst handleStatusChange = (value) => {\r\n  emit('statusChange', value);\r\n};\r\n\r\nconst handleTypeChange = (value) => {\r\n  emit('typeChange', value);\r\n};\r\n\r\nconst toggleAdvancedFilter = () => {\r\n  showAdvancedFilter.value = !showAdvancedFilter.value;\r\n};\r\n\r\n\r\n\r\n// 暴露方法给父组件\r\ndefineExpose({\r\n  clearSelection,\r\n  getSelectedRowKeys: () => selectedRowKeys.value,\r\n  getSelectedRecords: () => props.dataSource.filter(item => \r\n    selectedRowKeys.value.includes(item.id)\r\n  )\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* 简洁容器样式 */\r\n.ip-table-container {\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  min-height: calc(100vh - 40px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n}\r\n\r\n.table-wrapper {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 0;\r\n}\r\n\r\n/* IP统计容器样式 */\r\n.ip-stats-container {\r\n  margin-bottom: 16px;\r\n  background: #fff;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\r\n  overflow: hidden;\r\n}\r\n\r\n/* 统计头部样式 */\r\n.stats-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px 24px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n}\r\n\r\n.page-title {\r\n  margin: 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  color: white;\r\n}\r\n\r\n.title-icon {\r\n  font-size: 22px;\r\n  color: rgba(255, 255, 255, 0.9);\r\n}\r\n\r\n/* IP统计按钮组样式 */\r\n.ip-stats-buttons {\r\n  display: flex;\r\n  padding: 24px;\r\n  gap: 20px;\r\n  background: #fafafa;\r\n}\r\n\r\n.stats-button {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\r\n  transition: all 0.3s ease;\r\n  cursor: pointer;\r\n  border: 2px solid transparent;\r\n}\r\n\r\n.stats-button:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.button-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 16px;\r\n  font-size: 20px;\r\n}\r\n\r\n.button-content {\r\n  flex: 1;\r\n}\r\n\r\n.button-title {\r\n  font-size: 14px;\r\n  color: #666;\r\n  margin-bottom: 4px;\r\n  font-weight: 500;\r\n}\r\n\r\n.button-count {\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n}\r\n\r\n/* 不同状态的颜色主题 */\r\n.stats-button.total .button-icon {\r\n  background: linear-gradient(135deg, #667eea, #764ba2);\r\n  color: white;\r\n}\r\n\r\n.stats-button.total .button-count {\r\n  color: #667eea;\r\n}\r\n\r\n.stats-button.active .button-icon {\r\n  background: linear-gradient(135deg, #4facfe, #00f2fe);\r\n  color: white;\r\n}\r\n\r\n.stats-button.active .button-count {\r\n  color: #1890ff;\r\n}\r\n\r\n.stats-button.available .button-icon {\r\n  background: linear-gradient(135deg, #43e97b, #38f9d7);\r\n  color: white;\r\n}\r\n\r\n.stats-button.available .button-count {\r\n  color: #52c41a;\r\n}\r\n\r\n.stats-button.online .button-icon {\r\n  background: linear-gradient(135deg, #fa709a, #fee140);\r\n  color: white;\r\n}\r\n\r\n.stats-button.online .button-count {\r\n  color: #fa8c16;\r\n}\r\n\r\n/* 简洁操作按钮区域 */\r\n.table-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .table-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .table-title {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n    width: 100%;\r\n  }\r\n  \r\n  .stats-inline {\r\n    width: 100%;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .stat-item {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n}\r\n\r\n/* 简洁搜索过滤区域 */\r\n.filter-section {\r\n  padding: 20px 24px;\r\n  background: #f8fafc;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.expand-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.rotate-180 {\r\n  transform: rotate(180deg);\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.advanced-filter {\r\n  margin-top: 12px;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.filter-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.filter-title {\r\n  margin: 0;\r\n  font-size: 13px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n}\r\n\r\n.title-icon {\r\n  color: #1890ff;\r\n}\r\n\r\n.filter-actions {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.filter-content {\r\n  margin: 0;\r\n}\r\n\r\n.filter-item {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.filter-label {\r\n  display: block;\r\n  margin-bottom: 6px;\r\n  font-weight: 500;\r\n  color: #262626;\r\n  font-size: 13px;\r\n}\r\n\r\n/* 简洁批量操作区域 */\r\n.batch-toolbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px 24px;\r\n  background: #eff6ff;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.selected-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  color: #1890ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.batch-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.ip-cell {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.ip-address {\r\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\r\n  font-weight: 500;\r\n}\r\n\r\n.mac-address {\r\n  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\r\n  font-size: 12px;\r\n  color: #666;\r\n}\r\n\r\n.monitoring-text {\r\n  margin-left: 8px;\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n}\r\n\r\n.no-data {\r\n  color: #bfbfbf;\r\n}\r\n\r\n.time-cell {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2px;\r\n}\r\n\r\n.time-text {\r\n  font-size: 13px;\r\n  color: #262626;\r\n  font-weight: 500;\r\n}\r\n\r\n.time-relative {\r\n  font-size: 11px;\r\n  color: #8c8c8c;\r\n  font-style: italic;\r\n}\r\n\r\n.description-text {\r\n  font-size: 12px;\r\n  color: #666;\r\n  line-height: 1.4;\r\n}\r\n\r\n.status-dot {\r\n  display: inline-block;\r\n  width: 6px;\r\n  height: 6px;\r\n  border-radius: 50%;\r\n  margin-right: 4px;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n.status-dot.status-online {\r\n  background-color: #52c41a;\r\n  box-shadow: 0 0 0 2px rgba(82, 196, 26, 0.2);\r\n}\r\n\r\n.status-dot.status-offline {\r\n  background-color: #ff4d4f;\r\n  box-shadow: 0 0 0 2px rgba(255, 77, 79, 0.2);\r\n}\r\n\r\n.status-dot.status-unknown {\r\n  background-color: #faad14;\r\n  box-shadow: 0 0 0 2px rgba(250, 173, 20, 0.2);\r\n}\r\n\r\n@keyframes pulse {\r\n  0% {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    transform: scale(1.1);\r\n    opacity: 0.8;\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 4px;\r\n}\r\n\r\n.action-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 4px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: #f5f5f5;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.action-btn.danger:hover {\r\n  background-color: #fff2f0;\r\n  color: #ff4d4f;\r\n}\r\n\r\n.action-btn .anticon {\r\n  font-size: 14px;\r\n}\r\n\r\n/* 简洁输入框样式 */\r\n:deep(.ant-input) {\r\n  border-radius: 6px;\r\n  border: 1px solid #d1d5db;\r\n  background: #ffffff;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n:deep(.ant-input:focus) {\r\n  border-color: #2563eb;\r\n  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\r\n}\r\n\r\n:deep(.ant-select) {\r\n  border-radius: 6px;\r\n}\r\n\r\n:deep(.ant-select .ant-select-selector) {\r\n  border-radius: 6px !important;\r\n  border: 1px solid #d1d5db !important;\r\n  background: #ffffff !important;\r\n}\r\n\r\n:deep(.ant-select:not(.ant-select-disabled):hover .ant-select-selector) {\r\n  border-color: #2563eb !important;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .ip-table-container {\r\n    height: calc(100vh - 20px);\r\n  }\r\n  \r\n  .table-header {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    padding: 24px;\r\n  }\r\n  \r\n  .stats-inline {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n  \r\n  .filter-section {\r\n    padding: 20px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .ip-table-container {\r\n    height: calc(100vh - 10px);\r\n  }\r\n  \r\n  .table-header {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .filter-section {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .stats-inline {\r\n    grid-template-columns: 1fr;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .batch-toolbar {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: stretch;\r\n    padding: 16px 20px;\r\n  }\r\n  \r\n  .batch-actions {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .action-buttons {\r\n    flex-direction: column;\r\n    gap: 2px;\r\n  }\r\n  \r\n  .time-cell {\r\n    gap: 1px;\r\n  }\r\n  \r\n  .time-text {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .time-relative {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .description-text {\r\n    font-size: 11px;\r\n  }\r\n  \r\n  .mac-address {\r\n    font-size: 11px;\r\n  }\r\n}\r\n\r\n/* 表格样式优化 */\r\n:deep(.ant-table) {\r\n  font-size: 13px;\r\n}\r\n\r\n:deep(.ant-table-container) {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n:deep(.ant-table-content) {\r\n  overflow: auto;\r\n}\r\n\r\n:deep(.ant-table-body) {\r\n  overflow-y: visible;\r\n}\r\n\r\n:deep(.ant-table-thead > tr > th) {\r\n  background: #fafafa;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n:deep(.ant-table-tbody > tr:hover > td) {\r\n  background: #f5f5f5;\r\n}\r\n\r\n:deep(.ant-table-row-selected) {\r\n  background: #e6f7ff;\r\n}\r\n\r\n:deep(.ant-table-row-selected:hover > td) {\r\n  background: #bae7ff;\r\n}\r\n\r\n:deep(.ant-pagination) {\r\n  margin: 12px 16px;\r\n  text-align: right;\r\n  flex-shrink: 0;\r\n  border-top: 1px solid #f0f0f0;\r\n  padding-top: 12px;\r\n}\r\n\r\n:deep(.ant-switch) {\r\n  min-width: 28px;\r\n}\r\n\r\n:deep(.ant-tag) {\r\n  margin: 0;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 只有操作列居中对齐 */\r\n:deep(.ant-table-tbody > tr > td:nth-child(6)) {\r\n  text-align: center !important;\r\n}\r\n\r\n:deep(.ant-table-thead > tr > th:nth-child(6)) {\r\n  text-align: center !important;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\MonitoringActions.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\HardwareAssetForm.vue",["522","523","524","525","526"],"<template>\r\n  <a-drawer\r\n    v-model:open=\"dialogVisible\"\r\n    :title=\"formTitle\"\r\n    width=\"800px\"\r\n    placement=\"right\"\r\n    :closable=\"true\"\r\n    :mask-closable=\"false\"\r\n    @close=\"handleClose\"\r\n  >\r\n    \r\n    <a-form\r\n      ref=\"formRef\"\r\n      :model=\"formData\"\r\n      :rules=\"formRules\"\r\n      :label-col=\"{ span: 6 }\"\r\n      :wrapper-col=\"{ span: 18 }\"\r\n      @finish=\"handleSubmit\"\r\n      @finishFailed=\"handleSubmitFailed\"\r\n    >\r\n      <!-- 基本信息 -->\r\n      <div class=\"form-section basic-info\">\r\n        <h4 class=\"section-title\">基本信息</h4>\r\n          \r\n          <a-row :gutter=\"16\">\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"资产编号\" name=\"asset_tag\" class=\"form-item\" :label-col=\"{ span: 6 }\" :wrapper-col=\"{ span: 18 }\">\r\n                <a-input\r\n                  v-model:value=\"formData.asset_tag\"\r\n                  placeholder=\"请输入资产编号\"\r\n                  :maxlength=\"50\"\r\n                  show-count\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"设备型号\" name=\"model\" class=\"form-item\">\r\n                <a-input \r\n                  v-model:value=\"formData.model\" \r\n                  placeholder=\"请输入设备型号\"\r\n                  :maxlength=\"100\"\r\n                  show-count\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n          \r\n          <a-row :gutter=\"16\">\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"资产责任人\" name=\"asset_owner\" class=\"form-item\">\r\n                <a-select\r\n                  v-model:value=\"formData.asset_owner\"\r\n                  placeholder=\"请选择资产责任人\"\r\n                  show-search\r\n                  :filter-option=\"false\"\r\n                  :loading=\"userLoading\"\r\n                  @search=\"searchUsers\"\r\n                  @focus=\"loadUsers\"\r\n                >\r\n                  <a-select-option\r\n                    v-for=\"user in userOptions\"\r\n                    :key=\"user.id\"\r\n                    :value=\"user.value\"\r\n                    :label=\"user.label\"\r\n                  >\r\n                    {{ user.label }}\r\n                  </a-select-option>\r\n                </a-select>\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"供应商\" name=\"supplier\" class=\"form-item\">\r\n                <a-select\r\n                  v-model:value=\"formData.supplier\"\r\n                  placeholder=\"请选择供应商\"\r\n                  show-search\r\n                  :filter-option=\"false\"\r\n                  :loading=\"supplierLoading\"\r\n                  @search=\"searchSuppliers\"\r\n                  @focus=\"loadSuppliers\"\r\n                  @change=\"handleSupplierChange\"\r\n                >\r\n                  <a-select-option\r\n                    v-for=\"supplier in supplierOptions\"\r\n                    :key=\"supplier.id\"\r\n                    :value=\"supplier.id\"\r\n                    :label=\"supplier.name\"\r\n                  >\r\n                    {{ supplier.name }}\r\n                  </a-select-option>\r\n                </a-select>\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n          \r\n          <a-row :gutter=\"16\">\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"采购日期\" name=\"purchase_date\" class=\"form-item\">\r\n                <a-date-picker\r\n                  v-model:value=\"formData.purchase_date\"\r\n                  placeholder=\"请选择采购日期\"\r\n                  format=\"YYYY-MM-DD\"\r\n                  value-format=\"YYYY-MM-DD\"\r\n                  :disabled-date=\"disabledDate\"\r\n                  style=\"width: 100%\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"项目来源\" name=\"project_source\" class=\"form-item\">\r\n                <a-input \r\n                  v-model:value=\"formData.project_source\" \r\n                  placeholder=\"请输入项目来源\"\r\n                  :maxlength=\"100\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n        \r\n        </div>\r\n        \r\n      <!-- 产品信息 -->\r\n      <div class=\"form-section product-info\">\r\n        <h4 class=\"section-title\">产品信息</h4>\r\n          \r\n          <a-row :gutter=\"16\">\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"制造商\" name=\"manufacturer\" class=\"form-item\">\r\n                <a-select\r\n                  v-model:value=\"formData.manufacturer\"\r\n                  placeholder=\"请选择制造商\"\r\n                  show-search\r\n                  allow-clear\r\n                  :options=\"manufacturerOptions\"\r\n                  :filter-option=\"filterOption\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"序列号\" name=\"serial_number\" class=\"form-item\">\r\n                <a-input \r\n                  v-model:value=\"formData.serial_number\" \r\n                  placeholder=\"请输入序列号\"\r\n                  :maxlength=\"100\"\r\n                  show-count\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n          \r\n          <a-row v-if=\"isEdit\" :gutter=\"16\">\r\n            <a-col :span=\"24\">\r\n              <a-form-item label=\"规格参数\" class=\"form-item\" :label-col=\"{ span: 3 }\" :wrapper-col=\"{ span: 21 }\">\r\n                <div v-for=\"(spec, index) in specifications\" :key=\"index\" class=\"spec-item\">\r\n                  <a-row :gutter=\"8\" align=\"middle\">\r\n                    <a-col :span=\"10\">\r\n                      <a-input\r\n                        v-model:value=\"spec.key\"\r\n                        placeholder=\"参数名称\"\r\n                        :maxlength=\"50\"\r\n                      />\r\n                    </a-col>\r\n                    <a-col :span=\"10\">\r\n                      <a-input\r\n                        v-model:value=\"spec.value\"\r\n                        placeholder=\"参数值\"\r\n                        :maxlength=\"100\"\r\n                      />\r\n                    </a-col>\r\n                    <a-col :span=\"4\">\r\n                      <a-button\r\n                        v-if=\"specifications.length > 1\"\r\n                        type=\"text\"\r\n                        danger\r\n                        @click=\"removeSpec(index)\"\r\n                        size=\"small\"\r\n                      >\r\n                        删除\r\n                      </a-button>\r\n                    </a-col>\r\n                  </a-row>\r\n                </div>\r\n                <a-button\r\n                  type=\"dashed\"\r\n                  @click=\"addSpec\"\r\n                  style=\"width: 100%; margin-top: 8px;\"\r\n                  size=\"small\"\r\n                >\r\n                  + 添加规格参数\r\n                </a-button>\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n          \r\n          <h4 class=\"section-title location-title\">位置信息</h4>\r\n          <a-row :gutter=\"16\">\r\n            <a-col :span=\"8\">\r\n              <a-form-item label=\"机房\" name=\"room\" class=\"form-item\">\r\n                <a-input \r\n                  v-model:value=\"formData.room\" \r\n                  placeholder=\"请输入机房\"\r\n                  :maxlength=\"50\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"8\">\r\n              <a-form-item label=\"机柜\" name=\"cabinet\" class=\"form-item\">\r\n                <a-input \r\n                  v-model:value=\"formData.cabinet\" \r\n                  placeholder=\"请输入机柜\"\r\n                  :maxlength=\"50\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"8\">\r\n              <a-form-item label=\"U位\" name=\"u_position\" class=\"form-item\">\r\n                <a-input \r\n                  v-model:value=\"formData.u_position\" \r\n                  placeholder=\"如：1-2\"\r\n                  :maxlength=\"20\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n          \r\n          <h4 class=\"section-title config-title\">配置信息</h4>\r\n          <a-row :gutter=\"24\">\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"产品尺寸\" name=\"dimensions\" class=\"form-item\">\r\n                <a-select\r\n                  v-model:value=\"formData.dimensions\"\r\n                  placeholder=\"请选择产品尺寸\"\r\n                  :options=\"dimensionOptions\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"12\">\r\n              <a-form-item label=\"保修类型\" name=\"warranty_type\" class=\"form-item\">\r\n                <a-select\r\n                  v-model:value=\"formData.warranty_type\"\r\n                  placeholder=\"请选择保修类型\"\r\n                  :options=\"warrantyTypeOptions\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n            <a-col :span=\"24\">\r\n              <a-form-item label=\"保修日期\" name=\"warranty_date_range\" class=\"form-item\" :label-col=\"{ span: 3 }\" :wrapper-col=\"{ span: 21 }\">\r\n                <a-range-picker\r\n                  v-model:value=\"formData.warranty_date_range\"\r\n                  :placeholder=\"['开始日期', '结束日期']\"\r\n                  format=\"YYYY-MM-DD\"\r\n                  value-format=\"YYYY-MM-DD\"\r\n                  style=\"width: 100%\"\r\n                />\r\n              </a-form-item>\r\n            </a-col>\r\n          </a-row>\r\n        </div>\r\n        \r\n\r\n    </a-form>\r\n    \r\n    <!-- 底部按钮 -->\r\n    <template #footer>\r\n      <div class=\"dialog-footer\">\r\n        <a-button @click=\"handleClose\" :disabled=\"submitLoading\">取消</a-button>\r\n        <a-button \r\n          type=\"primary\" \r\n          @click=\"handleSubmit\" \r\n          :loading=\"submitLoading\"\r\n          :disabled=\"!isFormValid\"\r\n        >\r\n          {{ isEdit ? '更新设备' : '新增设备' }}\r\n        </a-button>\r\n      </div>\r\n    </template>\r\n  </a-drawer>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, watch, nextTick, onMounted } from 'vue'\r\nimport { message } from 'ant-design-vue'\r\nimport dayjs from 'dayjs'\r\nimport { hardwareAssetApi } from '@/api/hardwareAsset'\r\nimport { supplierApi } from '@/api/supplier'\r\nimport { userApi } from '@/api/user'\r\n// 移除了大量不必要的图标导入\r\n\r\n// Props\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  assetData: {\r\n    type: Object,\r\n    default: null\r\n  },\r\n  isEdit: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\n// Emits\r\nconst emit = defineEmits(['update:visible', 'success'])\r\n\r\n// 响应式数据\r\nconst formRef = ref()\r\nconst submitLoading = ref(false)\r\nconst userLoading = ref(false)\r\nconst supplierLoading = ref(false)\r\nconst supplierOptions = ref([])\r\nconst supplierContacts = ref([])\r\nconst specifications = ref([{ key: '', value: '' }])\r\n\r\n// 表单数据\r\nconst formData = reactive({\r\n  asset_tag: '',\r\n  model: '',\r\n  asset_owner: '',\r\n  supplier: '',\r\n  purchase_date: '',\r\n  project_source: '',\r\n  manufacturer: '',\r\n  serial_number: '',\r\n  room: '',\r\n  cabinet: '',\r\n  u_position: '',\r\n  dimensions: '',\r\n  warranty_type: '',\r\n  warranty_date_range: null\r\n})\r\n\r\n// 选项数据\r\nconst assetTagOptions = ref([\r\n  { label: 'SRV-001', value: 'SRV-001' },\r\n  { label: 'SRV-002', value: 'SRV-002' },\r\n  { label: 'NET-001', value: 'NET-001' },\r\n  { label: 'NET-002', value: 'NET-002' },\r\n  { label: 'STG-001', value: 'STG-001' },\r\n  { label: 'STG-002', value: 'STG-002' }\r\n])\r\n\r\nconst manufacturerOptions = ref([\r\n  { label: '华为', value: '华为' },\r\n  { label: '思科', value: '思科' },\r\n  { label: '戴尔', value: '戴尔' },\r\n  { label: '惠普', value: '惠普' },\r\n  { label: '联想', value: '联想' },\r\n  { label: '浪潮', value: '浪潮' },\r\n  { label: '新华三', value: '新华三' },\r\n  { label: '锐捷', value: '锐捷' }\r\n])\r\n\r\nconst dimensionOptions = ref([\r\n  { label: '1U', value: '1U' },\r\n  { label: '2U', value: '2U' },\r\n  { label: '4U', value: '4U' },\r\n  { label: '塔式', value: '塔式' },\r\n  { label: '刀片', value: '刀片' },\r\n  { label: '其他', value: '其他' }\r\n])\r\n\r\nconst warrantyTypeOptions = ref([\r\n   { label: '原厂保修', value: 'original' },\r\n   { label: '第三方保修', value: 'third_party' }\r\n ])\r\n \r\n // 资产责任人选项\r\n const userOptions = ref([\r\n   { id:1,label: '张三', value: 'zhangsan' },\r\n   { id:2,label: '李四', value: 'lisi' },\r\n   { id:3,label: '王五', value: 'wangwu' },\r\n   { id:4,label: '赵六', value: 'zhaoliu' }\r\n ])\r\n \r\n // 供应商责任人选项\r\n const supplierManagerOptions = ref([])\r\n \r\n // 供应商机构名变化处理\r\n const onSupplierOrgChange = (value) => {\r\n   formData.value.supplier_manager = ''\r\n   // 根据供应商机构名获取对应的责任人列表\r\n   if (value === '华为技术有限公司') {\r\n     supplierManagerOptions.value = [\r\n       { label: '华为-张经理', value: 'huawei-zhang' },\r\n       { label: '华为-李经理', value: 'huawei-li' }\r\n     ]\r\n   } else if (value === '浪潮集团有限公司') {\r\n     supplierManagerOptions.value = [\r\n       { label: '浪潮-王经理', value: 'inspur-wang' },\r\n       { label: '浪潮-赵经理', value: 'inspur-zhao' }\r\n     ]\r\n   } else {\r\n     supplierManagerOptions.value = []\r\n   }\r\n }\r\n\r\nconst assetStatusOptions = ref([\r\n  { label: '在用', value: 'in_use' },\r\n  { label: '报废', value: 'scrapped' }\r\n])\r\n\r\n// 计算属性\r\nconst dialogVisible = computed({\r\n  get: () => props.visible,\r\n  set: (value) => emit('update:visible', value)\r\n})\r\n\r\nconst formTitle = computed(() => {\r\n  return props.isEdit ? '编辑硬件设施' : '新增硬件设施'\r\n})\r\n\r\n// 移除了不必要的副标题计算属性\r\n\r\nconst supplierContactOptions = computed(() => {\r\n  return supplierContacts.value.map(contact => ({\r\n    label: contact.name,\r\n    value: contact.name\r\n  }))\r\n})\r\n\r\n// 表单验证状态\r\nconst isFormValid = computed(() => {\r\n  return formData.asset_tag && \r\n         formData.model && \r\n         formData.manufacturer && \r\n         formData.serial_number &&\r\n         formData.asset_owner &&\r\n         formData.purchase_date\r\n})\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  asset_tag: [\r\n    { required: true, message: '请输入资产编号', trigger: 'blur' },\r\n    { min: 2, max: 50, message: '资产编号长度在 2 到 50 个字符', trigger: 'blur' }\r\n  ],\r\n  model: [\r\n    { required: true, message: '请输入设备型号', trigger: 'blur' },\r\n    { min: 2, max: 100, message: '设备型号长度在 2 到 100 个字符', trigger: 'blur' }\r\n  ],\r\n  manufacturer: [\r\n    { required: true, message: '请选择制造商', trigger: 'change' }\r\n  ],\r\n  serial_number: [\r\n    { required: true, message: '请输入序列号', trigger: 'blur' },\r\n    { min: 2, max: 100, message: '序列号长度在 2 到 100 个字符', trigger: 'blur' }\r\n  ],\r\n  asset_owner: [\r\n    { required: true, message: '请选择资产责任人', trigger: 'change' }\r\n  ],\r\n  purchase_date: [\r\n    { required: true, message: '请选择采购日期', trigger: 'change' }\r\n  ],\r\n  warranty_type: [\r\n    { required: true, message: '请选择保修类型', trigger: 'change' }\r\n  ],\r\n  warranty_date_range: [\r\n    { required: true, message: '请选择保修日期', trigger: 'change' }\r\n  ]\r\n}\r\n\r\n// 方法\r\nconst resetForm = () => {\r\n  Object.keys(formData).forEach(key => {\r\n    if (key === 'monitoring_status') {\r\n      formData[key] = false\r\n    } else if (key === 'warranty_type') {\r\n      formData[key] = 'original'\r\n    } else if (key === 'asset_status') {\r\n      formData[key] = 'in_use'\r\n    } else if (key === 'warranty_date_range') {\r\n      formData[key] = []\r\n    } else {\r\n      formData[key] = ''\r\n    }\r\n  })\r\n  specifications.value = [{ key: '', value: '' }]\r\n  formRef.value?.resetFields()\r\n}\r\n\r\nconst loadFormData = () => {\r\n  if (props.assetData && props.isEdit) {\r\n    Object.keys(formData).forEach(key => {\r\n      if (props.assetData[key] !== undefined) {\r\n        formData[key] = props.assetData[key]\r\n      }\r\n    })\r\n    \r\n    // 处理规格参数\r\n    if (props.assetData.specifications && typeof props.assetData.specifications === 'object') {\r\n      const specs = Object.entries(props.assetData.specifications).map(([key, value]) => ({ key, value }))\r\n      specifications.value = specs.length > 0 ? specs : [{ key: '', value: '' }]\r\n    }\r\n  }\r\n}\r\n\r\nconst loadUsers = async () => {\r\n  if (userOptions.value.length > 0) return\r\n  \r\n  userLoading.value = true\r\n  try {\r\n    const response = await userApi.search({ page_size: 100 })\r\n    userOptions.value = response.data.results || []\r\n  } catch (error) {\r\n    console.error('Load users error:', error)\r\n    message.error('加载用户列表失败')\r\n  } finally {\r\n    userLoading.value = false\r\n  }\r\n}\r\n\r\nconst searchUsers = async (query) => {\r\n  if (!query) return\r\n  \r\n  userLoading.value = true\r\n  try {\r\n    const response = await userApi.search({ search: query, page_size: 50 })\r\n    userOptions.value = response.data.results || []\r\n  } catch (error) {\r\n    console.error('Search users error:', error)\r\n    message.error('搜索用户失败')\r\n  } finally {\r\n    userLoading.value = false\r\n  }\r\n}\r\n\r\nconst loadSuppliers = async () => {\r\n  if (supplierOptions.value.length > 0) return\r\n  \r\n  supplierLoading.value = true\r\n  try {\r\n    const response = await supplierApi.getSimpleList({ page_size: 100 })\r\n    supplierOptions.value = response.data || []\r\n  } catch (error) {\r\n    console.error('Load suppliers error:', error)\r\n    message.error('加载供应商列表失败')\r\n  } finally {\r\n    supplierLoading.value = false\r\n  }\r\n}\r\n\r\nconst searchSuppliers = async (query) => {\r\n  supplierLoading.value = true\r\n  try {\r\n    const params = query ? { search: query, page_size: 50 } : { page_size: 100 }\r\n    const response = await supplierApi.getSimpleList(params)\r\n    supplierOptions.value = response.data || []\r\n  } catch (error) {\r\n    console.error('Search suppliers error:', error)\r\n    message.error('搜索供应商失败')\r\n  } finally {\r\n    supplierLoading.value = false\r\n  }\r\n}\r\n\r\nconst handleSupplierChange = async (supplierId) => {\r\n  supplierContacts.value = []\r\n  \r\n  if (!supplierId) return\r\n  \r\n  try {\r\n    const response = await supplierApi.getContacts(supplierId)\r\n    supplierContacts.value = response.data || []\r\n  } catch (error) {\r\n    console.error('Get supplier contacts error:', error)\r\n    message.error('获取供应商联系人失败')\r\n  }\r\n}\r\n\r\nconst addSpec = () => {\r\n  specifications.value.push({ key: '', value: '' })\r\n}\r\n\r\nconst removeSpec = (index) => {\r\n  if (specifications.value.length > 1) {\r\n    specifications.value.splice(index, 1)\r\n  }\r\n}\r\n\r\nconst filterOption = (input, option) => {\r\n  return option.label.toLowerCase().includes(input.toLowerCase())\r\n}\r\n\r\nconst disabledDate = (current) => {\r\n  // 禁用未来日期\r\n  return current && current > dayjs().endOf('day')\r\n}\r\n\r\nconst validateSpecifications = () => {\r\n  // 新增模式下不需要验证规格参数\r\n  if (!props.isEdit) {\r\n    return true\r\n  }\r\n  \r\n  const validSpecs = specifications.value.filter(spec => spec.key && spec.value)\r\n  if (validSpecs.length === 0) {\r\n    message.warning('请至少添加一个有效的规格参数')\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nconst handleSubmit = async () => {\r\n  try {\r\n    await formRef.value.validate()\r\n    \r\n    if (!validateSpecifications()) {\r\n      return\r\n    }\r\n    \r\n    submitLoading.value = true\r\n    \r\n    // 显示加载提示\r\n    const loadingMessage = message.loading(\r\n      props.isEdit ? '正在更新设备信息...' : '正在创建设备...', \r\n      0\r\n    )\r\n    \r\n    // 处理规格参数（仅在编辑模式下）\r\n    const submitData = { ...formData }\r\n    \r\n    if (props.isEdit) {\r\n      const specs = {}\r\n      specifications.value.forEach(spec => {\r\n        if (spec.key && spec.value) {\r\n          specs[spec.key] = spec.value\r\n        }\r\n      })\r\n      submitData.specifications = specs\r\n    }\r\n    \r\n    if (props.isEdit && props.assetData?.id) {\r\n      await hardwareAssetApi.update(props.assetData.id, submitData)\r\n      loadingMessage()\r\n      message.success('设备信息更新成功！')\r\n    } else {\r\n      await hardwareAssetApi.create(submitData)\r\n      loadingMessage()\r\n      message.success('设备创建成功！')\r\n    }\r\n    \r\n    emit('success')\r\n    handleClose()\r\n  } catch (error) {\r\n    console.error('Submit error:', error)\r\n    \r\n    // 详细的错误处理\r\n    let errorMessage = '操作失败，请重试'\r\n    if (error.response) {\r\n      const { status, data } = error.response\r\n      if (status === 400) {\r\n        if (data && typeof data === 'object') {\r\n          const errorMessages = []\r\n          Object.entries(data).forEach(([field, messages]) => {\r\n            if (Array.isArray(messages)) {\r\n              errorMessages.push(...messages)\r\n            } else {\r\n              errorMessages.push(messages)\r\n            }\r\n          })\r\n          errorMessage = errorMessages.join(', ') || '请检查输入的数据格式'\r\n        } else {\r\n          errorMessage = data?.message || '请检查输入的数据格式'\r\n        }\r\n      } else if (status === 409) {\r\n        errorMessage = '资产编号或序列号已存在，请使用其他值'\r\n      } else if (status === 500) {\r\n        errorMessage = '服务器内部错误，请稍后重试'\r\n      }\r\n    } else if (error.message) {\r\n      errorMessage = error.message\r\n    }\r\n    \r\n    message.error(errorMessage)\r\n  } finally {\r\n    submitLoading.value = false\r\n  }\r\n}\r\n\r\nconst handleSubmitFailed = (errorInfo) => {\r\n  console.log('Form validation failed:', errorInfo)\r\n  message.error('请检查表单填写是否正确')\r\n}\r\n\r\nconst handleClose = () => {\r\n  dialogVisible.value = false\r\n  nextTick(() => {\r\n    resetForm()\r\n  })\r\n}\r\n\r\n// 监听器\r\nwatch(\r\n  () => props.visible,\r\n  (newVal) => {\r\n    if (newVal) {\r\n      nextTick(() => {\r\n        if (props.isEdit) {\r\n          loadFormData()\r\n        } else {\r\n          resetForm()\r\n        }\r\n      })\r\n    }\r\n  }\r\n)\r\n\r\n// 生命周期\r\nonMounted(() => {\r\n  loadUsers()\r\n  loadSuppliers()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n/* 表单容器 - 蓝白主题 */\r\n.form-section {\r\n  margin-bottom: 24px;\r\n  padding: 24px;\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  border: 1px solid #e8f4fd;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.06);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.form-section:hover {\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n/* 标题样式 - 蓝白主题 */\r\n.section-title {\r\n  margin: 0 0 20px 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  position: relative;\r\n  padding-left: 12px;\r\n}\r\n\r\n/* 规格参数样式 */\r\n.spec-item {\r\n  margin-bottom: 8px;\r\n  padding: 8px;\r\n  background: #fafafa;\r\n  border-radius: 4px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.spec-item:hover {\r\n  border-color: #d9d9d9;\r\n}\r\n\r\n.section-title::before {\r\n  content: '';\r\n  position: absolute;\r\n  left: 0;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 4px;\r\n  height: 16px;\r\n  background: #1890ff;\r\n  border-radius: 2px;\r\n}\r\n\r\n/* 表单项美化 */\r\n.form-item {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-item .ant-form-item-label {\r\n  text-align: left !important;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.form-item .ant-form-item-label > label {\r\n  color: #262626;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 输入框样式 - 蓝白主题 */\r\n.form-item .ant-input,\r\n.form-item .ant-select-selector,\r\n.form-item .ant-picker,\r\n.form-item .ant-input-number {\r\n  border-radius: 6px;\r\n  border: 1px solid #d9d9d9;\r\n  background: #ffffff;\r\n}\r\n\r\n.form-item .ant-input:hover,\r\n.form-item .ant-select-selector:hover,\r\n.form-item .ant-picker:hover,\r\n.form-item .ant-input-number:hover {\r\n  border-color: #40a9ff;\r\n}\r\n\r\n.form-item .ant-input:focus,\r\n.form-item .ant-select-focused .ant-select-selector,\r\n.form-item .ant-picker-focused,\r\n.form-item .ant-input-number-focused {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n/* 底部按钮样式 - 蓝白主题 */\r\n.dialog-footer {\r\n  text-align: right;\r\n  padding: 24px 0;\r\n  background: #ffffff;\r\n}\r\n\r\n.dialog-footer .ant-btn {\r\n  margin-left: 12px;\r\n  border-radius: 6px;\r\n}\r\n\r\n.dialog-footer .ant-btn:first-child {\r\n  border-color: #d9d9d9;\r\n  color: #666;\r\n}\r\n\r\n.dialog-footer .ant-btn:first-child:hover {\r\n  border-color: #40a9ff;\r\n  color: #40a9ff;\r\n}\r\n\r\n.dialog-footer .ant-btn[type=\"primary\"] {\r\n  background: #1890ff;\r\n  border-color: #1890ff;\r\n}\r\n\r\n.dialog-footer .ant-btn[type=\"primary\"]:hover {\r\n  background: #40a9ff;\r\n  border-color: #40a9ff;\r\n}\r\n\r\n/* 响应式优化 */\r\n@media (max-width: 768px) {\r\n  .form-section {\r\n    padding: 20px;\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .section-title {\r\n    font-size: 16px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .dialog-footer {\r\n    padding: 20px 0;\r\n  }\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\HardwareAssetTable.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetTable.vue",["527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546"],"<template>\r\n  <div class=\"software-asset-table-container\">\r\n    <!-- 软件资产统计按钮组 -->\r\n    <div class=\"software-stats-container\">\r\n      <div class=\"stats-header\">\r\n        <div class=\"page-title\">\r\n          <h3>\r\n            <UnorderedListOutlined class=\"title-icon\" />\r\n            软件资产列表\r\n          </h3>\r\n        </div>\r\n        <!-- 软件资产统计按钮组 -->\r\n        <div class=\"software-stats-buttons\">\r\n          <div \r\n            class=\"stats-button active\"\r\n            :class=\"{ 'stats-active': currentFilter === 'in_use' }\"\r\n            @click=\"handleStatsClick('in_use')\"\r\n          >\r\n            <div class=\"button-icon\">\r\n              <i class=\"anticon anticon-check-circle\"></i>\r\n            </div>\r\n            <div class=\"button-content\">  \r\n              <div class=\"button-title\">在用</div>\r\n              <div class=\"button-count\">{{ activeCount || 0 }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"software-stats-buttons\">\r\n          <div \r\n            class=\"stats-button active\"\r\n            :class=\"{ 'stats-active': currentFilter === 'block_up' }\"\r\n            @click=\"handleStatsClick('block_up')\"\r\n          >\r\n            <div class=\"button-icon\">\r\n              <i class=\"anticon anticon-check-circle\"></i>\r\n            </div>\r\n            <div class=\"button-content\">  \r\n              <div class=\"button-title\">停用</div>\r\n              <div class=\"button-count\">{{ blockUpCount || 0 }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n    <!-- 查询筛选区域 -->\r\n    <div class=\"filter-section\">\r\n      <div class=\"filter-header\">\r\n        <h4 class=\"filter-title\">\r\n          <SearchOutlined class=\"title-icon\" />\r\n          查询筛选\r\n        </h4>\r\n        <div class=\"filter-actions\">\r\n          <a-space size=\"middle\">\r\n            <a-button type=\"link\" @click=\"toggleAdvancedFilter\" class=\"expand-btn\">\r\n              {{ showAdvancedFilter ? '收起' : '展开' }}\r\n              <DownOutlined :class=\"{ 'rotate-180': showAdvancedFilter }\" />\r\n            </a-button>\r\n            <a-button type=\"primary\" @click=\"handleSearch\">\r\n              <template #icon><SearchOutlined /></template>\r\n              搜索\r\n            </a-button>\r\n            <a-button @click=\"handleReset\">\r\n              <template #icon><ReloadOutlined /></template>\r\n              重置\r\n            </a-button>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n      <div class=\"filter-content\">\r\n        <!-- 基础搜索 - 始终显示 -->\r\n        <a-row :gutter=\"[12, 8]\">\r\n          <a-col :span=\"24\">\r\n            <div class=\"filter-item\">\r\n              <label class=\"filter-label\">软件名称/版本</label>\r\n              <a-input\r\n                :value=\"searchKeyword\"\r\n                @input=\"handleSearchInput\"\r\n                placeholder=\"输入软件名称或版本\" \r\n                allow-clear\r\n              >\r\n                <template #prefix><SearchOutlined /></template>\r\n              </a-input>\r\n            </div>\r\n          </a-col>\r\n        </a-row>\r\n        \r\n        <!-- 高级筛选 - 可折叠 -->\r\n        <div v-show=\"showAdvancedFilter\" class=\"advanced-filter\">\r\n          <a-divider>高级筛选</a-divider>\r\n          <a-row :gutter=\"[12, 8]\">\r\n            <a-col :xl=\"8\" :lg=\"12\" :md=\"24\" :sm=\"24\">\r\n              <div class=\"filter-item\">\r\n                <label class=\"filter-label\">资产状态</label>\r\n                <a-select \r\n                  :value=\"assetStatus\" \r\n                  @change=\"handleStatusChange\"\r\n                  placeholder=\"选择资产状态\" \r\n                  allow-clear\r\n                  :loading=\"dictionaryLoading\"\r\n                  style=\"width: 100%\"\r\n                >\r\n                  <a-select-option \r\n                    v-for=\"option in assetStatusOptions\" \r\n                    :key=\"option.value\" \r\n                    :value=\"option.value\"\r\n                  >\r\n                    <a-tag :color=\"option.color\" size=\"small\">{{ option.label }}</a-tag>\r\n                  </a-select-option>\r\n                </a-select>\r\n              </div>\r\n            </a-col>\r\n            <a-col :xl=\"8\" :lg=\"12\" :md=\"24\" :sm=\"24\">\r\n              <div class=\"filter-item\">\r\n                <label class=\"filter-label\">软件类型</label>\r\n                <a-select \r\n                  :value=\"softwareType\" \r\n                  @change=\"handleTypeChange\"\r\n                  placeholder=\"选择软件类型\" \r\n                  allow-clear\r\n                  :loading=\"dictionaryLoading\"\r\n                  style=\"width: 100%\"\r\n                >\r\n                  <a-select-option \r\n                    v-for=\"option in softwareTypeOptions\" \r\n                    :key=\"option.value\" \r\n                    :value=\"option.value\"\r\n                  >\r\n                    <a-tag :color=\"option.color\" size=\"small\">{{ option.label }}</a-tag>\r\n                  </a-select-option>\r\n                </a-select>\r\n              </div>\r\n            </a-col>\r\n            <a-col :xl=\"8\" :lg=\"12\" :md=\"24\" :sm=\"24\">\r\n              <div class=\"filter-item\">\r\n                <label class=\"filter-label\">制造商</label>\r\n                <a-input\r\n                  :value=\"manufacturer\"\r\n                  @input=\"handleManufacturerInput\"\r\n                  placeholder=\"输入制造商\" \r\n                  allow-clear\r\n                  style=\"width: 100%\"\r\n                />\r\n              </div>\r\n            </a-col>\r\n          </a-row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 批量操作工具栏 -->\r\n    <div class=\"batch-toolbar\" v-if=\"selectedRowKeys.length > 0\">\r\n      <div class=\"selected-info\">\r\n        <span>已选择 {{ selectedRowKeys.length }} 项</span>\r\n        <a-button type=\"link\" size=\"small\" @click=\"clearSelection\">清空</a-button>\r\n      </div>\r\n      <div class=\"batch-actions\">\r\n        <a-button \r\n          type=\"primary\" \r\n          size=\"small\" \r\n          @click=\"batchUpdateMonitoring\"\r\n          :loading=\"batchMonitoringLoading\"\r\n        >\r\n          批量监控\r\n        </a-button>\r\n        <a-button \r\n          size=\"small\" \r\n          @click=\"batchToggleStatus\"\r\n          :loading=\"batchToggleLoading\"\r\n        >\r\n          批量{{ allSelectedActive ? '停用' : '启用' }}\r\n        </a-button>\r\n        <a-button \r\n          type=\"danger\" \r\n          size=\"small\" \r\n          @click=\"batchDelete\"\r\n          :loading=\"batchDeleteLoading\"\r\n        >\r\n          批量删除\r\n        </a-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 软件资产列表表格 -->\r\n    <div class=\"table-wrapper\">\r\n      <!-- 表格头部 -->\r\n      <div class=\"table-header\" v-if=\"currentFilter === 'in_use'\">\r\n        <div class=\"table-title\">\r\n          <h4>软件列表</h4>\r\n        </div>\r\n        <div class=\"table-actions\">\r\n          <a-space size=\"middle\">\r\n            <a-button v-if=\"currentFilter !== 'scrapped'\" type=\"primary\" @click=\"handleAdd\">\r\n              <template #icon><PlusOutlined /></template>\r\n              新增软件\r\n            </a-button>\r\n            <a-button v-if=\"currentFilter !== 'scrapped'\" @click=\"handleImport\">\r\n              <template #icon><UploadOutlined /></template>\r\n              导入数据\r\n            </a-button>\r\n            <a-button v-if=\"currentFilter !== 'scrapped'\" @click=\"handleExport\">\r\n              <template #icon><DownloadOutlined /></template>\r\n              导出数据\r\n            </a-button>\r\n            <a-tooltip v-if=\"currentFilter !== 'scrapped'\" title=\"批量监控\">\r\n              <a-button @click=\"handleHeaderBatchMonitoring\">\r\n                <template #icon><ApiOutlined /></template>\r\n              </a-button>\r\n            </a-tooltip>\r\n            <a-tooltip title=\"列表管理\">\r\n              <a-button @click=\"handleListManagement\">\r\n                <template #icon><UnorderedListOutlined /></template>\r\n              </a-button>\r\n            </a-tooltip>\r\n          </a-space>\r\n        </div>\r\n      </div>\r\n      <a-table\r\n        :columns=\"columns\"\r\n        :data-source=\"dataSource\"\r\n        :row-key=\"record => record.id\"\r\n        :pagination=\"pagination\"\r\n        :loading=\"loading\"\r\n        :row-selection=\"rowSelection\"\r\n        size=\"middle\"\r\n        @change=\"handleTableChange\"\r\n      >\r\n        <!-- 使用新的v-slot语法 -->\r\n        <template #bodyCell=\"{ column, record }\">\r\n          <!-- 资产标签 列 -->\r\n          <template v-if=\"column.key === 'asset_tag'\">\r\n            <span :title=\"record.asset_tag\">{{ record.asset_tag || '-' }}</span>\r\n          </template>\r\n          <!-- 软件类型 列 -->\r\n          <template v-else-if=\"column.key === 'software_type'\">\r\n            <a-tag :color=\"getSoftwareTypeColor(record.software_type)\" size=\"small\">\r\n              {{ getSoftwareTypeLabel(record.software_type) || '-' }}\r\n            </a-tag>\r\n          </template>\r\n          <!-- 软件名称 列 -->\r\n          <template v-else-if=\"column.key === 'software_name'\">\r\n            <span :title=\"record.software_name\">{{ record.software_name || '-' }}</span>\r\n          </template>\r\n          <!-- 软件版本 列 -->\r\n          <template v-else-if=\"column.key === 'software_version'\">\r\n            <span :title=\"record.software_version\">{{ record.software_version || '-' }}</span>\r\n          </template>\r\n          <!-- 许可证 列 -->\r\n          <template v-else-if=\"column.key === 'software_license'\">\r\n            <span :title=\"record.software_license\">{{ record.software_license || '-' }}</span>\r\n          </template>\r\n          <!-- 制造商 列 -->\r\n          <template v-else-if=\"column.key === 'vendor'\">\r\n            <span :title=\"record.vendor\">{{ record.vendor || '-' }}</span>\r\n          </template>\r\n          <!-- 资产负责人 列 -->\r\n          <template v-else-if=\"column.key === 'asset_owener'\">\r\n            <span :title=\"record.asset_owener\">{{ record.asset_owener || '-' }}</span>\r\n          </template>\r\n          <!-- 供应商负责人 列 -->\r\n          <template v-else-if=\"column.key === 'supplier_contact'\">\r\n            <span :title=\"record.supplier_contact\">{{ record.supplier_contact || '-' }}</span>\r\n          </template>\r\n          <!-- 监控状态列（兼容旧字段） -->\r\n          <template v-else-if=\"column.key === 'monitoring_status'\">\r\n            <a-switch\r\n              :checked=\"record.monitoring_status\"\r\n              :loading=\"record.toggleLoading\"\r\n              @change=\"(checked) => toggleMonitoring(record, checked)\"\r\n              size=\"small\"\r\n            />\r\n            <span class=\"monitoring-text\">\r\n              {{ record.monitoring_status ? '已监控' : '未监控' }}\r\n            </span>\r\n          </template>\r\n          <!-- 保修状态 列 -->\r\n          <template v-else-if=\"column.key === 'warranty_status'\">\r\n              {{ record.warranty_status || '-' }}\r\n          </template> \r\n          <template v-else-if=\"column.key === 'action'\">\r\n            <div class=\"action-buttons\">\r\n              <a-tooltip title=\"查看详情\">\r\n                <a-button \r\n                  type=\"text\" \r\n                  size=\"small\" \r\n                  @click=\"viewDetails(record)\"\r\n                  class=\"action-btn\"\r\n                >\r\n                  <template #icon><EyeOutlined /></template>\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-tooltip title=\"编辑\">\r\n                <a-button \r\n                  type=\"text\" \r\n                  size=\"small\" \r\n                  @click=\"editAsset(record)\"\r\n                  class=\"action-btn\"\r\n                >\r\n                  <template #icon><EditOutlined /></template>\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-tooltip title=\"历史记录\">\r\n                <a-button \r\n                  type=\"text\" \r\n                  size=\"small\" \r\n                  @click=\"viewHistory(record)\"\r\n                  class=\"action-btn\"\r\n                >\r\n                  <template #icon><HistoryOutlined /></template>\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-popconfirm\r\n                title=\"确定要删除这个设备吗？\"\r\n                @confirm=\"deleteAsset(record)\"\r\n                ok-text=\"确定\"\r\n                cancel-text=\"取消\"\r\n              >\r\n                <a-tooltip title=\"删除\">\r\n                  <a-button \r\n                    type=\"text\" \r\n                    size=\"small\" \r\n                    danger\r\n                    :loading=\"record.deleteLoading\"\r\n                    class=\"action-btn danger\"\r\n                  >\r\n                    <template #icon><DeleteOutlined /></template>\r\n                  </a-button>\r\n                </a-tooltip>\r\n              </a-popconfirm>\r\n            </div>\r\n          </template>\r\n        </template>\r\n        \r\n      </a-table>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted, watch } from 'vue'\r\nimport {\r\n  PlusOutlined,\r\n  UploadOutlined,\r\n  DownloadOutlined,\r\n  ApiOutlined,\r\n  UnorderedListOutlined,\r\n  SearchOutlined,\r\n  ReloadOutlined,\r\n  CheckCircleOutlined,\r\n  ClockCircleOutlined,\r\n  ToolOutlined,\r\n  ExclamationCircleOutlined,\r\n  DatabaseOutlined,\r\n  NodeIndexOutlined,\r\n  HddOutlined,\r\n  SafetyOutlined,\r\n  DownOutlined,\r\n  EyeOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  HistoryOutlined, \r\n  NodeExpandOutlined\r\n} from '@ant-design/icons-vue'\r\nimport { message } from 'ant-design-vue'\r\n// Props\r\nconst props = defineProps({\r\n  dataSource: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  loading: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  pagination: {\r\n    type: Object,\r\n    default: () => ({\r\n      current: 1,\r\n      pageSize: 10,\r\n      total: 0,\r\n      showSizeChanger: true,\r\n      showQuickJumper: true,\r\n      showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n    })\r\n  },\r\n  selectedRowKeys: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  searchKeyword: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  assetStatus: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  softwareType: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  manufacturer: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  totalCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  inUseCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  activeCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  blockUpCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  retiredCount: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n\r\n  batchDeleting: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  currentFilter: {\r\n    type: String,\r\n    default : \"in_use\"\r\n  }, \r\n  detailDialogVisible: {\r\n    type : Boolean,\r\n    default : false\r\n  },\r\n})\r\n\r\n// Emits\r\nconst emit = defineEmits([\r\n  'search',\r\n  'reset',\r\n  'add',\r\n  'edit',\r\n  'delete',\r\n  'view',\r\n  'export',\r\n  'import',\r\n  'batch-delete',\r\n  'clear-selection',\r\n  'table-change',\r\n  'search-input',\r\n  'status-change',\r\n  'type-change',\r\n  'manufacturer-input',\r\n  'batch-operations',\r\n  'list-management',\r\n  'statsFilter'\r\n])\r\n\r\n// 响应式数据\r\nconst showAdvancedFilter = ref(false)\r\nconst dictionaryLoading = ref(false)\r\nconst selectedRows = ref([])\r\nconst currentFilter = ref(props.currentFilter)\r\n\r\n// 资产状态选项\r\nconst assetStatusOptions = ref([\r\n  { value: 'in_use', label: '使用中', color: 'green' },\r\n  { value: 'idle', label: '闲置', color: 'orange' },\r\n  { value: 'maintenance', label: '维护中', color: 'blue' },\r\n  { value: 'scrapped', label: '报废', color: 'red' }\r\n])\r\n\r\n// 软件类型选项\r\nconst softwareTypeOptions = ref([\r\n  { value: 'system', label: '系统软件', color: 'blue' },\r\n  { value: 'application', label: '应用软件', color: 'green' },\r\n  { value: 'development', label: '开发工具', color: 'purple' },\r\n  { value: 'security', label: '安全软件', color: 'red' },\r\n  { value: 'database', label: '数据库', color: 'orange' },\r\n  { value: 'middleware', label: '中间件', color: 'cyan' },\r\n  { value: 'other', label: '其他', color: 'default' }\r\n])\r\n\r\n// 表格列配置\r\nconst columns = computed( () => {\r\n  const inUseColumns = [\r\n    {\r\n      title: '资产标签',\r\n      dataIndex: 'asset_tag',\r\n      key: 'asset_tag',\r\n      width: 100,\r\n      fixed: 'left',\r\n      slots: { customRender: 'asset_tag' }\r\n    },\r\n    {\r\n      title: '型号',\r\n      dataIndex: 'software_type',\r\n      key: 'software_type',\r\n      width: 200\r\n    },\r\n    {\r\n      title: '制造商',\r\n      dataIndex: 'vendor',\r\n      key: 'vendor',\r\n      width: 120,\r\n    },\r\n    { \r\n      title: '监控状态',\r\n      dataIndex: 'monitoring_status',\r\n      key: 'monitoring_status',\r\n      width: 100\r\n    },\r\n    {\r\n      title: '保修状态',\r\n      dataIndex: 'warranty_status',\r\n      key: 'warranty_status',\r\n      width: 100\r\n    },\r\n    {\r\n      title: '资产负责人',\r\n      dataIndex: 'asset_owener',\r\n      key: 'asset_owener',\r\n      width: 100\r\n    },\r\n    {\r\n      title: '供应商负责人',\r\n      dataIndex: 'supplier_contact',\r\n      key: 'supplier_contact',\r\n      width: 100\r\n    },\r\n    {\r\n        title: '操作',\r\n        key: 'action',\r\n        align: 'center',\r\n        width: 120,\r\n    }]\r\n\r\n    const BlockUpColumns = [\r\n    {\r\n      title: '资产标签',\r\n      dataIndex: 'asset_tag',\r\n      key: 'asset_tag',\r\n      width: 120,\r\n      sorter: true\r\n    },\r\n    {\r\n      title: '型号',\r\n      dataIndex: 'software_type',\r\n      key: 'software_type',\r\n      width: 150,\r\n      ellipsis: true\r\n    },\r\n    {\r\n      title: '制造商',\r\n      dataIndex: 'vendor',\r\n      key: 'vendor',\r\n      width: 120\r\n    }\r\n  ];\r\n    const allColumns = []\r\n    switch (props.currentFilter) {\r\n      case 'in_use':\r\n        return inUseColumns;\r\n      case 'block_up':\r\n        return BlockUpColumns;\r\n      default:\r\n        return allColumns;\r\n    }\r\n})\r\n\r\n// 行选择配置\r\nconst rowSelection = computed(() => ({\r\n  selectedRowKeys: props.selectedRowKeys,\r\n  onChange: (keys, rows) => {\r\n    selectedRows.value = rows\r\n    emit('select-change', keys)\r\n  },\r\n  onSelectAll: (selected, selectedRows, changeRows) => {\r\n    console.log('onSelectAll', selected, selectedRows, changeRows)\r\n  }\r\n}))\r\n\r\n// 监控状态更新\r\nconst toggleMonitoring = async (record, checked) => {\r\n  record.toggleLoading = true;\r\n  try {\r\n    await emit('toggleMonitoring', record, checked);\r\n  } finally {\r\n    record.toggleLoading = false;\r\n  }\r\n}; \r\n\r\n\r\n\r\n// 方法\r\nconst toggleAdvancedFilter = () => {\r\n  showAdvancedFilter.value = !showAdvancedFilter.value\r\n}\r\n\r\nconst handleSearchInput = (e) => {\r\n  emit('searchInput', e.target.value)\r\n}\r\n\r\nconst handleStatusChange = (value) => {\r\n  emit('status-change', value)\r\n}\r\n\r\nconst handleTypeChange = (value) => {\r\n  emit('type-change', value)\r\n}\r\n\r\nconst handleManufacturerInput = (e) => {\r\n  emit('manufacturer-input', e.target.value)\r\n}\r\n\r\nconst viewDetails = (record) => {\r\n  emit('viewDetails', record);\r\n};\r\n\r\nconst handleSearch = () => {\r\n  const searchParams = {\r\n    keyword: props.searchKeyword,\r\n    assetStatus: props.assetStatus,\r\n    softwareType: props.softwareType,\r\n    manufacturer: props.manufacturer\r\n  }\r\n  emit('search', searchParams)\r\n}\r\n\r\nconst handleReset = () => {\r\n  emit('reset')\r\n}\r\n\r\nconst handleAdd = () => {\r\n  emit('add')\r\n}\r\n\r\nconst viewHistory = (record) => {\r\n  emit('history', record)\r\n}\r\n\r\nconst handleEdit = (record) => {\r\n  emit('edit', record)\r\n}\r\n\r\nconst handleDelete = (record) => {\r\n  emit('delete', record)\r\n}\r\n\r\nconst handleView = (record) => {\r\n  emit('view', record)\r\n}\r\n\r\nconst handleExport = () => {\r\n  emit('export')\r\n}\r\n\r\nconst handleImport = () => {\r\n  emit('import')\r\n}\r\n\r\nconst handleBatchOperations = () => {\r\n  emit('batch-operations')\r\n}\r\n\r\nconst handleListManagement = () => {\r\n  emit('list-management')\r\n}\r\n\r\nconst editAsset = (record) => {\r\n  emit('editAsset', record)\r\n}\r\n\r\n// 统计按钮点击处理\r\nconst handleStatsClick = (filterType) => {\r\n  emit('statsFilter', filterType);\r\n};\r\n\r\nconst handleTableChange = (pagination, filters, sorter) => {\r\n  emit('table-change', { pagination, filters, sorter })\r\n}\r\n\r\n// 获取软件类型颜色\r\nconst getSoftwareTypeColor = (type) => {\r\n  const option = softwareTypeOptions.value.find(item => item.value === type)\r\n  return option ? option.color : 'default'\r\n}\r\n\r\n// 获取软件类型标签\r\nconst getSoftwareTypeLabel = (type) => {\r\n  const option = softwareTypeOptions.value.find(item => item.value === type)\r\n  return option ? option.label : type\r\n}\r\n\r\n// 获取许可证状态颜色\r\nconst getLicenseStatusColor = (status) => {\r\n  const colorMap = {\r\n    'valid': 'green',\r\n    'expired': 'red',\r\n    'near_expired': 'orange',\r\n    'unlimited': 'blue'\r\n  }\r\n  return colorMap[status] || 'default'\r\n}\r\n\r\n// 获取许可证状态标签\r\nconst getLicenseStatusLabel = (status) => {\r\n  const labelMap = {\r\n    'valid': '有效',\r\n    'expired': '已过期',\r\n    'near_expired': '即将过期',\r\n    'unlimited': '永久'\r\n  }\r\n  return labelMap[status] || status\r\n}\r\n\r\nconst getLicenseEndDateColor = (endDate) => {\r\n  if (!endDate) return '#666'\r\n  \r\n  const today = new Date()\r\n  const end = new Date(endDate)\r\n  const diffDays = Math.ceil((end - today) / (1000 * 60 * 60 * 24))\r\n  \r\n  if (diffDays < 0) return '#f5222d' // 已过期\r\n  if (diffDays <= 30) return '#fa8c16' // 即将过期\r\n  return '#52c41a' // 正常\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 简洁容器样式 */\r\n.hardware-asset-table-container {\r\n  background: #ffffff;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  min-height: calc(100vh - 40px);\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n}\r\n\r\n.table-wrapper {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-height: 0;\r\n}\r\n\r\n/* 硬件设备统计容器样式 */\r\n.hardware-stats-container {\r\n  background: #fff;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 统计头部样式 */\r\n.stats-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px 24px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  color: white;\r\n}\r\n\r\n.page-title h3{\r\n  margin: 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #1e40af;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.title-icon {\r\n  font-size: 22px;\r\n  color: rgba(255, 255, 255, 0.9);\r\n}\r\n\r\n/* 硬件设备统计按钮组样式 */\r\n.stats-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 80px;\r\n  padding: 0 24px;\r\n  gap: 24px;\r\n}\r\n\r\n\r\n.software-stats-buttons {\r\n  display: flex;\r\n  gap: 16px;\r\n  flex: 1;\r\n  justify-content: center;\r\n  max-width: 500px;\r\n}\r\n\r\n.table-actions {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.stats-button {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 8px 12px;\r\n  background: white;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);\r\n  transition: all 0.3s ease;\r\n  cursor: pointer;\r\n  border: 2px solid transparent;\r\n  min-width: 160px;\r\n  max-width: 200px;\r\n  height: 56px;\r\n}\r\n\r\n.stats-button:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);\r\n  cursor: pointer;  \r\n}\r\n\r\n.stats-button.stats-active {\r\n  border: 1px solid #1890ff;\r\n  box-shadow: 0 4px 16px rgba(24, 144, 255, 0.2);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.button-icon {\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 6px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 8px;\r\n  font-size: 14px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.button-content {\r\n  flex: 1;\r\n}\r\n\r\n.button-title {\r\n  font-size: 11px;\r\n  color: #666;\r\n  margin-bottom: 1px;\r\n  font-weight: 500;\r\n}\r\n\r\n.button-count {\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n\r\n\r\n\r\n/* 不同状态的颜色主题 */\r\n.stats-button.total .button-icon {\r\n  background: linear-gradient(135deg, #667eea, #764ba2);\r\n  color: white;\r\n}\r\n\r\n.stats-button.total .button-count {\r\n  color: #667eea;\r\n}\r\n\r\n.stats-button.active .button-icon {\r\n  background: linear-gradient(135deg, #4facfe, #00f2fe);\r\n  color: white;\r\n}\r\n\r\n.stats-button.active .button-count {\r\n  color: #1890ff;\r\n}\r\n\r\n.stats-button.available .button-icon {\r\n  background: linear-gradient(135deg, #43e97b, #38f9d7);\r\n  color: white;\r\n}\r\n\r\n.stats-button.available .button-count {\r\n  color: #52c41a;\r\n}\r\n\r\n.stats-button.warranty .button-icon {\r\n  background: linear-gradient(135deg, #fa709a, #fee140);\r\n  color: white;\r\n}\r\n\r\n.stats-button.warranty .button-count {\r\n  color: #fa8c16;\r\n}\r\n\r\n.stats-button.scrapped .button-icon {\r\n  background: linear-gradient(135deg, #ff4d4f, #ff7875);\r\n  color: white;\r\n}\r\n\r\n.stats-button.scrapped .button-count {\r\n  color: #ff4d4f;\r\n}\r\n\r\n/* 表格头部样式 */\r\n.table-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  border-radius: 6px 6px 0 0;\r\n}\r\n\r\n.table-title h4 {\r\n  margin: 0;\r\n  font-size: 17px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n/* 简洁操作按钮区域 */\r\n.table-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .stats-header {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .hardware-stats-buttons {\r\n    max-width: none;\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .table-header {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 16px;\r\n  }\r\n  \r\n  .table-title {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n    width: 100%;\r\n  }\r\n  \r\n  .stats-inline {\r\n    width: 100%;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .stat-item {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n  \r\n  .hardware-stats-buttons {\r\n    flex-direction: column;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .stats-button {\r\n    min-width: auto;\r\n    max-width: none;\r\n  }\r\n}\r\n\r\n/* 简洁搜索过滤区域 */\r\n.filter-section {\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.expand-btn {\r\n  padding: 4px 8px;\r\n  font-size: 12px;\r\n}\r\n\r\n.rotate-180 {\r\n  transform: rotate(180deg);\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.advanced-filter {\r\n  margin-top: 12px;\r\n  animation: fadeIn 0.3s ease;\r\n  margin-top: 8px;\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.filter-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 12px 24px;\r\n  background: #fff;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.filter-title {\r\n  font-size: 15px;\r\n  font-weight: bold;\r\n  color: #495057;\r\n  margin: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n}\r\n\r\n.title-icon {\r\n  color: #1890ff;\r\n  font-size: 14px;\r\n}\r\n\r\n.filter-actions {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.filter-content {\r\n  padding: 16px 24px;\r\n}\r\n\r\n.filter-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 4px;\r\n}\r\n\r\n.filter-label {\r\n  display: block;\r\n  margin-bottom: 6px;\r\n  font-weight: 500;\r\n  color: #262626;\r\n  font-size: 13px;\r\n}\r\n\r\n/* 简洁批量操作区域 */\r\n.batch-toolbar {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px 16px;\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.selected-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  color: #1890ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.batch-actions {\r\n  display: flex;\r\n  gap: 8px;\r\n}\r\n\r\n.asset-name {\r\n  font-weight: 900;\r\n  background-color: black;\r\n}\r\n\r\n.monitoring-text {\r\n  margin-left: 8px;\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n}\r\n\r\n.no-data {\r\n  color: #bfbfbf;\r\n}\r\n\r\n.time-cell {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2px;\r\n}\r\n\r\n.time-text {\r\n  font-size: 13px;\r\n  color: #262626;\r\n  font-weight: 500;\r\n}\r\n\r\n.time-relative {\r\n  font-size: 11px;\r\n  color: #8c8c8c;\r\n  font-style: italic;\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 4px;\r\n}\r\n\r\n.action-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 28px;\r\n  height: 28px;\r\n  border-radius: 4px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.action-btn:hover {\r\n  background-color: #f5f5f5;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.action-btn.danger:hover {\r\n  background-color: #fff2f0;\r\n  color: #ff4d4f;\r\n}\r\n\r\n.action-btn .anticon {\r\n  font-size: 14px;\r\n}\r\n\r\n/* 简洁输入框样式 */\r\n:deep(.ant-input) {\r\n  border-radius: 6px;\r\n  border: 1px solid #d1d5db;\r\n  background: #ffffff;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n:deep(.ant-input:focus) {\r\n  border-color: #2563eb;\r\n  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);\r\n}\r\n\r\n:deep(.ant-select) {\r\n  border-radius: 6px;\r\n}\r\n\r\n:deep(.ant-select .ant-select-selector) {\r\n  border-radius: 6px !important;\r\n  border: 1px solid #d1d5db !important;\r\n  background: #ffffff !important;\r\n}\r\n\r\n:deep(.ant-select:not(.ant-select-disabled):hover .ant-select-selector) {\r\n  border-color: #2563eb !important;\r\n}\r\n\r\n/* 表格样式优化 */\r\n:deep(.ant-table) {\r\n  font-size: 13px;\r\n}\r\n\r\n:deep(.ant-table-container) {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n:deep(.ant-table-content) {\r\n  overflow: auto;\r\n}\r\n\r\n:deep(.ant-table-body) {\r\n  overflow-y: visible;\r\n}\r\n\r\n:deep(.ant-table-thead > tr > th) {\r\n  background: #ffffff;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n:deep(.ant-table-tbody > tr:hover > td) {\r\n  background: #ffffff;\r\n}\r\n\r\n:deep(.ant-table-row-selected) {\r\n  background: #e6f7ff;\r\n}\r\n\r\n:deep(.ant-table-row-selected:hover > td) {\r\n  background: #bae7ff;\r\n}\r\n\r\n:deep(.ant-pagination) {\r\n  margin: 12px 16px;\r\n  text-align: right;\r\n  flex-shrink: 0;\r\n  border-top: 1px solid #f0f0f0;\r\n  padding-top: 12px;\r\n}\r\n\r\n:deep(.ant-switch) {\r\n  min-width: 28px;\r\n}\r\n\r\n:deep(.ant-tag) {\r\n  margin: 0;\r\n  border-radius: 4px;\r\n}\r\n\r\n/* 只有操作列居中对齐 */\r\n:deep(.ant-table-tbody > tr > td:nth-child(7)) {\r\n  text-align: center !important;\r\n}\r\n\r\n:deep(.ant-table-thead > tr > th:nth-child(7)) {\r\n  text-align: center !important;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareMonitoringActions.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetImport.vue",["547","548","549","550"],"<template>\r\n  <a-modal\r\n    v-model:open=\"dialogVisible\"\r\n    title=\"批量导入软件资产\"\r\n    width=\"600px\"\r\n    :before-close=\"handleClose\"\r\n  >\r\n    <div class=\"import-container\">\r\n      <!-- 步骤指示器 -->\r\n      <a-steps :current=\"currentStep\" status=\"process\">\r\n        <a-step title=\"下载模板\" />\r\n        <a-step title=\"上传文件\" />\r\n        <a-step title=\"数据预览\" />\r\n        <a-step title=\"导入完成\" />\r\n      </a-steps>\r\n      \r\n      <!-- 步骤1: 下载模板 -->\r\n      <div v-if=\"currentStep === 0\" class=\"step-content\">\r\n        <div class=\"template-section\">\r\n          <a-alert\r\n            message=\"导入说明\"\r\n            type=\"info\"\r\n            :closable=\"false\"\r\n            show-icon\r\n          >\r\n            <template #description>\r\n              <p>1. 请先下载导入模板，按照模板格式填写数据</p>\r\n              <p>2. 必填字段：软件名称、版本、软件类型、资产责任人、供应商</p>\r\n              <p>3. 日期格式：YYYY-MM-DD（如：2024-01-15）</p>\r\n              <p>4. 软件类型：系统软件/应用软件/开发工具/数据库/安全软件/其他</p>\r\n              <p>5. 许可证类型：永久许可/订阅许可/试用许可/开源许可</p>\r\n              <p>6. 资产状态：激活/未激活/过期/退役</p>\r\n            </template>\r\n          </a-alert>\r\n          \r\n          <div class=\"template-download\">\r\n            <a-button\r\n              type=\"primary\"\r\n              size=\"large\"\r\n              @click=\"downloadTemplate\"\r\n              :loading=\"downloadLoading\"\r\n            >\r\n              <template #icon><DownloadOutlined /></template>\r\n              下载导入模板\r\n            </a-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 步骤2: 上传文件 -->\r\n      <div v-if=\"currentStep === 1\" class=\"step-content\">\r\n        <div class=\"upload-section\">\r\n          <a-upload-dragger\r\n            v-model:file-list=\"fileList\"\r\n            :multiple=\"false\"\r\n            :before-upload=\"beforeUpload\"\r\n            @change=\"handleFileChange\"\r\n            accept=\".xlsx,.xls\"\r\n            :max-count=\"1\"\r\n          >\r\n            <p class=\"ant-upload-drag-icon\">\r\n              <InboxOutlined />\r\n            </p>\r\n            <p class=\"ant-upload-text\">\r\n              将文件拖到此处，或点击上传\r\n            </p>\r\n            <p class=\"ant-upload-hint\">\r\n              只能上传 xlsx/xls 文件，且不超过 10MB\r\n            </p>\r\n          </a-upload-dragger>\r\n          \r\n          <div v-if=\"uploadFile\" class=\"file-info\">\r\n            <a-tag color=\"green\" size=\"large\">\r\n              <template #icon><FileExcelOutlined /></template>\r\n              {{ uploadFile.name }}\r\n            </a-tag>\r\n            <a-button type=\"text\" @click=\"removeFile\" class=\"remove-btn\">\r\n              <template #icon><CloseOutlined /></template>\r\n            </a-button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 步骤3: 数据预览 -->\r\n      <div v-if=\"currentStep === 2\" class=\"step-content\">\r\n        <div class=\"preview-section\">\r\n          <div class=\"preview-header\">\r\n            <span>数据预览（共 {{ previewData.length }} 条记录）</span>\r\n            <div class=\"validation-summary\">\r\n              <a-tag v-if=\"validRecords > 0\" color=\"green\">\r\n                有效: {{ validRecords }}\r\n              </a-tag>\r\n              <a-tag v-if=\"invalidRecords > 0\" color=\"red\">\r\n                无效: {{ invalidRecords }}\r\n              </a-tag>\r\n            </div>\r\n          </div>\r\n          \r\n          <a-table\r\n            :data-source=\"previewData.slice(0, 10)\"\r\n            :columns=\"previewColumns\"\r\n            :bordered=\"true\"\r\n            :scroll=\"{ y: 300 }\"\r\n            size=\"small\"\r\n            :pagination=\"false\"\r\n          />\r\n          \r\n          <div v-if=\"previewData.length > 10\" class=\"more-records\">\r\n            <a-typography-text type=\"secondary\">仅显示前10条记录，实际将导入 {{ validRecords }} 条有效记录</a-typography-text>\r\n          </div>\r\n          \r\n          <a-alert\r\n            v-if=\"invalidRecords > 0\"\r\n            message=\"存在无效数据\"\r\n            type=\"warning\"\r\n            :closable=\"false\"\r\n            show-icon\r\n            class=\"validation-alert\"\r\n          >\r\n            <template #description>\r\n              <p>发现 {{ invalidRecords }} 条无效记录，这些记录将被跳过。</p>\r\n              <p>请检查数据格式是否正确，必填字段是否完整。</p>\r\n            </template>\r\n          </a-alert>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- 步骤4: 导入完成 -->\r\n      <div v-if=\"currentStep === 3\" class=\"step-content\">\r\n        <div class=\"result-section\">\r\n          <div class=\"result-icon\">\r\n            <CheckCircleOutlined v-if=\"importResult.success\" style=\"font-size: 60px; color: #52c41a;\" />\r\n            <CloseCircleOutlined v-else style=\"font-size: 60px; color: #ff4d4f;\" />\r\n          </div>\r\n          \r\n          <div class=\"result-content\">\r\n            <h3 v-if=\"importResult.success\">导入成功！</h3>\r\n            <h3 v-else>导入失败</h3>\r\n            \r\n            <div class=\"result-details\">\r\n              <p v-if=\"importResult.success\">\r\n                成功导入 <strong>{{ importResult.successCount }}</strong> 条记录\r\n              </p>\r\n              <p v-if=\"importResult.failedCount > 0\">\r\n                失败 <strong>{{ importResult.failedCount }}</strong> 条记录\r\n              </p>\r\n              <p v-if=\"importResult.message\">\r\n                {{ importResult.message }}\r\n              </p>\r\n            </div>\r\n            \r\n            <div v-if=\"importResult.errors && importResult.errors.length > 0\" class=\"error-details\">\r\n              <a-collapse>\r\n                <a-collapse-panel key=\"1\" header=\"查看错误详情\">\r\n                  <div v-for=\"(error, index) in importResult.errors\" :key=\"index\" class=\"error-item\">\r\n                    <span class=\"error-row\">第{{ error.row }}行:</span>\r\n                    <span class=\"error-msg\">{{ error.message }}</span>\r\n                  </div>\r\n                </a-collapse-panel>\r\n              </a-collapse>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <template #footer>\r\n      <div class=\"dialog-footer\">\r\n        <a-button @click=\"handleClose\">取消</a-button>\r\n        <a-button\r\n          v-if=\"currentStep === 0\"\r\n          type=\"primary\"\r\n          @click=\"nextStep\"\r\n          :disabled=\"!templateDownloaded\"\r\n        >\r\n          下一步\r\n        </a-button>\r\n        <a-button\r\n          v-if=\"currentStep === 1\"\r\n          type=\"primary\"\r\n          @click=\"parseFile\"\r\n          :disabled=\"!uploadFile\"\r\n          :loading=\"parseLoading\"\r\n        >\r\n          解析文件\r\n        </a-button>\r\n        <a-button\r\n          v-if=\"currentStep === 2\"\r\n          type=\"primary\"\r\n          @click=\"importData\"\r\n          :disabled=\"validRecords === 0\"\r\n          :loading=\"importLoading\"\r\n        >\r\n          开始导入 ({{ validRecords }}条)\r\n        </a-button>\r\n        <a-button\r\n          v-if=\"currentStep === 3\"\r\n          type=\"primary\"\r\n          @click=\"handleComplete\"\r\n        >\r\n          完成\r\n        </a-button>\r\n      </div>\r\n    </template>\r\n  </a-modal>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed } from 'vue'\r\nimport { message } from 'ant-design-vue'\r\nimport {\r\n  DownloadOutlined,\r\n  InboxOutlined,\r\n  FileExcelOutlined,\r\n  CloseOutlined,\r\n  CheckOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined\r\n} from '@ant-design/icons-vue'\r\nimport { softwareAssetApi } from '@/api/softwareAsset'\r\nimport * as XLSX from 'xlsx'\r\n\r\n// Props\r\nconst props = defineProps({\r\n  visible: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\n// Emits\r\nconst emit = defineEmits(['update:visible', 'success'])\r\n\r\n// 响应式数据\r\nconst currentStep = ref(0)\r\nconst templateDownloaded = ref(false)\r\nconst downloadLoading = ref(false)\r\nconst uploadFile = ref(null)\r\nconst fileList = ref([])\r\nconst parseLoading = ref(false)\r\nconst importLoading = ref(false)\r\nconst previewData = ref([])\r\nconst importResult = ref({\r\n  success: false,\r\n  successCount: 0,\r\n  failedCount: 0,\r\n  message: '',\r\n  errors: []\r\n})\r\n\r\n// 表格列配置\r\nconst previewColumns = [\r\n  {\r\n    title: '#',\r\n    dataIndex: 'index',\r\n    key: 'index',\r\n    width: 50,\r\n    customRender: ({ index }) => index + 1\r\n  },\r\n  {\r\n    title: '软件名称',\r\n    dataIndex: 'software_name',\r\n    key: 'software_name',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '版本',\r\n    dataIndex: 'version',\r\n    key: 'version',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '软件类型',\r\n    dataIndex: 'software_type',\r\n    key: 'software_type',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '责任人',\r\n    dataIndex: 'asset_owner',\r\n    key: 'asset_owner',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '状态',\r\n    key: 'status',\r\n    width: 80,\r\n    customRender: ({ record }) => {\r\n      if (record._valid) {\r\n        return '<CheckOutlined style=\"color: #52c41a;\" />'\r\n      } else {\r\n        return '<CloseOutlined style=\"color: #ff4d4f;\" />'\r\n      }\r\n    }\r\n  },\r\n  {\r\n    title: '错误信息',\r\n    key: 'errors',\r\n    minWidth: 150,\r\n    customRender: ({ record }) => {\r\n      if (record._errors && record._errors.length > 0) {\r\n        return `<span class=\"error-text\">${record._errors.join(', ')}</span>`\r\n      } else {\r\n        return '<span class=\"success-text\">验证通过</span>'\r\n      }\r\n    }\r\n  }\r\n]\r\n\r\n// 计算属性\r\nconst dialogVisible = computed({\r\n  get: () => props.visible,\r\n  set: (value) => emit('update:visible', value)\r\n})\r\n\r\nconst validRecords = computed(() => {\r\n  return previewData.value.filter(item => item._valid).length\r\n})\r\n\r\nconst invalidRecords = computed(() => {\r\n  return previewData.value.filter(item => !item._valid).length\r\n})\r\n\r\n// 方法\r\nconst downloadTemplate = async () => {\r\n  downloadLoading.value = true\r\n  try {\r\n    const response = await softwareAssetApi.downloadTemplate()\r\n    \r\n    // 创建下载链接\r\n    const blob = new Blob([response.data], {\r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    })\r\n    const url = window.URL.createObjectURL(blob)\r\n    const link = document.createElement('a')\r\n    link.href = url\r\n    link.download = '软件资产导入模板.xlsx'\r\n    document.body.appendChild(link)\r\n    link.click()\r\n    document.body.removeChild(link)\r\n    window.URL.revokeObjectURL(url)\r\n    \r\n    templateDownloaded.value = true\r\n    message.success('模板下载成功')\r\n  } catch (error) {\r\n    message.error('模板下载失败')\r\n    console.error('Download template error:', error)\r\n  } finally {\r\n    downloadLoading.value = false\r\n  }\r\n}\r\n\r\nconst nextStep = () => {\r\n  currentStep.value++\r\n}\r\n\r\nconst handleFileChange = (info) => {\r\n  const { fileList } = info\r\n  if (fileList.length > 0) {\r\n    uploadFile.value = fileList[0]\r\n  } else {\r\n    uploadFile.value = null\r\n  }\r\n}\r\n\r\nconst beforeUpload = (file) => {\r\n  const isExcel = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||\r\n                  file.type === 'application/vnd.ms-excel'\r\n  const isLt10M = file.size / 1024 / 1024 < 10\r\n  \r\n  if (!isExcel) {\r\n    message.error('只能上传 Excel 文件!')\r\n    return false\r\n  }\r\n  if (!isLt10M) {\r\n    message.error('文件大小不能超过 10MB!')\r\n    return false\r\n  }\r\n  return false // 阻止自动上传\r\n}\r\n\r\nconst removeFile = () => {\r\n  uploadFile.value = null\r\n  fileList.value = []\r\n}\r\n\r\nconst parseFile = async () => {\r\n  if (!uploadFile.value) return\r\n  \r\n  parseLoading.value = true\r\n  try {\r\n    const file = uploadFile.value.raw\r\n    const data = await readExcelFile(file)\r\n    \r\n    // 验证数据\r\n    const validatedData = validateData(data)\r\n    previewData.value = validatedData\r\n    \r\n    currentStep.value++\r\n    message.success('文件解析成功')\r\n  } catch (error) {\r\n    message.error('文件解析失败: ' + (error.message || '未知错误'))\r\n    console.error('Parse file error:', error)\r\n  } finally {\r\n    parseLoading.value = false\r\n  }\r\n}\r\n\r\nconst readExcelFile = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.onload = (e) => {\r\n      try {\r\n        const data = new Uint8Array(e.target.result)\r\n        const workbook = XLSX.read(data, { type: 'array' })\r\n        const sheetName = workbook.SheetNames[0]\r\n        const worksheet = workbook.Sheets[sheetName]\r\n        const jsonData = XLSX.utils.sheet_to_json(worksheet)\r\n        resolve(jsonData)\r\n      } catch (error) {\r\n        reject(error)\r\n      }\r\n    }\r\n    reader.onerror = reject\r\n    reader.readAsArrayBuffer(file)\r\n  })\r\n}\r\n\r\nconst validateData = (data) => {\r\n  const requiredFields = ['软件名称', '版本', '软件类型', '资产责任人', '供应商']\r\n  const softwareTypeMap = {\r\n    '系统软件': 'system',\r\n    '应用软件': 'application',\r\n    '开发工具': 'development',\r\n    '数据库': 'database',\r\n    '安全软件': 'security',\r\n    '其他': 'other'\r\n  }\r\n  const licenseTypeMap = {\r\n    '永久许可': 'perpetual',\r\n    '订阅许可': 'subscription',\r\n    '试用许可': 'trial',\r\n    '开源许可': 'open_source'\r\n  }\r\n  const assetStatusMap = {\r\n    '激活': 'active',\r\n    '未激活': 'inactive',\r\n    '过期': 'expired',\r\n    '退役': 'retired'\r\n  }\r\n  \r\n  return data.map((row, index) => {\r\n    const errors = []\r\n    const item = {\r\n      software_name: row['软件名称'],\r\n      version: row['版本'],\r\n      software_type: softwareTypeMap[row['软件类型']] || 'other',\r\n      asset_owner: row['资产责任人'],\r\n      supplier_name: row['供应商'],\r\n      supplier_contact: row['供应商联系人'],\r\n      purchase_date: row['采购日期'],\r\n      asset_status: assetStatusMap[row['资产状态']] || 'active',\r\n      license_type: licenseTypeMap[row['许可证类型']] || 'perpetual',\r\n      license_count: row['许可证数量'] || 1,\r\n      license_start_date: row['许可证开始日期'],\r\n      license_end_date: row['许可证结束日期'],\r\n      license_key: row['许可证密钥'],\r\n      installation_path: row['安装路径'],\r\n      config_path: row['配置文件路径'],\r\n      notes: row['备注'],\r\n      _rowIndex: index + 2 // Excel行号（从2开始，因为第1行是标题）\r\n    }\r\n    \r\n    // 验证必填字段\r\n    requiredFields.forEach(field => {\r\n      const value = row[field]\r\n      if (!value || String(value).trim() === '') {\r\n        errors.push(`${field}不能为空`)\r\n      }\r\n    })\r\n    \r\n    // 验证软件类型\r\n    if (row['软件类型'] && !softwareTypeMap[row['软件类型']]) {\r\n      errors.push('软件类型不正确，请选择：系统软件/应用软件/开发工具/数据库/安全软件/其他')\r\n    }\r\n    \r\n    // 验证许可证类型\r\n    if (row['许可证类型'] && !licenseTypeMap[row['许可证类型']]) {\r\n      errors.push('许可证类型不正确，请选择：永久许可/订阅许可/试用许可/开源许可')\r\n    }\r\n    \r\n    // 验证资产状态\r\n    if (row['资产状态'] && !assetStatusMap[row['资产状态']]) {\r\n      errors.push('资产状态不正确，请选择：激活/未激活/过期/退役')\r\n    }\r\n    \r\n    // 验证日期格式\r\n    if (item.purchase_date && !isValidDate(item.purchase_date)) {\r\n      errors.push('采购日期格式不正确')\r\n    }\r\n    if (item.license_start_date && !isValidDate(item.license_start_date)) {\r\n      errors.push('许可证开始日期格式不正确')\r\n    }\r\n    if (item.license_end_date && !isValidDate(item.license_end_date)) {\r\n      errors.push('许可证结束日期格式不正确')\r\n    }\r\n    \r\n    // 验证许可证数量\r\n    if (item.license_count && (isNaN(item.license_count) || item.license_count <= 0)) {\r\n      errors.push('许可证数量必须是大于0的数字')\r\n    }\r\n    \r\n    item._valid = errors.length === 0\r\n    item._errors = errors\r\n    \r\n    return item\r\n  })\r\n}\r\n\r\nconst isValidDate = (dateString) => {\r\n  if (!dateString) return true // 可选字段\r\n  const date = new Date(dateString)\r\n  return date instanceof Date && !isNaN(date)\r\n}\r\n\r\nconst importData = async () => {\r\n  const validData = previewData.value.filter(item => item._valid)\r\n  \r\n  if (validData.length === 0) {\r\n    message.error('没有有效数据可导入')\r\n    return\r\n  }\r\n  \r\n  importLoading.value = true\r\n  try {\r\n    // 清理验证字段\r\n    const cleanData = validData.map(item => {\r\n      const { _valid, _errors, _rowIndex, ...cleanItem } = item\r\n      return cleanItem\r\n    })\r\n    \r\n    const response = await softwareAssetApi.batchImport(cleanData)\r\n    \r\n    importResult.value = {\r\n      success: true,\r\n      successCount: response.data.success_count || cleanData.length,\r\n      failedCount: response.data.failed_count || 0,\r\n      message: response.data.message || '导入成功',\r\n      errors: response.data.errors || []\r\n    }\r\n    \r\n    currentStep.value++\r\n    message.success('导入完成')\r\n  } catch (error) {\r\n    importResult.value = {\r\n      success: false,\r\n      successCount: 0,\r\n      failedCount: validData.length,\r\n      message: error.response?.data?.message || '导入失败',\r\n      errors: error.response?.data?.errors || []\r\n    }\r\n    currentStep.value++\r\n    message.error('导入失败: ' + (error.response?.data?.message || error.message || '未知错误'))\r\n    console.error('Import data error:', error)\r\n  } finally {\r\n    importLoading.value = false\r\n  }\r\n}\r\n\r\nconst handleComplete = () => {\r\n  emit('success')\r\n  handleClose()\r\n}\r\n\r\nconst handleClose = () => {\r\n  dialogVisible.value = false\r\n  // 重置状态\r\n  setTimeout(() => {\r\n    currentStep.value = 0\r\n    templateDownloaded.value = false\r\n    uploadFile.value = null\r\n    previewData.value = []\r\n    importResult.value = {\r\n      success: false,\r\n      successCount: 0,\r\n      failedCount: 0,\r\n      message: '',\r\n      errors: []\r\n    }\r\n  }, 300)\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.import-container {\r\n  padding: 20px 0;\r\n}\r\n\r\n.step-content {\r\n  margin-top: 30px;\r\n  min-height: 300px;\r\n}\r\n\r\n.template-section {\r\n  text-align: center;\r\n}\r\n\r\n.template-download {\r\n  margin-top: 30px;\r\n}\r\n\r\n.upload-section {\r\n  padding: 20px;\r\n}\r\n\r\n.file-info {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n  gap: 10px;\r\n}\r\n\r\n.remove-btn {\r\n  color: #f56c6c;\r\n}\r\n\r\n.preview-section {\r\n  padding: 10px;\r\n}\r\n\r\n.preview-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.validation-summary {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.more-records {\r\n  text-align: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.validation-alert {\r\n  margin-top: 15px;\r\n}\r\n\r\n.error-text {\r\n  color: #f56c6c;\r\n  font-size: 12px;\r\n}\r\n\r\n.success-text {\r\n  color: #67c23a;\r\n  font-size: 12px;\r\n}\r\n\r\n.result-section {\r\n  text-align: center;\r\n  padding: 40px 20px;\r\n}\r\n\r\n.result-icon {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.result-content h3 {\r\n  margin-bottom: 20px;\r\n  color: #303133;\r\n}\r\n\r\n.result-details {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.result-details p {\r\n  margin: 10px 0;\r\n  color: #606266;\r\n}\r\n\r\n.error-details {\r\n  text-align: left;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.error-item {\r\n  margin-bottom: 8px;\r\n  padding: 8px;\r\n  background-color: #fef0f0;\r\n  border-radius: 4px;\r\n}\r\n\r\n.error-row {\r\n  font-weight: bold;\r\n  color: #f56c6c;\r\n  margin-right: 10px;\r\n}\r\n\r\n.error-msg {\r\n  color: #606266;\r\n}\r\n\r\n.dialog-footer {\r\n  text-align: right;\r\n}\r\n</style>","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\SoftwareAssetDetail.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\errorHandler.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\date.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\websocketManager.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\MetricCard.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\admin\\CardConfigModal.vue",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\TemplateCard.vue",["551"],"<template>\r\n  <div \r\n    class=\"template-card\"\r\n    :class=\"{ selected: isSelected }\"\r\n    @click=\"$emit('select', templateid)\"\r\n  >\r\n    <div class=\"card-badge\" v-if=\"isSelected\">\r\n      <CheckCircleOutlined />\r\n    </div>\r\n    \r\n    <div class=\"card-header\">\r\n      <div class=\"card-icon-wrapper\" :class=\"category\">\r\n        <component :is=\"getCategoryIcon(category)\" class=\"card-icon\" />\r\n      </div>\r\n      <div class=\"card-title-section\">\r\n        <h3 class=\"card-title\" :title=\"name\">{{ truncateName(name) }}</h3>\r\n        <span class=\"card-category\">{{ getCategoryLabel(category) }}</span>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"card-content\">\r\n      <p class=\"card-description\" :title=\"description\">{{ truncateDescription(description) }}</p>\r\n      \r\n      <div class=\"card-stats\">\r\n        <div class=\"stat-item\">\r\n          <div class=\"stat-icon\">\r\n            <EyeOutlined />\r\n          </div>\r\n          <div class=\"stat-info\">\r\n            <span class=\"stat-value\">{{ items_count }}</span>\r\n            <span class=\"stat-label\">监控项</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"stat-item\">\r\n          <div class=\"stat-icon\">\r\n            <AlertOutlined />\r\n          </div>\r\n          <div class=\"stat-info\">\r\n            <span class=\"stat-value\">{{ triggers_count }}</span>\r\n            <span class=\"stat-label\">触发器</span>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"stat-item\">\r\n          <div class=\"stat-icon\">\r\n            <CodeOutlined />\r\n          </div>\r\n          <div class=\"stat-info\">\r\n            <span class=\"stat-value\">{{ macros_count || 0 }}</span>\r\n            <span class=\"stat-label\">宏</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"card-groups\" v-if=\"groups && groups.length > 0\">\r\n        <a-tag \r\n          v-for=\"(group, index) in groups.slice(0, 2)\" \r\n          :key=\"index\"\r\n          :color=\"getGroupColor(index)\"\r\n          size=\"small\"\r\n          :title=\"group.name\"\r\n        >\r\n          {{ truncateGroupName(group.name) }}\r\n        </a-tag>\r\n        <span \r\n          v-if=\"groups.length > 2\" \r\n          class=\"more-groups\"\r\n          :title=\"groups.slice(2).map(g => g.name).join(', ')\"\r\n        >\r\n          +{{ groups.length - 2 }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"card-footer\">\r\n      <div class=\"card-actions\">\r\n        <a-button \r\n          type=\"primary\" \r\n          size=\"small\" \r\n          :class=\"{ 'selected-btn': isSelected }\"\r\n          @click.stop=\"$emit('select', templateid)\"\r\n        >\r\n          {{ isSelected ? '已选择' : '选择' }}\r\n        </a-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed } from 'vue';\r\nimport { \r\n  CheckCircleOutlined, \r\n  EyeOutlined, \r\n  AlertOutlined, \r\n  CodeOutlined,\r\n  DesktopOutlined,\r\n  CloudOutlined,\r\n  DatabaseOutlined,\r\n  ApartmentOutlined,\r\n  GlobalOutlined,\r\n  AppstoreOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\nconst props = defineProps({\r\n  templateid: String,\r\n  name: String,\r\n  description: String,\r\n  category: String,\r\n  icon: String,\r\n  items_count: Number,\r\n  triggers_count: Number,\r\n  macros_count: Number,\r\n  groups: Array,\r\n  selected: Boolean\r\n});\r\n\r\nconst emit = defineEmits(['select']);\r\n\r\nconst isSelected = computed(() => props.selected);\r\n\r\nconst getCategoryIcon = (category) => {\r\n  const iconMap = {\r\n    'server': DesktopOutlined,\r\n    'network': ApartmentOutlined,\r\n    'cloud': CloudOutlined,\r\n    'database': DatabaseOutlined,\r\n    'application': AppstoreOutlined,\r\n    'default': GlobalOutlined\r\n  };\r\n  return iconMap[category] || iconMap.default;\r\n};\r\n\r\nconst getCategoryLabel = (category) => {\r\n  const labelMap = {\r\n    'server': '服务器',\r\n    'network': '网络设备',\r\n    'cloud': '云服务',\r\n    'database': '数据库',\r\n    'application': '应用服务',\r\n    'default': '通用模板'\r\n  };\r\n  return labelMap[category] || category || '通用模板';\r\n};\r\n\r\nconst truncateName = (name) => {\r\n  return name.length > 20 ? name.substring(0, 20) + '...' : name;\r\n};\r\n\r\nconst truncateDescription = (desc) => {\r\n  if (!desc) return '暂无描述';\r\n  return desc.length > 80 ? desc.substring(0, 80) + '...' : desc;\r\n};\r\n\r\nconst truncateGroupName = (name) => {\r\n  return name.length > 8 ? name.substring(0, 8) + '...' : name;\r\n};\r\n\r\nconst getGroupColor = (index) => {\r\n  const colors = ['blue', 'green', 'orange', 'purple', 'cyan'];\r\n  return colors[index % colors.length];\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.template-card {\r\n  position: relative;\r\n  background: linear-gradient(135deg, #ffffff 0%, #fafbff 100%);\r\n  border: 1px solid rgba(24, 144, 255, 0.12);\r\n  border-radius: 16px;\r\n  padding: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  overflow: hidden;\r\n  height: 220px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: 0 2px 12px rgba(24, 144, 255, 0.06);\r\n}\r\n\r\n.template-card:hover {\r\n  transform: translateY(-4px);\r\n  box-shadow: 0 8px 24px rgba(24, 144, 255, 0.12);\r\n  border-color: rgba(24, 144, 255, 0.3);\r\n}\r\n\r\n.template-card.selected {\r\n  background: linear-gradient(135deg, #e6f7ff 0%, #bae7ff 100%);\r\n  border-color: #40a9ff;\r\n  box-shadow: 0 8px 24px rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.card-badge {\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 12px;\r\n  width: 24px;\r\n  height: 24px;\r\n  background: #52c41a;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-size: 14px;\r\n  z-index: 10;\r\n  box-shadow: 0 2px 8px rgba(82, 196, 26, 0.4);\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.card-icon-wrapper {\r\n  width: 48px;\r\n  height: 48px;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.card-icon-wrapper.server {\r\n  background: linear-gradient(135deg, #ffd6e7 0%, #ffadd2 100%);\r\n}\r\n\r\n.card-icon-wrapper.network {\r\n  background: linear-gradient(135deg, #d6e4ff 0%, #85a5ff 100%);\r\n}\r\n\r\n.card-icon-wrapper.cloud {\r\n  background: linear-gradient(135deg, #b5f5ec 0%, #36cfc9 100%);\r\n}\r\n\r\n.card-icon-wrapper.database {\r\n  background: linear-gradient(135deg, #ffd591 0%, #ffc53d 100%);\r\n}\r\n\r\n.card-icon-wrapper.application {\r\n  background: linear-gradient(135deg, #d3f261 0%, #bae637 100%);\r\n}\r\n\r\n.card-icon-wrapper.default {\r\n  background: linear-gradient(135deg, #e9d8fd 0%, #b37feb 100%);\r\n}\r\n\r\n.card-icon {\r\n  font-size: 24px;\r\n  color: white;\r\n}\r\n\r\n.card-title-section {\r\n  flex: 1;\r\n  min-width: 0;\r\n}\r\n\r\n.card-title {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  line-height: 1.3;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.card-category {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  margin-top: 2px;\r\n}\r\n\r\n.card-content {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n}\r\n\r\n.card-description {\r\n  color: #595959;\r\n  font-size: 13px;\r\n  line-height: 1.4;\r\n  margin: 0;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n\r\n.card-stats {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 8px;\r\n  margin-top: auto;\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  padding: 6px;\r\n  background: rgba(24, 144, 255, 0.06);\r\n  border-radius: 8px;\r\n  transition: background-color 0.2s ease;\r\n}\r\n\r\n.stat-item:hover {\r\n  background: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n.stat-icon {\r\n  width: 20px;\r\n  height: 20px;\r\n  background: rgba(24, 144, 255, 0.1);\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.stat-icon .anticon {\r\n  font-size: 12px;\r\n  color: #1890ff;\r\n}\r\n\r\n.stat-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1px;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  line-height: 1;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 10px;\r\n  color: #8c8c8c;\r\n  line-height: 1;\r\n}\r\n\r\n.card-groups {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  flex-wrap: wrap;\r\n  margin-top: auto;\r\n}\r\n\r\n.more-groups {\r\n  font-size: 11px;\r\n  color: #8c8c8c;\r\n  background: rgba(140, 140, 140, 0.1);\r\n  padding: 2px 6px;\r\n  border-radius: 4px;\r\n  cursor: help;\r\n}\r\n\r\n.card-footer {\r\n  margin-top: auto;\r\n}\r\n\r\n.card-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.selected-btn {\r\n  background: #52c41a !important;\r\n  border-color: #52c41a !important;\r\n}\r\n\r\n.selected-btn:hover {\r\n  background: #73d13d !important;\r\n  border-color: #73d13d !important;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .template-card {\r\n    height: 200px;\r\n    padding: 16px;\r\n  }\r\n  \r\n  .card-icon-wrapper {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n  \r\n  .card-icon {\r\n    font-size: 20px;\r\n  }\r\n  \r\n  .card-title {\r\n    font-size: 14px;\r\n  }\r\n  \r\n  .card-stats {\r\n    gap: 6px;\r\n  }\r\n  \r\n  .stat-item {\r\n    padding: 4px;\r\n  }\r\n  \r\n  .stat-icon {\r\n    width: 18px;\r\n    height: 18px;\r\n  }\r\n  \r\n  .stat-value {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .stat-label {\r\n    font-size: 9px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .template-card {\r\n    height: 180px;\r\n    padding: 12px;\r\n  }\r\n  \r\n  .card-header {\r\n    gap: 8px;\r\n    margin-bottom: 12px;\r\n  }\r\n  \r\n  .card-icon-wrapper {\r\n    width: 36px;\r\n    height: 36px;\r\n  }\r\n  \r\n  .card-icon {\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .card-description {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .card-stats {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 4px;\r\n  }\r\n  \r\n  .stat-item {\r\n    flex-direction: column;\r\n    gap: 2px;\r\n    text-align: center;\r\n    padding: 4px 2px;\r\n  }\r\n  \r\n  .stat-info {\r\n    gap: 0;\r\n  }\r\n}\r\n</style>\r\n","E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\index.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\menu.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\users.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\organization.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\businessManagement.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\ipManagement.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\hardwareAsset.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\supplier.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\softwareAsset.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\api\\user.js",[],"E:\\A_project\\yuanchi\\AIops\\frontend\\src\\utils\\request.js",[],{"ruleId":"552","severity":1,"message":"553","line":150,"column":38,"nodeType":"554","messageId":"555","endLine":150,"endColumn":44},{"ruleId":"552","severity":1,"message":"556","line":150,"column":46,"nodeType":"554","messageId":"555","endLine":150,"endColumn":52},{"ruleId":"552","severity":1,"message":"557","line":150,"column":54,"nodeType":"554","messageId":"555","endLine":150,"endColumn":59},{"ruleId":"552","severity":1,"message":"558","line":150,"column":61,"nodeType":"554","messageId":"555","endLine":150,"endColumn":66},{"ruleId":"552","severity":1,"message":"559","line":198,"column":33,"nodeType":"554","messageId":"555","endLine":198,"endColumn":35},{"ruleId":"552","severity":1,"message":"560","line":198,"column":37,"nodeType":"554","messageId":"555","endLine":198,"endColumn":41},{"ruleId":"552","severity":1,"message":"561","line":210,"column":7,"nodeType":"554","messageId":"555","endLine":210,"endColumn":22},{"ruleId":"552","severity":1,"message":"562","line":183,"column":3,"nodeType":"554","messageId":"555","endLine":183,"endColumn":19},{"ruleId":"552","severity":1,"message":"563","line":184,"column":3,"nodeType":"554","messageId":"555","endLine":184,"endColumn":21},{"ruleId":"552","severity":1,"message":"564","line":199,"column":3,"nodeType":"554","messageId":"555","endLine":199,"endColumn":15},{"ruleId":"552","severity":1,"message":"561","line":252,"column":7,"nodeType":"554","messageId":"555","endLine":252,"endColumn":22},{"ruleId":"552","severity":1,"message":"565","line":237,"column":15,"nodeType":"554","messageId":"555","endLine":237,"endColumn":23},{"ruleId":"552","severity":1,"message":"566","line":329,"column":3,"nodeType":"554","messageId":"555","endLine":329,"endColumn":15},{"ruleId":"552","severity":1,"message":"567","line":330,"column":3,"nodeType":"554","messageId":"555","endLine":330,"endColumn":16},{"ruleId":"552","severity":1,"message":"568","line":331,"column":3,"nodeType":"554","messageId":"555","endLine":331,"endColumn":17},{"ruleId":"552","severity":1,"message":"569","line":332,"column":3,"nodeType":"554","messageId":"555","endLine":332,"endColumn":14},{"ruleId":"552","severity":1,"message":"570","line":334,"column":3,"nodeType":"554","messageId":"555","endLine":334,"endColumn":22},{"ruleId":"552","severity":1,"message":"571","line":244,"column":27,"nodeType":"554","messageId":"555","endLine":244,"endColumn":32},{"ruleId":"552","severity":1,"message":"572","line":282,"column":10,"nodeType":"554","messageId":"555","endLine":282,"endColumn":17},{"ruleId":"552","severity":1,"message":"567","line":288,"column":3,"nodeType":"554","messageId":"555","endLine":288,"endColumn":16},{"ruleId":"552","severity":1,"message":"566","line":289,"column":3,"nodeType":"554","messageId":"555","endLine":289,"endColumn":15},{"ruleId":"552","severity":1,"message":"573","line":290,"column":3,"nodeType":"554","messageId":"555","endLine":290,"endColumn":15},{"ruleId":"552","severity":1,"message":"574","line":291,"column":3,"nodeType":"554","messageId":"555","endLine":291,"endColumn":18},{"ruleId":"552","severity":1,"message":"569","line":292,"column":3,"nodeType":"554","messageId":"555","endLine":292,"endColumn":14},{"ruleId":"552","severity":1,"message":"575","line":293,"column":3,"nodeType":"554","messageId":"555","endLine":293,"endColumn":22},{"ruleId":"552","severity":1,"message":"570","line":294,"column":3,"nodeType":"554","messageId":"555","endLine":294,"endColumn":22},{"ruleId":"552","severity":1,"message":"576","line":295,"column":3,"nodeType":"554","messageId":"555","endLine":295,"endColumn":17},{"ruleId":"552","severity":1,"message":"577","line":296,"column":3,"nodeType":"554","messageId":"555","endLine":296,"endColumn":15},{"ruleId":"552","severity":1,"message":"578","line":297,"column":3,"nodeType":"554","messageId":"555","endLine":297,"endColumn":19},{"ruleId":"552","severity":1,"message":"579","line":298,"column":3,"nodeType":"554","messageId":"555","endLine":298,"endColumn":18},{"ruleId":"552","severity":1,"message":"580","line":299,"column":3,"nodeType":"554","messageId":"555","endLine":299,"endColumn":23},{"ruleId":"552","severity":1,"message":"581","line":300,"column":3,"nodeType":"554","messageId":"555","endLine":300,"endColumn":15},{"ruleId":"552","severity":1,"message":"582","line":301,"column":3,"nodeType":"554","messageId":"555","endLine":301,"endColumn":19},{"ruleId":"552","severity":1,"message":"583","line":302,"column":3,"nodeType":"554","messageId":"555","endLine":302,"endColumn":15},{"ruleId":"552","severity":1,"message":"584","line":303,"column":3,"nodeType":"554","messageId":"555","endLine":303,"endColumn":17},{"ruleId":"552","severity":1,"message":"578","line":307,"column":3,"nodeType":"554","messageId":"555","endLine":307,"endColumn":19},{"ruleId":"552","severity":1,"message":"577","line":308,"column":3,"nodeType":"554","messageId":"555","endLine":308,"endColumn":15},{"ruleId":"552","severity":1,"message":"576","line":309,"column":3,"nodeType":"554","messageId":"555","endLine":309,"endColumn":17},{"ruleId":"552","severity":1,"message":"574","line":310,"column":3,"nodeType":"554","messageId":"555","endLine":310,"endColumn":18},{"ruleId":"552","severity":1,"message":"575","line":311,"column":3,"nodeType":"554","messageId":"555","endLine":311,"endColumn":22},{"ruleId":"552","severity":1,"message":"570","line":312,"column":3,"nodeType":"554","messageId":"555","endLine":312,"endColumn":22},{"ruleId":"552","severity":1,"message":"585","line":313,"column":3,"nodeType":"554","messageId":"555","endLine":313,"endColumn":18},{"ruleId":"552","severity":1,"message":"586","line":314,"column":3,"nodeType":"554","messageId":"555","endLine":314,"endColumn":15},{"ruleId":"552","severity":1,"message":"565","line":204,"column":25,"nodeType":"554","messageId":"555","endLine":204,"endColumn":33},{"ruleId":"552","severity":1,"message":"587","line":128,"column":10,"nodeType":"554","messageId":"555","endLine":128,"endColumn":13},{"ruleId":"552","severity":1,"message":"588","line":76,"column":10,"nodeType":"554","messageId":"555","endLine":76,"endColumn":15},{"ruleId":"552","severity":1,"message":"589","line":76,"column":17,"nodeType":"554","messageId":"555","endLine":76,"endColumn":23},{"ruleId":"552","severity":1,"message":"590","line":76,"column":25,"nodeType":"554","messageId":"555","endLine":76,"endColumn":31},{"ruleId":"552","severity":1,"message":"591","line":76,"column":33,"nodeType":"554","messageId":"555","endLine":76,"endColumn":38},{"ruleId":"552","severity":1,"message":"592","line":76,"column":40,"nodeType":"554","messageId":"555","endLine":76,"endColumn":44},{"ruleId":"552","severity":1,"message":"593","line":76,"column":46,"nodeType":"554","messageId":"555","endLine":76,"endColumn":49},{"ruleId":"552","severity":1,"message":"594","line":76,"column":51,"nodeType":"554","messageId":"555","endLine":76,"endColumn":54},{"ruleId":"552","severity":1,"message":"586","line":77,"column":10,"nodeType":"554","messageId":"555","endLine":77,"endColumn":22},{"ruleId":"552","severity":1,"message":"595","line":77,"column":24,"nodeType":"554","messageId":"555","endLine":77,"endColumn":40},{"ruleId":"552","severity":1,"message":"596","line":77,"column":42,"nodeType":"554","messageId":"555","endLine":77,"endColumn":56},{"ruleId":"552","severity":1,"message":"597","line":271,"column":40,"nodeType":"554","messageId":"555","endLine":271,"endColumn":47},{"ruleId":"552","severity":1,"message":"598","line":271,"column":49,"nodeType":"554","messageId":"555","endLine":271,"endColumn":55},{"ruleId":"552","severity":1,"message":"596","line":111,"column":3,"nodeType":"554","messageId":"555","endLine":111,"endColumn":17},{"ruleId":"552","severity":1,"message":"583","line":112,"column":3,"nodeType":"554","messageId":"555","endLine":112,"endColumn":15},{"ruleId":"552","severity":1,"message":"586","line":113,"column":3,"nodeType":"554","messageId":"555","endLine":113,"endColumn":15},{"ruleId":"552","severity":1,"message":"599","line":253,"column":3,"nodeType":"554","messageId":"555","endLine":253,"endColumn":17},{"ruleId":"552","severity":1,"message":"600","line":262,"column":3,"nodeType":"554","messageId":"555","endLine":262,"endColumn":17},{"ruleId":"552","severity":1,"message":"601","line":267,"column":3,"nodeType":"554","messageId":"555","endLine":267,"endColumn":26},{"ruleId":"552","severity":1,"message":"602","line":345,"column":7,"nodeType":"554","messageId":"555","endLine":345,"endColumn":17},{"ruleId":"552","severity":1,"message":"603","line":387,"column":7,"nodeType":"554","messageId":"555","endLine":387,"endColumn":25},{"ruleId":"552","severity":1,"message":"604","line":397,"column":7,"nodeType":"554","messageId":"555","endLine":397,"endColumn":19},{"ruleId":"552","severity":1,"message":"605","line":404,"column":28,"nodeType":"554","messageId":"555","endLine":404,"endColumn":31},{"ruleId":"552","severity":1,"message":"597","line":404,"column":33,"nodeType":"554","messageId":"555","endLine":404,"endColumn":40},{"ruleId":"552","severity":1,"message":"598","line":404,"column":42,"nodeType":"554","messageId":"555","endLine":404,"endColumn":48},{"ruleId":"552","severity":1,"message":"599","line":289,"column":3,"nodeType":"554","messageId":"555","endLine":289,"endColumn":17},{"ruleId":"552","severity":1,"message":"606","line":297,"column":3,"nodeType":"554","messageId":"555","endLine":297,"endColumn":20},{"ruleId":"552","severity":1,"message":"607","line":301,"column":3,"nodeType":"554","messageId":"555","endLine":301,"endColumn":27},{"ruleId":"552","severity":1,"message":"603","line":441,"column":7,"nodeType":"554","messageId":"555","endLine":441,"endColumn":25},{"ruleId":"552","severity":1,"message":"604","line":451,"column":7,"nodeType":"554","messageId":"555","endLine":451,"endColumn":19},{"ruleId":"552","severity":1,"message":"597","line":459,"column":33,"nodeType":"554","messageId":"555","endLine":459,"endColumn":40},{"ruleId":"552","severity":1,"message":"598","line":459,"column":42,"nodeType":"554","messageId":"555","endLine":459,"endColumn":48},{"ruleId":"552","severity":1,"message":"588","line":56,"column":10,"nodeType":"554","messageId":"555","endLine":56,"endColumn":15},{"ruleId":"552","severity":1,"message":"589","line":56,"column":17,"nodeType":"554","messageId":"555","endLine":56,"endColumn":23},{"ruleId":"552","severity":1,"message":"590","line":56,"column":25,"nodeType":"554","messageId":"555","endLine":56,"endColumn":31},{"ruleId":"552","severity":1,"message":"591","line":56,"column":33,"nodeType":"554","messageId":"555","endLine":56,"endColumn":38},{"ruleId":"552","severity":1,"message":"592","line":56,"column":40,"nodeType":"554","messageId":"555","endLine":56,"endColumn":44},{"ruleId":"552","severity":1,"message":"593","line":56,"column":46,"nodeType":"554","messageId":"555","endLine":56,"endColumn":49},{"ruleId":"552","severity":1,"message":"594","line":56,"column":51,"nodeType":"554","messageId":"555","endLine":56,"endColumn":54},{"ruleId":"552","severity":1,"message":"608","line":56,"column":56,"nodeType":"554","messageId":"555","endLine":56,"endColumn":61},{"ruleId":"552","severity":1,"message":"609","line":56,"column":63,"nodeType":"554","messageId":"555","endLine":56,"endColumn":67},{"ruleId":"552","severity":1,"message":"586","line":57,"column":10,"nodeType":"554","messageId":"555","endLine":57,"endColumn":22},{"ruleId":"552","severity":1,"message":"595","line":57,"column":24,"nodeType":"554","messageId":"555","endLine":57,"endColumn":40},{"ruleId":"552","severity":1,"message":"597","line":245,"column":40,"nodeType":"554","messageId":"555","endLine":245,"endColumn":47},{"ruleId":"552","severity":1,"message":"598","line":245,"column":49,"nodeType":"554","messageId":"555","endLine":245,"endColumn":55},{"ruleId":"552","severity":1,"message":"599","line":342,"column":3,"nodeType":"554","messageId":"555","endLine":342,"endColumn":17},{"ruleId":"552","severity":1,"message":"610","line":349,"column":3,"nodeType":"554","messageId":"555","endLine":349,"endColumn":20},{"ruleId":"552","severity":1,"message":"611","line":354,"column":3,"nodeType":"554","messageId":"555","endLine":354,"endColumn":20},{"ruleId":"552","severity":1,"message":"612","line":358,"column":3,"nodeType":"554","messageId":"555","endLine":358,"endColumn":25},{"ruleId":"552","severity":1,"message":"613","line":359,"column":3,"nodeType":"554","messageId":"555","endLine":359,"endColumn":23},{"ruleId":"552","severity":1,"message":"614","line":360,"column":3,"nodeType":"554","messageId":"555","endLine":360,"endColumn":20},{"ruleId":"552","severity":1,"message":"615","line":361,"column":3,"nodeType":"554","messageId":"555","endLine":361,"endColumn":23},{"ruleId":"552","severity":1,"message":"603","line":536,"column":7,"nodeType":"554","messageId":"555","endLine":536,"endColumn":25},{"ruleId":"552","severity":1,"message":"616","line":542,"column":7,"nodeType":"554","messageId":"555","endLine":542,"endColumn":25},{"ruleId":"552","severity":1,"message":"604","line":551,"column":7,"nodeType":"554","messageId":"555","endLine":551,"endColumn":19},{"ruleId":"552","severity":1,"message":"597","line":562,"column":33,"nodeType":"554","messageId":"555","endLine":562,"endColumn":40},{"ruleId":"552","severity":1,"message":"598","line":562,"column":42,"nodeType":"554","messageId":"555","endLine":562,"endColumn":48},{"ruleId":"552","severity":1,"message":"588","line":79,"column":10,"nodeType":"554","messageId":"555","endLine":79,"endColumn":15},{"ruleId":"552","severity":1,"message":"589","line":79,"column":17,"nodeType":"554","messageId":"555","endLine":79,"endColumn":23},{"ruleId":"552","severity":1,"message":"590","line":79,"column":25,"nodeType":"554","messageId":"555","endLine":79,"endColumn":31},{"ruleId":"552","severity":1,"message":"591","line":79,"column":33,"nodeType":"554","messageId":"555","endLine":79,"endColumn":38},{"ruleId":"552","severity":1,"message":"592","line":79,"column":40,"nodeType":"554","messageId":"555","endLine":79,"endColumn":44},{"ruleId":"552","severity":1,"message":"593","line":79,"column":46,"nodeType":"554","messageId":"555","endLine":79,"endColumn":49},{"ruleId":"552","severity":1,"message":"594","line":79,"column":51,"nodeType":"554","messageId":"555","endLine":79,"endColumn":54},{"ruleId":"552","severity":1,"message":"586","line":80,"column":10,"nodeType":"554","messageId":"555","endLine":80,"endColumn":22},{"ruleId":"552","severity":1,"message":"595","line":80,"column":24,"nodeType":"554","messageId":"555","endLine":80,"endColumn":40},{"ruleId":"552","severity":1,"message":"596","line":80,"column":42,"nodeType":"554","messageId":"555","endLine":80,"endColumn":56},{"ruleId":"552","severity":1,"message":"597","line":254,"column":40,"nodeType":"554","messageId":"555","endLine":254,"endColumn":47},{"ruleId":"552","severity":1,"message":"598","line":254,"column":49,"nodeType":"554","messageId":"555","endLine":254,"endColumn":55},{"ruleId":"552","severity":1,"message":"588","line":53,"column":10,"nodeType":"554","messageId":"555","endLine":53,"endColumn":15},{"ruleId":"552","severity":1,"message":"590","line":53,"column":17,"nodeType":"554","messageId":"555","endLine":53,"endColumn":23},{"ruleId":"552","severity":1,"message":"591","line":53,"column":25,"nodeType":"554","messageId":"555","endLine":53,"endColumn":30},{"ruleId":"552","severity":1,"message":"592","line":53,"column":32,"nodeType":"554","messageId":"555","endLine":53,"endColumn":36},{"ruleId":"552","severity":1,"message":"593","line":53,"column":38,"nodeType":"554","messageId":"555","endLine":53,"endColumn":41},{"ruleId":"552","severity":1,"message":"594","line":53,"column":43,"nodeType":"554","messageId":"555","endLine":53,"endColumn":46},{"ruleId":"552","severity":1,"message":"586","line":54,"column":10,"nodeType":"554","messageId":"555","endLine":54,"endColumn":22},{"ruleId":"552","severity":1,"message":"595","line":54,"column":24,"nodeType":"554","messageId":"555","endLine":54,"endColumn":40},{"ruleId":"552","severity":1,"message":"597","line":195,"column":40,"nodeType":"554","messageId":"555","endLine":195,"endColumn":47},{"ruleId":"552","severity":1,"message":"598","line":195,"column":49,"nodeType":"554","messageId":"555","endLine":195,"endColumn":55},{"ruleId":"552","severity":1,"message":"597","line":443,"column":33,"nodeType":"554","messageId":"555","endLine":443,"endColumn":40},{"ruleId":"552","severity":1,"message":"598","line":443,"column":42,"nodeType":"554","messageId":"555","endLine":443,"endColumn":48},{"ruleId":"552","severity":1,"message":"617","line":186,"column":7,"nodeType":"554","messageId":"555","endLine":186,"endColumn":15},{"ruleId":"552","severity":1,"message":"618","line":192,"column":7,"nodeType":"554","messageId":"555","endLine":192,"endColumn":17},{"ruleId":"552","severity":1,"message":"619","line":197,"column":7,"nodeType":"554","messageId":"555","endLine":197,"endColumn":16},{"ruleId":"552","severity":1,"message":"620","line":201,"column":7,"nodeType":"554","messageId":"555","endLine":201,"endColumn":16},{"ruleId":"552","severity":1,"message":"621","line":205,"column":7,"nodeType":"554","messageId":"555","endLine":205,"endColumn":24},{"ruleId":"552","severity":1,"message":"622","line":218,"column":7,"nodeType":"554","messageId":"555","endLine":218,"endColumn":20},{"ruleId":"552","severity":1,"message":"623","line":228,"column":7,"nodeType":"554","messageId":"555","endLine":228,"endColumn":18},{"ruleId":"552","severity":1,"message":"624","line":238,"column":7,"nodeType":"554","messageId":"555","endLine":238,"endColumn":17},{"ruleId":"552","severity":1,"message":"625","line":314,"column":7,"nodeType":"554","messageId":"555","endLine":314,"endColumn":12},{"ruleId":"552","severity":1,"message":"626","line":505,"column":7,"nodeType":"554","messageId":"555","endLine":505,"endColumn":14},{"ruleId":"552","severity":1,"message":"627","line":939,"column":7,"nodeType":"554","messageId":"555","endLine":939,"endColumn":27},{"ruleId":"552","severity":1,"message":"628","line":946,"column":7,"nodeType":"554","messageId":"555","endLine":946,"endColumn":27},{"ruleId":"552","severity":1,"message":"629","line":1017,"column":7,"nodeType":"554","messageId":"555","endLine":1017,"endColumn":21},{"ruleId":"552","severity":1,"message":"630","line":1030,"column":7,"nodeType":"554","messageId":"555","endLine":1030,"endColumn":23},{"ruleId":"552","severity":1,"message":"631","line":1132,"column":7,"nodeType":"554","messageId":"555","endLine":1132,"endColumn":22},{"ruleId":"552","severity":1,"message":"632","line":1161,"column":7,"nodeType":"554","messageId":"555","endLine":1161,"endColumn":20},{"ruleId":"552","severity":1,"message":"633","line":1205,"column":7,"nodeType":"554","messageId":"555","endLine":1205,"endColumn":24},{"ruleId":"552","severity":1,"message":"634","line":1225,"column":7,"nodeType":"554","messageId":"555","endLine":1225,"endColumn":30},{"ruleId":"552","severity":1,"message":"635","line":1235,"column":7,"nodeType":"554","messageId":"555","endLine":1235,"endColumn":27},{"ruleId":"552","severity":1,"message":"636","line":1250,"column":7,"nodeType":"554","messageId":"555","endLine":1250,"endColumn":26},{"ruleId":"552","severity":1,"message":"637","line":1255,"column":7,"nodeType":"554","messageId":"555","endLine":1255,"endColumn":27},{"ruleId":"552","severity":1,"message":"638","line":1265,"column":7,"nodeType":"554","messageId":"555","endLine":1265,"endColumn":25},{"ruleId":"552","severity":1,"message":"639","line":1418,"column":7,"nodeType":"554","messageId":"555","endLine":1418,"endColumn":22},{"ruleId":"552","severity":1,"message":"597","line":1543,"column":50,"nodeType":"554","messageId":"555","endLine":1543,"endColumn":57},{"ruleId":"552","severity":1,"message":"598","line":1543,"column":59,"nodeType":"554","messageId":"555","endLine":1543,"endColumn":65},{"ruleId":"552","severity":1,"message":"640","line":1610,"column":19,"nodeType":"554","messageId":"555","endLine":1610,"endColumn":44},{"ruleId":"552","severity":1,"message":"641","line":1667,"column":17,"nodeType":"554","messageId":"555","endLine":1667,"endColumn":22},{"ruleId":"552","severity":1,"message":"641","line":1691,"column":15,"nodeType":"554","messageId":"555","endLine":1691,"endColumn":20},{"ruleId":"552","severity":1,"message":"642","line":1943,"column":7,"nodeType":"554","messageId":"555","endLine":1943,"endColumn":32},{"ruleId":"552","severity":1,"message":"643","line":2215,"column":7,"nodeType":"554","messageId":"555","endLine":2215,"endColumn":24},{"ruleId":"552","severity":1,"message":"644","line":2220,"column":7,"nodeType":"554","messageId":"555","endLine":2220,"endColumn":25},{"ruleId":"552","severity":1,"message":"645","line":2229,"column":7,"nodeType":"554","messageId":"555","endLine":2229,"endColumn":28},{"ruleId":"552","severity":1,"message":"646","line":2235,"column":7,"nodeType":"554","messageId":"555","endLine":2235,"endColumn":27},{"ruleId":"552","severity":1,"message":"647","line":2240,"column":7,"nodeType":"554","messageId":"555","endLine":2240,"endColumn":28},{"ruleId":"552","severity":1,"message":"648","line":2246,"column":7,"nodeType":"554","messageId":"555","endLine":2246,"endColumn":23},{"ruleId":"552","severity":1,"message":"649","line":2276,"column":7,"nodeType":"554","messageId":"555","endLine":2276,"endColumn":23},{"ruleId":"552","severity":1,"message":"641","line":2280,"column":13,"nodeType":"554","messageId":"555","endLine":2280,"endColumn":18},{"ruleId":"552","severity":1,"message":"650","line":2331,"column":7,"nodeType":"554","messageId":"555","endLine":2331,"endColumn":25},{"ruleId":"552","severity":1,"message":"651","line":2342,"column":7,"nodeType":"554","messageId":"555","endLine":2342,"endColumn":24},{"ruleId":"552","severity":1,"message":"652","line":2372,"column":7,"nodeType":"554","messageId":"555","endLine":2372,"endColumn":26},{"ruleId":"552","severity":1,"message":"653","line":2380,"column":7,"nodeType":"554","messageId":"555","endLine":2380,"endColumn":27},{"ruleId":"552","severity":1,"message":"654","line":2403,"column":7,"nodeType":"554","messageId":"555","endLine":2403,"endColumn":27},{"ruleId":"552","severity":1,"message":"655","line":2416,"column":7,"nodeType":"554","messageId":"555","endLine":2416,"endColumn":20},{"ruleId":"552","severity":1,"message":"656","line":2421,"column":7,"nodeType":"554","messageId":"555","endLine":2421,"endColumn":17},{"ruleId":"552","severity":1,"message":"657","line":2456,"column":7,"nodeType":"554","messageId":"555","endLine":2456,"endColumn":19},{"ruleId":"552","severity":1,"message":"565","line":535,"column":36,"nodeType":"554","messageId":"555","endLine":535,"endColumn":44},{"ruleId":"552","severity":1,"message":"573","line":546,"column":3,"nodeType":"554","messageId":"555","endLine":546,"endColumn":15},{"ruleId":"552","severity":1,"message":"569","line":552,"column":3,"nodeType":"554","messageId":"555","endLine":552,"endColumn":14},{"ruleId":"552","severity":1,"message":"658","line":555,"column":3,"nodeType":"554","messageId":"555","endLine":555,"endColumn":20},{"ruleId":"552","severity":1,"message":"578","line":557,"column":3,"nodeType":"554","messageId":"555","endLine":557,"endColumn":19},{"ruleId":"552","severity":1,"message":"659","line":558,"column":3,"nodeType":"554","messageId":"555","endLine":558,"endColumn":22},{"ruleId":"552","severity":1,"message":"660","line":559,"column":3,"nodeType":"554","messageId":"555","endLine":559,"endColumn":18},{"ruleId":"552","severity":1,"message":"576","line":560,"column":3,"nodeType":"554","messageId":"555","endLine":560,"endColumn":17},{"ruleId":"552","severity":1,"message":"574","line":561,"column":3,"nodeType":"554","messageId":"555","endLine":561,"endColumn":18},{"ruleId":"552","severity":1,"message":"661","line":586,"column":7,"nodeType":"554","messageId":"555","endLine":586,"endColumn":22},{"ruleId":"552","severity":1,"message":"662","line":869,"column":7,"nodeType":"554","messageId":"555","endLine":869,"endColumn":19},{"ruleId":"552","severity":1,"message":"663","line":928,"column":7,"nodeType":"554","messageId":"555","endLine":928,"endColumn":19},{"ruleId":"552","severity":1,"message":"664","line":1033,"column":7,"nodeType":"554","messageId":"555","endLine":1033,"endColumn":20},{"ruleId":"552","severity":1,"message":"665","line":1143,"column":34,"nodeType":"554","messageId":"555","endLine":1143,"endColumn":39},{"ruleId":"552","severity":1,"message":"666","line":1163,"column":9,"nodeType":"554","messageId":"555","endLine":1163,"endColumn":22},{"ruleId":"552","severity":1,"message":"666","line":1223,"column":9,"nodeType":"554","messageId":"555","endLine":1223,"endColumn":22},{"ruleId":"552","severity":1,"message":"667","line":143,"column":46,"nodeType":"554","messageId":"555","endLine":143,"endColumn":57},{"ruleId":"552","severity":1,"message":"668","line":143,"column":59,"nodeType":"554","messageId":"555","endLine":143,"endColumn":64},{"ruleId":"552","severity":1,"message":"669","line":143,"column":93,"nodeType":"554","messageId":"555","endLine":143,"endColumn":94},{"ruleId":"552","severity":1,"message":"670","line":143,"column":96,"nodeType":"554","messageId":"555","endLine":143,"endColumn":107},{"ruleId":"552","severity":1,"message":"671","line":148,"column":13,"nodeType":"554","messageId":"555","endLine":148,"endColumn":16},{"ruleId":"552","severity":1,"message":"672","line":149,"column":13,"nodeType":"554","messageId":"555","endLine":149,"endColumn":23},{"ruleId":"552","severity":1,"message":"673","line":157,"column":3,"nodeType":"554","messageId":"555","endLine":157,"endColumn":28},{"ruleId":"552","severity":1,"message":"674","line":161,"column":7,"nodeType":"554","messageId":"555","endLine":161,"endColumn":13},{"ruleId":"552","severity":1,"message":"675","line":381,"column":7,"nodeType":"554","messageId":"555","endLine":381,"endColumn":17},{"ruleId":"552","severity":1,"message":"676","line":411,"column":7,"nodeType":"554","messageId":"555","endLine":411,"endColumn":25},{"ruleId":"552","severity":1,"message":"622","line":417,"column":7,"nodeType":"554","messageId":"555","endLine":417,"endColumn":20},{"ruleId":"552","severity":1,"message":"623","line":427,"column":7,"nodeType":"554","messageId":"555","endLine":427,"endColumn":18},{"ruleId":"552","severity":1,"message":"624","line":437,"column":7,"nodeType":"554","messageId":"555","endLine":437,"endColumn":17},{"ruleId":"552","severity":1,"message":"677","line":446,"column":7,"nodeType":"554","messageId":"555","endLine":446,"endColumn":29},{"ruleId":"552","severity":1,"message":"678","line":453,"column":7,"nodeType":"554","messageId":"555","endLine":453,"endColumn":20},{"ruleId":"552","severity":1,"message":"679","line":455,"column":7,"nodeType":"554","messageId":"555","endLine":455,"endColumn":18},{"ruleId":"552","severity":1,"message":"680","line":457,"column":7,"nodeType":"554","messageId":"555","endLine":457,"endColumn":23},{"ruleId":"552","severity":1,"message":"681","line":458,"column":7,"nodeType":"554","messageId":"555","endLine":458,"endColumn":20},{"ruleId":"552","severity":1,"message":"682","line":459,"column":7,"nodeType":"554","messageId":"555","endLine":459,"endColumn":21},{"ruleId":"552","severity":1,"message":"683","line":460,"column":7,"nodeType":"554","messageId":"555","endLine":460,"endColumn":21},{"ruleId":"552","severity":1,"message":"684","line":470,"column":7,"nodeType":"554","messageId":"555","endLine":470,"endColumn":14},{"ruleId":"552","severity":1,"message":"685","line":471,"column":7,"nodeType":"554","messageId":"555","endLine":471,"endColumn":22},{"ruleId":"552","severity":1,"message":"625","line":500,"column":7,"nodeType":"554","messageId":"555","endLine":500,"endColumn":12},{"ruleId":"552","severity":1,"message":"626","line":684,"column":7,"nodeType":"554","messageId":"555","endLine":684,"endColumn":14},{"ruleId":"552","severity":1,"message":"686","line":803,"column":7,"nodeType":"554","messageId":"555","endLine":803,"endColumn":31},{"ruleId":"552","severity":1,"message":"687","line":1127,"column":7,"nodeType":"554","messageId":"555","endLine":1127,"endColumn":32},{"ruleId":"552","severity":1,"message":"688","line":1296,"column":7,"nodeType":"554","messageId":"555","endLine":1296,"endColumn":29},{"ruleId":"552","severity":1,"message":"689","line":1304,"column":7,"nodeType":"554","messageId":"555","endLine":1304,"endColumn":30},{"ruleId":"552","severity":1,"message":"690","line":1312,"column":7,"nodeType":"554","messageId":"555","endLine":1312,"endColumn":24},{"ruleId":"552","severity":1,"message":"597","line":1312,"column":50,"nodeType":"554","messageId":"555","endLine":1312,"endColumn":57},{"ruleId":"552","severity":1,"message":"598","line":1312,"column":59,"nodeType":"554","messageId":"555","endLine":1312,"endColumn":65},{"ruleId":"552","severity":1,"message":"597","line":1340,"column":56,"nodeType":"554","messageId":"555","endLine":1340,"endColumn":63},{"ruleId":"552","severity":1,"message":"598","line":1340,"column":65,"nodeType":"554","messageId":"555","endLine":1340,"endColumn":71},{"ruleId":"552","severity":1,"message":"691","line":413,"column":7,"nodeType":"554","messageId":"555","endLine":413,"endColumn":26},{"ruleId":"552","severity":1,"message":"692","line":416,"column":7,"nodeType":"554","messageId":"555","endLine":416,"endColumn":25},{"ruleId":"552","severity":1,"message":"693","line":417,"column":7,"nodeType":"554","messageId":"555","endLine":417,"endColumn":23},{"ruleId":"552","severity":1,"message":"694","line":456,"column":7,"nodeType":"554","messageId":"555","endLine":456,"endColumn":29},{"ruleId":"552","severity":1,"message":"597","line":590,"column":50,"nodeType":"554","messageId":"555","endLine":590,"endColumn":57},{"ruleId":"552","severity":1,"message":"598","line":590,"column":59,"nodeType":"554","messageId":"555","endLine":590,"endColumn":65},{"ruleId":"552","severity":1,"message":"695","line":719,"column":7,"nodeType":"554","messageId":"555","endLine":719,"endColumn":17},{"ruleId":"552","severity":1,"message":"696","line":758,"column":7,"nodeType":"554","messageId":"555","endLine":758,"endColumn":21},{"ruleId":"552","severity":1,"message":"697","line":848,"column":7,"nodeType":"554","messageId":"555","endLine":848,"endColumn":26},{"ruleId":"552","severity":1,"message":"698","line":253,"column":64,"nodeType":"554","messageId":"555","endLine":253,"endColumn":77},{"ruleId":"552","severity":1,"message":"699","line":256,"column":10,"nodeType":"554","messageId":"555","endLine":256,"endColumn":26},{"ruleId":"552","severity":1,"message":"700","line":562,"column":42,"nodeType":"554","messageId":"555","endLine":562,"endColumn":47},{"ruleId":"552","severity":1,"message":"701","line":79,"column":37,"nodeType":"554","messageId":"555","endLine":79,"endColumn":41},{"ruleId":"552","severity":1,"message":"565","line":71,"column":15,"nodeType":"554","messageId":"555","endLine":71,"endColumn":23},{"ruleId":"552","severity":1,"message":"655","line":94,"column":7,"nodeType":"554","messageId":"555","endLine":94,"endColumn":20},{"ruleId":"552","severity":1,"message":"587","line":18,"column":20,"nodeType":"554","messageId":"555","endLine":18,"endColumn":23},{"ruleId":"552","severity":1,"message":"665","line":96,"column":41,"nodeType":"554","messageId":"555","endLine":96,"endColumn":46},{"ruleId":"552","severity":1,"message":"702","line":105,"column":15,"nodeType":"554","messageId":"555","endLine":105,"endColumn":23},{"ruleId":"552","severity":1,"message":"565","line":105,"column":32,"nodeType":"554","messageId":"555","endLine":105,"endColumn":40},{"ruleId":"552","severity":1,"message":"665","line":230,"column":28,"nodeType":"554","messageId":"555","endLine":230,"endColumn":33},{"ruleId":"552","severity":1,"message":"703","line":286,"column":7,"nodeType":"554","messageId":"555","endLine":286,"endColumn":22},{"ruleId":"552","severity":1,"message":"704","line":292,"column":7,"nodeType":"554","messageId":"555","endLine":292,"endColumn":17},{"ruleId":"552","severity":1,"message":"702","line":141,"column":15,"nodeType":"554","messageId":"555","endLine":141,"endColumn":23},{"ruleId":"552","severity":1,"message":"705","line":601,"column":7,"nodeType":"554","messageId":"555","endLine":601,"endColumn":21},{"ruleId":"552","severity":1,"message":"622","line":602,"column":7,"nodeType":"554","messageId":"555","endLine":602,"endColumn":20},{"ruleId":"552","severity":1,"message":"706","line":336,"column":7,"nodeType":"554","messageId":"555","endLine":336,"endColumn":22},{"ruleId":"552","severity":1,"message":"707","line":382,"column":8,"nodeType":"554","messageId":"555","endLine":382,"endColumn":27},{"ruleId":"552","severity":1,"message":"708","line":400,"column":7,"nodeType":"554","messageId":"555","endLine":400,"endColumn":25},{"ruleId":"552","severity":1,"message":"709","line":417,"column":7,"nodeType":"554","messageId":"555","endLine":417,"endColumn":29},{"ruleId":"552","severity":1,"message":"700","line":657,"column":42,"nodeType":"554","messageId":"555","endLine":657,"endColumn":47},{"ruleId":"552","severity":1,"message":"702","line":342,"column":15,"nodeType":"554","messageId":"555","endLine":342,"endColumn":23},{"ruleId":"552","severity":1,"message":"710","line":342,"column":35,"nodeType":"554","messageId":"555","endLine":342,"endColumn":44},{"ruleId":"552","severity":1,"message":"668","line":342,"column":46,"nodeType":"554","messageId":"555","endLine":342,"endColumn":51},{"ruleId":"552","severity":1,"message":"575","line":351,"column":3,"nodeType":"554","messageId":"555","endLine":351,"endColumn":22},{"ruleId":"552","severity":1,"message":"711","line":352,"column":3,"nodeType":"554","messageId":"555","endLine":352,"endColumn":22},{"ruleId":"552","severity":1,"message":"581","line":353,"column":3,"nodeType":"554","messageId":"555","endLine":353,"endColumn":15},{"ruleId":"552","severity":1,"message":"673","line":354,"column":3,"nodeType":"554","messageId":"555","endLine":354,"endColumn":28},{"ruleId":"552","severity":1,"message":"578","line":355,"column":3,"nodeType":"554","messageId":"555","endLine":355,"endColumn":19},{"ruleId":"552","severity":1,"message":"658","line":356,"column":3,"nodeType":"554","messageId":"555","endLine":356,"endColumn":20},{"ruleId":"552","severity":1,"message":"712","line":357,"column":3,"nodeType":"554","messageId":"555","endLine":357,"endColumn":14},{"ruleId":"552","severity":1,"message":"568","line":358,"column":3,"nodeType":"554","messageId":"555","endLine":358,"endColumn":17},{"ruleId":"552","severity":1,"message":"713","line":364,"column":3,"nodeType":"554","messageId":"555","endLine":364,"endColumn":21},{"ruleId":"552","severity":1,"message":"714","line":366,"column":10,"nodeType":"554","messageId":"555","endLine":366,"endColumn":17},{"ruleId":"552","severity":1,"message":"715","line":648,"column":7,"nodeType":"554","messageId":"555","endLine":648,"endColumn":17},{"ruleId":"552","severity":1,"message":"716","line":652,"column":7,"nodeType":"554","messageId":"555","endLine":652,"endColumn":19},{"ruleId":"552","severity":1,"message":"717","line":656,"column":7,"nodeType":"554","messageId":"555","endLine":656,"endColumn":17},{"ruleId":"552","severity":1,"message":"718","line":668,"column":7,"nodeType":"554","messageId":"555","endLine":668,"endColumn":28},{"ruleId":"552","severity":1,"message":"719","line":702,"column":7,"nodeType":"554","messageId":"555","endLine":702,"endColumn":28},{"ruleId":"552","severity":1,"message":"720","line":713,"column":7,"nodeType":"554","messageId":"555","endLine":713,"endColumn":28},{"ruleId":"552","severity":1,"message":"721","line":723,"column":7,"nodeType":"554","messageId":"555","endLine":723,"endColumn":29},{"ruleId":"552","severity":1,"message":"722","line":216,"column":3,"nodeType":"554","messageId":"555","endLine":216,"endColumn":16},{"ruleId":"552","severity":1,"message":"723","line":538,"column":15,"nodeType":"554","messageId":"555","endLine":538,"endColumn":21},{"ruleId":"552","severity":1,"message":"724","line":538,"column":23,"nodeType":"554","messageId":"555","endLine":538,"endColumn":30},{"ruleId":"552","severity":1,"message":"725","line":538,"column":32,"nodeType":"554","messageId":"555","endLine":538,"endColumn":41},{"ruleId":"552","severity":1,"message":"726","line":119,"column":7,"nodeType":"554","messageId":"555","endLine":119,"endColumn":11},"no-unused-vars","'source' is defined but never used.","Identifier","unusedVar","'lineno' is defined but never used.","'colno' is defined but never used.","'error' is defined but never used.","'vm' is defined but never used.","'info' is defined but never used.","'toggleCollapsed' is assigned a value but never used.","'MenuFoldOutlined' is defined but never used.","'MenuUnfoldOutlined' is defined but never used.","'SwapOutlined' is defined but never used.","'computed' is defined but never used.","'UserOutlined' is defined but never used.","'CrownOutlined' is defined but never used.","'SafetyOutlined' is defined but never used.","'EyeOutlined' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'index' is defined but never used.","'roleAPI' is defined but never used.","'TeamOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'CheckCircleOutlined' is defined but never used.","'FolderOutlined' is defined but never used.","'FileOutlined' is defined but never used.","'DatabaseOutlined' is defined but never used.","'MonitorOutlined' is defined but never used.","'SecurityScanOutlined' is defined but never used.","'ToolOutlined' is defined but never used.","'FileTextOutlined' is defined but never used.","'EditOutlined' is defined but never used.","'DeleteOutlined' is defined but never used.","'LoadingOutlined' is defined but never used.","'PlusOutlined' is defined but never used.","'ref' is defined but never used.","'Input' is defined but never used.","'Select' is defined but never used.","'Button' is defined but never used.","'Table' is defined but never used.","'Card' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'DownloadOutlined' is defined but never used.","'ReloadOutlined' is defined but never used.","'filters' is defined but never used.","'sorter' is defined but never used.","'SearchOutlined' is defined but never used.","'getDepartments' is defined but never used.","'getDepartmentStatistics' is defined but never used.","'pagination' is assigned a value but never used.","'handleSearchChange' is assigned a value but never used.","'resetFilters' is assigned a value but never used.","'pag' is defined but never used.","'getPositionDetail' is defined but never used.","'getPositionsByDepartment' is defined but never used.","'Modal' is defined but never used.","'Form' is defined but never used.","'ApartmentOutlined' is defined but never used.","'getEmployeeDetail' is defined but never used.","'getDepartmentEmployees' is defined but never used.","'getPositionEmployees' is defined but never used.","'getAvailableUsers' is defined but never used.","'changeEmployeeStatus' is defined but never used.","'handleFilterChange' is assigned a value but never used.","'needsKey' is assigned a value but never used.","'isSNMPType' is assigned a value but never used.","'needsAuth' is assigned a value but never used.","'needsPriv' is assigned a value but never used.","'getKeyPlaceholder' is assigned a value but never used.","'getStatusText' is assigned a value but never used.","'getTypeText' is assigned a value but never used.","'formatDate' is assigned a value but never used.","'rules' is assigned a value but never used.","'columns' is assigned a value but never used.","'handleTemplateSearch' is assigned a value but never used.","'handleTemplateSelect' is assigned a value but never used.","'getTemplateKey' is assigned a value but never used.","'getTemplateValue' is assigned a value but never used.","'getCategoryIcon' is assigned a value but never used.","'categoryStats' is assigned a value but never used.","'filteredTemplates' is assigned a value but never used.","'safeCategoryDisplayName' is assigned a value but never used.","'toggleCategoryFilter' is assigned a value but never used.","'clearCategoryFilter' is assigned a value but never used.","'toggleCategoryExpand' is assigned a value but never used.","'isCategoryExpanded' is assigned a value but never used.","'getTemplateIcon' is assigned a value but never used.","'ExclamationCircleOutlined' is assigned a value but never used.","'modal' is assigned a value but never used.","'handleSecurityLevelChange' is assigned a value but never used.","'handleSearchTasks' is assigned a value but never used.","'handleRefreshTasks' is assigned a value but never used.","'handleTaskTableChange' is assigned a value but never used.","'handleViewTaskDetail' is assigned a value but never used.","'handleViewTaskResults' is assigned a value but never used.","'handleCancelTask' is assigned a value but never used.","'handleDeleteTask' is assigned a value but never used.","'getTaskStatusColor' is assigned a value but never used.","'getTaskStatusText' is assigned a value but never used.","'getCancelButtonText' is assigned a value but never used.","'getCancelButtonTitle' is assigned a value but never used.","'getDeleteButtonTitle' is assigned a value but never used.","'handleRefresh' is assigned a value but never used.","'handleSave' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","'NodeIndexOutlined' is defined but never used.","'ThunderboltOutlined' is defined but never used.","'MessageOutlined' is defined but never used.","'showConnections' is assigned a value but never used.","'viewIPDetail' is assigned a value but never used.","'filterOption' is assigned a value but never used.","'getNodeCenter' is assigned a value but never used.","'event' is defined but never used.","'containerRect' is assigned a value but never used.","'onUnmounted' is defined but never used.","'watch' is defined but never used.","'h' is defined but never used.","'createVNode' is defined but never used.","'Vue' is defined but never used.","'antdvIcons' is defined but never used.","'ExclamationCircleOutlined' is defined but never used.","'router' is assigned a value but never used.","'statistics' is assigned a value but never used.","'needsWarrantyCheck' is assigned a value but never used.","'taskDetailModalVisible' is assigned a value but never used.","'warrantyTasks' is assigned a value but never used.","'taskLoading' is assigned a value but never used.","'taskStatusFilter' is assigned a value but never used.","'taskDateRange' is assigned a value but never used.","'taskNameFilter' is assigned a value but never used.","'taskPagination' is assigned a value but never used.","'formRef' is assigned a value but never used.","'warrantyFormRef' is assigned a value but never used.","'handleBatchWarrantyCheck' is assigned a value but never used.","'handleCloseTemplateDrawer' is assigned a value but never used.","'handleHistoryTabChange' is assigned a value but never used.","'handleHistoryModalClose' is assigned a value but never used.","'handleTableChange' is assigned a value but never used.","'selectedTemplateIds' is assigned a value but never used.","'monitoringCreating' is assigned a value but never used.","'selectedCategory' is assigned a value but never used.","'handleToggleMonitoring' is assigned a value but never used.","'exportData' is assigned a value but never used.","'showScanConfig' is assigned a value but never used.","'getSoftwareTypeText' is assigned a value but never used.","'onBeforeMount' is defined but never used.","'hardwareAssetApi' is defined but never used.","'field' is defined but never used.","'from' is defined but never used.","'reactive' is defined but never used.","'handleDragStart' is assigned a value but never used.","'handleDrop' is assigned a value but never used.","'getStatusColor' is assigned a value but never used.","'assetTagOptions' is assigned a value but never used.","'onSupplierOrgChange' is assigned a value but never used.","'assetStatusOptions' is assigned a value but never used.","'supplierContactOptions' is assigned a value but never used.","'onMounted' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'HddOutlined' is defined but never used.","'NodeExpandOutlined' is defined but never used.","'message' is defined but never used.","'handleEdit' is assigned a value but never used.","'handleDelete' is assigned a value but never used.","'handleView' is assigned a value but never used.","'handleBatchOperations' is assigned a value but never used.","'getLicenseStatusColor' is assigned a value but never used.","'getLicenseStatusLabel' is assigned a value but never used.","'getLicenseEndDateColor' is assigned a value but never used.","'CheckOutlined' is defined but never used.","'_valid' is assigned a value but never used.","'_errors' is assigned a value but never used.","'_rowIndex' is assigned a value but never used.","'emit' is assigned a value but never used."]