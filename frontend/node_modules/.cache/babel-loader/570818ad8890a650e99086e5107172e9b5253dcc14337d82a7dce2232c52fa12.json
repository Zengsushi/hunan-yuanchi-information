{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"software-asset-list-container\"\n};\nconst _hoisted_2 = {\n  class: \"history-section\"\n};\nconst _hoisted_3 = {\n  class: \"history-header\"\n};\nconst _hoisted_4 = {\n  class: \"history-section\"\n};\nconst _hoisted_5 = {\n  class: \"history-header\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SoftwareAssetTable = _resolveComponent(\"SoftwareAssetTable\");\n  const _component_SoftwareMonitoringActions = _resolveComponent(\"SoftwareMonitoringActions\");\n  const _component_SoftwareAssetForm = _resolveComponent(\"SoftwareAssetForm\");\n  const _component_SoftwareAssetDetail = _resolveComponent(\"SoftwareAssetDetail\");\n  const _component_SoftwareAssetImport = _resolveComponent(\"SoftwareAssetImport\");\n  const _component_a_input_number = _resolveComponent(\"a-input-number\");\n  const _component_a_form_item = _resolveComponent(\"a-form-item\");\n  const _component_a_date_picker = _resolveComponent(\"a-date-picker\");\n  const _component_a_form = _resolveComponent(\"a-form\");\n  const _component_a_modal = _resolveComponent(\"a-modal\");\n  const _component_a_button = _resolveComponent(\"a-button\");\n  const _component_a_table = _resolveComponent(\"a-table\");\n  const _component_a_tab_pane = _resolveComponent(\"a-tab-pane\");\n  const _component_a_tabs = _resolveComponent(\"a-tabs\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 软件资产表格组件 \"), _createVNode(_component_SoftwareAssetTable, {\n    ref: \"softwareTableRef\",\n    loading: $setup.loading,\n    data: $setup.tableData,\n    pagination: $setup.pagination,\n    \"selected-row-keys\": $setup.selectedRowKeys,\n    totalCount: $setup.statistics.total,\n    activeCount: $setup.statistics.active,\n    maintenanceCount: $setup.statistics.maintenance,\n    retiredCount: $setup.statistics.retired,\n    onSearch: $setup.handleSearch,\n    onReset: $setup.handleReset,\n    onPageChange: $setup.handlePageChange,\n    onSizeChange: $setup.handleSizeChange,\n    onSelectionChange: $setup.handleSelectionChange,\n    onView: $setup.handleView,\n    onEdit: $setup.handleEdit,\n    onDelete: $setup.handleDelete,\n    onLicense: $setup.handleLicense,\n    onHistory: $setup.handleHistory,\n    onBatchDelete: $setup.handleBatchDelete,\n    onBatchExport: $setup.handleBatchExport,\n    onExport: $setup.handleExport,\n    onAdd: $setup.showAddDialog,\n    onImport: $setup.showImportDialog\n  }, null, 8 /* PROPS */, [\"loading\", \"data\", \"pagination\", \"selected-row-keys\", \"totalCount\", \"activeCount\", \"maintenanceCount\", \"retiredCount\", \"onSearch\", \"onReset\", \"onPageChange\", \"onSizeChange\", \"onSelectionChange\", \"onView\", \"onEdit\", \"onDelete\", \"onLicense\", \"onHistory\", \"onBatchDelete\", \"onBatchExport\", \"onExport\", \"onAdd\", \"onImport\"]), _createCommentVNode(\" 软件监控操作组件 \"), _createVNode(_component_SoftwareMonitoringActions, {\n    ref: \"monitoringActionsRef\",\n    visible: false,\n    onRefresh: $setup.fetchData\n  }, null, 8 /* PROPS */, [\"onRefresh\"]), _createCommentVNode(\" 新增/编辑对话框 \"), _createVNode(_component_SoftwareAssetForm, {\n    visible: $setup.formDialogVisible,\n    \"onUpdate:visible\": _cache[0] || (_cache[0] = $event => $setup.formDialogVisible = $event),\n    \"form-data\": $setup.currentItem,\n    \"is-edit\": $setup.isEdit,\n    onSuccess: $setup.handleFormSuccess\n  }, null, 8 /* PROPS */, [\"visible\", \"form-data\", \"is-edit\", \"onSuccess\"]), _createCommentVNode(\" 详情对话框 \"), _createVNode(_component_SoftwareAssetDetail, {\n    visible: $setup.detailDialogVisible,\n    \"onUpdate:visible\": _cache[1] || (_cache[1] = $event => $setup.detailDialogVisible = $event),\n    \"asset-id\": $setup.currentAssetId\n  }, null, 8 /* PROPS */, [\"visible\", \"asset-id\"]), _createCommentVNode(\" 导入对话框 \"), _createVNode(_component_SoftwareAssetImport, {\n    visible: $setup.importDialogVisible,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => $setup.importDialogVisible = $event),\n    onSuccess: $setup.handleImportSuccess\n  }, null, 8 /* PROPS */, [\"visible\", \"onSuccess\"]), _createCommentVNode(\" 许可证管理对话框 \"), _createVNode(_component_a_modal, {\n    open: $setup.licenseModalVisible,\n    \"onUpdate:open\": _cache[5] || (_cache[5] = $event => $setup.licenseModalVisible = $event),\n    title: \"许可证管理\",\n    width: \"800px\",\n    onOk: $setup.handleLicenseConfirm,\n    onCancel: $setup.handleLicenseCancel\n  }, {\n    default: _withCtx(() => [_createVNode(_component_a_form, {\n      model: $setup.licenseFormData,\n      layout: \"vertical\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_form_item, {\n        label: \"许可证数量\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_input_number, {\n          value: $setup.licenseFormData.license_count,\n          \"onUpdate:value\": _cache[3] || (_cache[3] = $event => $setup.licenseFormData.license_count = $event),\n          min: 0,\n          style: {\n            \"width\": \"100%\"\n          }\n        }, null, 8 /* PROPS */, [\"value\"])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_a_form_item, {\n        label: \"许可证到期日期\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_date_picker, {\n          value: $setup.licenseFormData.license_expiry_date,\n          \"onUpdate:value\": _cache[4] || (_cache[4] = $event => $setup.licenseFormData.license_expiry_date = $event),\n          style: {\n            \"width\": \"100%\"\n          }\n        }, null, 8 /* PROPS */, [\"value\"])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"model\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"open\", \"onOk\", \"onCancel\"]), _createCommentVNode(\" 历史记录弹窗 \"), _createVNode(_component_a_modal, {\n    open: $setup.historyModalVisible,\n    \"onUpdate:open\": _cache[7] || (_cache[7] = $event => $setup.historyModalVisible = $event),\n    title: \"更新历史记录\",\n    width: \"1200px\",\n    footer: null,\n    onCancel: _cache[8] || (_cache[8] = $event => $setup.historyModalVisible = false)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_a_tabs, {\n      activeKey: $setup.historyActiveTab,\n      \"onUpdate:activeKey\": _cache[6] || (_cache[6] = $event => $setup.historyActiveTab = $event)\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_tab_pane, {\n        tab: \"许可证更新记录\",\n        key: \"license\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[10] || (_cache[10] = _createElementVNode(\"h4\", null, \"许可证更新记录\", -1 /* CACHED */)), _createVNode(_component_a_button, {\n          type: \"primary\",\n          size: \"small\",\n          onClick: $setup.loadLicenseHistory\n        }, {\n          default: _withCtx(() => [...(_cache[9] || (_cache[9] = [_createTextVNode(\" 刷新记录 \", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])]), _createVNode(_component_a_table, {\n          \"data-source\": $setup.licenseHistory,\n          columns: $setup.licenseHistoryColumns,\n          bordered: \"\",\n          loading: $setup.licenseHistoryLoading,\n          pagination: false,\n          locale: {\n            emptyText: '暂无更新记录'\n          }\n        }, null, 8 /* PROPS */, [\"data-source\", \"columns\", \"loading\"])])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_a_tab_pane, {\n        tab: \"版本更新记录\",\n        key: \"version\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[12] || (_cache[12] = _createElementVNode(\"h4\", null, \"版本更新记录\", -1 /* CACHED */)), _createVNode(_component_a_button, {\n          type: \"primary\",\n          size: \"small\",\n          onClick: $setup.loadVersionHistory\n        }, {\n          default: _withCtx(() => [...(_cache[11] || (_cache[11] = [_createTextVNode(\" 刷新记录 \", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"])]), _createVNode(_component_a_table, {\n          \"data-source\": $setup.versionHistory,\n          columns: $setup.versionHistoryColumns,\n          bordered: \"\",\n          loading: $setup.versionHistoryLoading,\n          pagination: false,\n          locale: {\n            emptyText: '暂无更新记录'\n          }\n        }, null, 8 /* PROPS */, [\"data-source\", \"columns\", \"loading\"])])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"activeKey\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"open\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_SoftwareAssetTable","ref","loading","$setup","data","tableData","pagination","selectedRowKeys","totalCount","statistics","total","activeCount","active","maintenanceCount","maintenance","retiredCount","retired","onSearch","handleSearch","onReset","handleReset","onPageChange","handlePageChange","onSizeChange","handleSizeChange","onSelectionChange","handleSelectionChange","onView","handleView","onEdit","handleEdit","onDelete","handleDelete","onLicense","handleLicense","onHistory","handleHistory","onBatchDelete","handleBatchDelete","onBatchExport","handleBatchExport","onExport","handleExport","onAdd","showAddDialog","onImport","showImportDialog","_component_SoftwareMonitoringActions","visible","onRefresh","fetchData","_component_SoftwareAssetForm","formDialogVisible","$event","currentItem","isEdit","onSuccess","handleFormSuccess","_component_SoftwareAssetDetail","detailDialogVisible","currentAssetId","_component_SoftwareAssetImport","importDialogVisible","handleImportSuccess","_component_a_modal","open","licenseModalVisible","title","width","onOk","handleLicenseConfirm","onCancel","handleLicenseCancel","_component_a_form","model","licenseFormData","layout","_component_a_form_item","label","_component_a_input_number","value","license_count","min","style","_component_a_date_picker","license_expiry_date","historyModalVisible","footer","_cache","_component_a_tabs","activeKey","historyActiveTab","_component_a_tab_pane","tab","key","_createElementVNode","_hoisted_2","_hoisted_3","_component_a_button","type","size","onClick","loadLicenseHistory","_component_a_table","licenseHistory","columns","licenseHistoryColumns","bordered","licenseHistoryLoading","locale","emptyText","_hoisted_4","_hoisted_5","loadVersionHistory","versionHistory","versionHistoryColumns","versionHistoryLoading"],"sources":["E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\SoftwareAssetList.vue"],"sourcesContent":["<template>\r\n  <div class=\"software-asset-list-container\">\r\n    <!-- 软件资产表格组件 -->\r\n    <SoftwareAssetTable\r\n      ref=\"softwareTableRef\"\r\n      :loading=\"loading\"\r\n      :data=\"tableData\"\r\n      :pagination=\"pagination\"\r\n      :selected-row-keys=\"selectedRowKeys\"\r\n      :totalCount=\"statistics.total\"\r\n      :activeCount=\"statistics.active\"\r\n      :maintenanceCount=\"statistics.maintenance\"\r\n      :retiredCount=\"statistics.retired\"\r\n      @search=\"handleSearch\"\r\n      @reset=\"handleReset\"\r\n      @page-change=\"handlePageChange\"\r\n      @size-change=\"handleSizeChange\"\r\n      @selection-change=\"handleSelectionChange\"\r\n      @view=\"handleView\"\r\n      @edit=\"handleEdit\"\r\n      @delete=\"handleDelete\"\r\n      @license=\"handleLicense\"\r\n      @history=\"handleHistory\"\r\n      @batch-delete=\"handleBatchDelete\"\r\n      @batch-export=\"handleBatchExport\"\r\n      @export=\"handleExport\"\r\n      @add=\"showAddDialog\"\r\n      @import=\"showImportDialog\"\r\n    />\r\n\r\n    <!-- 软件监控操作组件 -->\r\n    <SoftwareMonitoringActions\r\n      ref=\"monitoringActionsRef\"\r\n      :visible=\"false\"\r\n      @refresh=\"fetchData\"\r\n    />\r\n\r\n    <!-- 新增/编辑对话框 -->\r\n    <SoftwareAssetForm\r\n      v-model:visible=\"formDialogVisible\"\r\n      :form-data=\"currentItem\"\r\n      :is-edit=\"isEdit\"\r\n      @success=\"handleFormSuccess\"\r\n    />\r\n\r\n    <!-- 详情对话框 -->\r\n    <SoftwareAssetDetail\r\n      v-model:visible=\"detailDialogVisible\"\r\n      :asset-id=\"currentAssetId\"\r\n    />\r\n\r\n    <!-- 导入对话框 -->\r\n    <SoftwareAssetImport\r\n      v-model:visible=\"importDialogVisible\"\r\n      @success=\"handleImportSuccess\"\r\n    />\r\n\r\n    <!-- 许可证管理对话框 -->\r\n    <a-modal\r\n      v-model:open=\"licenseModalVisible\"\r\n      title=\"许可证管理\"\r\n      width=\"800px\"\r\n      @ok=\"handleLicenseConfirm\"\r\n      @cancel=\"handleLicenseCancel\"\r\n    >\r\n      <a-form :model=\"licenseFormData\" layout=\"vertical\">\r\n        <a-form-item label=\"许可证数量\">\r\n          <a-input-number\r\n            v-model:value=\"licenseFormData.license_count\"\r\n            :min=\"0\"\r\n            style=\"width: 100%\"\r\n          />\r\n        </a-form-item>\r\n        <a-form-item label=\"许可证到期日期\">\r\n          <a-date-picker\r\n            v-model:value=\"licenseFormData.license_expiry_date\"\r\n            style=\"width: 100%\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 历史记录弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"historyModalVisible\"\r\n      title=\"更新历史记录\"\r\n      width=\"1200px\"\r\n      :footer=\"null\"\r\n      @cancel=\"historyModalVisible = false\"\r\n    >\r\n      <a-tabs v-model:activeKey=\"historyActiveTab\">\r\n        <a-tab-pane tab=\"许可证更新记录\" key=\"license\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>许可证更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadLicenseHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"licenseHistory\"\r\n              :columns=\"licenseHistoryColumns\"\r\n              bordered\r\n              :loading=\"licenseHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n        \r\n        <a-tab-pane tab=\"版本更新记录\" key=\"version\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>版本更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadVersionHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"versionHistory\"\r\n              :columns=\"versionHistoryColumns\"\r\n              bordered\r\n              :loading=\"versionHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted } from 'vue'\r\nimport { message, Modal } from 'ant-design-vue'\r\nimport SoftwareAssetTable from '@/components/business/SoftwareAssetTable.vue'\r\nimport SoftwareMonitoringActions from '@/components/business/SoftwareMonitoringActions.vue'\r\nimport SoftwareAssetForm from '@/components/business/SoftwareAssetForm.vue'\r\nimport SoftwareAssetDetail from '@/components/business/SoftwareAssetDetail.vue'\r\nimport SoftwareAssetImport from '@/components/business/SoftwareAssetImport.vue'\r\nimport softwareAssetApi from '@/api/softwareAsset'\r\nimport { dictionaryAPI } from '@/api'\r\nimport { formatDate } from '@/utils/date'\r\n\r\nexport default {\r\n  name: 'SoftwareAssetList',\r\n  components: {\r\n    SoftwareAssetTable,\r\n    SoftwareMonitoringActions,\r\n    SoftwareAssetForm,\r\n    SoftwareAssetDetail,\r\n    SoftwareAssetImport,\r\n  },\r\n  setup() {\r\n    // 组件引用\r\n    const softwareTableRef = ref(null)\r\n    const monitoringActionsRef = ref(null)\r\n    \r\n    // 响应式数据\r\n    const loading = ref(false)\r\n    const tableData = ref([])\r\n    const selectedItems = ref([])\r\n    const selectedRowKeys = ref([])\r\n    const formDialogVisible = ref(false)\r\n    const detailDialogVisible = ref(false)\r\n    const importDialogVisible = ref(false)\r\n    const licenseModalVisible = ref(false)\r\n    const historyModalVisible = ref(false)\r\n    const isEdit = ref(false)\r\n    const currentItem = ref({})\r\n    const currentAssetId = ref(null)\r\n    const licenseFormData = ref({})\r\n    const historyActiveTab = ref('license')\r\n    const currentHistoryAsset = ref(null)\r\n    const licenseHistory = ref([])\r\n    const versionHistory = ref([])\r\n    const licenseHistoryLoading = ref(false)\r\n    const versionHistoryLoading = ref(false)\r\n    \r\n    // 字典数据\r\n    const assetStatusOptions = ref([])\r\n    const softwareTypeOptions = ref([])\r\n\r\n    // 搜索表单\r\n    const searchForm = reactive({\r\n      software_name: '',\r\n      version: '',\r\n      manufacturer: '',\r\n      asset_status: '',\r\n      software_type: ''\r\n    })\r\n\r\n    // 分页\r\n    const pagination = reactive({\r\n      page: 1,\r\n      size: 20,\r\n      total: 0\r\n    })\r\n\r\n    // 统计计算属性\r\n    const statistics = computed(() => {\r\n      const total = tableData.value.length || 0\r\n      const active = tableData.value.filter(item => item.asset_status === 'active').length\r\n      const maintenance = tableData.value.filter(item => item.asset_status === 'maintenance').length\r\n      const retired = tableData.value.filter(item => item.asset_status === 'retired').length\r\n      \r\n      return {\r\n        total: pagination.total || 0,\r\n        active,\r\n        maintenance,\r\n        retired\r\n      }\r\n    })\r\n\r\n    // 历史记录表格列配置\r\n    const licenseHistoryColumns = [\r\n      {\r\n        title: '更新时间',\r\n        dataIndex: 'update_time',\r\n        key: 'update_time',\r\n        width: 180,\r\n        customRender: ({ text }) => {\r\n          return text ? new Date(text).toLocaleString() : '-'\r\n        }\r\n      },\r\n      {\r\n        title: '更新方式',\r\n        dataIndex: 'update_method',\r\n        key: 'update_method',\r\n        width: 100,\r\n        customRender: ({ text }) => {\r\n          return text === 'manual' ? '手动' : '自动'\r\n        }\r\n      },\r\n      {\r\n        title: '更新前许可证信息',\r\n        dataIndex: 'old_license_info',\r\n        key: 'old_license_info',\r\n        customRender: ({ text }) => {\r\n          if (!text) return '-'\r\n          try {\r\n            const info = typeof text === 'string' ? JSON.parse(text) : text\r\n            return `许可证数量: ${info.license_count || '-'}, 到期日期: ${info.expiry_date || '-'}`\r\n          } catch (e) {\r\n            return text\r\n          }\r\n        }\r\n      },\r\n      {\r\n        title: '更新后许可证信息',\r\n        dataIndex: 'new_license_info',\r\n        key: 'new_license_info',\r\n        customRender: ({ text }) => {\r\n          if (!text) return '-'\r\n          try {\r\n            const info = typeof text === 'string' ? JSON.parse(text) : text\r\n            return `许可证数量: ${info.license_count || '-'}, 到期日期: ${info.expiry_date || '-'}`\r\n          } catch (e) {\r\n            return text\r\n          }\r\n        }\r\n      },\r\n      {\r\n        title: '更新人',\r\n        dataIndex: 'updated_by',\r\n        key: 'updated_by',\r\n        width: 120\r\n      }\r\n    ]\r\n\r\n    const versionHistoryColumns = [\r\n      {\r\n        title: '更新时间',\r\n        dataIndex: 'update_time',\r\n        key: 'update_time',\r\n        width: 180,\r\n        customRender: ({ text }) => {\r\n          return text ? new Date(text).toLocaleString() : '-'\r\n        }\r\n      },\r\n      {\r\n        title: '更新方式',\r\n        dataIndex: 'update_method',\r\n        key: 'update_method',\r\n        width: 100,\r\n        customRender: ({ text }) => {\r\n          return text === 'manual' ? '手动' : '自动'\r\n        }\r\n      },\r\n      {\r\n        title: '更新前版本',\r\n        dataIndex: 'old_version',\r\n        key: 'old_version',\r\n        width: 150\r\n      },\r\n      {\r\n        title: '更新后版本',\r\n        dataIndex: 'new_version',\r\n        key: 'new_version',\r\n        width: 150\r\n      },\r\n      {\r\n        title: '更新人',\r\n        dataIndex: 'updated_by',\r\n        key: 'updated_by',\r\n        width: 120\r\n      }\r\n    ]\r\n    // 搜索条件\r\n    const searchKeyword = ref(\"\") ;\r\n    const assetStatus = ref(\"\") ;\r\n    const assetType = ref(\"\") ;\r\n    const manufacturer = ref(\"\") ;\r\n\r\n    // 获取数据\r\n    const fetchData = async () => {\r\n      loading.value = true\r\n      try {\r\n        const params = {\r\n          page: pagination.page,\r\n          page_size: pagination.size,\r\n          ...searchForm\r\n        }\r\n        console.log(searchForm)\r\n      // 添加搜索条件\r\n      if (searchKeyword.value && searchKeyword.value.trim()) {\r\n        params.search = searchKeyword.value.trim();\r\n      }\r\n      if (assetStatus.value) {\r\n        params.status = assetStatus.value;\r\n      }\r\n      if (assetType.value) {\r\n        params.type = assetType.value;\r\n      }\r\n      if (manufacturer.value) {\r\n        params.manufacturer = manufacturer.value;\r\n      }\r\n\r\n        \r\n        // 过滤空值\r\n        Object.keys(params).forEach(key => {\r\n          if (params[key] === '' || params[key] === null || params[key] === undefined) {\r\n            delete params[key]\r\n          }\r\n        })\r\n\r\n        const response = await softwareAssetApi.getList(params)\r\n        tableData.value = response.data.results\r\n        pagination.total = response.data.count\r\n      } catch (error) {\r\n        message.error('获取数据失败：' + (error.message || '未知错误'))\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    // 新的事件处理方法\r\n    const handleSearch = (searchParams) => {\r\n      Object.assign(searchForm, searchParams)\r\n      pagination.page = 1\r\n      fetchData()\r\n    }\r\n\r\n    const handleReset = () => {\r\n      Object.keys(searchForm).forEach(key => {\r\n        searchForm[key] = ''\r\n      })\r\n      pagination.page = 1\r\n      fetchData()\r\n    }\r\n\r\n    const handlePageChange = (page) => {\r\n      pagination.page = page\r\n      fetchData()\r\n    }\r\n\r\n    const handleSizeChange = (size) => {\r\n      pagination.size = size\r\n      pagination.page = 1\r\n      fetchData()\r\n    }\r\n\r\n    const handleSelectionChange = (selectedKeys, selectedRows) => {\r\n      selectedRowKeys.value = selectedKeys\r\n      selectedItems.value = selectedRows\r\n    }\r\n\r\n    // 表格操作事件处理\r\n    const handleView = (record) => {\r\n      currentAssetId.value = record.id\r\n      detailDialogVisible.value = true\r\n    }\r\n\r\n    const handleEdit = (record) => {\r\n      currentItem.value = { ...record }\r\n      isEdit.value = true\r\n      formDialogVisible.value = true\r\n    }\r\n\r\n    const handleDelete = (record) => {\r\n      Modal.confirm({\r\n        title: '确认删除',\r\n        content: `确定要删除软件资产 \"${record.software_name}\" 吗？`,\r\n        okText: '确定',\r\n        cancelText: '取消',\r\n        onOk: async () => {\r\n          try {\r\n            await softwareAssetApi.delete(record.id)\r\n            message.success('删除成功')\r\n            fetchData()\r\n          } catch (error) {\r\n            message.error('删除失败：' + (error.message || '未知错误'))\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    const handleLicense = (record) => {\r\n      currentItem.value = record\r\n      licenseFormData.value = {\r\n        license_count: record.license_count,\r\n        license_expiry_date: record.license_expiry_date\r\n      }\r\n      licenseModalVisible.value = true\r\n    }\r\n\r\n    const handleHistory = (record) => {\r\n      currentHistoryAsset.value = record\r\n      historyModalVisible.value = true\r\n      loadLicenseHistory()\r\n    }\r\n\r\n    const handleBatchDelete = () => {\r\n      Modal.confirm({\r\n        title: '确认批量删除',\r\n        content: `确定要删除选中的 ${selectedItems.value.length} 项软件资产吗？`,\r\n        okText: '确定',\r\n        cancelText: '取消',\r\n        onOk: async () => {\r\n          try {\r\n            const ids = selectedItems.value.map(item => item.id)\r\n            await softwareAssetApi.batchDelete({ ids })\r\n            message.success('批量删除成功')\r\n            selectedItems.value = []\r\n            selectedRowKeys.value = []\r\n            fetchData()\r\n          } catch (error) {\r\n            message.error('批量删除失败：' + (error.message || '未知错误'))\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    const handleBatchExport = async () => {\r\n      try {\r\n        loading.value = true\r\n        const ids = selectedItems.value.map(item => item.id)\r\n        const response = await softwareAssetApi.export({ ids })\r\n        \r\n        // 创建下载链接\r\n        const blob = new Blob([response.data], { \r\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n        })\r\n        const url = window.URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.download = `软件资产数据_选中项_${formatDate(new Date(), 'YYYY-MM-DD')}.xlsx`\r\n        link.click()\r\n        window.URL.revokeObjectURL(url)\r\n        \r\n        message.success('批量导出成功')\r\n      } catch (error) {\r\n        message.error('批量导出失败：' + (error.message || '未知错误'))\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    const handleExport = async () => {\r\n      try {\r\n        loading.value = true\r\n        const params = { ...searchForm }\r\n        \r\n        // 过滤空值\r\n        Object.keys(params).forEach(key => {\r\n          if (params[key] === '' || params[key] === null || params[key] === undefined) {\r\n            delete params[key]\r\n          }\r\n        })\r\n\r\n        const response = await softwareAssetApi.export(params)\r\n        \r\n        // 创建下载链接\r\n        const blob = new Blob([response.data], { \r\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n        })\r\n        const url = window.URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.download = `软件资产数据_${formatDate(new Date(), 'YYYY-MM-DD')}.xlsx`\r\n        link.click()\r\n        window.URL.revokeObjectURL(url)\r\n        \r\n        message.success('导出成功')\r\n      } catch (error) {\r\n        message.error('导出失败：' + (error.message || '未知错误'))\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    // 新增\r\n    const showAddDialog = () => {\r\n      currentItem.value = {}\r\n      isEdit.value = false\r\n      formDialogVisible.value = true\r\n    }\r\n\r\n    // 导出数据\r\n    const exportData = async () => {\r\n      try {\r\n        loading.value = true\r\n        const params = { ...searchForm }\r\n        \r\n        // 过滤空值\r\n        Object.keys(params).forEach(key => {\r\n          if (params[key] === '' || params[key] === null || params[key] === undefined) {\r\n            delete params[key]\r\n          }\r\n        })\r\n\r\n        const response = await softwareAssetApi.export(params)\r\n        \r\n        // 创建下载链接\r\n        const blob = new Blob([response.data], { \r\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n        })\r\n        const url = window.URL.createObjectURL(blob)\r\n        const link = document.createElement('a')\r\n        link.href = url\r\n        link.download = `软件资产数据_${formatDate(new Date(), 'YYYY-MM-DD')}.xlsx`\r\n        link.click()\r\n        window.URL.revokeObjectURL(url)\r\n        \r\n        message.success('导出成功')\r\n      } catch (error) {\r\n        message.error('导出失败：' + (error.message || '未知错误'))\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n\r\n    // 显示导入对话框\r\n    const showImportDialog = () => {\r\n      importDialogVisible.value = true\r\n    }\r\n\r\n    // 显示扫描配置\r\n    const showScanConfig = () => {\r\n      if (monitoringActionsRef.value) {\r\n        monitoringActionsRef.value.showScanConfig()\r\n      }\r\n    }\r\n\r\n    // 许可证处理\r\n    const handleLicenseCancel = () => {\r\n      licenseModalVisible.value = false\r\n      licenseFormData.value = {}\r\n    }\r\n\r\n    const handleLicenseConfirm = async () => {\r\n      try {\r\n        await softwareAssetApi.updateLicense(currentItem.value.id, licenseFormData.value)\r\n        message.success('许可证信息更新成功')\r\n        licenseModalVisible.value = false\r\n        fetchData()\r\n      } catch (error) {\r\n        message.error('许可证信息更新失败：' + (error.message || '未知错误'))\r\n      }\r\n    }\r\n\r\n\r\n    // 历史记录加载函数\r\n    const loadLicenseHistory = async () => {\r\n      if (!currentHistoryAsset.value) return\r\n      \r\n      try {\r\n        licenseHistoryLoading.value = true\r\n        const response = await softwareAssetApi.getLicenseHistory(currentHistoryAsset.value.id)\r\n        licenseHistory.value = response.data || []\r\n      } catch (error) {\r\n        message.error('加载许可证历史记录失败：' + (error.message || '未知错误'))\r\n      } finally {\r\n        licenseHistoryLoading.value = false\r\n      }\r\n    }\r\n\r\n    const loadVersionHistory = async () => {\r\n      if (!currentHistoryAsset.value) return\r\n      \r\n      try {\r\n        versionHistoryLoading.value = true\r\n        const response = await softwareAssetApi.getVersionHistory(currentHistoryAsset.value.id)\r\n        versionHistory.value = response.data || []\r\n      } catch (error) {\r\n        message.error('加载版本历史记录失败：' + (error.message || '未知错误'))\r\n      } finally {\r\n        versionHistoryLoading.value = false\r\n      }\r\n    }\r\n\r\n    // 表单成功回调\r\n    const handleFormSuccess = () => {\r\n      fetchData()\r\n    }\r\n\r\n    // 导入成功回调\r\n    const handleImportSuccess = () => {\r\n      fetchData()\r\n    }\r\n\r\n    // 获取字典数据\r\n    const fetchDictionaryData = async () => {\r\n      try {\r\n        const [assetStatusRes, softwareTypeRes] = await Promise.all([\r\n          dictionaryAPI.getDictionaryByCategory('asset_status'),\r\n          dictionaryAPI.getDictionaryByCategory('software_type')\r\n        ])\r\n        \r\n        if (assetStatusRes.data && assetStatusRes.data.results) {\r\n          assetStatusOptions.value = assetStatusRes.data.results.map(item => ({\r\n            value: item.value,\r\n            label: item.label\r\n          }))\r\n        }\r\n        \r\n        if (softwareTypeRes.data && softwareTypeRes.data.results) {\r\n          softwareTypeOptions.value = softwareTypeRes.data.results.map(item => ({\r\n            value: item.value,\r\n            label: item.label\r\n          }))\r\n        }\r\n      } catch (error) {\r\n        console.error('获取字典数据失败:', error)\r\n        message.error('获取字典数据失败')\r\n      }\r\n    }\r\n\r\n    // 获取软件类型文本\r\n    const getSoftwareTypeText = (type) => {\r\n      const option = softwareTypeOptions.value.find(item => item.value === type)\r\n      return option ? option.label : '未知'\r\n    }\r\n\r\n    // 生命周期\r\n    onMounted(() => {\r\n      fetchDictionaryData()\r\n      fetchData()\r\n    })\r\n\r\n    return {\r\n      // 图标\r\n\r\n      \r\n      // 数据\r\n      loading,\r\n      tableData,\r\n      selectedItems,\r\n      selectedRowKeys,\r\n      searchForm,\r\n      pagination,\r\n      statistics,\r\n      assetStatusOptions,\r\n      softwareTypeOptions,\r\n      \r\n      // 对话框\r\n      formDialogVisible,\r\n      detailDialogVisible,\r\n      importDialogVisible,\r\n      licenseModalVisible,\r\n      historyModalVisible,\r\n      isEdit,\r\n      currentItem,\r\n      currentAssetId,\r\n      licenseFormData,\r\n      historyActiveTab,\r\n      currentHistoryAsset,\r\n      licenseHistory,\r\n      versionHistory,\r\n      licenseHistoryLoading,\r\n      versionHistoryLoading,\r\n      licenseHistoryColumns,\r\n      versionHistoryColumns,\r\n      \r\n      // 方法\r\n      fetchDictionaryData,\r\n      fetchData,\r\n      handleSearch,\r\n      handleReset,\r\n      handlePageChange,\r\n      handleSizeChange,\r\n      handleSelectionChange,\r\n      handleView,\r\n      handleEdit,\r\n      handleDelete,\r\n      handleLicense,\r\n      handleHistory,\r\n      handleBatchDelete,\r\n      handleBatchExport,\r\n      handleExport,\r\n      showAddDialog,\r\n      showImportDialog,\r\n      showScanConfig,\r\n      exportData,\r\n      handleLicenseCancel,\r\n      handleLicenseConfirm,\r\n      loadLicenseHistory,\r\n      loadVersionHistory,\r\n      handleFormSuccess,\r\n      handleImportSuccess,\r\n      getSoftwareTypeText,\r\n      \r\n      // 组件引用\r\n      softwareTableRef,\r\n      monitoringActionsRef\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.software-asset-list-container {\r\n  min-height: 100vh;\r\n}\r\n\r\n.ant-table-wrapper {\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.search-form {\r\n  background: white;\r\n  padding: 24px;\r\n  border-radius: 6px;\r\n  margin-bottom: 16px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.batch-actions {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.statistics-cards {\r\n  display: flex;\r\n  gap: 16px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.history-section {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.history-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.history-header h4 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 表格样式 */\r\n:deep(.ant-table) {\r\n  border-radius: 0;\r\n}\r\n\r\n:deep(.ant-table-thead > tr > th) {\r\n  background-color: #f9fafb;\r\n  color: #374151;\r\n  font-weight: 500;\r\n  border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n:deep(.ant-table-tbody > tr:hover > td) {\r\n  background-color: #f9fafb;\r\n}\r\n\r\n:deep(.ant-table-tbody > tr > td) {\r\n  border-bottom: 1px solid #f3f4f6;\r\n}\r\n\r\n/* 按钮样式 */\r\n:deep(.ant-btn) {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn-primary) {\r\n  background-color: #3b82f6;\r\n  border-color: #3b82f6;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background-color: #2563eb;\r\n  border-color: #2563eb;\r\n}\r\n\r\n:deep(.ant-btn-danger) {\r\n  background-color: #ef4444;\r\n  border-color: #ef4444;\r\n}\r\n\r\n:deep(.ant-btn-danger:hover) {\r\n  background-color: #dc2626;\r\n  border-color: #dc2626;\r\n}\r\n\r\n/* 标签样式 */\r\n:deep(.ant-tag) {\r\n  border-radius: 4px;\r\n  font-weight: 500;\r\n}\r\n\r\n/* 表单样式 */\r\n:deep(.ant-form-item-label > label) {\r\n  font-weight: 500;\r\n  color: #374151;\r\n}\r\n\r\n/* 对话框样式 */\r\n:deep(.ant-modal) {\r\n  border-radius: 8px;\r\n}\r\n\r\n:deep(.ant-modal-header) {\r\n  border-bottom: 1px solid #e5e7eb;\r\n}\r\n\r\n:deep(.ant-modal-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #1f2937;\r\n}\r\n\r\n:deep(.ant-modal-body) {\r\n  padding: 24px;\r\n}\r\n\r\n:deep(.ant-modal-footer) {\r\n  border-top: 1px solid #e5e7eb;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .software-asset-list {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .page-header {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: stretch;\r\n  }\r\n  \r\n  .header-actions {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .search-section {\r\n    padding: 16px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}