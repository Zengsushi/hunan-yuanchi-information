{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createBlock as _createBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dynamic-metrics-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"metrics-grid\",\n    style: _normalizeStyle($setup.gridStyle)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.metricsData, (metric, index) => {\n    return _openBlock(), _createBlock($setup[\"MetricCard\"], {\n      key: metric.id || index,\n      metric: metric,\n      style: _normalizeStyle($setup.getMetricAnimation(index))\n    }, null, 8 /* PROPS */, [\"metric\", \"style\"]);\n  }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","style","_normalizeStyle","$setup","gridStyle","_Fragment","_renderList","metricsData","metric","index","_createBlock","key","id","getMetricAnimation"],"sources":["E:\\A_project\\yuanchi\\AIops\\frontend\\src\\components\\business\\DynamicMetrics.vue"],"sourcesContent":["<template>\r\n  <div class=\"dynamic-metrics-container\">\r\n    <div \r\n      class=\"metrics-grid\" \r\n      :style=\"gridStyle\"\r\n    >\r\n      <MetricCard \r\n        v-for=\"(metric, index) in metricsData\" \r\n        :key=\"metric.id || index\"\r\n        :metric=\"metric\"\r\n        :style=\"getMetricAnimation(index)\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed, ref, onMounted } from 'vue';\r\nimport MetricCard from './MetricCard.vue';\r\n\r\nconst props = defineProps({\r\n  // JSON 配置数据\r\n  config: {\r\n    type: Object,\r\n    default: () => ({\r\n      grid: {\r\n        columns: 'repeat(auto-fit, minmax(280px, 1fr))',\r\n        gap: '24px',\r\n        responsive: {\r\n          mobile: 'repeat(1, 1fr)',\r\n          tablet: 'repeat(2, 1fr)'\r\n        }\r\n      },\r\n      animation: {\r\n        enabled: true,\r\n        delay: 0.1\r\n      }\r\n    })\r\n  },\r\n  \r\n  // 指标数据数组\r\n  metrics: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n\r\n  // 网格布局配置\r\n  gridColumns: {\r\n    type: String,\r\n    default: 'repeat(auto-fit, minmax(200px, 1fr))'\r\n  },\r\n\r\n  // 网格间距\r\n  gridGap: {\r\n    type: String,\r\n    default: '16px'\r\n  },\r\n\r\n  // 是否启用动画\r\n  enableAnimation: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n});\r\n\r\nconst emit = defineEmits(['metric-click', 'metrics-loaded']);\r\n\r\nconst metricsData = computed(() => {\r\n  if (props.metrics && props.metrics.length > 0) {\r\n    return props.metrics;\r\n  }\r\n  \r\n  return props.config.metrics || [];\r\n});\r\n\r\nconst gridStyle = computed(() => {\r\n  const columns = props.gridColumns || props.config.grid?.columns || 'repeat(auto-fit, minmax(200px, 1fr))';\r\n  const gap = props.gridGap || props.config.grid?.gap || '16px';\r\n  \r\n  return {\r\n    display: 'grid',\r\n    gridTemplateColumns: columns,\r\n    gap: gap\r\n  };\r\n});\r\n\r\nconst getMetricAnimation = (index) => {\r\n  const animationEnabled = props.enableAnimation && (props.config.animation?.enabled !== false);\r\n  \r\n  if (!animationEnabled) return {};\r\n  \r\n  const delay = (props.config.animation?.delay || 0.1) * index;\r\n  \r\n  return {\r\n    animation: `fadeIn 0.6s ease-out ${delay}s both`\r\n  };\r\n};\r\n\r\n// 从 API 获取数据的方法\r\nconst fetchMetrics = async (apiUrl) => {\r\n  try {\r\n    const response = await fetch(apiUrl);\r\n    const data = await response.json();\r\n    emit('metrics-loaded', data);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('获取指标数据失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 更新单个指标数据\r\nconst updateMetric = (metricId, newData) => {\r\n  const index = metricsData.value.findIndex(m => m.id === metricId);\r\n  if (index !== -1) {\r\n    Object.assign(metricsData.value[index], newData);\r\n  }\r\n};\r\n\r\n// 添加新指标\r\nconst addMetric = (metric) => {\r\n  metricsData.value.push(metric);\r\n};\r\n\r\n// 移除指标\r\nconst removeMetric = (metricId) => {\r\n  const index = metricsData.value.findIndex(m => m.id === metricId);\r\n  if (index !== -1) {\r\n    metricsData.value.splice(index, 1);\r\n  }\r\n};\r\n\r\n// 暴露方法给父组件使用\r\ndefineExpose({\r\n  fetchMetrics,\r\n  updateMetric,\r\n  addMetric,\r\n  removeMetric\r\n});\r\n\r\nonMounted(() => {\r\n  // 如果配置中有 API URL，自动获取数据\r\n  if (props.config.apiUrl) {\r\n    fetchMetrics(props.config.apiUrl);\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.dynamic-metrics-container {\r\n  width: 100%;\r\n}\r\n\r\n.metrics-grid {\r\n  animation: fadeIn 0.6s ease-out;\r\n}\r\n\r\n/* 动画效果 */\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .metrics-grid {\r\n    grid-template-columns: repeat(2, 1fr) !important;\r\n    gap: 12px !important;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .metrics-grid {\r\n    grid-template-columns: 1fr !important;\r\n    gap: 10px !important;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAA2B;;uBAAtCC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,mBAAA,CAUM;IATJH,KAAK,EAAC,cAAc;IACnBI,KAAK,EAAAC,eAAA,CAAEC,MAAA,CAAAC,SAAS;yBAEjBN,mBAAA,CAKEO,SAAA,QAAAC,WAAA,CAJ0BH,MAAA,CAAAI,WAAW,GAA7BC,MAAM,EAAEC,KAAK;yBADvBC,YAAA,CAKEP,MAAA;MAHCQ,GAAG,EAAEH,MAAM,CAACI,EAAE,IAAIH,KAAK;MACvBD,MAAM,EAAEA,MAAM;MACdP,KAAK,EAAAC,eAAA,CAAEC,MAAA,CAAAU,kBAAkB,CAACJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}