{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"hardware-asset-list-container\"\n};\nconst _hoisted_2 = {\n  class: \"device-content\"\n};\nconst _hoisted_3 = {\n  class: \"content-container\"\n};\nconst _hoisted_4 = {\n  class: \"history-section\"\n};\nconst _hoisted_5 = {\n  class: \"history-header\"\n};\nconst _hoisted_6 = {\n  class: \"history-section\"\n};\nconst _hoisted_7 = {\n  class: \"history-header\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_button = _resolveComponent(\"a-button\");\n  const _component_a_table = _resolveComponent(\"a-table\");\n  const _component_a_tab_pane = _resolveComponent(\"a-tab-pane\");\n  const _component_a_tabs = _resolveComponent(\"a-tabs\");\n  const _component_a_modal = _resolveComponent(\"a-modal\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" 设备内容区域 \"), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 在用设备表格 \"), _createElementVNode(\"div\", _hoisted_3, [_createVNode($setup[\"HardwareAssetTable\"], {\n    dataSource: $setup.currentFilter === 'scrapped' ? $setup.scrappedAssets : $setup.activeAssets,\n    loading: $setup.loading,\n    pagination: $setup.activePagination,\n    selectedRowKeys: $setup.selectedRowKeys,\n    searchKeyword: $setup.searchKeyword,\n    assetStatus: $setup.assetStatus,\n    assetType: $setup.assetType,\n    totalCount: $setup.totalCount,\n    activeCount: $setup.activeCount,\n    maintenanceCount: 0,\n    retiredCount: 0,\n    scrappedCount: $setup.scrappedCount,\n    tableMode: $setup.currentFilter,\n    currentFilter: $setup.currentFilter,\n    onSelectChange: $setup.onSelectChange,\n    onSelectAll: $setup.onSelectAll,\n    onTableChange: $setup.handleActiveTableChange,\n    onView: $setup.handleView,\n    onEdit: $setup.handleEdit,\n    onDelete: $setup.handleDelete,\n    onCheckWarranty: $setup.handleCheckWarranty,\n    onToggleMonitoring: $setup.handleToggleMonitoring,\n    onBatchDelete: $setup.handleBatchDelete,\n    onBatchToggleMonitoring: $setup.handleBatchToggleMonitoring,\n    onClearSelection: $setup.clearSelection,\n    onAdd: $setup.handleAdd,\n    onExport: $setup.handleExport,\n    onImport: $setup.handleImport,\n    onSearch: $setup.handleSearch,\n    onReset: $setup.handleReset,\n    onSearchInput: $setup.handleSearchInput,\n    onStatusChange: $setup.handleStatusChange,\n    onTypeChange: $setup.handleTypeChange,\n    onViewHistory: $setup.handleViewHistory,\n    onStatsFilter: $setup.handleStatsFilter,\n    batchDeleting: $setup.batchDeleting,\n    batchMonitoringToggling: $setup.batchMonitoringToggling\n  }, null, 8 /* PROPS */, [\"dataSource\", \"loading\", \"pagination\", \"selectedRowKeys\", \"searchKeyword\", \"assetStatus\", \"assetType\", \"totalCount\", \"activeCount\", \"scrappedCount\", \"tableMode\", \"currentFilter\", \"batchDeleting\", \"batchMonitoringToggling\"])])])]), _createCommentVNode(\" 监控操作组件 \"), _createVNode($setup[\"MonitoringActions\"], {\n    selectedAsset: $setup.selectedAsset,\n    detailModalVisible: $setup.detailModalVisible,\n    warrantyModalVisible: $setup.warrantyModalVisible,\n    batchWarrantyState: $setup.batchWarrantyState,\n    taskResultModalVisible: $setup.taskResultModalVisible,\n    warrantyFormData: $setup.warrantyFormData,\n    warrantyRules: $setup.warrantyRules,\n    selectedTask: $setup.selectedTask,\n    taskResults: $setup.taskResults,\n    resultLoading: $setup.resultLoading,\n    resultColumns: $setup.resultColumns,\n    onCloseDetailModal: _cache[0] || (_cache[0] = $event => $setup.detailModalVisible = false),\n    onCloseWarrantyModal: $setup.handleWarrantyCancel,\n    onWarrantyConfirm: $setup.handleWarrantyConfirm,\n    onCloseBatchWarranty: $setup.closeBatchWarrantyModal,\n    onStartBatchWarranty: $setup.startBatchWarrantyCheck,\n    onCloseTaskResult: _cache[1] || (_cache[1] = $event => $setup.taskResultModalVisible = false)\n  }, null, 8 /* PROPS */, [\"selectedAsset\", \"detailModalVisible\", \"warrantyModalVisible\", \"batchWarrantyState\", \"taskResultModalVisible\", \"warrantyFormData\", \"selectedTask\", \"taskResults\", \"resultLoading\"]), _createCommentVNode(\" 模板选择抽屉组件 \"), _createVNode($setup[\"TemplateDrawer\"], {\n    visible: $setup.templateDrawerVisible,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => $setup.templateDrawerVisible = $event),\n    selectedTemplateIds: $setup.selectedTemplateIds,\n    \"onUpdate:selectedTemplateIds\": _cache[3] || (_cache[3] = $event => $setup.selectedTemplateIds = $event),\n    loading: $setup.templateLoading,\n    selectedAsset: $setup.selectedAsset,\n    onConfirm: $setup.handleCreateMonitoring\n  }, null, 8 /* PROPS */, [\"visible\", \"selectedTemplateIds\", \"loading\", \"selectedAsset\"]), _createCommentVNode(\" 资产详情弹窗 \"), _createVNode($setup[\"HardwareAssetForm\"], {\n    ref: \"assetFormRef\",\n    visible: $setup.formDialogVisible,\n    \"onUpdate:visible\": _cache[4] || (_cache[4] = $event => $setup.formDialogVisible = $event),\n    selectedAsset: $setup.selectedAsset,\n    assetTypes: $setup.assetTypeOptions,\n    statusOptions: $setup.assetStatusOptions,\n    onClose: _cache[5] || (_cache[5] = $event => $setup.formDialogVisible = false),\n    onSubmit: $setup.handleSubmit\n  }, null, 8 /* PROPS */, [\"visible\", \"selectedAsset\", \"assetTypes\", \"statusOptions\"]), _createCommentVNode(\" 历史记录弹窗 \"), _createVNode(_component_a_modal, {\n    open: $setup.historyModalVisible,\n    \"onUpdate:open\": _cache[7] || (_cache[7] = $event => $setup.historyModalVisible = $event),\n    title: \"更新历史记录\",\n    width: \"1200px\",\n    footer: null,\n    onCancel: _cache[8] || (_cache[8] = $event => $setup.historyModalVisible = false)\n  }, {\n    default: _withCtx(() => [_createVNode(_component_a_tabs, {\n      activeKey: $setup.historyActiveTab,\n      \"onUpdate:activeKey\": _cache[6] || (_cache[6] = $event => $setup.historyActiveTab = $event)\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_tab_pane, {\n        tab: \"规格参数更新记录\",\n        key: \"spec\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_cache[10] || (_cache[10] = _createElementVNode(\"h4\", null, \"规格参数更新记录\", -1 /* CACHED */)), _createVNode(_component_a_button, {\n          type: \"primary\",\n          size: \"small\",\n          onClick: $setup.loadSpecHistory\n        }, {\n          default: _withCtx(() => [...(_cache[9] || (_cache[9] = [_createTextVNode(\" 刷新记录 \", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        })]), _createVNode(_component_a_table, {\n          \"data-source\": $setup.specHistory,\n          columns: $setup.specHistoryColumns,\n          bordered: \"\",\n          loading: $setup.specHistoryLoading,\n          pagination: false,\n          locale: {\n            emptyText: '暂无更新记录'\n          }\n        }, null, 8 /* PROPS */, [\"data-source\", \"loading\"])])]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_a_tab_pane, {\n        tab: \"保修更新记录\",\n        key: \"warranty\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_cache[12] || (_cache[12] = _createElementVNode(\"h4\", null, \"保修更新记录\", -1 /* CACHED */)), _createVNode(_component_a_button, {\n          type: \"primary\",\n          size: \"small\",\n          onClick: $setup.loadWarrantyHistory\n        }, {\n          default: _withCtx(() => [...(_cache[11] || (_cache[11] = [_createTextVNode(\" 刷新记录 \", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        })]), _createVNode(_component_a_table, {\n          \"data-source\": $setup.warrantyHistory,\n          columns: $setup.warrantyHistoryColumns,\n          bordered: \"\",\n          loading: $setup.warrantyHistoryLoading,\n          pagination: false,\n          locale: {\n            emptyText: '暂无更新记录'\n          }\n        }, null, 8 /* PROPS */, [\"data-source\", \"loading\"])])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"activeKey\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"open\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_createVNode","$setup","dataSource","currentFilter","scrappedAssets","activeAssets","loading","pagination","activePagination","selectedRowKeys","searchKeyword","assetStatus","assetType","totalCount","activeCount","maintenanceCount","retiredCount","scrappedCount","tableMode","onSelectChange","onSelectAll","onTableChange","handleActiveTableChange","onView","handleView","onEdit","handleEdit","onDelete","handleDelete","onCheckWarranty","handleCheckWarranty","onToggleMonitoring","handleToggleMonitoring","onBatchDelete","handleBatchDelete","onBatchToggleMonitoring","handleBatchToggleMonitoring","onClearSelection","clearSelection","onAdd","handleAdd","onExport","handleExport","onImport","handleImport","onSearch","handleSearch","onReset","handleReset","onSearchInput","handleSearchInput","onStatusChange","handleStatusChange","onTypeChange","handleTypeChange","onViewHistory","handleViewHistory","onStatsFilter","handleStatsFilter","batchDeleting","batchMonitoringToggling","selectedAsset","detailModalVisible","warrantyModalVisible","batchWarrantyState","taskResultModalVisible","warrantyFormData","warrantyRules","selectedTask","taskResults","resultLoading","resultColumns","onCloseDetailModal","_cache","$event","onCloseWarrantyModal","handleWarrantyCancel","onWarrantyConfirm","handleWarrantyConfirm","onCloseBatchWarranty","closeBatchWarrantyModal","onStartBatchWarranty","startBatchWarrantyCheck","onCloseTaskResult","visible","templateDrawerVisible","selectedTemplateIds","templateLoading","onConfirm","handleCreateMonitoring","ref","formDialogVisible","assetTypes","assetTypeOptions","statusOptions","assetStatusOptions","onClose","onSubmit","handleSubmit","_component_a_modal","open","historyModalVisible","title","width","footer","onCancel","_component_a_tabs","activeKey","historyActiveTab","_component_a_tab_pane","tab","key","_hoisted_4","_hoisted_5","_component_a_button","type","size","onClick","loadSpecHistory","_component_a_table","specHistory","columns","specHistoryColumns","bordered","specHistoryLoading","locale","emptyText","_hoisted_6","_hoisted_7","loadWarrantyHistory","warrantyHistory","warrantyHistoryColumns","warrantyHistoryLoading"],"sources":["E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\HardwareAssetList.vue"],"sourcesContent":["<template>\r\n  <div class=\"hardware-asset-list-container\">\r\n    <!-- 设备内容区域 -->\r\n    <div class=\"device-content\">\r\n        <!-- 在用设备表格 -->\r\n        <div class=\"content-container\">\r\n          <HardwareAssetTable\r\n            :dataSource=\"currentFilter === 'scrapped' ? scrappedAssets : activeAssets\"\r\n            :loading=\"loading\"\r\n            :pagination=\"activePagination\"\r\n            :selectedRowKeys=\"selectedRowKeys\"\r\n            :searchKeyword=\"searchKeyword\"\r\n            :assetStatus=\"assetStatus\"\r\n            :assetType=\"assetType\"\r\n            :totalCount=\"totalCount\"\r\n            :activeCount=\"activeCount\"\r\n            :maintenanceCount=\"0\"\r\n            :retiredCount=\"0\"\r\n            :scrappedCount=\"scrappedCount\"\r\n            :tableMode=\"currentFilter\"\r\n            :currentFilter=\"currentFilter\"\r\n            @select-change=\"onSelectChange\"\r\n            @select-all=\"onSelectAll\"\r\n            @table-change=\"handleActiveTableChange\"\r\n            @view=\"handleView\"\r\n            @edit=\"handleEdit\"\r\n            @delete=\"handleDelete\"\r\n            @check-warranty=\"handleCheckWarranty\"\r\n            @toggle-monitoring=\"handleToggleMonitoring\"\r\n            @batch-delete=\"handleBatchDelete\"\r\n            @batch-toggle-monitoring=\"handleBatchToggleMonitoring\"\r\n            @clear-selection=\"clearSelection\"\r\n            @add=\"handleAdd\"\r\n            @export=\"handleExport\"\r\n            @import=\"handleImport\"\r\n            @search=\"handleSearch\"\r\n            @reset=\"handleReset\"\r\n            @search-input=\"handleSearchInput\"\r\n            @status-change=\"handleStatusChange\"\r\n            @type-change=\"handleTypeChange\"\r\n            @view-history=\"handleViewHistory\"\r\n            @stats-filter=\"handleStatsFilter\"\r\n            :batchDeleting=\"batchDeleting\"\r\n            :batchMonitoringToggling=\"batchMonitoringToggling\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 监控操作组件 -->\r\n    <MonitoringActions\r\n      :selectedAsset=\"selectedAsset\"\r\n      :detailModalVisible=\"detailModalVisible\"\r\n      :warrantyModalVisible=\"warrantyModalVisible\"\r\n      :batchWarrantyState=\"batchWarrantyState\"\r\n      :taskResultModalVisible=\"taskResultModalVisible\"\r\n      :warrantyFormData=\"warrantyFormData\"\r\n      :warrantyRules=\"warrantyRules\"\r\n      :selectedTask=\"selectedTask\"\r\n      :taskResults=\"taskResults\"\r\n      :resultLoading=\"resultLoading\"\r\n      :resultColumns=\"resultColumns\"\r\n      @close-detail-modal=\"detailModalVisible = false\"\r\n      @close-warranty-modal=\"handleWarrantyCancel\"\r\n      @warranty-confirm=\"handleWarrantyConfirm\"\r\n      @close-batch-warranty=\"closeBatchWarrantyModal\"\r\n      @start-batch-warranty=\"startBatchWarrantyCheck\"\r\n      @close-task-result=\"taskResultModalVisible = false\"\r\n    />\r\n\r\n    <!-- 模板选择抽屉组件 -->\r\n    <TemplateDrawer \r\n      v-model:visible=\"templateDrawerVisible\"\r\n      v-model:selectedTemplateIds=\"selectedTemplateIds\"\r\n      :loading=\"templateLoading\"\r\n      :selectedAsset=\"selectedAsset\"\r\n      @confirm=\"handleCreateMonitoring\"\r\n    />\r\n    <!-- 资产详情弹窗 -->\r\n    <HardwareAssetForm\r\n      ref=\"assetFormRef\"\r\n      v-model:visible=\"formDialogVisible\"\r\n      :selectedAsset=\"selectedAsset\"\r\n      :assetTypes=\"assetTypeOptions\"\r\n      :statusOptions=\"assetStatusOptions\"\r\n      @close=\"formDialogVisible = false\"\r\n      @submit=\"handleSubmit\"\r\n    />\r\n\r\n    <!-- 历史记录弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"historyModalVisible\"\r\n      title=\"更新历史记录\"\r\n      width=\"1200px\"\r\n      :footer=\"null\"\r\n      @cancel=\"historyModalVisible = false\"\r\n    >\r\n      <a-tabs v-model:activeKey=\"historyActiveTab\">\r\n        <a-tab-pane tab=\"规格参数更新记录\" key=\"spec\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>规格参数更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadSpecHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"specHistory\"\r\n              :columns=\"specHistoryColumns\"\r\n              bordered\r\n              :loading=\"specHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n        \r\n        <a-tab-pane tab=\"保修更新记录\" key=\"warranty\">\r\n          <div class=\"history-section\">\r\n            <div class=\"history-header\">\r\n              <h4>保修更新记录</h4>\r\n              <a-button type=\"primary\" size=\"small\" @click=\"loadWarrantyHistory\">\r\n                刷新记录\r\n              </a-button>\r\n            </div>\r\n            \r\n            <a-table\r\n              :data-source=\"warrantyHistory\"\r\n              :columns=\"warrantyHistoryColumns\"\r\n              bordered\r\n              :loading=\"warrantyHistoryLoading\"\r\n              :pagination=\"false\"\r\n              :locale=\"{ emptyText: '暂无更新记录' }\"\r\n            />\r\n          </div>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n    </a-modal>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted, onUnmounted, watch, onBeforeUnmount, nextTick, h, createVNode } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { message, Modal } from 'ant-design-vue';\r\nimport hardwareAssetApi from '@/api/hardwareAsset';\r\nimport { suppressResizeObserverError } from '@/utils/errorHandler';\r\nimport * as Vue from 'vue';\r\nimport * as antdvIcons from '@ant-design/icons-vue';\r\nimport HardwareAssetForm from '@/components/business/HardwareAssetForm.vue';\r\n\r\n// 导入拆分的组件\r\nimport HardwareAssetTable from '@/components/business/HardwareAssetTable.vue';\r\nimport MonitoringActions from '@/components/business/MonitoringActions.vue';\r\nimport TemplateDrawer from '@/components/business/TemplateDrawer.vue';\r\nimport { \r\n  ExclamationCircleOutlined,\r\n} from '@ant-design/icons-vue';\r\n\r\n// 路由实例\r\nconst router = useRouter();\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst assetStatus = ref([]);\r\nconst assetType = ref('');\r\nconst formDialogVisible = ref(false);\r\n\r\n// 资产类型选项\r\nconst assetTypeOptions = ref([\r\n  { label: '服务器', value: 'server' },\r\n  { label: '网络设备', value: 'network' },\r\n  { label: '存储设备', value: 'storage' },\r\n  { label: '安全设备', value: 'security' }\r\n]);\r\n\r\n// 资产状态选项\r\nconst assetStatusOptions = ref([\r\n  { label: '在用', value: 'active' },\r\n  { label: '维护中', value: 'maintenance' },\r\n  { label: '已退役', value: 'retired' },\r\n  { label: '预留', value: 'reserved' }\r\n]);\r\n\r\n// 硬件资产数据状态 - 确保始终是数组\r\nconst assetData = ref([]);\r\nconst loading = ref(false);\r\n\r\n// 批量操作相关状态\r\nconst selectedRowKeys = ref([]);\r\nconst batchDeleting = ref(false);\r\nconst batchMonitoringToggling = ref(false);\r\n\r\n// 模板选择抽屉相关状态\r\nconst templateDrawerVisible = ref(false);\r\nconst zabbixTemplates = ref([]);\r\nconst selectedTemplateIds = ref([]);\r\nconst templateLoading = ref(false);\r\nconst templateSearchKeyword = ref('');\r\nconst monitoringCreating = ref(false);\r\nconst selectedCategory = ref(''); // 当前选中的分类\r\nconst expandedCategories = ref({}); // 展开的分类\r\n\r\n// 历史记录相关状态\r\nconst historyModalVisible = ref(false);\r\nconst historyActiveTab = ref('spec');\r\nconst currentHistoryAsset = ref(null);\r\nconst specHistory = ref([]);\r\nconst warrantyHistory = ref([]);\r\nconst specHistoryLoading = ref(false);\r\nconst warrantyHistoryLoading = ref(false);\r\n\r\n// 历史记录表格列配置\r\nconst specHistoryColumns = [\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'update_time',\r\n    key: 'update_time',\r\n    width: 180,\r\n    customRender: ({ text }) => {\r\n      return text ? new Date(text).toLocaleString() : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新方式',\r\n    dataIndex: 'update_method',\r\n    key: 'update_method',\r\n    width: 100,\r\n    customRender: ({ text }) => {\r\n      return text === 'manual' ? '手动' : '自动';\r\n    }\r\n  },\r\n  {\r\n    title: '更新前规格参数',\r\n    dataIndex: 'old_specifications',\r\n    key: 'old_specifications',\r\n    minWidth: 200,\r\n    customRender: ({ text }) => {\r\n      return text ? JSON.stringify(text, null, 2) : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新后规格参数',\r\n    dataIndex: 'new_specifications',\r\n    key: 'new_specifications',\r\n    minWidth: 200,\r\n    customRender: ({ text }) => {\r\n      return text ? JSON.stringify(text, null, 2) : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新人',\r\n    dataIndex: 'updated_by',\r\n    key: 'updated_by',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '备注',\r\n    dataIndex: 'remarks',\r\n    key: 'remarks',\r\n    width: 150\r\n  }\r\n];\r\n\r\nconst warrantyHistoryColumns = [\r\n  {\r\n    title: '更新时间',\r\n    dataIndex: 'update_time',\r\n    key: 'update_time',\r\n    width: 180,\r\n    customRender: ({ text }) => {\r\n      return text ? new Date(text).toLocaleString() : '-';\r\n    }\r\n  },\r\n  {\r\n    title: '更新前保修类型',\r\n    dataIndex: 'old_warranty_type',\r\n    key: 'old_warranty_type',\r\n    width: 120,\r\n    customRender: ({ text }) => {\r\n      return text === 'original' ? '原厂保修' : '第三方保修';\r\n    }\r\n  },\r\n  {\r\n    title: '更新后保修类型',\r\n    dataIndex: 'new_warranty_type',\r\n    key: 'new_warranty_type',\r\n    width: 120,\r\n    customRender: ({ text }) => {\r\n      return text === 'original' ? '原厂保修' : '第三方保修';\r\n    }\r\n  },\r\n  {\r\n    title: '更新前保修期',\r\n    key: 'old_warranty_period',\r\n    width: 200,\r\n    customRender: ({ record }) => {\r\n      return `${record.old_warranty_start_date} ~ ${record.old_warranty_end_date}`;\r\n    }\r\n  },\r\n  {\r\n    title: '更新后保修期',\r\n    key: 'new_warranty_period',\r\n    width: 200,\r\n    customRender: ({ record }) => {\r\n      return `${record.new_warranty_start_date} ~ ${record.new_warranty_end_date}`;\r\n    }\r\n  },\r\n  {\r\n    title: '更新人',\r\n    dataIndex: 'updated_by',\r\n    key: 'updated_by',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '备注',\r\n    dataIndex: 'remarks',\r\n    key: 'remarks',\r\n    width: 150\r\n  }\r\n];\r\n\r\n// 防御性检查，确保assetData始终是数组\r\nconst setAssetData = (data) => {\r\n  if (Array.isArray(data)) {\r\n    // 为每个硬件资产记录设置保护状态信息\r\n    const processedData = data.map(asset => {\r\n      // 确保保护状态字段存在\r\n      if (asset.is_protected === undefined) {\r\n        asset.is_protected = asset.is_auto_discovered || false;\r\n      }\r\n      \r\n      // 设置保护原因\r\n      if (!asset.protection_reason && asset.is_auto_discovered) {\r\n        asset.protection_reason = '自动发现的硬件资产';\r\n      }\r\n      \r\n      // 设置可编辑字段列表\r\n      if (asset.is_auto_discovered) {\r\n        asset.editable_fields = ['description', 'status'];\r\n      } else {\r\n        asset.editable_fields = 'all';\r\n      }\r\n      \r\n      return asset;\r\n    });\r\n    \r\n    assetData.value = processedData;\r\n  } else {\r\n    console.warn('尝试设置非数组数据到assetData:', data);\r\n    assetData.value = [];\r\n  }\r\n};\r\n\r\n// 统计计算属性 - 添加防御性检查\r\nconst activeCount = computed(() => {\r\n  if (!Array.isArray(assetData.value)) {\r\n    console.warn('assetData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return assetData.value.filter(asset => asset.asset_status === 'active').length;\r\n});\r\n\r\nconst maintenanceCount = computed(() => {\r\n  if (!Array.isArray(assetData.value)) {\r\n    console.warn('assetData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return assetData.value.filter(asset => asset.asset_status === 'maintenance').length;\r\n});\r\n\r\nconst retiredCount = computed(() => {\r\n  if (!Array.isArray(assetData.value)) {\r\n    console.warn('assetData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return assetData.value.filter(asset => asset.asset_status === 'retired').length;\r\n});\r\n\r\n// 统计对象\r\nconst statistics = computed(() => ({\r\n  total: assetData.value.length || 0,\r\n  active: activeCount.value,\r\n  maintenance: maintenanceCount.value,\r\n  retired: retiredCount.value\r\n}));\r\n\r\n// 计算属性：分离在用和报废设备\r\nconst inUseAssets = computed(() => {\r\n  return assetData.value.filter(asset => asset.asset_status === 'in_use');\r\n});\r\n\r\nconst scrappedAssets = computed(() => {\r\n  return assetData.value.filter(asset => asset.asset_status === 'scrapped');\r\n});\r\n\r\n// 计算属性：统计数据\r\nconst totalCount = computed(() => assetData.value.length);\r\nconst inUseCount = computed(() => inUseAssets.value.length);\r\nconst scrappedCount = computed(() => scrappedAssets.value.length);\r\n\r\n// 计算属性：按状态分离设备\r\nconst activeAssets = computed(() => {\r\n  return assetData.value.filter(asset => asset.asset_status === 'active' || asset.asset_status === 'in_use');\r\n});\r\n\r\n// 统计按钮过滤状态\r\nconst currentFilter = ref('active');\r\n\r\n// 计算属性 - 保修相关\r\nconst needsWarrantyCheck = computed(() => {\r\n  const type = warrantyFormData.checkType;\r\n  return type === 'auto' || type === 'manual';\r\n});\r\n\r\n// 工具函数\r\nconst getStatusText = (status) => {\r\n  const textMap = {\r\n    'active': '在用',\r\n    'maintenance': '维护中',\r\n    'retired': '已退役',\r\n    'reserved': '预留'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const typeMap = {\r\n    'server': '服务器',\r\n    'network': '网络设备',\r\n    'storage': '存储设备',\r\n    'security': '安全设备'\r\n  };\r\n  return typeMap[type] || type;\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  if (!date) return null;\r\n  return new Date(date).toLocaleString('zh-CN');\r\n};\r\n\r\n// 弹窗状态\r\nconst detailModalVisible = ref(false);\r\nconst editModalVisible = ref(false);\r\nconst warrantyModalVisible = ref(false);\r\nconst taskDetailModalVisible = ref(false);\r\nconst taskResultModalVisible = ref(false);\r\nconst selectedAsset = ref(null);\r\nconst editingAsset = ref(null);\r\nconst selectedTask = ref(null);\r\n\r\n// 保修查询相关\r\nconst warrantyTasks = ref([]);\r\nconst taskResults = ref([]);\r\nconst taskLoading = ref(false);\r\nconst resultLoading = ref(false);\r\nconst taskStatusFilter = ref('');\r\nconst taskDateRange = ref([]);\r\nconst taskNameFilter = ref('');\r\nconst taskPagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 表单相关\r\nconst formRef = ref();\r\nconst warrantyFormRef = ref();\r\nconst formData = reactive({\r\n  assetTag: '',\r\n  assetName: '',\r\n  status: 'active',\r\n  type: 'server',\r\n  brand: '',\r\n  model: '',\r\n  serialNumber: '',\r\n  location: '',\r\n  description: ''\r\n});\r\n\r\n// 保修配置数据\r\nconst warrantyFormData = reactive({\r\n  checkType: 'auto', // 默认自动检查\r\n  warrantyPeriod: 36, // 保修期（月）\r\n  purchaseDate: null,\r\n  warrantyStartDate: null,\r\n  warrantyEndDate: null,\r\n  supplierInfo: {\r\n    name: '',\r\n    contact: '',\r\n    phone: '',\r\n    email: ''\r\n  }\r\n});\r\n\r\n// 表单验证规则\r\nconst rules = {\r\n  assetTag: [\r\n    { required: true, message: '请输入资产标签' },\r\n    { pattern: /^[A-Za-z0-9-_]+$/, message: '资产标签只能包含字母、数字、横线和下划线' }\r\n  ],\r\n  assetName: [{ required: true, message: '请输入资产名称' }],\r\n  status: [{ required: true, message: '请选择资产状态' }],\r\n  type: [{ required: true, message: '请选择资产类型' }]\r\n};\r\n\r\n// 保修配置验证规则\r\nconst warrantyRules = {\r\n  checkType: [{ required: true, message: '请选择检查类型' }],\r\n  warrantyPeriod: [\r\n    { type: 'number', min: 1, max: 120, message: '保修期必须在1-120个月之间' }\r\n  ],\r\n  purchaseDate: [{ required: true, message: '请选择采购日期' }]\r\n};\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n});\r\n\r\n// 在用设备分页配置\r\nconst inUsePagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n// 报废设备分页配置\r\nconst scrappedPagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n// 正常设备分页配置\r\nconst activePagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`\r\n});\r\n\r\n\r\n\r\n// 加载硬件资产列表数据\r\nconst loadAssetList = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const params = {\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize\r\n    };\r\n    \r\n    // 添加搜索条件\r\n    if (searchKeyword.value && searchKeyword.value.trim()) {\r\n      params.search = searchKeyword.value.trim();\r\n    }\r\n    if (assetStatus.value) {\r\n      params.status = assetStatus.value;\r\n    }\r\n    if (assetType.value) {\r\n      params.type = assetType.value;\r\n    }\r\n    \r\n    console.log('正在获取硬件资产列表，参数:', params);\r\n    console.log('当前分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      total: pagination.total\r\n    });\r\n    \r\n    const response = await hardwareAssetApi.getList(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 确保获取的数据是数组\r\n          let resultData = [];\r\n          if (data && data.results && Array.isArray(data.results)) {\r\n            resultData = data.results;\r\n          } else if (Array.isArray(data)) {\r\n            resultData = data;\r\n          } else {\r\n            console.warn('API返回的数据不是数组格式:', data);\r\n            resultData = [];\r\n          }\r\n          \r\n          setAssetData(resultData);\r\n          pagination.total = data.count || data.total || resultData.length;\r\n          // 更新各表格的分页总数\r\n          inUsePagination.total = inUseCount.value;\r\n          scrappedPagination.total = scrappedCount.value;\r\n          console.log('成功获取硬件资产列表（统一格式）:', assetData.value);\r\n          message.success('硬件资产列表数据已更新', 1);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取硬件资产列表失败: ${response.data.message}`);\r\n          setAssetData([]);\r\n          pagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 确保获取的数据是数组\r\n        let resultData = [];\r\n        if (response.data.results && Array.isArray(response.data.results)) {\r\n          resultData = response.data.results;\r\n        } else if (Array.isArray(response.data)) {\r\n          resultData = response.data;\r\n        } else {\r\n          console.warn('API返回的数据不是数组格式:', response.data);\r\n          resultData = [];\r\n        }\r\n        \r\n        setAssetData(resultData);\r\n        pagination.total = response.data.count || response.data.total || resultData.length;\r\n        // 更新各表格的分页总数\r\n        inUsePagination.total = inUseCount.value;\r\n        scrappedPagination.total = scrappedCount.value;\r\n        console.log('成功获取硬件资产列表（DRF格式）:', assetData.value);\r\n        message.success('硬件资产列表数据已更新', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取硬件资产列表失败: 无效的响应数据');\r\n      setAssetData([]);\r\n      pagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载硬件资产列表失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '获取硬件资产列表失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    \r\n    // 如果API调用失败，显示空数据\r\n    setAssetData([]);\r\n    pagination.total = 0;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst columns = [\r\n  {\r\n    title: '资产标签',\r\n    dataIndex: 'asset_tag',\r\n    key: 'assetTag',\r\n    width: 120,\r\n    fixed: 'left'\r\n  },\r\n  {\r\n    title: '资产名称',\r\n    dataIndex: 'asset_name',\r\n    key: 'assetName',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '类型',\r\n    dataIndex: 'type',\r\n    key: 'type',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '品牌',\r\n    dataIndex: 'brand',\r\n    key: 'brand',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '型号',\r\n    dataIndex: 'model',\r\n    key: 'model',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '序列号',\r\n    dataIndex: 'serial_number',\r\n    key: 'serialNumber',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '位置',\r\n    dataIndex: 'location',\r\n    key: 'location',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '保修状态',\r\n    dataIndex: 'warranty_status',\r\n    key: 'warrantyStatus',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '最后更新',\r\n    dataIndex: 'updated_at',\r\n    key: 'updatedAt',\r\n    width: 160\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 280\r\n  }\r\n];\r\n\r\n// 保修结果表格列定义\r\nconst resultColumns = [\r\n  {\r\n    title: '资产标签',\r\n    dataIndex: 'asset_tag',\r\n    key: 'asset_tag',\r\n    width: 120,\r\n  },\r\n  {\r\n    title: '资产名称',\r\n    dataIndex: 'asset_name',\r\n    key: 'asset_name',\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: '保修状态',\r\n    dataIndex: 'warranty_status',\r\n    key: 'warranty_status'\r\n  },\r\n  {\r\n    title: '保修到期日',\r\n    dataIndex: 'warranty_end_date',\r\n    key: 'warranty_end_date'\r\n  },\r\n  {\r\n    title: '检查时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at'\r\n  }\r\n];\r\n\r\n// 事件处理函数\r\n// 批量保修检查状态管理\r\nconst batchWarrantyState = reactive({\r\n  isVisible: false,\r\n  phase: 'confirm', // confirm, checking, result\r\n  stats: {\r\n    total: 0,\r\n    currentValid: 0,\r\n    currentExpired: 0,\r\n    testResult: null\r\n  },\r\n  checking: {\r\n    progress: 0,\r\n    currentAsset: '',\r\n    startTime: null\r\n  }\r\n});\r\n\r\nconst handleBatchWarrantyCheck = async () => {\r\n  try {\r\n    // 获取当前页面的所有资产ID\r\n    const allAssetIds = assetData.value.map(asset => asset.id).filter(id => id);\r\n    \r\n    if (allAssetIds.length === 0) {\r\n      message.warning('没有可以检查保修的资产记录');\r\n      return;\r\n    }\r\n    \r\n    // 初始化状态\r\n    batchWarrantyState.stats.total = allAssetIds.length;\r\n    batchWarrantyState.stats.currentValid = assetData.value.filter(asset => asset.warranty_status === 'valid').length;\r\n    batchWarrantyState.stats.currentExpired = allAssetIds.length - batchWarrantyState.stats.currentValid;\r\n    batchWarrantyState.phase = 'confirm';\r\n    batchWarrantyState.isVisible = true;\r\n    \r\n  } catch (error) {\r\n    console.error('初始化批量保修检查失败:', error);\r\n    message.error('初始化批量保修检查失败');\r\n  }\r\n};\r\n\r\n// 开始保修检查\r\nconst startBatchWarrantyCheck = async () => {\r\n  try {\r\n    const allAssetIds = assetData.value.map(asset => asset.id).filter(id => id);\r\n    \r\n    // 切换到检查阶段\r\n    batchWarrantyState.phase = 'checking';\r\n    batchWarrantyState.checking.startTime = new Date();\r\n    batchWarrantyState.checking.progress = 0;\r\n    \r\n    loading.value = true;\r\n    \r\n    // 调用批量保修检查API\r\n    const response = await hardwareAssetApi.batchCheckWarranty(allAssetIds);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const batchData = response.data.data;\r\n      const summary = batchData.summary;\r\n      \r\n      // 更新本地数据\r\n      const resultsMap = new Map();\r\n      batchData.results.forEach(result => {\r\n        resultsMap.set(result.asset_id, result);\r\n      });\r\n      \r\n      // 更新assetData中的记录\r\n      assetData.value.forEach(asset => {\r\n        const result = resultsMap.get(asset.id);\r\n        if (result) {\r\n          asset.warranty_status = result.status;\r\n          asset.warranty_end_date = result.warranty_end_date;\r\n          asset.updated_at = new Date().toISOString();\r\n        }\r\n      });\r\n      \r\n      // 设置检查结果并切换到结果阶段\r\n      batchWarrantyState.stats.testResult = summary;\r\n      batchWarrantyState.phase = 'result';\r\n      \r\n    } else {\r\n      message.error(`批量保修检查失败: ${response.data?.message || '未知错误'}`);\r\n      batchWarrantyState.isVisible = false;\r\n    }\r\n  } catch (error) {\r\n    console.error('批量保修检查失败:', error);\r\n    let errorMessage = '批量保修检查失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n    batchWarrantyState.isVisible = false;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 关闭批量保修检查弹窗\r\nconst closeBatchWarrantyModal = () => {\r\n  batchWarrantyState.isVisible = false;\r\n  batchWarrantyState.phase = 'confirm';\r\n  batchWarrantyState.stats.testResult = null;\r\n  batchWarrantyState.checking.progress = 0;\r\n};\r\n\r\n// 行选择管理\r\nconst onSelectChange = (newSelectedRowKeys) => {\r\n  console.log('选中的行 keys:', newSelectedRowKeys);\r\n  selectedRowKeys.value = newSelectedRowKeys;\r\n};\r\n\r\nconst onSelectAll = (selected, selectedRows, changeRows) => {\r\n  console.log('全选/反选:', { selected, selectedRows: selectedRows.length, changeRows: changeRows.length });\r\n};\r\n\r\nconst clearSelection = () => {\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 批量删除\r\nconst handleBatchDelete = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要删除的硬件资产');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    Modal.confirm({\r\n      title: '批量删除确认',\r\n      content: `您将删除 ${selectedRowKeys.value.length} 个硬件资产，此操作不可恢复！`,\r\n      okText: '确认删除',\r\n      okType: 'danger',\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchDeleting.value = true;\r\n        try {\r\n          const response = await hardwareAssetApi.batchDeleteAssets(selectedRowKeys.value);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量删除成功！删除: ${result.deleted_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n            \r\n            // 刷新列表\r\n            await loadAssetList();\r\n          } else {\r\n            message.error(`批量删除失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('批量删除失败:', error);\r\n          message.error(`批量删除失败: ${error.message}`);\r\n        } finally {\r\n          batchDeleting.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('批量删除操作失败:', error);\r\n    message.error('批量删除操作失败');\r\n  }\r\n};\r\n\r\n// 批量切换监控状态\r\nconst handleBatchToggleMonitoring = async (enableMonitoring) => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要操作的硬件资产');\r\n    return;\r\n  }\r\n\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  try {\r\n    Modal.confirm({\r\n      title: `批量${actionText}`,\r\n      content: `您将对 ${selectedRowKeys.value.length} 个硬件资产${actionText}，是否继续？`,\r\n      okText: `确认${actionText}`,\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchMonitoringToggling.value = true;\r\n        try {\r\n          const response = await hardwareAssetApi.batchToggleMonitoring(selectedRowKeys.value, enableMonitoring);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量${actionText}成功！成功: ${result.success_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 更新本地数据\r\n            assetData.value.forEach(asset => {\r\n              if (selectedRowKeys.value.includes(asset.id)) {\r\n                asset.monitoring_enabled = enableMonitoring;\r\n              }\r\n            });\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n          } else {\r\n            message.error(`批量${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(`批量${actionText}失败:`, error);\r\n          message.error(`批量${actionText}失败: ${error.message}`);\r\n        } finally {\r\n          batchMonitoringToggling.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(`批量${actionText}操作失败:`, error);\r\n    message.error(`批量${actionText}操作失败`);\r\n  }\r\n};\r\n\r\n// 单个监控状态切换\r\nconst handleToggleMonitoring = async (record, enableMonitoring) => {\r\n  if (enableMonitoring) {\r\n    // 启用监控时显示模板选择抽屉\r\n    selectedAsset.value = record;\r\n    await loadZabbixTemplates(record.id);\r\n    templateDrawerVisible.value = true;\r\n  } else {\r\n    // 直接禁用监控\r\n    await toggleMonitoringStatus(record, false);\r\n  }\r\n};\r\n\r\n// 切换监控状态的实际方法\r\nconst toggleMonitoringStatus = async (record, enableMonitoring) => {\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  // 设置单个记录的加载状态\r\n  record.monitoringToggling = true;\r\n  \r\n  try {\r\n    const response = await hardwareAssetApi.toggleMonitoring(record.id, enableMonitoring);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 更新本地数据\r\n      record.monitoring_enabled = enableMonitoring;\r\n      message.success(`${record.asset_name || record.asset_tag} ${actionText}成功`, 1);\r\n    } else {\r\n      message.error(`${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`${actionText}失败:`, error);\r\n    message.error(`${actionText}失败: ${error.message}`);\r\n  } finally {\r\n    record.monitoringToggling = false;\r\n  }\r\n};\r\n\r\n// 加载Zabbix模板列表\r\nconst loadZabbixTemplates = async (assetId) => {\r\n  templateLoading.value = true;\r\n  try {\r\n    const response = await hardwareAssetApi.getZabbixTemplates(assetId, templateSearchKeyword.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      zabbixTemplates.value = response.data.data.templates || [];\r\n      \r\n      // 初始化展开状态，默认展开所有分类\r\n      nextTick(() => {\r\n        try {\r\n          const categories = Object.keys(groupedTemplates.value || {});\r\n          categories.forEach(category => {\r\n            const categoryStr = String(category);\r\n            expandedCategories.value[categoryStr] = true;\r\n          });\r\n        } catch (error) {\r\n          console.warn('初始化展开状态错误:', error);\r\n        }\r\n      });\r\n      \r\n      console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\r\n    } else {\r\n      message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\r\n      zabbixTemplates.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载模板列表失败:', error);\r\n    message.error(`加载模板列表失败: ${error.message}`);\r\n    zabbixTemplates.value = [];\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\n\r\n// 创建监控主机\r\nconst handleCreateMonitoring = async () => {\r\n  if (!selectedAsset.value) {\r\n    message.error('请先选择硬件资产');\r\n    return;\r\n  }\r\n  \r\n  if (selectedTemplateIds.value.length === 0) {\r\n    message.error('请选择至少一个监控模板');\r\n    return;\r\n  }\r\n  \r\n  monitoringCreating.value = true;\r\n  \r\n  try {\r\n    const monitoringData = {\r\n      template_ids: selectedTemplateIds.value,\r\n      host_name: selectedAsset.value.asset_name || selectedAsset.value.asset_tag,\r\n      group_ids: []\r\n    };\r\n    \r\n    const response = await hardwareAssetApi.createMonitoring(selectedAsset.value.id, monitoringData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const result = response.data.data;\r\n      \r\n      message.success({\r\n        content: `监控主机创建成功！\\n主机名: ${result.host_name}\\n资产: ${result.asset_tag}\\n模板数量: ${result.template_count}`,\r\n        duration: 5\r\n      });\r\n      \r\n      // 更新本地资产记录的监控状态\r\n      selectedAsset.value.monitoring_enabled = true;\r\n      \r\n      // 关闭抽屉\r\n      templateDrawerVisible.value = false;\r\n      \r\n      // 清空选中的模板\r\n      selectedTemplateIds.value = [];\r\n      \r\n    } else {\r\n      message.error(`创建监控主机失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建监控主机失败:', error);\r\n    message.error(`创建监控主机失败: ${error.message}`);\r\n  } finally {\r\n    monitoringCreating.value = false;\r\n  }\r\n};\r\n\r\n// 关闭模板抽屉\r\nconst handleCloseTemplateDrawer = () => {\r\n  templateDrawerVisible.value = false;\r\n  selectedTemplateIds.value = [];\r\n  templateSearchKeyword.value = '';\r\n  selectedCategory.value = '';\r\n  expandedCategories.value = {};\r\n  selectedAsset.value = null;\r\n};\r\n\r\n// 按分类组织模板\r\nconst groupedTemplates = computed(() => {\r\n  const groups = {};\r\n  \r\n  try {\r\n    if (!Array.isArray(zabbixTemplates.value)) {\r\n      console.warn('zabbixTemplates不是数组:', zabbixTemplates.value);\r\n      return groups;\r\n    }\r\n    \r\n    zabbixTemplates.value.forEach((template) => {\r\n      if (!template || typeof template !== 'object') {\r\n        return;\r\n      }\r\n      \r\n      const category = template.category || '📝 其他';\r\n      if (!groups[category]) {\r\n        groups[category] = [];\r\n      }\r\n      \r\n      groups[category].push(template);\r\n    });\r\n    \r\n    // 对每个分类的模板按名称排序\r\n    Object.keys(groups).forEach(category => {\r\n      try {\r\n        groups[category].sort((a, b) => {\r\n          const nameA = a.name || '';\r\n          const nameB = b.name || '';\r\n          return nameA.localeCompare(nameB);\r\n        });\r\n      } catch (sortError) {\r\n        console.warn(`排序分类${category}时出错:`, sortError);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('groupedTemplates计算出错:', error);\r\n  }\r\n  \r\n  return groups;\r\n});\r\n\r\nconst handleSearch = async () => {\r\n  pagination.current = 1;\r\n  await loadAssetList();\r\n};\r\n\r\nconst handleReset = async () => {\r\n  searchKeyword.value = '';\r\n  assetStatus.value = [];\r\n  assetType.value = '';\r\n  pagination.current = 1;\r\n  await loadAssetList();\r\n};\r\n\r\nconst handleSearchInput = (value) => {\r\n  searchKeyword.value = value;\r\n};\r\n\r\nconst handleStatusChange = (value) => {\r\n  assetStatus.value = value;\r\n};\r\n\r\nconst handleTypeChange = (value) => {\r\n  assetType.value = value;\r\n};\r\n\r\n// 处理统计按钮点击事件\r\nconst handleStatsFilter = (filterType) => {\r\n  currentFilter.value = filterType;\r\n  console.log('统计按钮点击:', filterType);\r\n  \r\n  // 根据点击的统计按钮类型进行相应的过滤或操作\r\n  switch (filterType) {\r\n    case 'total':\r\n      // 显示所有设备\r\n      assetStatus.value = [];\r\n      break;\r\n    case 'active':\r\n      // 显示在用设备\r\n      assetStatus.value = ['active'];\r\n      break;\r\n    case 'available':\r\n      // 显示可用设备（这里可以根据实际业务逻辑调整）\r\n      assetStatus.value = ['reserved'];\r\n      break;\r\n    case 'scrapped':\r\n      // 显示报废设备\r\n      assetStatus.value = ['scrapped'];\r\n      break;\r\n    case 'warranty':\r\n      // 显示保修中的设备（这里可以根据实际业务逻辑调整）\r\n      // 可以添加特定的过滤逻辑\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  \r\n  // 更新当前过滤器状态\r\n  currentFilter.value = filterType;\r\n  \r\n  // 重新加载数据\r\n  pagination.current = 1;\r\n  loadAssetList();\r\n};\r\n\r\n// 查看历史记录\r\nconst handleViewHistory = (record) => {\r\n  currentHistoryAsset.value = record;\r\n  historyModalVisible.value = true;\r\n  historyActiveTab.value = 'spec';\r\n  // 自动加载规格参数历史\r\n  loadSpecHistory();\r\n};\r\n\r\n// 加载规格参数更新历史\r\nconst loadSpecHistory = async () => {\r\n  if (!currentHistoryAsset.value) return;\r\n  \r\n  specHistoryLoading.value = true;\r\n  try {\r\n    const response = await hardwareAssetApi.getSpecHistory(currentHistoryAsset.value.id);\r\n    if (response.data && response.data.code === 200) {\r\n      specHistory.value = response.data.data || [];\r\n    } else {\r\n      message.error('加载规格参数历史失败');\r\n      specHistory.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载规格参数历史失败:', error);\r\n    message.error('加载规格参数历史失败');\r\n    specHistory.value = [];\r\n  } finally {\r\n    specHistoryLoading.value = false;\r\n  }\r\n};\r\n\r\n// 加载保修更新历史\r\nconst loadWarrantyHistory = async () => {\r\n  if (!currentHistoryAsset.value) return;\r\n  \r\n  warrantyHistoryLoading.value = true;\r\n  try {\r\n    const response = await hardwareAssetApi.getWarrantyHistory(currentHistoryAsset.value.id);\r\n    if (response.data && response.data.code === 200) {\r\n      warrantyHistory.value = response.data.data || [];\r\n    } else {\r\n      message.error('加载保修历史失败');\r\n      warrantyHistory.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载保修历史失败:', error);\r\n    message.error('加载保修历史失败');\r\n    warrantyHistory.value = [];\r\n  } finally {\r\n    warrantyHistoryLoading.value = false;\r\n  }\r\n};\r\n\r\n// 历史记录标签页切换\r\nconst handleHistoryTabChange = (activeKey) => {\r\n  historyActiveTab.value = activeKey;\r\n  if (activeKey === 'warranty' && warrantyHistory.value.length === 0) {\r\n    loadWarrantyHistory();\r\n  }\r\n};\r\n\r\n// 关闭历史记录弹窗\r\nconst handleHistoryModalClose = () => {\r\n  historyModalVisible.value = false;\r\n  currentHistoryAsset.value = null;\r\n  specHistory.value = [];\r\n  warrantyHistory.value = [];\r\n  historyActiveTab.value = 'spec';\r\n};\r\n\r\nconst handleTableChange = async (paginationInfo, filters, sorter) => {\r\n  console.log('handleTableChange 被调用:', {\r\n    paginationInfo, \r\n    当前分页状态: {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    }\r\n  });\r\n  \r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  \r\n  console.log('更新后的分页状态:', {\r\n    current: pagination.current,\r\n    pageSize: pagination.pageSize\r\n  });\r\n  \r\n  // 更新 URL 参数\r\n  const currentUrl = new URL(window.location);\r\n  currentUrl.searchParams.set('page', pagination.current.toString());\r\n  currentUrl.searchParams.set('page_size', pagination.pageSize.toString());\r\n  window.history.replaceState({}, '', currentUrl.toString());\r\n  console.log('已更新 URL:', currentUrl.toString());\r\n  \r\n  await loadAssetList();\r\n};\r\n\r\n// 在用设备表格变化处理\r\nconst handleActiveTableChange = async (paginationInfo, filters, sorter) => {\r\n  activePagination.current = paginationInfo.current;\r\n  activePagination.pageSize = paginationInfo.pageSize;\r\n  // 更新查询参数\r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  await loadAssetList();\r\n};\r\n\r\nconst handleView = (record) => {\r\n  selectedAsset.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleEdit = (record) => {\r\n  // 检查资产是否受保护\r\n  if (record.is_protected || record.is_auto_discovered) {\r\n    message.warning({\r\n      content: `不能编辑此硬件资产：${record.asset_name || record.asset_tag}\\n原因：${record.protection_reason || '自动发现的硬件资产不允许编辑'}\\n可编辑字段：${Array.isArray(record.editable_fields) ? record.editable_fields.join(', ') : '备注、状态'}`,\r\n      duration: 5\r\n    });\r\n    return;\r\n  }\r\n  \r\n  editingAsset.value = record;\r\n  Object.assign(formData, record);\r\n  editModalVisible.value = true;\r\n};\r\n\r\nconst handleDelete = async (record) => {\r\n  try {\r\n    Modal.confirm({\r\n      title: '确认删除硬件资产',\r\n      content: `确定要删除硬件资产 \"${record.asset_name || record.asset_tag}\" 吗？\\n\\n警告：此操作将删除资产记录及所有相关数据（包括保修记录、监控数据等），该操作不可恢复！`,\r\n      okText: '确认删除',\r\n      okType: 'danger',\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        const deleteMessage = message.loading('正在删除硬件资产及相关数据...', 0);\r\n        \r\n        try {\r\n          const response = await hardwareAssetApi.deleteAsset(record.id);\r\n          deleteMessage();\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const cleanupData = response.data.data;\r\n            \r\n            let successMessage = `硬件资产 \"${cleanupData.asset_name || cleanupData.asset_tag}\" 已成功删除`;\r\n            \r\n            const cleanupDetails = [];\r\n            if (cleanupData.warranty_records_deleted > 0) {\r\n              cleanupDetails.push(`保修记录: ${cleanupData.warranty_records_deleted}条`);\r\n            }\r\n            if (cleanupData.monitoring_cleanup && cleanupData.monitoring_cleanup.success) {\r\n              cleanupDetails.push('监控数据: 已清理');\r\n            }\r\n            \r\n            if (cleanupDetails.length > 0) {\r\n              successMessage += `\\n同时清理了：${cleanupDetails.join('、')}`;\r\n            }\r\n            \r\n            message.success({\r\n              content: successMessage,\r\n              duration: 6\r\n            });\r\n            \r\n            // 直接从列表中移除已删除的资产\r\n            assetData.value = assetData.value.filter(asset => asset.id !== record.id);\r\n            pagination.total = assetData.value.length;\r\n          } else {\r\n            message.error('删除硬件资产失败');\r\n          }\r\n        } catch (deleteError) {\r\n          deleteMessage();\r\n          throw deleteError;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除硬件资产失败:', error);\r\n      message.error(`删除硬件资产失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst handleCheckWarranty = async (record) => {\r\n  record.warrantyChecking = true;\r\n  try {\r\n    const response = await hardwareAssetApi.checkWarranty(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const warrantyData = response.data.data;\r\n      // 更新记录的保修状态\r\n      record.warranty_status = warrantyData.status;\r\n      record.warranty_end_date = warrantyData.warranty_end_date;\r\n      record.updated_at = new Date().toISOString();\r\n      \r\n      const statusText = warrantyData.is_valid ? '有效' : '已过期';\r\n      const endDateText = warrantyData.warranty_end_date ? ` (到期日: ${warrantyData.warranty_end_date})` : '';\r\n      \r\n      message.success(`保修检查 ${record.asset_name || record.asset_tag} 完成: ${statusText}${endDateText}`, 1);\r\n    } else {\r\n      message.error(`保修检查失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('保修检查失败:', error);\r\n    let errorMessage = '保修检查失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n  } finally {\r\n    record.warrantyChecking = false;\r\n  }\r\n};\r\n\r\nconst handleExport = () => {\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst handleImport = () => {\r\n  message.info('导入功能开发中...');\r\n};\r\n\r\n// 处理新增设备\r\nconst handleAdd = () => {\r\n  formDialogVisible.value = true;\r\n};\r\n\r\n// 处理表单提交\r\nconst handleSubmit = async (formData) => {\r\n  try {\r\n    const response = await hardwareAssetApi.createAsset(formData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('硬件资产创建成功');\r\n      formDialogVisible.value = false;\r\n      // 刷新列表\r\n      await loadAssetList();\r\n    } else {\r\n      message.error(`创建失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建硬件资产失败:', error);\r\n    message.error(`创建失败: ${error.message}`);\r\n  }\r\n};\r\n\r\nconst handleWarrantyCancel = () => {\r\n  warrantyModalVisible.value = false;\r\n};\r\n\r\nconst handleWarrantyConfirm = () => {\r\n  message.info('保修配置功能开发中...');\r\n  warrantyModalVisible.value = false;\r\n};\r\n\r\n// 生命周期钩子\r\nonMounted(async () => {\r\n  try {\r\n    // 抑制ResizeObserver错误\r\n    suppressResizeObserverError();\r\n    \r\n    // 从URL参数恢复分页状态\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const page = urlParams.get('page');\r\n    const pageSize = urlParams.get('page_size');\r\n    \r\n    if (page && !isNaN(parseInt(page))) {\r\n      pagination.current = parseInt(page);\r\n    }\r\n    if (pageSize && !isNaN(parseInt(pageSize))) {\r\n      pagination.pageSize = parseInt(pageSize);\r\n    }\r\n    \r\n    console.log('从URL恢复分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    });\r\n    \r\n    // 加载硬件资产列表\r\n    await loadAssetList();\r\n  } catch (error) {\r\n    console.error('初始化硬件资产列表失败:', error);\r\n    message.error('初始化硬件资产列表失败');\r\n  }\r\n});\r\n\r\n// 清理函数\r\nonBeforeUnmount(() => {\r\n  // 清理定时器或其他资源\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.hardware-asset-list-container {\r\n  min-height: 100vh;\r\n}\r\n\r\n.ant-table-wrapper {\r\n  background: white;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.search-form {\r\n  background: white;\r\n  padding: 24px;\r\n  border-radius: 6px;\r\n  margin-bottom: 16px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.batch-actions {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.statistics-cards {\r\n  display: flex;\r\n  gap: 16px;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.stat-card {\r\n  flex: 1;\r\n  background: white;\r\n  padding: 20px;\r\n  border-radius: 6px;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #1890ff;\r\n}\r\n\r\n.stat-label {\r\n  color: #666;\r\n  margin-top: 8px;\r\n}\r\n\r\n/* 标签页样式 */\r\n.device-tabs {\r\n  background: white;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n\r\n\r\n.device-content {\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n.device-tabs :deep(.ant-tabs-content-holder) {\r\n  padding: 16px;\r\n  background: white;\r\n}\r\n\r\n.device-tabs :deep(.ant-tabs-tabpane) {\r\n  padding: 0;\r\n}\r\n\r\n.device-tabs .ant-table-wrapper {\r\n  border-radius: 8px;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.device-tabs .ant-table {\r\n  border-radius: 8px;\r\n}\r\n\r\n.device-tabs .ant-table-thead > tr > th {\r\n  background: #fafafa;\r\n  border-bottom: 2px solid #f0f0f0;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 历史记录弹窗样式 */\r\n.history-section {\r\n  padding: 16px 0;\r\n}\r\n\r\n.history-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 16px;\r\n  padding-bottom: 12px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.history-header h4 {\r\n  margin: 0;\r\n  color: #333;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}