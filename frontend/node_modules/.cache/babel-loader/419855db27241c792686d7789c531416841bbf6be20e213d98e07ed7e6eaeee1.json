{"ast":null,"code":"import { ref, reactive, computed, onMounted, onUnmounted, watch, onBeforeUnmount, nextTick, h, createVNode } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { message, Modal } from 'ant-design-vue';\nimport { ipAPI } from '@/api';\nimport { suppressResizeObserverError } from '@/utils/errorHandler';\nimport * as Vue from 'vue';\nimport * as antdvIcons from '@ant-design/icons-vue';\n\n// 导入拆分的组件\nimport IPTable from '@/components/business/IPTable.vue';\nimport MonitoringActions from '@/components/business/MonitoringActions.vue';\nimport TemplateDrawer from '@/components/business/TemplateDrawer.vue';\nimport { ExclamationCircleOutlined } from '@ant-design/icons-vue';\n\n// 路由实例\n\nexport default {\n  __name: 'IPList',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n\n    // 搜索条件\n    const searchKeyword = ref('');\n    const ipStatus = ref('');\n    const ipType = ref('');\n\n    // IP数据状态 - 确保始终是数组\n    const ipData = ref([]);\n    const loading = ref(false);\n\n    // 批量操作相关状态\n    const selectedRowKeys = ref([]);\n    const batchDeleting = ref(false);\n    const batchMonitoringToggling = ref(false);\n\n    // 模板选择抽屉相关状态\n    const templateDrawerVisible = ref(false);\n    const zabbixTemplates = ref([]);\n    const selectedTemplateIds = ref([]);\n    const templateLoading = ref(false);\n    const templateSearchKeyword = ref('');\n    const monitoringCreating = ref(false);\n    const selectedCategory = ref(''); // 当前选中的分类\n    const expandedCategories = ref({}); // 展开的分类\n\n    // 防御性检查，确保ipData始终是数组\n    const setIPData = data => {\n      if (Array.isArray(data)) {\n        // 为每个IP记录设置保护状态信息\n        const processedData = data.map(ip => {\n          // 确保保护状态字段存在\n          if (ip.is_protected === undefined) {\n            ip.is_protected = ip.is_auto_discovered || false;\n          }\n\n          // 设置保护原因\n          if (!ip.protection_reason && ip.is_auto_discovered) {\n            ip.protection_reason = '自动发现的IP地址';\n          }\n\n          // 设置可编辑字段列表\n          if (ip.is_auto_discovered) {\n            ip.editable_fields = ['description', 'status'];\n          } else {\n            ip.editable_fields = 'all';\n          }\n          return ip;\n        });\n        ipData.value = processedData;\n      } else {\n        console.warn('尝试设置非数组数据到ipData:', data);\n        ipData.value = [];\n      }\n    };\n\n    // 统计计算属性 - 添加防御性检查\n    const activeCount = computed(() => {\n      if (!Array.isArray(ipData.value)) {\n        console.warn('ipData不是数组，返回0');\n        return 0;\n      }\n      return ipData.value.filter(ip => ip.status === 'active').length;\n    });\n    const availableCount = computed(() => {\n      if (!Array.isArray(ipData.value)) {\n        console.warn('ipData不是数组，返回0');\n        return 0;\n      }\n      return ipData.value.filter(ip => ip.status === 'available').length;\n    });\n    const onlineCount = computed(() => {\n      if (!Array.isArray(ipData.value)) {\n        console.warn('ipData不是数组，返回0');\n        return 0;\n      }\n      return ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\n    });\n\n    // 统计对象\n    const statistics = computed(() => ({\n      total: ipData.value.length || 0,\n      active: activeCount.value,\n      available: availableCount.value,\n      online: onlineCount.value\n    }));\n\n    // 计算属性 - 扫描相关\n    const needsKey = computed(() => {\n      const type = scanFormData.checkType;\n      // Zabbix agent, SNMPv1, SNMPv2, SNMPv3 需要key\n      return type === 9 || type === 10 || type === 11 || type === 13;\n    });\n    const isSNMPType = computed(() => {\n      const type = scanFormData.checkType;\n      return type === 10 || type === 11 || type === 13;\n    });\n    const needsAuth = computed(() => {\n      return scanFormData.checkType === 13 && (scanFormData.snmpv3Config.securityLevel === '1' || scanFormData.snmpv3Config.securityLevel === '2');\n    });\n    const needsPriv = computed(() => {\n      return scanFormData.checkType === 13 && scanFormData.snmpv3Config.securityLevel === '2';\n    });\n    const getKeyPlaceholder = () => {\n      const type = scanFormData.checkType;\n      if (type === 9) {\n        return '例如：system.uname';\n      } else if (type === 10 || type === 11 || type === 13) {\n        return '例如：1.3.6.1.2.1.1.1.0';\n      }\n      return '请输入检查键值';\n    };\n\n    // 工具函数\n    const getStatusText = status => {\n      const textMap = {\n        'active': '在用',\n        'available': '可用',\n        'reserved': '预留',\n        'conflict': '冲突'\n      };\n      return textMap[status] || status;\n    };\n    const getTypeText = type => {\n      const typeMap = {\n        'static': '静态IP',\n        'dynamic': '动态IP',\n        'gateway': '网关',\n        'dns': 'DNS服务器'\n      };\n      return typeMap[type] || type;\n    };\n    const formatDate = date => {\n      if (!date) return null;\n      return new Date(date).toLocaleString('zh-CN');\n    };\n\n    // 弹窗状态\n    const detailModalVisible = ref(false);\n    const editModalVisible = ref(false);\n    const scanModalVisible = ref(false);\n    const scanTaskModalVisible = ref(false);\n    const taskDetailModalVisible = ref(false);\n    const taskResultModalVisible = ref(false);\n    const selectedIP = ref(null);\n    const editingIP = ref(null);\n    const selectedTask = ref(null);\n\n    // 扫描任务查询相关\n    const scanTasks = ref([]);\n    const taskResults = ref([]);\n    const taskLoading = ref(false);\n    const resultLoading = ref(false);\n    const taskStatusFilter = ref('');\n    const taskDateRange = ref([]);\n    const taskNameFilter = ref('');\n    const taskPagination = reactive({\n      current: 1,\n      pageSize: 20,\n      total: 0,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\n    });\n\n    // 表单相关\n    const formRef = ref();\n    const scanFormRef = ref();\n    const formData = reactive({\n      ipAddress: '',\n      hostname: '',\n      status: 'available',\n      type: 'static',\n      macAddress: '',\n      device: '',\n      subnet: '',\n      description: ''\n    });\n\n    // 扫描配置数据\n    const scanFormData = reactive({\n      ipRanges: '192.168.1.0/24',\n      // IP范围\n      checkType: 12,\n      // 默认ICMP ping\n      ports: '0',\n      key: '',\n      // Python扫描器新参数\n      maxConcurrent: 100,\n      // 最大并发数\n      timeout: 3.0,\n      // 连接超时时间\n      pingTimeout: 1.0,\n      // Ping超时时间\n      // 保留的Zabbix相关参数(仅用于兼容性)\n      snmpCommunity: 'public',\n      snmpv3Config: {\n        securityLevel: '0',\n        securityName: '',\n        contextName: '',\n        authProtocol: 0,\n        authPassphrase: '',\n        privProtocol: 0,\n        privPassphrase: ''\n      },\n      uniqueCheck: 0,\n      hostSource: 1,\n      nameSource: 0\n    });\n\n    // 表单验证规则\n    const rules = {\n      ipAddress: [{\n        required: true,\n        message: '请输入IP地址'\n      }, {\n        pattern: /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/,\n        message: '请输入有效的IP地址'\n      }],\n      status: [{\n        required: true,\n        message: '请选择IP状态'\n      }],\n      type: [{\n        required: true,\n        message: '请选择IP类型'\n      }]\n    };\n\n    // 扫描配置验证规则\n    const scanRules = {\n      ipRanges: [{\n        required: true,\n        message: '请输入扫描IP范围'\n      }, {\n        validator: (rule, value) => {\n          if (!value) return Promise.reject('请输入IP范围');\n          const ranges = value.split('\\n').filter(range => range.trim());\n          for (const range of ranges) {\n            const trimmedRange = range.trim();\n            // 验证单个IP\n            const singleIpPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n            // 验证IP范围\n            const rangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n            // 验证CIDR\n            const cidrPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]{1,2}$/;\n            // 验证简化范围格式 (192.168.1.1-100)\n            const simpleRangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-[0-9]{1,3}$/;\n            if (!singleIpPattern.test(trimmedRange) && !rangePattern.test(trimmedRange) && !cidrPattern.test(trimmedRange) && !simpleRangePattern.test(trimmedRange)) {\n              return Promise.reject(`无效的IP范围格式: ${trimmedRange}`);\n            }\n          }\n          return Promise.resolve();\n        }\n      }],\n      checkType: [{\n        required: true,\n        message: '请选择检查类型'\n      }],\n      maxConcurrent: [{\n        type: 'number',\n        min: 1,\n        max: 200,\n        message: '并发数必须在1-200之间'\n      }],\n      timeout: [{\n        type: 'number',\n        min: 1,\n        max: 30,\n        message: '超时时间必须在1-30秒之间'\n      }],\n      pingTimeout: [{\n        type: 'number',\n        min: 0.5,\n        max: 10,\n        message: 'Ping超时时间必须在0.5-10秒之间'\n      }]\n    };\n\n    // 分页配置\n    const pagination = reactive({\n      current: 1,\n      pageSize: 20,\n      total: 0,\n      pageSizeOptions: ['10', '20', '50', '100'],\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: total => `共 ${total} 条记录`\n    });\n\n    // 加载IP列表数据\n    const loadIPList = async () => {\n      loading.value = true;\n      try {\n        const params = {\n          page: pagination.current,\n          page_size: pagination.pageSize // 使用Django标准的page_size参数名\n        };\n\n        // 添加搜索条件\n        if (searchKeyword.value && searchKeyword.value.trim()) {\n          params.search = searchKeyword.value.trim();\n        }\n        if (ipStatus.value) {\n          params.status = ipStatus.value;\n        }\n        if (ipType.value) {\n          params.type = ipType.value;\n        }\n        console.log('正在获取IP列表，参数:', params);\n        console.log('当前分页状态:', {\n          current: pagination.current,\n          pageSize: pagination.pageSize,\n          total: pagination.total\n        });\n        const response = await ipAPI.getIPList(params);\n        console.log('API响应:', response);\n        if (response && response.data) {\n          // 特殊检查：如果返回的是URL路径列表，说明API路径错误\n          if (response.data.records && response.data['scan-tasks']) {\n            console.error('API路径错误：返回的是可用路径列表，而不是数据:', response.data);\n            message.error('获取IP列表失败: API路径错误，请检查后端配置');\n            setIPData([]);\n            pagination.total = 0;\n            return;\n          }\n\n          // 检查是否是统一响应格式（包含code字段）\n          if (response.data.code !== undefined) {\n            // 统一响应格式\n            if (response.data.code === 200) {\n              const data = response.data.data;\n              // 确保获取的数据是数组\n              let resultData = [];\n              if (data && data.results && Array.isArray(data.results)) {\n                resultData = data.results;\n              } else if (Array.isArray(data)) {\n                resultData = data;\n              } else {\n                console.warn('API返回的数据不是数组格式:', data);\n                resultData = [];\n              }\n              setIPData(resultData);\n              pagination.total = data.count || data.total || resultData.length;\n              console.log('成功获取IP列表（统一格式）:', ipData.value);\n              message.success('IP列表数据已更新', 1);\n            } else {\n              console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\n              message.error(`获取IP列表失败: ${response.data.message}`);\n              setIPData([]);\n              pagination.total = 0;\n            }\n          } else {\n            // DRF标准响应格式（直接包含count、results字段）\n            console.log('检测到DRF标准响应格式');\n            // 确保获取的数据是数组\n            let resultData = [];\n            if (response.data.results && Array.isArray(response.data.results)) {\n              resultData = response.data.results;\n            } else if (Array.isArray(response.data)) {\n              resultData = response.data;\n            } else {\n              console.warn('API返回的数据不是数组格式:', response.data);\n              resultData = [];\n            }\n            setIPData(resultData);\n            pagination.total = response.data.count || response.data.total || resultData.length;\n            console.log('成功获取IP列表（DRF格式）:', ipData.value);\n            message.success('IP列表数据已更新', 1);\n          }\n        } else {\n          console.error('无效的API响应:', response);\n          message.error('获取IP列表失败: 无效的响应数据');\n          setIPData([]);\n          pagination.total = 0;\n        }\n      } catch (error) {\n        console.error('加载IP列表失败:', error);\n        console.error('错误详情:', {\n          message: error.message,\n          response: error.response,\n          request: error.request\n        });\n        let errorMessage = '获取IP列表失败';\n        if (error.response) {\n          // 服务器响应错误\n          errorMessage += `: HTTP ${error.response.status}`;\n          if (error.response.data && error.response.data.message) {\n            errorMessage += ` - ${error.response.data.message}`;\n          }\n        } else if (error.request) {\n          // 请求发送但无响应\n          errorMessage += ': 网络连接失败或服务器无响应';\n        } else {\n          // 请求设置错误\n          errorMessage += `: ${error.message}`;\n        }\n        message.error(errorMessage);\n\n        // 如果API调用失败，显示空数据而不是模拟数据\n        setIPData([]);\n        pagination.total = 0;\n      } finally {\n        loading.value = false;\n      }\n    };\n    const columns = [{\n      title: 'IP地址',\n      dataIndex: 'ip_address',\n      // 数据库字段名\n      key: 'ipAddress',\n      width: 70,\n      fixed: 'left'\n    }, {\n      title: '来源',\n      dataIndex: 'is_auto_discovered',\n      key: 'source',\n      width: 100\n    }, {\n      title: 'Ping状态',\n      dataIndex: 'ping_status',\n      // 数据库字段名\n      key: 'pingStatus',\n      width: 80\n    }, {\n      title: '监控状态',\n      dataIndex: 'monitoring_enabled',\n      key: 'monitoringStatus',\n      width: 90\n    }, {\n      title: 'IP类型',\n      dataIndex: 'type',\n      key: 'type',\n      width: 80\n    }, {\n      title: 'MAC地址',\n      dataIndex: 'mac_address',\n      // 数据库字段名\n      key: 'macAddress',\n      width: 150\n    }, {\n      title: '关联资产',\n      dataIndex: 'device',\n      key: 'device',\n      width: 150\n    }, {\n      title: '所属网段',\n      dataIndex: 'subnet',\n      key: 'subnet',\n      width: 140\n    }, {\n      title: '最后在线时间',\n      dataIndex: 'last_seen',\n      // 数据库字段名\n      key: 'lastSeen',\n      width: 160\n    }, {\n      title: '操作',\n      key: 'operation',\n      fixed: 'right',\n      width: 280\n    }];\n\n    // 扫描任务表格列定义\n\n    // 扫描结果表格列定义\n    const resultColumns = [{\n      title: 'IP地址',\n      dataIndex: 'ip_address',\n      key: 'ip_address',\n      width: 90\n    }, {\n      title: '主机名',\n      dataIndex: 'hostname',\n      key: 'hostname',\n      ellipsis: true\n    }, {\n      title: 'MAC地址',\n      dataIndex: 'mac_address',\n      key: 'mac_address'\n    }, {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status'\n    }, {\n      title: '响应时间',\n      dataIndex: 'response_time',\n      key: 'response_time'\n    }, {\n      title: '发现时间',\n      dataIndex: 'created_at',\n      key: 'created_at'\n    }];\n\n    // 事件处理函数\n    // 批量ping状态管理\n    const batchPingState = reactive({\n      isVisible: false,\n      phase: 'confirm',\n      // confirm, testing, result\n      stats: {\n        total: 0,\n        currentOnline: 0,\n        currentOffline: 0,\n        testResult: null\n      },\n      testing: {\n        progress: 0,\n        currentIP: '',\n        startTime: null\n      }\n    });\n    const handleBatchPing = async () => {\n      try {\n        // 获取当前页面的所有IP ID\n        const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\n        if (allIpIds.length === 0) {\n          message.warning('没有可以ping的IP记录');\n          return;\n        }\n\n        // 初始化状态\n        batchPingState.stats.total = allIpIds.length;\n        batchPingState.stats.currentOnline = ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\n        batchPingState.stats.currentOffline = allIpIds.length - batchPingState.stats.currentOnline;\n        batchPingState.phase = 'confirm';\n        batchPingState.isVisible = true;\n      } catch (error) {\n        console.error('初始化批量ping失败:', error);\n        message.error('初始化批量ping失败');\n      }\n    };\n\n    // 开始ping测试\n    const startBatchPingTest = async () => {\n      try {\n        const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\n\n        // 切换到测试阶段\n        batchPingState.phase = 'testing';\n        batchPingState.testing.startTime = new Date();\n        batchPingState.testing.progress = 0;\n        loading.value = true;\n\n        // 调用批量ping API\n        const response = await ipAPI.batchPingIPs(allIpIds);\n        if (response.data && response.data.code === 200) {\n          const batchData = response.data.data;\n          const summary = batchData.summary;\n\n          // 更新本地数据\n          const resultsMap = new Map();\n          batchData.results.forEach(result => {\n            resultsMap.set(result.ip_id, result);\n          });\n\n          // 更新ipData中的记录\n          ipData.value.forEach(ip => {\n            const result = resultsMap.get(ip.id);\n            if (result) {\n              ip.ping_status = result.status;\n              ip.pingStatus = result.status; // 兼容字段\n              if (result.is_online) {\n                ip.last_seen = new Date().toISOString();\n                ip.lastSeen = new Date().toISOString(); // 兼容字段\n              }\n            }\n          });\n\n          // 设置测试结果并切换到结果阶段\n          batchPingState.stats.testResult = summary;\n          batchPingState.phase = 'result';\n        } else {\n          message.error(`批量ping测试失败: ${response.data?.message || '未知错误'}`);\n          batchPingState.isVisible = false;\n        }\n      } catch (error) {\n        console.error('批量ping测试失败:', error);\n        let errorMessage = '批量ping测试失败';\n        if (error.response && error.response.data) {\n          errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\n        } else if (error.message) {\n          errorMessage += `: ${error.message}`;\n        }\n        message.error(errorMessage);\n        batchPingState.isVisible = false;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 关闭批量ping弹窗\n    const closeBatchPingModal = () => {\n      batchPingState.isVisible = false;\n      batchPingState.phase = 'confirm';\n      batchPingState.stats.testResult = null;\n      batchPingState.testing.progress = 0;\n    };\n\n    // 行选择管理\n    const onSelectChange = newSelectedRowKeys => {\n      console.log('选中的行 keys:', newSelectedRowKeys);\n      selectedRowKeys.value = newSelectedRowKeys;\n    };\n    const onSelectAll = (selected, selectedRows, changeRows) => {\n      console.log('全选/反选:', {\n        selected,\n        selectedRows: selectedRows.length,\n        changeRows: changeRows.length\n      });\n    };\n    const clearSelection = () => {\n      selectedRowKeys.value = [];\n    };\n\n    // 批量删除\n    const handleBatchDelete = async () => {\n      if (selectedRowKeys.value.length === 0) {\n        message.warning('请选择要删除的IP地址');\n        return;\n      }\n      try {\n        Modal.confirm({\n          title: '批量删除确认',\n          content: `您将删除 ${selectedRowKeys.value.length} 个IP地址，此操作不可恢复！`,\n          okText: '确认删除',\n          okType: 'danger',\n          cancelText: '取消',\n          onOk: async () => {\n            batchDeleting.value = true;\n            try {\n              const response = await ipAPI.batchDeleteIPs(selectedRowKeys.value);\n              if (response.data && response.data.code === 200) {\n                const result = response.data.data;\n                message.success(`批量删除成功！删除: ${result.deleted_count} 个，失败: ${result.failed_count} 个`, 1);\n\n                // 清空选中状态\n                clearSelection();\n\n                // 刷新列表\n                await loadIPList();\n              } else {\n                message.error(`批量删除失败: ${response.data?.message || '未知错误'}`);\n              }\n            } catch (error) {\n              console.error('批量删除失败:', error);\n              message.error(`批量删除失败: ${error.message}`);\n            } finally {\n              batchDeleting.value = false;\n            }\n          }\n        });\n      } catch (error) {\n        console.error('批量删除操作失败:', error);\n        message.error('批量删除操作失败');\n      }\n    };\n\n    // 批量切换监控状态\n    const handleBatchToggleMonitoring = async enableMonitoring => {\n      if (selectedRowKeys.value.length === 0) {\n        message.warning('请选择要操作的IP地址');\n        return;\n      }\n      const actionText = enableMonitoring ? '启用监控' : '禁用监控';\n      try {\n        Modal.confirm({\n          title: `批量${actionText}`,\n          content: `您将对 ${selectedRowKeys.value.length} 个IP地址${actionText}，是否继续？`,\n          okText: `确认${actionText}`,\n          cancelText: '取消',\n          onOk: async () => {\n            batchMonitoringToggling.value = true;\n            try {\n              const response = await ipAPI.batchToggleMonitoring(selectedRowKeys.value, enableMonitoring);\n              if (response.data && response.data.code === 200) {\n                const result = response.data.data;\n                message.success(`批量${actionText}成功！成功: ${result.success_count} 个，失败: ${result.failed_count} 个`, 1);\n\n                // 更新本地数据\n                ipData.value.forEach(ip => {\n                  if (selectedRowKeys.value.includes(ip.id)) {\n                    ip.monitoring_enabled = enableMonitoring;\n                  }\n                });\n\n                // 清空选中状态\n                clearSelection();\n              } else {\n                message.error(`批量${actionText}失败: ${response.data?.message || '未知错误'}`);\n              }\n            } catch (error) {\n              console.error(`批量${actionText}失败:`, error);\n              message.error(`批量${actionText}失败: ${error.message}`);\n            } finally {\n              batchMonitoringToggling.value = false;\n            }\n          }\n        });\n      } catch (error) {\n        console.error(`批量${actionText}操作失败:`, error);\n        message.error(`批量${actionText}操作失败`);\n      }\n    };\n\n    // 单个监控状态切换\n    const handleToggleMonitoring = async (record, enableMonitoring) => {\n      if (enableMonitoring) {\n        // 启用监控时显示模板选择抽屉\n        selectedIP.value = record;\n        await loadZabbixTemplates(record.id);\n        templateDrawerVisible.value = true;\n      } else {\n        // 直接禁用监控\n        await toggleMonitoringStatus(record, false);\n      }\n    };\n\n    // 切换监控状态的实际方法\n    const toggleMonitoringStatus = async (record, enableMonitoring) => {\n      const actionText = enableMonitoring ? '启用监控' : '禁用监控';\n\n      // 设置单个记录的加载状态\n      record.monitoringToggling = true;\n      try {\n        const response = await ipAPI.toggleMonitoring(record.id, enableMonitoring);\n        if (response.data && response.data.code === 200) {\n          // 更新本地数据\n          record.monitoring_enabled = enableMonitoring;\n          message.success(`${record.ip_address || record.ipAddress} ${actionText}成功`, 1);\n        } else {\n          message.error(`${actionText}失败: ${response.data?.message || '未知错误'}`);\n        }\n      } catch (error) {\n        console.error(`${actionText}失败:`, error);\n        message.error(`${actionText}失败: ${error.message}`);\n      } finally {\n        record.monitoringToggling = false;\n      }\n    };\n\n    // 加载Zabbix模板列表\n    const loadZabbixTemplates = async ipId => {\n      templateLoading.value = true;\n      try {\n        const response = await ipAPI.getZabbixTemplates(ipId, templateSearchKeyword.value);\n        if (response.data && response.data.code === 200) {\n          zabbixTemplates.value = response.data.data.templates || [];\n\n          // 初始化展开状态，默认展开所有分类\n          nextTick(() => {\n            try {\n              const categories = Object.keys(groupedTemplates.value || {});\n              categories.forEach(category => {\n                const categoryStr = String(category);\n                expandedCategories.value[categoryStr] = true;\n              });\n            } catch (error) {\n              console.warn('初始化展开状态错误:', error);\n            }\n          });\n          console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\n        } else {\n          // 检查是否是Zabbix连接问题\n          if (response.data && response.data.message && response.data.message.includes('Zabbix API连接不可用')) {\n            // 显示详细的诊断信息\n            const errorMessage = '⚠️ Zabbix服务器连接失败';\n            const suggestions = ['请检查Zabbix服务器是否正常运行', '验证网络连接和防火墙设置', '检查Zabbix API配置是否正确'];\n            Modal.error({\n              title: '无法加载监控模板',\n              content: h('div', [h('p', {\n                style: 'margin-bottom: 16px;'\n              }, errorMessage), h('div', {\n                style: 'background: #f5f5f5; padding: 12px; border-radius: 6px;'\n              }, [h('p', {\n                style: 'margin: 0 0 8px 0; font-weight: 600;'\n              }, '解决建议：'), h('ul', {\n                style: 'margin: 0; padding-left: 20px;'\n              }, suggestions.map(suggestion => h('li', {\n                style: 'margin-bottom: 4px;'\n              }, suggestion)))])]),\n              width: 500\n            });\n          } else {\n            message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\n          }\n          zabbixTemplates.value = [];\n        }\n      } catch (error) {\n        console.error('加载模板列表失败:', error);\n\n        // 检查是否是网络连接问题\n        if (error.message && (error.message.includes('Network Error') || error.message.includes('timeout'))) {\n          Modal.error({\n            title: '网络连接失败',\n            content: '无法连接到后端服务器，请检查网络连接和服务器状态。'\n          });\n        } else {\n          message.error(`加载模板列表失败: ${error.message}`);\n        }\n        zabbixTemplates.value = [];\n      } finally {\n        templateLoading.value = false;\n      }\n    };\n\n    // 搜索模板\n    const handleTemplateSearch = async () => {\n      if (selectedIP.value) {\n        await loadZabbixTemplates(selectedIP.value.id);\n      }\n    };\n\n    // 模板选择变化 - 确保类型安全\n    const handleTemplateSelect = templateIds => {\n      try {\n        // 确保 templateIds 是数组并且所有元素都是字符串\n        if (Array.isArray(templateIds)) {\n          selectedTemplateIds.value = templateIds.map(id => {\n            if (id === null || id === undefined) return '';\n            return String(id);\n          });\n        } else {\n          selectedTemplateIds.value = [];\n        }\n        console.log('已选择模板:', selectedTemplateIds.value);\n      } catch (error) {\n        console.error('处理模板选择时出错:', error);\n        selectedTemplateIds.value = [];\n      }\n    };\n\n    // 创建监控主机\n    const handleCreateMonitoring = async () => {\n      if (!selectedIP.value) {\n        message.error('请先选择IP地址');\n        return;\n      }\n      if (selectedTemplateIds.value.length === 0) {\n        message.error('请选择至少一个监控模板');\n        return;\n      }\n      monitoringCreating.value = true;\n      try {\n        const monitoringData = {\n          template_ids: selectedTemplateIds.value,\n          host_name: selectedIP.value.hostname || selectedIP.value.ip_address || selectedIP.value.ipAddress,\n          group_ids: [] // 使用默认主机组\n        };\n        const response = await ipAPI.createMonitoring(selectedIP.value.id, monitoringData);\n        if (response.data && response.data.code === 200) {\n          const result = response.data.data;\n          message.success({\n            content: `监控主机创建成功！\\n主机名: ${result.host_name}\\nIP: ${result.ip_address}\\n模板数量: ${result.template_count}`,\n            duration: 5\n          });\n\n          // 更新本地IP记录的监控状态\n          selectedIP.value.monitoring_enabled = true;\n\n          // 关闭抽屉\n          templateDrawerVisible.value = false;\n\n          // 清空选中的模板\n          selectedTemplateIds.value = [];\n        } else {\n          message.error(`创建监控主机失败: ${response.data?.message || '未知错误'}`);\n        }\n      } catch (error) {\n        console.error('创建监控主机失败:', error);\n        message.error(`创建监控主机失败: ${error.message}`);\n      } finally {\n        monitoringCreating.value = false;\n      }\n    };\n\n    // 关闭模板抽屉\n    // 安全获取模板的唯一key\n    const getTemplateKey = template => {\n      try {\n        if (!template) return Math.random().toString();\n        if (template.templateid) return String(template.templateid);\n        if (template.id) return String(template.id);\n        return Math.random().toString();\n      } catch (error) {\n        console.error('获取模板key失败:', error);\n        return Math.random().toString();\n      }\n    };\n\n    // 安全获取模板的value\n    const getTemplateValue = template => {\n      try {\n        if (!template) return '';\n        if (template.templateid) return String(template.templateid);\n        if (template.id) return String(template.id);\n        return '';\n      } catch (error) {\n        console.error('获取模板value失败:', error);\n        return '';\n      }\n    };\n    const handleCloseTemplateDrawer = () => {\n      templateDrawerVisible.value = false;\n      selectedTemplateIds.value = [];\n      templateSearchKeyword.value = '';\n      selectedCategory.value = '';\n      expandedCategories.value = {};\n      selectedIP.value = null;\n    };\n\n    // 模板数据安全验证函数\n    const validateTemplateData = template => {\n      try {\n        if (!template || typeof template !== 'object') {\n          console.warn('模板不是有效对象:', template);\n          return null;\n        }\n\n        // 安全地获取所有字段\n        const safeTemplate = {\n          templateid: safeString(template.templateid || template.id || `temp_${Date.now()}`),\n          name: safeString(template.name || '未知模板'),\n          description: safeString(template.description || ''),\n          category: safeString(template.category || '📝 其他'),\n          items_count: Number(template.items_count) || 0,\n          triggers_count: Number(template.triggers_count) || 0,\n          macros_count: Number(template.macros_count) || 0,\n          groups: Array.isArray(template.groups) ? template.groups.map(group => ({\n            groupid: safeString(group.groupid || group.id || ''),\n            name: safeString(group.name || '未知组')\n          })) : [],\n          icon: safeString(template.icon || 'setting')\n        };\n\n        // 验证必需字段\n        if (!safeTemplate.templateid || !safeTemplate.name) {\n          console.warn('模板缺少必需字段:', safeTemplate);\n          return null;\n        }\n        return safeTemplate;\n      } catch (error) {\n        console.error('验证模板时出错:', error, template);\n        return null;\n      }\n    };\n\n    // 按分类组织模板 - 增强类型安全\n    const groupedTemplates = computed(() => {\n      const groups = {};\n      try {\n        if (!Array.isArray(zabbixTemplates.value)) {\n          console.warn('zabbixTemplates不是数组:', zabbixTemplates.value);\n          return groups;\n        }\n        zabbixTemplates.value.forEach(template => {\n          const safeTemplate = validateTemplateData(template);\n          if (!safeTemplate) {\n            return; // 跳过无效模板\n          }\n          const category = safeTemplate.category;\n          if (!groups[category]) {\n            groups[category] = [];\n          }\n          groups[category].push(safeTemplate);\n        });\n\n        // 对每个分类的模板按名称排序\n        Object.keys(groups).forEach(category => {\n          try {\n            groups[category].sort((a, b) => {\n              const nameA = safeString(a.name || '');\n              const nameB = safeString(b.name || '');\n              return nameA.localeCompare(nameB);\n            });\n          } catch (sortError) {\n            console.warn(`排序分类${category}时出错:`, sortError);\n          }\n        });\n      } catch (error) {\n        console.error('groupedTemplates计算出错:', error);\n      }\n      return groups;\n    });\n\n    // 分类图标映射 - 增强类型安全\n    const getCategoryIcon = category => {\n      try {\n        const categoryStr = safeCategoryToString(category);\n        const iconMap = {\n          '💻 操作系统': 'DesktopOutlined',\n          '🗄 数据库': 'DatabaseOutlined',\n          '🌐 Web服务器': 'GlobalOutlined',\n          '📦 容器平台': 'ContainerOutlined',\n          '🌐 网络设备': 'RouterOutlined',\n          '☁️ 虚拟化': 'CloudOutlined',\n          '📊 网络监控': 'WifiOutlined',\n          '☁️ 云服务': 'CloudServerOutlined',\n          '🚀 应用服务': 'CodeOutlined',\n          '📬 消息队列': 'MessageOutlined',\n          '⚡ 缓存系统': 'ThunderboltOutlined',\n          '💾 存储系统': 'HddOutlined',\n          '🔒 安全监控': 'SafetyOutlined',\n          '🌡️ IoT设备': 'NodeIndexOutlined',\n          '📝 其他': 'SettingOutlined'\n        };\n        return iconMap[categoryStr] || 'SettingOutlined';\n      } catch (error) {\n        console.warn('getCategoryIcon处理错误:', error, category);\n        return 'SettingOutlined';\n      }\n    };\n\n    // 分类统计信息 - 增强类型安全\n    const categoryStats = computed(() => {\n      const stats = {};\n      try {\n        if (!groupedTemplates.value || typeof groupedTemplates.value !== 'object') {\n          return stats;\n        }\n        Object.entries(groupedTemplates.value).forEach(([category, templates]) => {\n          try {\n            const categoryKey = safeCategoryToString(category);\n            if (!Array.isArray(templates)) {\n              console.warn(`分类${categoryKey}的模板不是数组:`, templates);\n              stats[categoryKey] = {\n                count: 0,\n                selected: 0\n              };\n              return;\n            }\n            const selectedIds = Array.isArray(selectedTemplateIds.value) ? selectedTemplateIds.value : [];\n            stats[categoryKey] = {\n              count: Number(templates.length) || 0,\n              selected: templates.filter(t => {\n                try {\n                  const templateId = safeString(t.templateid || t.id || '');\n                  return selectedIds.includes(templateId);\n                } catch (filterError) {\n                  console.warn('过滤模板时出错:', filterError, t);\n                  return false;\n                }\n              }).length\n            };\n          } catch (categoryError) {\n            console.warn(`处理分类${category}统计时出错:`, categoryError);\n            stats[safeCategoryToString(category)] = {\n              count: 0,\n              selected: 0\n            };\n          }\n        });\n      } catch (error) {\n        console.error('categoryStats计算出错:', error);\n      }\n      return stats;\n    });\n\n    // 筛选后的模板 - 增强类型安全\n    const filteredTemplates = computed(() => {\n      try {\n        let result = groupedTemplates.value || {};\n\n        // 分类筛选\n        if (selectedCategory.value) {\n          const categoryStr = safeString(selectedCategory.value);\n          result = {\n            [categoryStr]: result[categoryStr] || []\n          };\n        }\n        return result;\n      } catch (error) {\n        console.error('filteredTemplates计算出错:', error);\n        return {};\n      }\n    });\n\n    // 安全的分类显示名称函数\n    const safeCategoryDisplayName = category => {\n      try {\n        return safeCategoryToString(category);\n      } catch (error) {\n        console.error('safeCategoryDisplayName处理错误:', error, category);\n        return '📝 其他';\n      }\n    };\n\n    // 切换分类筛选 - 确保类型安全\n    const toggleCategoryFilter = category => {\n      try {\n        const categoryStr = safeCategoryToString(category);\n        if (selectedCategory.value === categoryStr) {\n          selectedCategory.value = '';\n        } else {\n          selectedCategory.value = categoryStr;\n        }\n      } catch (error) {\n        console.warn('toggleCategoryFilter处理错误:', error, category);\n        selectedCategory.value = '';\n      }\n    };\n\n    // 清除分类筛选\n    const clearCategoryFilter = () => {\n      selectedCategory.value = '';\n    };\n\n    // 切换分类展开状态 - 使用安全的类型转换\n    const toggleCategoryExpand = category => {\n      try {\n        const categoryStr = safeCategoryToString(category);\n        expandedCategories.value[categoryStr] = !expandedCategories.value[categoryStr];\n      } catch (error) {\n        console.warn('toggleCategoryExpand处理错误:', error, category);\n      }\n    };\n\n    // 安全检查分类是否展开 - 避免对象类型转换错误\n    const isCategoryExpanded = category => {\n      // 检查是对象还是字符串\n      if (typeof category === 'object') {\n        try {\n          return isCategoryExpanded(JSON.stringify(category));\n        } catch (jsonError) {\n          console.warn('对象转字符串失败:', jsonError);\n          return true; // 默认展开\n        }\n      }\n      try {\n        if (category === null || category === undefined) {\n          return true;\n        }\n        const categoryStr = safeCategoryToString(category);\n        // 默认展开所有分类，除非明确设置为false\n        return expandedCategories.value[categoryStr] !== false;\n      } catch (error) {\n        console.warn('isCategoryExpanded处理错误:', error, category);\n        return true; // 默认展开\n      }\n    };\n\n    // 安全的分类转字符串函数 - 根据规范处理各种类型\n    const safeCategoryToString = category => {\n      try {\n        if (category === null || category === undefined) {\n          return '📝 其他';\n        }\n        if (typeof category === 'string') {\n          return category.trim() || '📝 其他';\n        }\n        if (typeof category === 'object') {\n          // 如果是对象，尝试提取有效属性\n          if (category.name && typeof category.name === 'string') {\n            return category.name.trim();\n          }\n          if (category.title && typeof category.title === 'string') {\n            return category.title.trim();\n          }\n          if (category.label && typeof category.label === 'string') {\n            return category.label.trim();\n          }\n\n          // 尝试使用JSON.stringify安全地转换对象\n          try {\n            const jsonStr = JSON.stringify(category);\n            if (jsonStr && jsonStr !== '[object Object]') {\n              return jsonStr;\n            }\n          } catch (jsonError) {\n            // JSON转换失败时继续处理\n            console.warn('JSON转换失败:', jsonError);\n          }\n\n          // 对象转换失败时的安全处理\n          console.warn('分类是对象但缺少有效字段:', category);\n          return '📝 其他';\n        }\n\n        // 其他类型的安全转换\n        const stringResult = String(category);\n        // 检查是否是有效的字符串表示\n        if (stringResult && stringResult !== '[object Object]') {\n          return stringResult.trim() || '📝 其他';\n        } else {\n          return '📝 其他';\n        }\n      } catch (error) {\n        console.error('safeCategoryToString处理错误:', error, category);\n        return '📝 其他';\n      }\n    };\n\n    // 安全的字符串转换函数 - 增强版，防止\"Cannot convert object to primitive value\"错误\n    const safeString = value => {\n      try {\n        // 处理null/undefined\n        if (value == null) {\n          return '';\n        }\n\n        // 处理基本类型\n        switch (typeof value) {\n          case 'string':\n            return value;\n          case 'number':\n          case 'boolean':\n          case 'bigint':\n            return String(value);\n          case 'symbol':\n            return value.toString();\n        }\n\n        // 处理对象类型\n        if (typeof value === 'object') {\n          // 优先检查常见对象类型\n          if (value instanceof Date) {\n            return value.toISOString();\n          }\n          if (value instanceof Error) {\n            return value.message || value.name || 'Error';\n          }\n\n          // 尝试获取对象的常见字符串属性\n          const stringProps = ['name', 'title', 'label', 'text', 'message', 'value'];\n          for (const prop of stringProps) {\n            if (typeof value[prop] === 'string') {\n              return value[prop];\n            }\n          }\n\n          // 安全地使用JSON.stringify\n          try {\n            const jsonStr = JSON.stringify(value, (key, val) => {\n              if (typeof val === 'object' && val !== null) {\n                return Object.prototype.toString.call(val);\n              }\n              return val;\n            });\n            if (jsonStr && jsonStr !== '{}' && jsonStr !== '[]') {\n              return jsonStr;\n            }\n          } catch (jsonError) {\n            console.warn('JSON.stringify failed:', jsonError);\n          }\n\n          // 最后尝试调用toString()\n          try {\n            const toStringResult = Object.prototype.toString.call(value);\n            if (toStringResult !== '[object Object]') {\n              return toStringResult;\n            }\n          } catch (toStringError) {\n            console.warn('toString call failed:', toStringError);\n          }\n          return '[object]';\n        }\n\n        // 其他未知类型\n        return String(value);\n      } catch (error) {\n        console.error('safeString处理错误:', error, value);\n        return '';\n      }\n    };\n\n    // 获取模板图标 - 根据内存规范增强类型安全和错误处理\n    const getTemplateIcon = template => {\n      try {\n        // 基础验证\n        if (!template || typeof template !== 'object') {\n          console.warn('getTemplateIcon: 模板对象无效', template);\n          return 'SettingOutlined';\n        }\n        if (!template.icon) {\n          return 'SettingOutlined';\n        }\n\n        // 安全处理图标名称 - 确保必须是字符串类型\n        let iconName;\n        try {\n          if (typeof template.icon === 'string') {\n            iconName = template.icon.trim();\n          } else if (typeof template.icon === 'object' && template.icon !== null) {\n            // 如果是对象，尝试获取有效的字符串属性\n            if (template.icon.name && typeof template.icon.name === 'string') {\n              iconName = template.icon.name.trim();\n            } else if (template.icon.type && typeof template.icon.type === 'string') {\n              iconName = template.icon.type.trim();\n            } else {\n              // 对象转换为字符串时的安全处理\n              try {\n                const objStr = JSON.stringify(template.icon);\n                console.warn('getTemplateIcon: 图标是对象，尝试JSON转换', template.icon, objStr);\n                iconName = 'setting'; // 使用默认值\n              } catch (jsonError) {\n                console.error('getTemplateIcon: JSON转换失败', jsonError);\n                iconName = 'setting';\n              }\n            }\n          } else if (template.icon === null || template.icon === undefined) {\n            iconName = 'setting';\n          } else {\n            // 其他类型的安全转换\n            iconName = String(template.icon).trim();\n          }\n        } catch (typeError) {\n          console.error('getTemplateIcon: 类型处理错误', typeError, template.icon);\n          iconName = 'setting';\n        }\n\n        // 验证图标名称\n        if (!iconName || iconName === '[object Object]' || iconName.length === 0) {\n          console.warn('getTemplateIcon: 无效的图标名称', iconName, template);\n          return 'SettingOutlined';\n        }\n\n        // 如果已经包含Outlined后缀，直接返回\n        if (iconName.endsWith('Outlined')) {\n          return iconName;\n        }\n\n        // 特殊图标名称映射\n        const iconMap = {\n          'global': 'GlobalOutlined',\n          'database': 'DatabaseOutlined',\n          'server': 'ServerOutlined',\n          'network': 'RouterOutlined',\n          'cloud': 'CloudOutlined',\n          'container': 'ContainerOutlined',\n          'security': 'SafetyOutlined',\n          'storage': 'HddOutlined',\n          'monitor': 'DashboardOutlined',\n          'setting': 'SettingOutlined'\n        };\n\n        // 检查是否有直接映射\n        const lowerIconName = iconName.toLowerCase();\n        if (iconMap[lowerIconName]) {\n          return iconMap[lowerIconName];\n        }\n\n        // 处理首字母大写并添加Outlined后缀\n        try {\n          const capitalizedIcon = iconName.charAt(0).toUpperCase() + iconName.slice(1);\n          const finalIconName = `${capitalizedIcon}Outlined`;\n\n          // 验证图标是否存在于Ant Design图标库中\n          const availableIcons = ['GlobalOutlined', 'DatabaseOutlined', 'DesktopOutlined', 'RouterOutlined', 'CloudOutlined', 'ContainerOutlined', 'SafetyOutlined', 'HddOutlined', 'CodeOutlined', 'MessageOutlined', 'ThunderboltOutlined', 'NodeIndexOutlined', 'SettingOutlined', 'DashboardOutlined', 'ServerOutlined', 'WifiOutlined'];\n          if (availableIcons.includes(finalIconName)) {\n            return finalIconName;\n          }\n        } catch (processError) {\n          console.error('getTemplateIcon: 图标名称处理错误', processError, iconName);\n        }\n\n        // 如果图标不存在，返回默认图标\n        return 'SettingOutlined';\n      } catch (error) {\n        console.error('getTemplateIcon处理严重错误:', error, template);\n        return 'SettingOutlined';\n      }\n    };\n    const handleSearch = async () => {\n      pagination.current = 1;\n      await loadIPList();\n    };\n    const handleReset = async () => {\n      searchKeyword.value = '';\n      ipStatus.value = '';\n      ipType.value = '';\n      pagination.current = 1;\n      await loadIPList();\n    };\n    const handleSearchInput = value => {\n      searchKeyword.value = value;\n    };\n    const handleStatusChange = value => {\n      ipStatus.value = value;\n    };\n    const handleTableChange = async (paginationInfo, filters, sorter) => {\n      console.log('handleTableChange 被调用:', {\n        paginationInfo,\n        当前分页状态: {\n          current: pagination.current,\n          pageSize: pagination.pageSize\n        }\n      });\n      pagination.current = paginationInfo.current;\n      pagination.pageSize = paginationInfo.pageSize;\n      console.log('更新后的分页状态:', {\n        current: pagination.current,\n        pageSize: pagination.pageSize\n      });\n\n      // 更新 URL 参数\n      const currentUrl = new URL(window.location);\n      currentUrl.searchParams.set('page', pagination.current.toString());\n      currentUrl.searchParams.set('page_size', pagination.pageSize.toString());\n      window.history.replaceState({}, '', currentUrl.toString());\n      console.log('已更新 URL:', currentUrl.toString());\n      await loadIPList();\n    };\n    const handleAdd = () => {\n      router.push({\n        name: 'ipAdd'\n      });\n    };\n    const handleView = record => {\n      selectedIP.value = record;\n      detailModalVisible.value = true;\n    };\n    const handleEdit = record => {\n      // 检查IP是否受保护\n      if (record.is_protected || record.is_auto_discovered) {\n        message.warning({\n          content: `不能编辑此IP地址：${record.ip_address || record.ipAddress}\\n原因：${record.protection_reason || '自动发现的IP地址不允许编辑'}\\n可编辑字段：${Array.isArray(record.editable_fields) ? record.editable_fields.join(', ') : '备注、状态'}`,\n          duration: 5\n        });\n        return;\n      }\n      editingIP.value = record;\n      Object.assign(formData, record);\n      editModalVisible.value = true;\n    };\n    const handleDelete = async record => {\n      try {\n        // 显示加载状态\n        const loadingMessage = message.loading('正在检查删除影响...', 0);\n        try {\n          // 检查删除影响\n          const impactResponse = await ipAPI.checkDeletionImpact(record.id);\n          loadingMessage();\n          if (impactResponse.data && impactResponse.data.code === 200) {\n            const impactData = impactResponse.data.data;\n\n            // 构建详细的确认对话框内容\n            const confirmContent = await new Promise(resolve => {\n              const {\n                createVNode\n              } = Vue;\n              const {\n                ExclamationCircleOutlined,\n                WarningOutlined\n              } = antdvIcons;\n              const warningItems = impactData.deletion_warnings.map(warning => createVNode('li', {\n                style: 'margin: 4px 0; color: #ff4d4f;'\n              }, warning));\n\n              // 如果是自动发现的IP，添加特殊警告\n              if (impactData.is_auto_discovered) {\n                warningItems.unshift(createVNode('li', {\n                  style: 'margin: 4px 0; color: #ff4d4f; font-weight: bold; background: #fff2f0; padding: 8px; border-radius: 4px; border-left: 4px solid #ff4d4f;'\n                }, '⚠️ 警告：此IP为Zabbix自动发现，删除后可能影响监控系统！'));\n              }\n              const content = createVNode('div', {}, [createVNode('p', {\n                style: 'font-weight: bold; margin-bottom: 12px; color: #ff4d4f;'\n              }, impactData.is_auto_discovered ? `⚠️ 删除自动发现的IP地址: ${impactData.ip_address}` : `确认删除 IP地址: ${impactData.ip_address}`),\n              // 基本信息\n              createVNode('div', {\n                style: 'margin-bottom: 12px; padding: 8px; background: #f5f5f5; border-radius: 4px;'\n              }, [createVNode('p', {\n                style: 'margin: 0; font-size: 12px; color: #666;'\n              }, `主机名: ${impactData.hostname || '未设置'}`), createVNode('p', {\n                style: 'margin: 0; font-size: 12px; color: #666;'\n              }, `来源: ${impactData.is_auto_discovered ? 'Zabbix自动发现' : '手动创建'}`), impactData.zabbix_drule_id ? createVNode('p', {\n                style: 'margin: 0; font-size: 12px; color: #666;'\n              }, `Zabbix规则ID: ${impactData.zabbix_drule_id}`) : null]),\n              // 影响统计\n              createVNode('div', {\n                style: 'margin-bottom: 12px;'\n              }, [createVNode('p', {\n                style: 'margin: 0; font-weight: bold; color: #fa8c16;'\n              }, '删除影响范围:'), impactData.scan_results_count > 0 ? createVNode('p', {\n                style: 'margin: 4px 0; color: #ff4d4f;'\n              }, `· 扫描结果: ${impactData.scan_results_count} 条记录`) : null, impactData.related_tasks.length > 0 ? createVNode('p', {\n                style: 'margin: 4px 0; color: #ff4d4f;'\n              }, `· 相关任务: ${impactData.related_tasks.length} 个`) : null, impactData.will_cleanup_zabbix ? createVNode('p', {\n                style: 'margin: 4px 0; color: #ff4d4f;'\n              }, '· Zabbix监控数据: 将尝试清理') : null]),\n              // 警告列表\n              createVNode('div', {}, [createVNode('p', {\n                style: 'margin: 8px 0 4px 0; font-weight: bold; color: #ff4d4f;'\n              }, [createVNode(WarningOutlined, {\n                style: 'margin-right: 4px;'\n              }), '警告信息:']), createVNode('ul', {\n                style: 'margin: 0; padding-left: 16px; max-height: 200px; overflow-y: auto;'\n              }, warningItems)]), createVNode('p', {\n                style: 'margin-top: 12px; font-weight: bold; color: #ff4d4f; text-align: center;'\n              }, '此操作不可恢复！')]);\n              resolve(content);\n            });\n\n            // 显示确认对话框\n            await new Promise((resolve, reject) => {\n              const modal = Modal.confirm({\n                title: impactData.is_auto_discovered ? '删除自动发现的IP地址及相关数据' : '删除IP地址及相关数据',\n                content: confirmContent,\n                width: 600,\n                okText: '确认删除',\n                okType: 'danger',\n                cancelText: '取消',\n                icon: createVNode(ExclamationCircleOutlined, {\n                  style: 'color: #ff4d4f;'\n                }),\n                onOk: () => resolve(true),\n                onCancel: () => reject(new Error('User cancelled'))\n              });\n            });\n          } else {\n            loadingMessage();\n            throw new Error('获取删除影响信息失败');\n          }\n        } catch (impactError) {\n          loadingMessage();\n          console.warn('检查删除影响失败，使用默认确认对话框:', impactError);\n\n          // 如果检查影响失败，使用简单的确认对话框\n          await new Promise((resolve, reject) => {\n            const modal = Modal.confirm({\n              title: '确认删除IP',\n              content: `确定要删除IP地址 \"${record.ipAddress || record.ip_address}\" 吗？\\n\\n警告：此操作将删除IP记录及所有相关数据（包括扫描结果、Zabbix监控数据等），该操作不可恢复！`,\n              okText: '确认删除',\n              okType: 'danger',\n              cancelText: '取消',\n              onOk: () => resolve(true),\n              onCancel: () => reject(new Error('User cancelled'))\n            });\n          });\n        }\n\n        // 执行删除操作\n        const deleteMessage = message.loading('正在删除IP及相关数据...', 0);\n        try {\n          const response = await ipAPI.deleteIP(record.id);\n          deleteMessage();\n          if (response.data && response.data.code === 200) {\n            const cleanupData = response.data.data;\n\n            // 构建成功消息\n            let successMessage = `IP地址 \"${cleanupData.ip_address}\" 已成功删除`;\n            const cleanupDetails = [];\n            if (cleanupData.scan_results_deleted > 0) {\n              cleanupDetails.push(`扫描结果: ${cleanupData.scan_results_deleted}条`);\n            }\n            if (cleanupData.zabbix_cleanup && cleanupData.zabbix_cleanup.success) {\n              if (cleanupData.zabbix_cleanup.hosts && cleanupData.zabbix_cleanup.hosts.length > 0) {\n                const deletedCount = cleanupData.zabbix_cleanup.hosts.filter(h => h.deleted).length;\n                cleanupDetails.push(`Zabbix主机: ${deletedCount}个`);\n              }\n            }\n            if (cleanupDetails.length > 0) {\n              successMessage += `\\n同时清理了：${cleanupDetails.join('、')}`;\n            }\n            message.success({\n              content: successMessage,\n              duration: 6\n            });\n\n            // 直接从列表中移除已删除的IP，而不是刷新整个列表\n            ipData.value = ipData.value.filter(ip => ip.id !== record.id);\n            pagination.total = ipData.value.length;\n          } else {\n            message.error('删除IP地址失败');\n          }\n        } catch (deleteError) {\n          deleteMessage();\n          throw deleteError;\n        }\n      } catch (error) {\n        if (error.message !== 'User cancelled') {\n          console.error('删除IP地址失败:', error);\n          message.error(`删除IP地址失败: ${error.response?.data?.message || error.message}`);\n        }\n      }\n    };\n    const handlePing = async record => {\n      record.pinging = true;\n      try {\n        // 调用后端ping API\n        const response = await ipAPI.pingIP(record.id);\n        if (response.data && response.data.code === 200) {\n          const pingData = response.data.data;\n          // 更新记录的ping状态\n          record.ping_status = pingData.status;\n          record.pingStatus = pingData.status; // 兼容字段\n          record.last_seen = pingData.last_seen;\n          record.lastSeen = pingData.last_seen; // 兼容字段\n\n          const statusText = pingData.is_online ? '在线' : '离线';\n          const responseTimeText = pingData.response_time ? ` (${pingData.response_time}ms)` : '';\n          message.success(`Ping ${record.ip_address || record.ipAddress} 完成: ${statusText}${responseTimeText}`, 1);\n        } else {\n          message.error(`Ping失败: ${response.data?.message || '未知错误'}`);\n        }\n      } catch (error) {\n        console.error('Ping测试失败:', error);\n        let errorMessage = 'Ping失败';\n        if (error.response && error.response.data) {\n          errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\n        } else if (error.message) {\n          errorMessage += `: ${error.message}`;\n        }\n        message.error(errorMessage);\n      } finally {\n        record.pinging = false;\n      }\n    };\n    const handleExport = () => {\n      message.info('导出功能开发中...');\n    };\n    const handleListManagement = () => {\n      message.info('列表管理功能开发中...');\n    };\n    const handleScan = () => {\n      // 重置扫描表单并设置当前页面可能的IP范围\n      resetScanForm();\n\n      // 如果有搜索关键词，尝试智能设置IP范围\n      if (searchKeyword.value) {\n        const keyword = searchKeyword.value.trim();\n        // 如果搜索关键词是IP格式，自动设置为扫描范围\n        const ipPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\n        if (ipPattern.test(keyword)) {\n          // 提取网段\n          const ipParts = keyword.split('.');\n          const networkBase = `${ipParts[0]}.${ipParts[1]}.${ipParts[2]}.0/24`;\n          scanFormData.ipRanges = networkBase;\n        }\n      }\n      scanModalVisible.value = true;\n    };\n    const handleScanConfirm = async () => {\n      try {\n        await scanFormRef.value.validate();\n\n        // 处理IP范围数据\n        const ipRanges = scanFormData.ipRanges.split('\\n').map(range => range.trim()).filter(range => range.length > 0);\n\n        // 构建Python扫描配置数据，发送给后端\n        const scanConfig = {\n          ipRanges: ipRanges,\n          checkType: scanFormData.checkType,\n          ports: scanFormData.ports,\n          key: scanFormData.key,\n          // Python扫描器参数\n          maxConcurrent: scanFormData.maxConcurrent || 100,\n          timeout: scanFormData.timeout || 3.0,\n          pingTimeout: scanFormData.pingTimeout || 1.0,\n          // 保留一些参数用于服务检测\n          snmpCommunity: scanFormData.snmpCommunity,\n          snmpv3Config: scanFormData.snmpv3Config\n        };\n        console.log('发送Python扫描配置:', scanConfig);\n        try {\n          // 调用后端Python扫描API\n          const response = await ipAPI.createScanTask(scanConfig);\n          if (response.data && response.data.code === 200) {\n            const taskData = response.data.data;\n\n            // 显示成功消息\n            const scanEngineText = taskData.scanEngine === 'python' ? 'Python原生扫描' : '扫描';\n            message.success({\n              content: `${scanEngineText}任务创建成功！\\n扫描范围: ${ipRanges.join(', ')}\\n检查类型: ${getCheckTypeName(scanFormData.checkType)}\\n任务ID: ${taskData.taskId}\\n并发数: ${scanConfig.maxConcurrent}\\n超时配置: 连接${scanConfig.timeout}s, Ping${scanConfig.pingTimeout}s\\n已启动后台异步处理，系统将自动扫描网络并保存结果到数据库...`,\n              duration: 8\n            });\n\n            // 刷新IP列表\n            await loadIPList();\n\n            // 自动打开任务查询面板查看进度\n            setTimeout(() => {\n              handleScanTaskQuery();\n            }, 1000);\n          } else {\n            throw new Error(response.data?.message || 'Python扫描任务创建失败');\n          }\n        } catch (apiError) {\n          console.error('后端Python扫描API调用失败:', apiError);\n          message.error(`Python扫描任务创建失败: ${apiError.response?.data?.message || apiError.message}`);\n          return;\n        }\n        scanModalVisible.value = false;\n        resetScanForm();\n      } catch (error) {\n        console.error('扫描配置验证失败:', error);\n        message.error('请检查扫描配置是否正确');\n      }\n    };\n\n    // 获取检查类型名称\n    const getCheckTypeName = type => {\n      const typeNames = {\n        0: 'SSH',\n        1: 'LDAP',\n        2: 'SMTP',\n        3: 'FTP',\n        4: 'HTTP',\n        5: 'POP',\n        6: 'NNTP',\n        7: 'IMAP',\n        8: 'TCP',\n        9: 'Zabbix agent',\n        10: 'SNMPv1',\n        11: 'SNMPv2',\n        12: 'ICMP ping',\n        13: 'SNMPv3',\n        14: 'HTTPS',\n        15: 'Telnet'\n      };\n      return typeNames[type] || '未知类型';\n    };\n    const handleScanCancel = () => {\n      scanModalVisible.value = false;\n      resetScanForm();\n    };\n    const handleTypeChange = value => {\n      // 根据类型设置默认端口\n      const defaultPorts = {\n        0: '22',\n        // SSH\n        1: '389',\n        // LDAP\n        2: '25',\n        // SMTP\n        3: '21',\n        // FTP\n        4: '80',\n        // HTTP\n        5: '110',\n        // POP\n        6: '119',\n        // NNTP\n        7: '143',\n        // IMAP\n        8: '0',\n        // TCP\n        9: '10050',\n        // Zabbix agent\n        10: '161',\n        // SNMPv1\n        11: '161',\n        // SNMPv2\n        12: '0',\n        // ICMP (不需要端口)\n        13: '161',\n        // SNMPv3\n        14: '443',\n        // HTTPS\n        15: '23' // Telnet\n      };\n      scanFormData.ports = defaultPorts[value] || '0';\n\n      // 清空相关字段\n      scanFormData.key = '';\n      if (value !== 10 && value !== 11) {\n        scanFormData.snmpCommunity = 'public';\n      }\n      if (value !== 13) {\n        // 清空SNMPv3配置\n        scanFormData.snmpv3Config.securityLevel = '0';\n        scanFormData.snmpv3Config.securityName = '';\n        scanFormData.snmpv3Config.contextName = '';\n        scanFormData.snmpv3Config.authProtocol = 0;\n        scanFormData.snmpv3Config.authPassphrase = '';\n        scanFormData.snmpv3Config.privProtocol = 0;\n        scanFormData.snmpv3Config.privPassphrase = '';\n      }\n    };\n    const handleSecurityLevelChange = value => {\n      // 清空认证和隐私配置\n      if (value === '0') {\n        scanFormData.snmpv3Config.authProtocol = 0;\n        scanFormData.snmpv3Config.authPassphrase = '';\n        scanFormData.snmpv3Config.privProtocol = 0;\n        scanFormData.snmpv3Config.privPassphrase = '';\n      } else if (value === '1') {\n        scanFormData.snmpv3Config.privProtocol = 0;\n        scanFormData.snmpv3Config.privPassphrase = '';\n      }\n    };\n    const resetScanForm = () => {\n      Object.assign(scanFormData, {\n        ipRanges: '192.168.1.0/24',\n        checkType: 12,\n        ports: '0',\n        key: '',\n        // Python扫描器参数\n        maxConcurrent: 100,\n        timeout: 3.0,\n        pingTimeout: 1.0,\n        // 保留参数\n        snmpCommunity: 'public',\n        snmpv3Config: {\n          securityLevel: '0',\n          securityName: '',\n          contextName: '',\n          authProtocol: 0,\n          authPassphrase: '',\n          privProtocol: 0,\n          privPassphrase: ''\n        },\n        uniqueCheck: 0,\n        hostSource: 1,\n        nameSource: 0\n      });\n      scanFormRef.value?.resetFields();\n    };\n\n    // 扫描任务查询相关函数\n    const handleScanTaskQuery = () => {\n      scanTaskModalVisible.value = true;\n      loadScanTasks();\n\n      // 启动异步状态监控\n      startAsyncStatusMonitoring();\n    };\n\n    // 异步状态监控\n    let statusCheckInterval = null;\n\n    // 组件初始化状态标记\n    let isComponentInitialized = false;\n    let isMonitoringActive = false;\n    const startAsyncStatusMonitoring = () => {\n      // 防止重复启动\n      if (isMonitoringActive) {\n        console.log('异步监控已在运行，跳过重复启动');\n        return;\n      }\n\n      // 清理旧的间隔器\n      if (statusCheckInterval) {\n        clearInterval(statusCheckInterval);\n        statusCheckInterval = null;\n      }\n      console.log('启动异步状态监控...');\n      isMonitoringActive = true;\n\n      // 每5秒检查一次任务状态（减少频率）\n      statusCheckInterval = setInterval(async () => {\n        if (scanTaskModalVisible.value && isMonitoringActive) {\n          await checkRunningTasksStatus();\n        } else {\n          // 弹窗关闭时停止监控\n          stopAsyncStatusMonitoring();\n        }\n      }, 5000); // 从3秒改为5秒\n    };\n    const stopAsyncStatusMonitoring = () => {\n      console.log('停止异步状态监控...');\n\n      // 标记监控已停止\n      isMonitoringActive = false;\n\n      // 清理主定时器\n      if (statusCheckInterval) {\n        clearInterval(statusCheckInterval);\n        statusCheckInterval = null;\n      }\n\n      // 清理可能存在的其他定时器引用\n      [statusCheckInterval].forEach(timer => {\n        if (timer) {\n          clearInterval(timer);\n        }\n      });\n\n      // 等待一个微任务周期，确保正在运行的检查完成\n      setTimeout(() => {\n        console.log('异步状态监控已停止');\n      }, 100);\n    };\n    const checkRunningTasksStatus = async () => {\n      try {\n        // 找到所有运行中的任务\n        const runningTasks = scanTasks.value.filter(task => task.status === 'running' || task.status === 'pending');\n\n        // 如果没有运行中的任务，停止监控\n        if (runningTasks.length === 0) {\n          stopAsyncStatusMonitoring();\n          return;\n        }\n        for (const task of runningTasks) {\n          try {\n            const response = await ipAPI.getAsyncTaskStatus(task.id);\n            if (response.data && response.data.code === 200) {\n              const statusData = response.data.data;\n\n              // 只有当状态发生变化时才更新\n              const taskIndex = scanTasks.value.findIndex(t => t.id === task.id);\n              if (taskIndex !== -1) {\n                const currentTask = scanTasks.value[taskIndex];\n                const hasStatusChanged = currentTask.status !== statusData.status;\n                const hasProgressChanged = currentTask.progress !== statusData.progress;\n                if (hasStatusChanged || hasProgressChanged) {\n                  // 使用 Vue 的响应式更新，减少 DOM 操作\n                  Object.assign(scanTasks.value[taskIndex], {\n                    status: statusData.status,\n                    progress: statusData.progress,\n                    result_data: statusData.result_data,\n                    error_message: statusData.error_message\n                  });\n\n                  // 如果任务完成，显示通知\n                  if (statusData.status === 'completed' && hasStatusChanged) {\n                    const resultData = statusData.result_data || {};\n                    message.success({\n                      content: `任务 ${task.id} 已完成！\\n发现主机: ${resultData.discovered_hosts || 0} 个\\n新增IP: ${resultData.saved_count || 0} 个\\n更新IP: ${resultData.updated_count || 0} 个`,\n                      duration: 5\n                    });\n\n                    // 延迟刷新IP列表，避免并发更新\n                    setTimeout(() => {\n                      loadIPList();\n                    }, 1000);\n                  }\n\n                  // 如果任务失败，显示错误\n                  if (statusData.status === 'failed' && hasStatusChanged) {\n                    message.error({\n                      content: `任务 ${task.id} 失败：${statusData.error_message || '未知错误'}`,\n                      duration: 5\n                    });\n                  }\n                }\n              }\n            }\n          } catch (error) {\n            // 静默处理单个任务检查失败\n            console.debug(`检查任务 ${task.id} 状态失败:`, error.message);\n          }\n        }\n      } catch (error) {\n        console.debug('检查运行任务状态失败:', error.message);\n      }\n    };\n    const loadScanTasks = async () => {\n      taskLoading.value = true;\n      try {\n        const params = {\n          page: taskPagination.current,\n          page_size: taskPagination.pageSize\n        };\n\n        // 添加查询条件\n        if (taskStatusFilter.value && taskStatusFilter.value !== '') {\n          params.status = taskStatusFilter.value;\n        }\n        if (taskNameFilter.value && taskNameFilter.value !== '') {\n          params.search = taskNameFilter.value;\n        }\n        if (taskDateRange.value && Array.isArray(taskDateRange.value) && taskDateRange.value.length === 2) {\n          params.created_after = taskDateRange.value[0].toISOString();\n          params.created_before = taskDateRange.value[1].toISOString();\n        }\n        console.log('调用扫描任务API，参数:', params);\n\n        // 调用后端API获取扫描任务列表\n        const response = await ipAPI.getScanTasks(params);\n        console.log('API响应:', response);\n        if (response && response.data) {\n          // 检查是否是统一响应格式（包含code字段）\n          if (response.data.code !== undefined) {\n            // 统一响应格式\n            if (response.data.code === 200) {\n              const data = response.data.data;\n              // 过滤掉已取消的任务\n              let tasks = data.results || [];\n              tasks = tasks.filter(task => task.status !== 'cancelled');\n              scanTasks.value = tasks;\n              taskPagination.total = tasks.length; // 使用过滤后的数量\n              console.log('成功获取扫描任务（统一格式，已过滤取消任务）:', scanTasks.value);\n            } else {\n              console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\n              message.error(`获取扫描任务列表失败: ${response.data.message}`);\n              scanTasks.value = [];\n              taskPagination.total = 0;\n            }\n          } else {\n            // DRF标准响应格式（直接包含count、results字段）\n            console.log('检测到DRF标准响应格式');\n            // 过滤掉已取消的任务\n            let tasks = response.data.results || [];\n            tasks = tasks.filter(task => task.status !== 'cancelled');\n            scanTasks.value = tasks;\n            taskPagination.total = tasks.length; // 使用过滤后的数量\n            console.log('成功获取扫描任务（DRF格式，已过滤取消任务）:', scanTasks.value);\n            message.success('获取扫描任务列表成功', 1);\n          }\n        } else {\n          console.error('无效的API响应:', response);\n          message.error('获取扫描任务列表失败: 无效的响应数据');\n          scanTasks.value = [];\n          taskPagination.total = 0;\n        }\n      } catch (error) {\n        console.error('加载扫描任务失败:', error);\n        console.error('错误详情:', {\n          message: error.message,\n          response: error.response,\n          request: error.request\n        });\n        let errorMessage = '加载扫描任务失败';\n        if (error.response) {\n          // 服务器响应错误\n          errorMessage += `: HTTP ${error.response.status}`;\n          if (error.response.data && error.response.data.message) {\n            errorMessage += ` - ${error.response.data.message}`;\n          }\n        } else if (error.request) {\n          // 请求发送但无响应\n          errorMessage += ': 网络连接失败或服务器无响应';\n        } else {\n          // 请求设置错误\n          errorMessage += `: ${error.message}`;\n        }\n        message.error(errorMessage);\n        scanTasks.value = [];\n        taskPagination.total = 0;\n      } finally {\n        taskLoading.value = false;\n      }\n    };\n    const handleSearchTasks = () => {\n      taskPagination.current = 1;\n      loadScanTasks();\n    };\n    const handleRefreshTasks = () => {\n      taskStatusFilter.value = '';\n      taskDateRange.value = [];\n      taskNameFilter.value = '';\n      taskPagination.current = 1;\n      loadScanTasks();\n    };\n    const handleTaskTableChange = paginationInfo => {\n      taskPagination.current = paginationInfo.current;\n      taskPagination.pageSize = paginationInfo.pageSize;\n      loadScanTasks();\n    };\n    const handleViewTaskDetail = record => {\n      selectedTask.value = record;\n      taskDetailModalVisible.value = true;\n    };\n    const handleViewTaskResults = async record => {\n      selectedTask.value = record;\n      await loadTaskResults(record.id);\n      taskResultModalVisible.value = true;\n    };\n    const handleCancelTask = async record => {\n      try {\n        // 如果任务正在运行，先停止异步处理\n        if (record.status === 'running' || record.status === 'pending') {\n          try {\n            const stopResponse = await ipAPI.stopAsyncTask(record.id);\n            if (stopResponse.data && stopResponse.data.code === 200) {\n              message.success('异步任务已停止', 1);\n            }\n          } catch (stopError) {\n            console.warn('停止异步任务失败:', stopError);\n          }\n        }\n\n        // 取消任务\n        const response = await ipAPI.cancelScanTask(record.id);\n        if (response.data && response.data.code === 200) {\n          message.success(`任务 ${record.task_name || record.id} 已取消`, 1);\n          // 直接从列表中移除已取消的任务，而不是刷新整个列表\n          scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\n          taskPagination.total = scanTasks.value.length;\n        } else {\n          message.error('取消任务失败');\n        }\n      } catch (error) {\n        console.error('取消任务失败:', error);\n        message.error(`取消任务失败: ${error.response?.data?.message || error.message}`);\n      }\n    };\n    const handleDeleteTask = async record => {\n      try {\n        // 显示确认对话框\n        await new Promise((resolve, reject) => {\n          const modal = Modal.confirm({\n            title: '确认删除任务',\n            content: `确定要删除任务 \"${record.id}\" 吗？该操作不可恢复！`,\n            okText: '确认删除',\n            okType: 'danger',\n            cancelText: '取消',\n            onOk: () => resolve(true),\n            onCancel: () => reject(new Error('User cancelled'))\n          });\n        });\n\n        // 调用删除API\n        const response = await ipAPI.deleteScanTask(record.id);\n        if (response.data && response.data.code === 200) {\n          message.success(`任务 \"${record.id}\" 已成功删除`, 1);\n\n          // 直接从列表中移除已删除的任务，而不是刷新整个列表\n          scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\n          taskPagination.total = scanTasks.value.length;\n        } else {\n          message.error('删除任务失败');\n        }\n      } catch (error) {\n        if (error.message !== 'User cancelled') {\n          console.error('删除任务失败:', error);\n          message.error(`删除任务失败: ${error.response?.data?.message || error.message}`);\n        }\n      }\n    };\n    const loadTaskResults = async taskId => {\n      resultLoading.value = true;\n      try {\n        const response = await ipAPI.getScanTaskResults(taskId);\n        if (response.data && response.data.code === 200) {\n          taskResults.value = response.data.data || [];\n        } else {\n          message.error('获取扫描结果失败');\n          taskResults.value = [];\n        }\n      } catch (error) {\n        console.error('加载扫描结果失败:', error);\n        message.error(`加载扫描结果失败: ${error.response?.data?.message || error.message}`);\n        taskResults.value = [];\n      } finally {\n        resultLoading.value = false;\n      }\n    };\n\n    // 任务状态相关工具函数\n    const getTaskStatusColor = status => {\n      const colorMap = {\n        'pending': 'default',\n        'running': 'processing',\n        'completed': 'success',\n        'failed': 'error',\n        'cancelled': 'warning'\n      };\n      return colorMap[status] || 'default';\n    };\n    const getTaskStatusText = status => {\n      const textMap = {\n        'pending': '等待中',\n        'running': '运行中',\n        'completed': '已完成',\n        'failed': '失败',\n        'cancelled': '已取消'\n      };\n      return textMap[status] || status;\n    };\n\n    // 判断是否为长时间运行的任务\n    const isLongRunningTask = task => {\n      if (task.status !== 'running') {\n        return false;\n      }\n\n      // 检查任务的运行时间，如果超过180秒（5分钟）则认为是长时间运行\n      if (task.started_at) {\n        const startTime = new Date(task.started_at);\n        const currentTime = new Date();\n        const diffInSeconds = (currentTime - startTime) / 1000;\n        return diffInSeconds > 180; // 3分钟\n      }\n\n      // 根据进度判断：如果进度大于30%但仍在运行，可能是长时间任务\n      return task.progress > 30;\n    };\n\n    // 获取取消按钮的文本\n    const getCancelButtonText = record => {\n      if (record.status === 'running' && isLongRunningTask(record)) {\n        return '停止';\n      }\n      return '取消';\n    };\n\n    // 获取取消按钮的提示信息\n    const getCancelButtonTitle = record => {\n      if (record.status === 'completed') {\n        return '任务已完成，无法取消';\n      }\n      if (record.status === 'cancelled') {\n        return '任务已取消';\n      }\n      if (record.status === 'failed') {\n        return '任务已失败，无法取消';\n      }\n      if (record.status === 'running') {\n        if (isLongRunningTask(record)) {\n          return '停止正在持续运行的任务。任务将会立即停止，不再检查新的主机发现';\n        }\n        return '取消正在运行的任务';\n      }\n      if (record.status === 'pending') {\n        return '取消等待中的任务';\n      }\n      return '取消任务';\n    };\n\n    // 获取删除按钮的提示信息\n    const getDeleteButtonTitle = record => {\n      if (record.status === 'running') {\n        return '任务正在运行中，无法删除';\n      }\n      if (record.status === 'pending') {\n        return '任务正在等待处理，无法删除';\n      }\n      return `删除任务 ${record.id} 的记录（不可恢复）`;\n    };\n    const handleRefresh = () => {\n      loadIPList();\n      message.success('数据已刷新', 1);\n    };\n    const handleSave = async () => {\n      try {\n        await formRef.value.validate();\n\n        // 转换字段名：前端驼峰命名转后端下划线命名\n        const submitData = {\n          ip_address: formData.ipAddress,\n          hostname: formData.hostname,\n          status: formData.status,\n          type: formData.type,\n          mac_address: formData.macAddress,\n          device: formData.device,\n          subnet: formData.subnet,\n          description: formData.description\n        };\n        if (editingIP.value) {\n          // 编辑模式\n          await ipAPI.updateIP(editingIP.value.id, submitData);\n          message.success('IP信息更新成功', 1);\n        } else {\n          // 新增模式\n          await ipAPI.createIP(submitData);\n          message.success('IP添加成功', 1);\n        }\n        editModalVisible.value = false;\n        resetForm();\n        await loadIPList();\n      } catch (error) {\n        console.error('保存IP失败:', error);\n        message.error(`保存失败: ${error.response?.data?.message || error.message}`);\n      }\n    };\n    const handleCancel = () => {\n      editModalVisible.value = false;\n      resetForm();\n    };\n    const resetForm = () => {\n      Object.assign(formData, {\n        ipAddress: '',\n        hostname: '',\n        status: 'available',\n        type: 'static',\n        macAddress: '',\n        device: '',\n        subnet: '',\n        description: ''\n      });\n      formRef.value?.resetFields();\n    };\n\n    // 组件挂载时初始化数据\n    onMounted(() => {\n      // 防止重复初始化\n      if (isComponentInitialized) {\n        console.log('IP列表组件已初始化，跳过重复初始化');\n        return;\n      }\n      console.log('IP列表组件挂载，开始加载IP数据...');\n      isComponentInitialized = true;\n\n      // 从 URL 参数中读取分页设置\n      const urlParams = new URLSearchParams(window.location.search);\n      const pageParam = urlParams.get('page');\n      const pageSizeParam = urlParams.get('page_size');\n      if (pageParam && !isNaN(parseInt(pageParam))) {\n        pagination.current = parseInt(pageParam);\n        console.log('从 URL 读取到 page 参数:', pagination.current);\n      }\n      if (pageSizeParam && !isNaN(parseInt(pageSizeParam))) {\n        const requestedPageSize = parseInt(pageSizeParam);\n        // 检查是否在允许的选项中\n        const allowedSizes = [10, 20, 50, 100];\n        if (allowedSizes.includes(requestedPageSize)) {\n          pagination.pageSize = requestedPageSize;\n          console.log('从 URL 读取到 page_size 参数:', pagination.pageSize);\n        } else {\n          console.warn(`URL 中的 page_size=${requestedPageSize} 不在允许范围内，使用默认值 ${pagination.pageSize}`);\n        }\n      }\n\n      // 全局抑制 ResizeObserver 错误\n      const originalError = console.error;\n      console.error = function (...args) {\n        if (args[0] && args[0].toString().includes('ResizeObserver loop completed')) {\n          return; // 忽略 ResizeObserver 错误\n        }\n        originalError.apply(console, args);\n      };\n\n      // 使用现有的错误抑制函数\n      suppressResizeObserverError();\n\n      // 延迟加载数据，避免DOM渲染冲突\n      nextTick(() => {\n        loadIPList();\n      });\n    });\n\n    // 组件即将卸载时的预清理\n    onBeforeUnmount(() => {\n      console.log('IP列表组件即将卸载，进行预清理...');\n\n      // 立即停止所有监控活动\n      stopAsyncStatusMonitoring();\n\n      // 关闭所有弹窗，避免残留的DOM元素\n      scanTaskModalVisible.value = false;\n      taskDetailModalVisible.value = false;\n      taskResultModalVisible.value = false;\n      editModalVisible.value = false;\n      detailModalVisible.value = false;\n      scanModalVisible.value = false;\n    });\n\n    // 组件销毁时清理资源\n    onUnmounted(() => {\n      console.log('IP列表组件销毁，清理监控定时器...');\n\n      // 1. 停止异步状态监控\n      stopAsyncStatusMonitoring();\n\n      // 2. 清理所有可能的定时器\n      if (statusCheckInterval) {\n        clearInterval(statusCheckInterval);\n        statusCheckInterval = null;\n      }\n\n      // 3. 强制清理所有ResizeObserver实例\n      try {\n        // 查找页面中所有的ResizeObserver实例并断开连接\n        const tableElements = document.querySelectorAll('.modern-table, .ant-table, .ant-progress');\n        tableElements.forEach(element => {\n          // 移除可能的观察器\n          if (element._resizeObserver) {\n            element._resizeObserver.disconnect();\n            delete element._resizeObserver;\n          }\n        });\n      } catch (error) {\n        console.debug('清理ResizeObserver时出错:', error.message);\n      }\n\n      // 4. 清理组件状态\n      scanTasks.value = [];\n      ipData.value = [];\n      taskResults.value = [];\n\n      // 5. 重置初始化状态标记\n      isComponentInitialized = false;\n      isMonitoringActive = false;\n      console.log('IP列表组件资源清理完成');\n    });\n\n    // 监听扫描任务弹窗状态\n    watch(scanTaskModalVisible, (newValue, oldValue) => {\n      console.log(`扫描任务弹窗状态变化: ${oldValue} -> ${newValue}`);\n      if (!newValue) {\n        // 弹窗关闭时停止监控\n        console.log('弹窗关闭，停止异步监控');\n        stopAsyncStatusMonitoring();\n      }\n    });\n    const __returned__ = {\n      router,\n      searchKeyword,\n      ipStatus,\n      ipType,\n      ipData,\n      loading,\n      selectedRowKeys,\n      batchDeleting,\n      batchMonitoringToggling,\n      templateDrawerVisible,\n      zabbixTemplates,\n      selectedTemplateIds,\n      templateLoading,\n      templateSearchKeyword,\n      monitoringCreating,\n      selectedCategory,\n      expandedCategories,\n      setIPData,\n      activeCount,\n      availableCount,\n      onlineCount,\n      statistics,\n      needsKey,\n      isSNMPType,\n      needsAuth,\n      needsPriv,\n      getKeyPlaceholder,\n      getStatusText,\n      getTypeText,\n      formatDate,\n      detailModalVisible,\n      editModalVisible,\n      scanModalVisible,\n      scanTaskModalVisible,\n      taskDetailModalVisible,\n      taskResultModalVisible,\n      selectedIP,\n      editingIP,\n      selectedTask,\n      scanTasks,\n      taskResults,\n      taskLoading,\n      resultLoading,\n      taskStatusFilter,\n      taskDateRange,\n      taskNameFilter,\n      taskPagination,\n      formRef,\n      scanFormRef,\n      formData,\n      scanFormData,\n      rules,\n      scanRules,\n      pagination,\n      loadIPList,\n      columns,\n      resultColumns,\n      batchPingState,\n      handleBatchPing,\n      startBatchPingTest,\n      closeBatchPingModal,\n      onSelectChange,\n      onSelectAll,\n      clearSelection,\n      handleBatchDelete,\n      handleBatchToggleMonitoring,\n      handleToggleMonitoring,\n      toggleMonitoringStatus,\n      loadZabbixTemplates,\n      handleTemplateSearch,\n      handleTemplateSelect,\n      handleCreateMonitoring,\n      getTemplateKey,\n      getTemplateValue,\n      handleCloseTemplateDrawer,\n      validateTemplateData,\n      groupedTemplates,\n      getCategoryIcon,\n      categoryStats,\n      filteredTemplates,\n      safeCategoryDisplayName,\n      toggleCategoryFilter,\n      clearCategoryFilter,\n      toggleCategoryExpand,\n      isCategoryExpanded,\n      safeCategoryToString,\n      safeString,\n      getTemplateIcon,\n      handleSearch,\n      handleReset,\n      handleSearchInput,\n      handleStatusChange,\n      handleTableChange,\n      handleAdd,\n      handleView,\n      handleEdit,\n      handleDelete,\n      handlePing,\n      handleExport,\n      handleListManagement,\n      handleScan,\n      handleScanConfirm,\n      getCheckTypeName,\n      handleScanCancel,\n      handleTypeChange,\n      handleSecurityLevelChange,\n      resetScanForm,\n      handleScanTaskQuery,\n      get statusCheckInterval() {\n        return statusCheckInterval;\n      },\n      set statusCheckInterval(v) {\n        statusCheckInterval = v;\n      },\n      get isComponentInitialized() {\n        return isComponentInitialized;\n      },\n      set isComponentInitialized(v) {\n        isComponentInitialized = v;\n      },\n      get isMonitoringActive() {\n        return isMonitoringActive;\n      },\n      set isMonitoringActive(v) {\n        isMonitoringActive = v;\n      },\n      startAsyncStatusMonitoring,\n      stopAsyncStatusMonitoring,\n      checkRunningTasksStatus,\n      loadScanTasks,\n      handleSearchTasks,\n      handleRefreshTasks,\n      handleTaskTableChange,\n      handleViewTaskDetail,\n      handleViewTaskResults,\n      handleCancelTask,\n      handleDeleteTask,\n      loadTaskResults,\n      getTaskStatusColor,\n      getTaskStatusText,\n      isLongRunningTask,\n      getCancelButtonText,\n      getCancelButtonTitle,\n      getDeleteButtonTitle,\n      handleRefresh,\n      handleSave,\n      handleCancel,\n      resetForm,\n      ref,\n      reactive,\n      computed,\n      onMounted,\n      onUnmounted,\n      watch,\n      onBeforeUnmount,\n      nextTick,\n      h,\n      createVNode,\n      get useRouter() {\n        return useRouter;\n      },\n      get message() {\n        return message;\n      },\n      get Modal() {\n        return Modal;\n      },\n      get ipAPI() {\n        return ipAPI;\n      },\n      get suppressResizeObserverError() {\n        return suppressResizeObserverError;\n      },\n      Vue,\n      get antdvIcons() {\n        return antdvIcons;\n      },\n      IPTable,\n      MonitoringActions,\n      TemplateDrawer,\n      get ExclamationCircleOutlined() {\n        return ExclamationCircleOutlined;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","onUnmounted","watch","onBeforeUnmount","nextTick","h","createVNode","useRouter","message","Modal","ipAPI","suppressResizeObserverError","Vue","antdvIcons","IPTable","MonitoringActions","TemplateDrawer","ExclamationCircleOutlined","router","searchKeyword","ipStatus","ipType","ipData","loading","selectedRowKeys","batchDeleting","batchMonitoringToggling","templateDrawerVisible","zabbixTemplates","selectedTemplateIds","templateLoading","templateSearchKeyword","monitoringCreating","selectedCategory","expandedCategories","setIPData","data","Array","isArray","processedData","map","ip","is_protected","undefined","is_auto_discovered","protection_reason","editable_fields","value","console","warn","activeCount","filter","status","length","availableCount","onlineCount","ping_status","pingStatus","statistics","total","active","available","online","needsKey","type","scanFormData","checkType","isSNMPType","needsAuth","snmpv3Config","securityLevel","needsPriv","getKeyPlaceholder","getStatusText","textMap","getTypeText","typeMap","formatDate","date","Date","toLocaleString","detailModalVisible","editModalVisible","scanModalVisible","scanTaskModalVisible","taskDetailModalVisible","taskResultModalVisible","selectedIP","editingIP","selectedTask","scanTasks","taskResults","taskLoading","resultLoading","taskStatusFilter","taskDateRange","taskNameFilter","taskPagination","current","pageSize","showSizeChanger","showQuickJumper","showTotal","range","formRef","scanFormRef","formData","ipAddress","hostname","macAddress","device","subnet","description","ipRanges","ports","key","maxConcurrent","timeout","pingTimeout","snmpCommunity","securityName","contextName","authProtocol","authPassphrase","privProtocol","privPassphrase","uniqueCheck","hostSource","nameSource","rules","required","pattern","scanRules","validator","rule","Promise","reject","ranges","split","trim","trimmedRange","singleIpPattern","rangePattern","cidrPattern","simpleRangePattern","test","resolve","min","max","pagination","pageSizeOptions","loadIPList","params","page","page_size","search","log","response","getIPList","records","error","code","resultData","results","count","success","request","errorMessage","columns","title","dataIndex","width","fixed","resultColumns","ellipsis","batchPingState","isVisible","phase","stats","currentOnline","currentOffline","testResult","testing","progress","currentIP","startTime","handleBatchPing","allIpIds","id","warning","startBatchPingTest","batchPingIPs","batchData","summary","resultsMap","Map","forEach","result","set","ip_id","get","is_online","last_seen","toISOString","lastSeen","closeBatchPingModal","onSelectChange","newSelectedRowKeys","onSelectAll","selected","selectedRows","changeRows","clearSelection","handleBatchDelete","confirm","content","okText","okType","cancelText","onOk","batchDeleteIPs","deleted_count","failed_count","handleBatchToggleMonitoring","enableMonitoring","actionText","batchToggleMonitoring","success_count","includes","monitoring_enabled","handleToggleMonitoring","record","loadZabbixTemplates","toggleMonitoringStatus","monitoringToggling","toggleMonitoring","ip_address","ipId","getZabbixTemplates","templates","categories","Object","keys","groupedTemplates","category","categoryStr","String","suggestions","style","suggestion","handleTemplateSearch","handleTemplateSelect","templateIds","handleCreateMonitoring","monitoringData","template_ids","host_name","group_ids","createMonitoring","template_count","duration","getTemplateKey","template","Math","random","toString","templateid","getTemplateValue","handleCloseTemplateDrawer","validateTemplateData","safeTemplate","safeString","now","name","items_count","Number","triggers_count","macros_count","groups","group","groupid","icon","push","sort","a","b","nameA","nameB","localeCompare","sortError","getCategoryIcon","safeCategoryToString","iconMap","categoryStats","entries","categoryKey","selectedIds","t","templateId","filterError","categoryError","filteredTemplates","safeCategoryDisplayName","toggleCategoryFilter","clearCategoryFilter","toggleCategoryExpand","isCategoryExpanded","JSON","stringify","jsonError","label","jsonStr","stringResult","Error","stringProps","prop","val","prototype","call","toStringResult","toStringError","getTemplateIcon","iconName","objStr","typeError","endsWith","lowerIconName","toLowerCase","capitalizedIcon","charAt","toUpperCase","slice","finalIconName","availableIcons","processError","handleSearch","handleReset","handleSearchInput","handleStatusChange","handleTableChange","paginationInfo","filters","sorter","当前分页状态","currentUrl","URL","window","location","searchParams","history","replaceState","handleAdd","handleView","handleEdit","join","assign","handleDelete","loadingMessage","impactResponse","checkDeletionImpact","impactData","confirmContent","WarningOutlined","warningItems","deletion_warnings","unshift","zabbix_drule_id","scan_results_count","related_tasks","will_cleanup_zabbix","modal","onCancel","impactError","deleteMessage","deleteIP","cleanupData","successMessage","cleanupDetails","scan_results_deleted","zabbix_cleanup","hosts","deletedCount","deleted","deleteError","handlePing","pinging","pingIP","pingData","statusText","responseTimeText","response_time","handleExport","info","handleListManagement","handleScan","resetScanForm","keyword","ipPattern","ipParts","networkBase","handleScanConfirm","validate","scanConfig","createScanTask","taskData","scanEngineText","scanEngine","getCheckTypeName","taskId","setTimeout","handleScanTaskQuery","apiError","typeNames","handleScanCancel","handleTypeChange","defaultPorts","handleSecurityLevelChange","resetFields","loadScanTasks","startAsyncStatusMonitoring","statusCheckInterval","isComponentInitialized","isMonitoringActive","clearInterval","setInterval","checkRunningTasksStatus","stopAsyncStatusMonitoring","timer","runningTasks","task","getAsyncTaskStatus","statusData","taskIndex","findIndex","currentTask","hasStatusChanged","hasProgressChanged","result_data","error_message","discovered_hosts","saved_count","updated_count","debug","created_after","created_before","getScanTasks","tasks","handleSearchTasks","handleRefreshTasks","handleTaskTableChange","handleViewTaskDetail","handleViewTaskResults","loadTaskResults","handleCancelTask","stopResponse","stopAsyncTask","stopError","cancelScanTask","task_name","handleDeleteTask","deleteScanTask","getScanTaskResults","getTaskStatusColor","colorMap","getTaskStatusText","isLongRunningTask","started_at","currentTime","diffInSeconds","getCancelButtonText","getCancelButtonTitle","getDeleteButtonTitle","handleRefresh","handleSave","submitData","mac_address","updateIP","createIP","resetForm","handleCancel","urlParams","URLSearchParams","pageParam","pageSizeParam","isNaN","parseInt","requestedPageSize","allowedSizes","originalError","args","apply","tableElements","document","querySelectorAll","element","_resizeObserver","disconnect","newValue","oldValue"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/views/business/IPList.vue"],"sourcesContent":["<template>\r\n  <div class=\"ip-list-container\">\r\n\r\n\r\n    <!-- IP表格组件 -->\r\n    <IPTable\r\n      :dataSource=\"ipData\"\r\n      :loading=\"loading\"\r\n      :pagination=\"pagination\"\r\n      :selectedRowKeys=\"selectedRowKeys\"\r\n      :searchKeyword=\"searchKeyword\"\r\n      :ipStatus=\"ipStatus\"\r\n      :ipType=\"ipType\"\r\n      :totalCount=\"statistics.total\"\r\n      :activeCount=\"statistics.active\"\r\n      :availableCount=\"statistics.available\"\r\n      :onlineCount=\"statistics.online\"\r\n      @select-change=\"onSelectChange\"\r\n      @select-all=\"onSelectAll\"\r\n      @table-change=\"handleTableChange\"\r\n      @view=\"handleView\"\r\n      @edit=\"handleEdit\"\r\n      @delete=\"handleDelete\"\r\n      @ping=\"handlePing\"\r\n      @toggle-monitoring=\"handleToggleMonitoring\"\r\n      @batch-delete=\"handleBatchDelete\"\r\n      @batch-toggle-monitoring=\"handleBatchToggleMonitoring\"\r\n      @clear-selection=\"clearSelection\"\r\n      @add=\"handleAdd\"\r\n      @scan=\"handleScan\"\r\n      @export=\"handleExport\"\r\n      @header-batch-ping=\"handleBatchPing\"\r\n      @list-management=\"handleListManagement\"\r\n      @search=\"handleSearch\"\r\n      @reset=\"handleReset\"\r\n      @search-input=\"handleSearchInput\"\r\n      @status-change=\"handleStatusChange\"\r\n      @type-change=\"handleTypeChange\"\r\n      :batchDeleting=\"batchDeleting\"\r\n      :batchMonitoringToggling=\"batchMonitoringToggling\"\r\n    />\r\n\r\n    <!-- 监控操作组件 -->\r\n    <MonitoringActions\r\n      :selectedIP=\"selectedIP\"\r\n      :detailModalVisible=\"detailModalVisible\"\r\n      :scanModalVisible=\"scanModalVisible\"\r\n      :batchPingState=\"batchPingState\"\r\n      :taskResultModalVisible=\"taskResultModalVisible\"\r\n      :scanFormData=\"scanFormData\"\r\n      :scanRules=\"scanRules\"\r\n      :selectedTask=\"selectedTask\"\r\n      :taskResults=\"taskResults\"\r\n      :resultLoading=\"resultLoading\"\r\n      :resultColumns=\"resultColumns\"\r\n      @close-detail-modal=\"detailModalVisible = false\"\r\n      @close-scan-modal=\"handleScanCancel\"\r\n      @scan-confirm=\"handleScanConfirm\"\r\n      @close-batch-ping=\"closeBatchPingModal\"\r\n      @start-batch-ping=\"startBatchPingTest\"\r\n      @close-task-result=\"taskResultModalVisible = false\"\r\n    />\r\n\r\n    <!-- 模板选择抽屉组件 -->\r\n    <TemplateDrawer \r\n      v-model:visible=\"templateDrawerVisible\"\r\n      v-model:selectedTemplateIds=\"selectedTemplateIds\"\r\n      :loading=\"templateLoading\"\r\n      :selectedIP=\"selectedIP\"\r\n      @confirm=\"handleCreateMonitoring\"\r\n      @close=\"handleCloseTemplateDrawer\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted, onUnmounted, watch, onBeforeUnmount, nextTick, h, createVNode } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { message, Modal } from 'ant-design-vue';\r\nimport { ipAPI } from '@/api';\r\nimport { suppressResizeObserverError } from '@/utils/errorHandler';\r\nimport * as Vue from 'vue';\r\nimport * as antdvIcons from '@ant-design/icons-vue';\r\n\r\n// 导入拆分的组件\r\nimport IPTable from '@/components/business/IPTable.vue';\r\nimport MonitoringActions from '@/components/business/MonitoringActions.vue';\r\nimport TemplateDrawer from '@/components/business/TemplateDrawer.vue';\r\nimport { \r\n  ExclamationCircleOutlined,\r\n} from '@ant-design/icons-vue';\r\n\r\n// 路由实例\r\nconst router = useRouter();\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst ipStatus = ref('');\r\nconst ipType = ref('');\r\n\r\n// IP数据状态 - 确保始终是数组\r\nconst ipData = ref([]);\r\nconst loading = ref(false);\r\n\r\n// 批量操作相关状态\r\nconst selectedRowKeys = ref([]);\r\nconst batchDeleting = ref(false);\r\nconst batchMonitoringToggling = ref(false);\r\n\r\n// 模板选择抽屉相关状态\r\nconst templateDrawerVisible = ref(false);\r\nconst zabbixTemplates = ref([]);\r\nconst selectedTemplateIds = ref([]);\r\nconst templateLoading = ref(false);\r\nconst templateSearchKeyword = ref('');\r\nconst monitoringCreating = ref(false);\r\nconst selectedCategory = ref(''); // 当前选中的分类\r\nconst expandedCategories = ref({}); // 展开的分类\r\n\r\n// 防御性检查，确保ipData始终是数组\r\nconst setIPData = (data) => {\r\n  if (Array.isArray(data)) {\r\n    // 为每个IP记录设置保护状态信息\r\n    const processedData = data.map(ip => {\r\n      // 确保保护状态字段存在\r\n      if (ip.is_protected === undefined) {\r\n        ip.is_protected = ip.is_auto_discovered || false;\r\n      }\r\n      \r\n      // 设置保护原因\r\n      if (!ip.protection_reason && ip.is_auto_discovered) {\r\n        ip.protection_reason = '自动发现的IP地址';\r\n      }\r\n      \r\n      // 设置可编辑字段列表\r\n      if (ip.is_auto_discovered) {\r\n        ip.editable_fields = ['description', 'status'];\r\n      } else {\r\n        ip.editable_fields = 'all';\r\n      }\r\n      \r\n      return ip;\r\n    });\r\n    \r\n    ipData.value = processedData;\r\n  } else {\r\n    console.warn('尝试设置非数组数据到ipData:', data);\r\n    ipData.value = [];\r\n  }\r\n};\r\n\r\n// 统计计算属性 - 添加防御性检查\r\nconst activeCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.status === 'active').length;\r\n});\r\n\r\nconst availableCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.status === 'available').length;\r\n});\r\n\r\nconst onlineCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\r\n});\r\n\r\n// 统计对象\r\nconst statistics = computed(() => ({\r\n  total: ipData.value.length || 0,\r\n  active: activeCount.value,\r\n  available: availableCount.value,\r\n  online: onlineCount.value\r\n}));\r\n\r\n// 计算属性 - 扫描相关\r\nconst needsKey = computed(() => {\r\n  const type = scanFormData.checkType;\r\n  // Zabbix agent, SNMPv1, SNMPv2, SNMPv3 需要key\r\n  return type === 9 || type === 10 || type === 11 || type === 13;\r\n});\r\n\r\nconst isSNMPType = computed(() => {\r\n  const type = scanFormData.checkType;\r\n  return type === 10 || type === 11 || type === 13;\r\n});\r\n\r\nconst needsAuth = computed(() => {\r\n  return scanFormData.checkType === 13 && (scanFormData.snmpv3Config.securityLevel === '1' || scanFormData.snmpv3Config.securityLevel === '2');\r\n});\r\n\r\nconst needsPriv = computed(() => {\r\n  return scanFormData.checkType === 13 && scanFormData.snmpv3Config.securityLevel === '2';\r\n});\r\n\r\nconst getKeyPlaceholder = () => {\r\n  const type = scanFormData.checkType;\r\n  if (type === 9) {\r\n    return '例如：system.uname';\r\n  } else if (type === 10 || type === 11 || type === 13) {\r\n    return '例如：1.3.6.1.2.1.1.1.0';\r\n  }\r\n  return '请输入检查键值';\r\n};\r\n\r\n\r\n\r\n// 工具函数\r\nconst getStatusText = (status) => {\r\n  const textMap = {\r\n    'active': '在用',\r\n    'available': '可用',\r\n    'reserved': '预留',\r\n    'conflict': '冲突'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const typeMap = {\r\n    'static': '静态IP',\r\n    'dynamic': '动态IP',\r\n    'gateway': '网关',\r\n    'dns': 'DNS服务器'\r\n  };\r\n  return typeMap[type] || type;\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  if (!date) return null;\r\n  return new Date(date).toLocaleString('zh-CN');\r\n};\r\n\r\n// 弹窗状态\r\nconst detailModalVisible = ref(false);\r\nconst editModalVisible = ref(false);\r\nconst scanModalVisible = ref(false);\r\nconst scanTaskModalVisible = ref(false);\r\nconst taskDetailModalVisible = ref(false);\r\nconst taskResultModalVisible = ref(false);\r\nconst selectedIP = ref(null);\r\nconst editingIP = ref(null);\r\nconst selectedTask = ref(null);\r\n\r\n// 扫描任务查询相关\r\nconst scanTasks = ref([]);\r\nconst taskResults = ref([]);\r\nconst taskLoading = ref(false);\r\nconst resultLoading = ref(false);\r\nconst taskStatusFilter = ref('');\r\nconst taskDateRange = ref([]);\r\nconst taskNameFilter = ref('');\r\nconst taskPagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 表单相关\r\nconst formRef = ref();\r\nconst scanFormRef = ref();\r\nconst formData = reactive({\r\n  ipAddress: '',\r\n  hostname: '',\r\n  status: 'available',\r\n  type: 'static',\r\n  macAddress: '',\r\n  device: '',\r\n  subnet: '',\r\n  description: ''\r\n});\r\n\r\n// 扫描配置数据\r\nconst scanFormData = reactive({\r\n  ipRanges: '192.168.1.0/24', // IP范围\r\n  checkType: 12, // 默认ICMP ping\r\n  ports: '0',\r\n  key: '',\r\n  // Python扫描器新参数\r\n  maxConcurrent: 100, // 最大并发数\r\n  timeout: 3.0, // 连接超时时间\r\n  pingTimeout: 1.0, // Ping超时时间\r\n  // 保留的Zabbix相关参数(仅用于兼容性)\r\n  snmpCommunity: 'public',\r\n  snmpv3Config: {\r\n    securityLevel: '0',\r\n    securityName: '',\r\n    contextName: '',\r\n    authProtocol: 0,\r\n    authPassphrase: '',\r\n    privProtocol: 0,\r\n    privPassphrase: ''\r\n  },\r\n  uniqueCheck: 0,\r\n  hostSource: 1,\r\n  nameSource: 0\r\n});\r\n\r\n\r\n\r\n// 表单验证规则\r\nconst rules = {\r\n  ipAddress: [\r\n    { required: true, message: '请输入IP地址' },\r\n    { pattern: /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/, message: '请输入有效的IP地址' }\r\n  ],\r\n  status: [{ required: true, message: '请选择IP状态' }],\r\n  type: [{ required: true, message: '请选择IP类型' }]\r\n};\r\n\r\n// 扫描配置验证规则\r\nconst scanRules = {\r\n  ipRanges: [\r\n    { required: true, message: '请输入扫描IP范围' },\r\n    { \r\n      validator: (rule, value) => {\r\n        if (!value) return Promise.reject('请输入IP范围');\r\n        \r\n        const ranges = value.split('\\n').filter(range => range.trim());\r\n        for (const range of ranges) {\r\n          const trimmedRange = range.trim();\r\n          // 验证单个IP\r\n          const singleIpPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n          // 验证IP范围\r\n          const rangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n          // 验证CIDR\r\n          const cidrPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]{1,2}$/;\r\n          // 验证简化范围格式 (192.168.1.1-100)\r\n          const simpleRangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-[0-9]{1,3}$/;\r\n          \r\n          if (!singleIpPattern.test(trimmedRange) && \r\n              !rangePattern.test(trimmedRange) && \r\n              !cidrPattern.test(trimmedRange) &&\r\n              !simpleRangePattern.test(trimmedRange)) {\r\n            return Promise.reject(`无效的IP范围格式: ${trimmedRange}`);\r\n          }\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n  ],\r\n  checkType: [{ required: true, message: '请选择检查类型' }],\r\n  maxConcurrent: [\r\n    { type: 'number', min: 1, max: 200, message: '并发数必须在1-200之间' }\r\n  ],\r\n  timeout: [\r\n    { type: 'number', min: 1, max: 30, message: '超时时间必须在1-30秒之间' }\r\n  ],\r\n  pingTimeout: [\r\n    { type: 'number', min: 0.5, max: 10, message: 'Ping超时时间必须在0.5-10秒之间' }\r\n  ]\r\n};\r\n\r\n\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n});\r\n\r\n// 加载IP列表数据\r\nconst loadIPList = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const params = {\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize  // 使用Django标准的page_size参数名\r\n    };\r\n    \r\n    // 添加搜索条件\r\n    if (searchKeyword.value && searchKeyword.value.trim()) {\r\n      params.search = searchKeyword.value.trim();\r\n    }\r\n    if (ipStatus.value) {\r\n      params.status = ipStatus.value;\r\n    }\r\n    if (ipType.value) {\r\n      params.type = ipType.value;\r\n    }\r\n    \r\n    console.log('正在获取IP列表，参数:', params);\r\n    console.log('当前分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      total: pagination.total\r\n    });\r\n    \r\n    const response = await ipAPI.getIPList(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 特殊检查：如果返回的是URL路径列表，说明API路径错误\r\n      if (response.data.records && response.data['scan-tasks']) {\r\n        console.error('API路径错误：返回的是可用路径列表，而不是数据:', response.data);\r\n        message.error('获取IP列表失败: API路径错误，请检查后端配置');\r\n        setIPData([]);\r\n        pagination.total = 0;\r\n        return;\r\n      }\r\n      \r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 确保获取的数据是数组\r\n          let resultData = [];\r\n          if (data && data.results && Array.isArray(data.results)) {\r\n            resultData = data.results;\r\n          } else if (Array.isArray(data)) {\r\n            resultData = data;\r\n          } else {\r\n            console.warn('API返回的数据不是数组格式:', data);\r\n            resultData = [];\r\n          }\r\n          \r\n          setIPData(resultData);\r\n          pagination.total = data.count || data.total || resultData.length;\r\n          console.log('成功获取IP列表（统一格式）:', ipData.value);\r\n          message.success('IP列表数据已更新', 1);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取IP列表失败: ${response.data.message}`);\r\n          setIPData([]);\r\n          pagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 确保获取的数据是数组\r\n        let resultData = [];\r\n        if (response.data.results && Array.isArray(response.data.results)) {\r\n          resultData = response.data.results;\r\n        } else if (Array.isArray(response.data)) {\r\n          resultData = response.data;\r\n        } else {\r\n          console.warn('API返回的数据不是数组格式:', response.data);\r\n          resultData = [];\r\n        }\r\n        \r\n        setIPData(resultData);\r\n        pagination.total = response.data.count || response.data.total || resultData.length;\r\n        console.log('成功获取IP列表（DRF格式）:', ipData.value);\r\n        message.success('IP列表数据已更新', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取IP列表失败: 无效的响应数据');\r\n      setIPData([]);\r\n      pagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载IP列表失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '获取IP列表失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    \r\n    // 如果API调用失败，显示空数据而不是模拟数据\r\n    setIPData([]);\r\n    pagination.total = 0;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n\r\nconst columns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address', // 数据库字段名\r\n    key: 'ipAddress',\r\n    width: 70,\r\n    fixed: 'left'\r\n  },\r\n  {\r\n    title: '来源',\r\n    dataIndex: 'is_auto_discovered',\r\n    key: 'source',\r\n    width: 100\r\n  },\r\n  {\r\n    title: 'Ping状态',\r\n    dataIndex: 'ping_status', // 数据库字段名\r\n    key: 'pingStatus',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '监控状态',\r\n    dataIndex: 'monitoring_enabled',\r\n    key: 'monitoringStatus',\r\n    width: 90\r\n  },\r\n  {\r\n    title: 'IP类型',\r\n    dataIndex: 'type',\r\n    key: 'type',\r\n    width: 80\r\n  },\r\n  {\r\n    title: 'MAC地址',\r\n    dataIndex: 'mac_address', // 数据库字段名\r\n    key: 'macAddress',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '关联资产',\r\n    dataIndex: 'device',\r\n    key: 'device',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '所属网段',\r\n    dataIndex: 'subnet',\r\n    key: 'subnet',\r\n    width: 140\r\n  },\r\n  {\r\n    title: '最后在线时间',\r\n    dataIndex: 'last_seen', // 数据库字段名\r\n    key: 'lastSeen',\r\n    width: 160\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 280\r\n  }\r\n];\r\n\r\n// 扫描任务表格列定义\r\n\r\n// 扫描结果表格列定义\r\nconst resultColumns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address',\r\n    key: 'ip_address',\r\n    width: 90,\r\n  },\r\n  {\r\n    title: '主机名',\r\n    dataIndex: 'hostname',\r\n    key: 'hostname',\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: 'MAC地址',\r\n    dataIndex: 'mac_address',\r\n    key: 'mac_address'\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status'\r\n  },\r\n  {\r\n    title: '响应时间',\r\n    dataIndex: 'response_time',\r\n    key: 'response_time'\r\n  },\r\n  {\r\n    title: '发现时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at'\r\n  }\r\n];\r\n\r\n// 事件处理函数\r\n// 批量ping状态管理\r\nconst batchPingState = reactive({\r\n  isVisible: false,\r\n  phase: 'confirm', // confirm, testing, result\r\n  stats: {\r\n    total: 0,\r\n    currentOnline: 0,\r\n    currentOffline: 0,\r\n    testResult: null\r\n  },\r\n  testing: {\r\n    progress: 0,\r\n    currentIP: '',\r\n    startTime: null\r\n  }\r\n});\r\n\r\nconst handleBatchPing = async () => {\r\n  try {\r\n    // 获取当前页面的所有IP ID\r\n    const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\r\n    \r\n    if (allIpIds.length === 0) {\r\n      message.warning('没有可以ping的IP记录');\r\n      return;\r\n    }\r\n    \r\n    // 初始化状态\r\n    batchPingState.stats.total = allIpIds.length;\r\n    batchPingState.stats.currentOnline = ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\r\n    batchPingState.stats.currentOffline = allIpIds.length - batchPingState.stats.currentOnline;\r\n    batchPingState.phase = 'confirm';\r\n    batchPingState.isVisible = true;\r\n    \r\n  } catch (error) {\r\n    console.error('初始化批量ping失败:', error);\r\n    message.error('初始化批量ping失败');\r\n  }\r\n};\r\n\r\n// 开始ping测试\r\nconst startBatchPingTest = async () => {\r\n  try {\r\n    const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\r\n    \r\n    // 切换到测试阶段\r\n    batchPingState.phase = 'testing';\r\n    batchPingState.testing.startTime = new Date();\r\n    batchPingState.testing.progress = 0;\r\n    \r\n    loading.value = true;\r\n    \r\n    // 调用批量ping API\r\n    const response = await ipAPI.batchPingIPs(allIpIds);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const batchData = response.data.data;\r\n      const summary = batchData.summary;\r\n      \r\n      // 更新本地数据\r\n      const resultsMap = new Map();\r\n      batchData.results.forEach(result => {\r\n        resultsMap.set(result.ip_id, result);\r\n      });\r\n      \r\n      // 更新ipData中的记录\r\n      ipData.value.forEach(ip => {\r\n        const result = resultsMap.get(ip.id);\r\n        if (result) {\r\n          ip.ping_status = result.status;\r\n          ip.pingStatus = result.status; // 兼容字段\r\n          if (result.is_online) {\r\n            ip.last_seen = new Date().toISOString();\r\n            ip.lastSeen = new Date().toISOString(); // 兼容字段\r\n          }\r\n        }\r\n      });\r\n      \r\n      // 设置测试结果并切换到结果阶段\r\n      batchPingState.stats.testResult = summary;\r\n      batchPingState.phase = 'result';\r\n      \r\n    } else {\r\n      message.error(`批量ping测试失败: ${response.data?.message || '未知错误'}`);\r\n      batchPingState.isVisible = false;\r\n    }\r\n  } catch (error) {\r\n    console.error('批量ping测试失败:', error);\r\n    let errorMessage = '批量ping测试失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n    batchPingState.isVisible = false;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 关闭批量ping弹窗\r\nconst closeBatchPingModal = () => {\r\n  batchPingState.isVisible = false;\r\n  batchPingState.phase = 'confirm';\r\n  batchPingState.stats.testResult = null;\r\n  batchPingState.testing.progress = 0;\r\n};\r\n\r\n// 行选择管理\r\nconst onSelectChange = (newSelectedRowKeys) => {\r\n  console.log('选中的行 keys:', newSelectedRowKeys);\r\n  selectedRowKeys.value = newSelectedRowKeys;\r\n};\r\n\r\nconst onSelectAll = (selected, selectedRows, changeRows) => {\r\n  console.log('全选/反选:', { selected, selectedRows: selectedRows.length, changeRows: changeRows.length });\r\n};\r\n\r\nconst clearSelection = () => {\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 批量删除\r\nconst handleBatchDelete = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要删除的IP地址');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    Modal.confirm({\r\n      title: '批量删除确认',\r\n      content: `您将删除 ${selectedRowKeys.value.length} 个IP地址，此操作不可恢复！`,\r\n      okText: '确认删除',\r\n      okType: 'danger',\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchDeleting.value = true;\r\n        try {\r\n          const response = await ipAPI.batchDeleteIPs(selectedRowKeys.value);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量删除成功！删除: ${result.deleted_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n            \r\n            // 刷新列表\r\n            await loadIPList();\r\n          } else {\r\n            message.error(`批量删除失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('批量删除失败:', error);\r\n          message.error(`批量删除失败: ${error.message}`);\r\n        } finally {\r\n          batchDeleting.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('批量删除操作失败:', error);\r\n    message.error('批量删除操作失败');\r\n  }\r\n};\r\n\r\n// 批量切换监控状态\r\nconst handleBatchToggleMonitoring = async (enableMonitoring) => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要操作的IP地址');\r\n    return;\r\n  }\r\n\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  try {\r\n    Modal.confirm({\r\n      title: `批量${actionText}`,\r\n      content: `您将对 ${selectedRowKeys.value.length} 个IP地址${actionText}，是否继续？`,\r\n      okText: `确认${actionText}`,\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchMonitoringToggling.value = true;\r\n        try {\r\n          const response = await ipAPI.batchToggleMonitoring(selectedRowKeys.value, enableMonitoring);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量${actionText}成功！成功: ${result.success_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 更新本地数据\r\n            ipData.value.forEach(ip => {\r\n              if (selectedRowKeys.value.includes(ip.id)) {\r\n                ip.monitoring_enabled = enableMonitoring;\r\n              }\r\n            });\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n          } else {\r\n            message.error(`批量${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(`批量${actionText}失败:`, error);\r\n          message.error(`批量${actionText}失败: ${error.message}`);\r\n        } finally {\r\n          batchMonitoringToggling.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(`批量${actionText}操作失败:`, error);\r\n    message.error(`批量${actionText}操作失败`);\r\n  }\r\n};\r\n\r\n// 单个监控状态切换\r\nconst handleToggleMonitoring = async (record, enableMonitoring) => {\r\n  if (enableMonitoring) {\r\n    // 启用监控时显示模板选择抽屉\r\n    selectedIP.value = record;\r\n    await loadZabbixTemplates(record.id);\r\n    templateDrawerVisible.value = true;\r\n  } else {\r\n    // 直接禁用监控\r\n    await toggleMonitoringStatus(record, false);\r\n  }\r\n};\r\n\r\n// 切换监控状态的实际方法\r\nconst toggleMonitoringStatus = async (record, enableMonitoring) => {\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  // 设置单个记录的加载状态\r\n  record.monitoringToggling = true;\r\n  \r\n  try {\r\n    const response = await ipAPI.toggleMonitoring(record.id, enableMonitoring);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 更新本地数据\r\n      record.monitoring_enabled = enableMonitoring;\r\n      message.success(`${record.ip_address || record.ipAddress} ${actionText}成功`, 1);\r\n    } else {\r\n      message.error(`${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`${actionText}失败:`, error);\r\n    message.error(`${actionText}失败: ${error.message}`);\r\n  } finally {\r\n    record.monitoringToggling = false;\r\n  }\r\n};\r\n\r\n// 加载Zabbix模板列表\r\nconst loadZabbixTemplates = async (ipId) => {\r\n  templateLoading.value = true;\r\n  try {\r\n    const response = await ipAPI.getZabbixTemplates(ipId, templateSearchKeyword.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      zabbixTemplates.value = response.data.data.templates || [];\r\n      \r\n      // 初始化展开状态，默认展开所有分类\r\n      nextTick(() => {\r\n        try {\r\n          const categories = Object.keys(groupedTemplates.value || {});\r\n          categories.forEach(category => {\r\n            const categoryStr = String(category);\r\n            expandedCategories.value[categoryStr] = true;\r\n          });\r\n        } catch (error) {\r\n          console.warn('初始化展开状态错误:', error);\r\n        }\r\n      });\r\n      \r\n      console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\r\n    } else {\r\n      // 检查是否是Zabbix连接问题\r\n      if (response.data && response.data.message && response.data.message.includes('Zabbix API连接不可用')) {\r\n        // 显示详细的诊断信息\r\n        const errorMessage = '⚠️ Zabbix服务器连接失败';\r\n        const suggestions = [\r\n          '请检查Zabbix服务器是否正常运行',\r\n          '验证网络连接和防火墙设置',\r\n          '检查Zabbix API配置是否正确'\r\n        ];\r\n        \r\n        Modal.error({\r\n          title: '无法加载监控模板',\r\n          content: h('div', [\r\n            h('p', { style: 'margin-bottom: 16px;' }, errorMessage),\r\n            h('div', { style: 'background: #f5f5f5; padding: 12px; border-radius: 6px;' }, [\r\n              h('p', { style: 'margin: 0 0 8px 0; font-weight: 600;' }, '解决建议：'),\r\n              h('ul', { style: 'margin: 0; padding-left: 20px;' }, \r\n                suggestions.map(suggestion => \r\n                  h('li', { style: 'margin-bottom: 4px;' }, suggestion)\r\n                )\r\n              )\r\n            ])\r\n          ]),\r\n          width: 500\r\n        });\r\n      } else {\r\n        message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\r\n      }\r\n      \r\n      zabbixTemplates.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载模板列表失败:', error);\r\n    \r\n    // 检查是否是网络连接问题\r\n    if (error.message && (error.message.includes('Network Error') || error.message.includes('timeout'))) {\r\n      Modal.error({\r\n        title: '网络连接失败',\r\n        content: '无法连接到后端服务器，请检查网络连接和服务器状态。'\r\n      });\r\n    } else {\r\n      message.error(`加载模板列表失败: ${error.message}`);\r\n    }\r\n    \r\n    zabbixTemplates.value = [];\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\n\r\n// 搜索模板\r\nconst handleTemplateSearch = async () => {\r\n  if (selectedIP.value) {\r\n    await loadZabbixTemplates(selectedIP.value.id);\r\n  }\r\n};\r\n\r\n// 模板选择变化 - 确保类型安全\r\nconst handleTemplateSelect = (templateIds) => {\r\n  try {\r\n    // 确保 templateIds 是数组并且所有元素都是字符串\r\n    if (Array.isArray(templateIds)) {\r\n      selectedTemplateIds.value = templateIds.map(id => {\r\n        if (id === null || id === undefined) return '';\r\n        return String(id);\r\n      });\r\n    } else {\r\n      selectedTemplateIds.value = [];\r\n    }\r\n    console.log('已选择模板:', selectedTemplateIds.value);\r\n  } catch (error) {\r\n    console.error('处理模板选择时出错:', error);\r\n    selectedTemplateIds.value = [];\r\n  }\r\n};\r\n\r\n// 创建监控主机\r\nconst handleCreateMonitoring = async () => {\r\n  if (!selectedIP.value) {\r\n    message.error('请先选择IP地址');\r\n    return;\r\n  }\r\n  \r\n  if (selectedTemplateIds.value.length === 0) {\r\n    message.error('请选择至少一个监控模板');\r\n    return;\r\n  }\r\n  \r\n  monitoringCreating.value = true;\r\n  \r\n  try {\r\n    const monitoringData = {\r\n      template_ids: selectedTemplateIds.value,\r\n      host_name: selectedIP.value.hostname || selectedIP.value.ip_address || selectedIP.value.ipAddress,\r\n      group_ids: [] // 使用默认主机组\r\n    };\r\n    \r\n    const response = await ipAPI.createMonitoring(selectedIP.value.id, monitoringData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const result = response.data.data;\r\n      \r\n      message.success({\r\n        content: `监控主机创建成功！\\n主机名: ${result.host_name}\\nIP: ${result.ip_address}\\n模板数量: ${result.template_count}`,\r\n        duration: 5\r\n      });\r\n      \r\n      // 更新本地IP记录的监控状态\r\n      selectedIP.value.monitoring_enabled = true;\r\n      \r\n      // 关闭抽屉\r\n      templateDrawerVisible.value = false;\r\n      \r\n      // 清空选中的模板\r\n      selectedTemplateIds.value = [];\r\n      \r\n    } else {\r\n      message.error(`创建监控主机失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建监控主机失败:', error);\r\n    message.error(`创建监控主机失败: ${error.message}`);\r\n  } finally {\r\n    monitoringCreating.value = false;\r\n  }\r\n};\r\n\r\n// 关闭模板抽屉\r\n// 安全获取模板的唯一key\r\nconst getTemplateKey = (template) => {\r\n  try {\r\n    if (!template) return Math.random().toString();\r\n    if (template.templateid) return String(template.templateid);\r\n    if (template.id) return String(template.id);\r\n    return Math.random().toString();\r\n  } catch (error) {\r\n    console.error('获取模板key失败:', error);\r\n    return Math.random().toString();\r\n  }\r\n};\r\n\r\n// 安全获取模板的value\r\nconst getTemplateValue = (template) => {\r\n  try {\r\n    if (!template) return '';\r\n    if (template.templateid) return String(template.templateid);\r\n    if (template.id) return String(template.id);\r\n    return '';\r\n  } catch (error) {\r\n    console.error('获取模板value失败:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\nconst handleCloseTemplateDrawer = () => {\r\n  templateDrawerVisible.value = false;\r\n  selectedTemplateIds.value = [];\r\n  templateSearchKeyword.value = '';\r\n  selectedCategory.value = '';\r\n  expandedCategories.value = {};\r\n  selectedIP.value = null;\r\n};\r\n\r\n// 模板数据安全验证函数\r\nconst validateTemplateData = (template) => {\r\n  try {\r\n    if (!template || typeof template !== 'object') {\r\n      console.warn('模板不是有效对象:', template);\r\n      return null;\r\n    }\r\n    \r\n    // 安全地获取所有字段\r\n    const safeTemplate = {\r\n      templateid: safeString(template.templateid || template.id || `temp_${Date.now()}`),\r\n      name: safeString(template.name || '未知模板'),\r\n      description: safeString(template.description || ''),\r\n      category: safeString(template.category || '📝 其他'),\r\n      items_count: Number(template.items_count) || 0,\r\n      triggers_count: Number(template.triggers_count) || 0,\r\n      macros_count: Number(template.macros_count) || 0,\r\n      groups: Array.isArray(template.groups) ? template.groups.map(group => ({\r\n        groupid: safeString(group.groupid || group.id || ''),\r\n        name: safeString(group.name || '未知组')\r\n      })) : [],\r\n      icon: safeString(template.icon || 'setting')\r\n    };\r\n    \r\n    // 验证必需字段\r\n    if (!safeTemplate.templateid || !safeTemplate.name) {\r\n      console.warn('模板缺少必需字段:', safeTemplate);\r\n      return null;\r\n    }\r\n    \r\n    return safeTemplate;\r\n  } catch (error) {\r\n    console.error('验证模板时出错:', error, template);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 按分类组织模板 - 增强类型安全\r\nconst groupedTemplates = computed(() => {\r\n  const groups = {};\r\n  \r\n  try {\r\n    if (!Array.isArray(zabbixTemplates.value)) {\r\n      console.warn('zabbixTemplates不是数组:', zabbixTemplates.value);\r\n      return groups;\r\n    }\r\n    \r\n    zabbixTemplates.value.forEach((template) => {\r\n      const safeTemplate = validateTemplateData(template);\r\n      if (!safeTemplate) {\r\n        return; // 跳过无效模板\r\n      }\r\n      \r\n      const category = safeTemplate.category;\r\n      if (!groups[category]) {\r\n        groups[category] = [];\r\n      }\r\n      \r\n      groups[category].push(safeTemplate);\r\n    });\r\n    \r\n    // 对每个分类的模板按名称排序\r\n    Object.keys(groups).forEach(category => {\r\n      try {\r\n        groups[category].sort((a, b) => {\r\n          const nameA = safeString(a.name || '');\r\n          const nameB = safeString(b.name || '');\r\n          return nameA.localeCompare(nameB);\r\n        });\r\n      } catch (sortError) {\r\n        console.warn(`排序分类${category}时出错:`, sortError);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('groupedTemplates计算出错:', error);\r\n  }\r\n  \r\n  return groups;\r\n});\r\n\r\n// 分类图标映射 - 增强类型安全\r\nconst getCategoryIcon = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    const iconMap = {\r\n      '💻 操作系统': 'DesktopOutlined',\r\n      '🗄 数据库': 'DatabaseOutlined', \r\n      '🌐 Web服务器': 'GlobalOutlined',\r\n      '📦 容器平台': 'ContainerOutlined',\r\n      '🌐 网络设备': 'RouterOutlined',\r\n      '☁️ 虚拟化': 'CloudOutlined',\r\n      '📊 网络监控': 'WifiOutlined',\r\n      '☁️ 云服务': 'CloudServerOutlined',\r\n      '🚀 应用服务': 'CodeOutlined',\r\n      '📬 消息队列': 'MessageOutlined',\r\n      '⚡ 缓存系统': 'ThunderboltOutlined',\r\n      '💾 存储系统': 'HddOutlined',\r\n      '🔒 安全监控': 'SafetyOutlined',\r\n      '🌡️ IoT设备': 'NodeIndexOutlined',\r\n      '📝 其他': 'SettingOutlined'\r\n    };\r\n    \r\n    return iconMap[categoryStr] || 'SettingOutlined';\r\n  } catch (error) {\r\n    console.warn('getCategoryIcon处理错误:', error, category);\r\n    return 'SettingOutlined';\r\n  }\r\n};\r\n\r\n// 分类统计信息 - 增强类型安全\r\nconst categoryStats = computed(() => {\r\n  const stats = {};\r\n  \r\n  try {\r\n    if (!groupedTemplates.value || typeof groupedTemplates.value !== 'object') {\r\n      return stats;\r\n    }\r\n    \r\n    Object.entries(groupedTemplates.value).forEach(([category, templates]) => {\r\n      try {\r\n        const categoryKey = safeCategoryToString(category);\r\n        if (!Array.isArray(templates)) {\r\n          console.warn(`分类${categoryKey}的模板不是数组:`, templates);\r\n          stats[categoryKey] = { count: 0, selected: 0 };\r\n          return;\r\n        }\r\n        \r\n        const selectedIds = Array.isArray(selectedTemplateIds.value) ? selectedTemplateIds.value : [];\r\n        \r\n        stats[categoryKey] = {\r\n          count: Number(templates.length) || 0,\r\n          selected: templates.filter(t => {\r\n            try {\r\n              const templateId = safeString(t.templateid || t.id || '');\r\n              return selectedIds.includes(templateId);\r\n            } catch (filterError) {\r\n              console.warn('过滤模板时出错:', filterError, t);\r\n              return false;\r\n            }\r\n          }).length\r\n        };\r\n      } catch (categoryError) {\r\n        console.warn(`处理分类${category}统计时出错:`, categoryError);\r\n        stats[safeCategoryToString(category)] = { count: 0, selected: 0 };\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('categoryStats计算出错:', error);\r\n  }\r\n  \r\n  return stats;\r\n});\r\n\r\n// 筛选后的模板 - 增强类型安全\r\nconst filteredTemplates = computed(() => {\r\n  try {\r\n    let result = groupedTemplates.value || {};\r\n    \r\n    // 分类筛选\r\n    if (selectedCategory.value) {\r\n      const categoryStr = safeString(selectedCategory.value);\r\n      result = {\r\n        [categoryStr]: result[categoryStr] || []\r\n      };\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('filteredTemplates计算出错:', error);\r\n    return {};\r\n  }\r\n});\r\n\r\n// 安全的分类显示名称函数\r\nconst safeCategoryDisplayName = (category) => {\r\n  try {\r\n    return safeCategoryToString(category);\r\n  } catch (error) {\r\n    console.error('safeCategoryDisplayName处理错误:', error, category);\r\n    return '📝 其他';\r\n  }\r\n};\r\n\r\n// 切换分类筛选 - 确保类型安全\r\nconst toggleCategoryFilter = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    if (selectedCategory.value === categoryStr) {\r\n      selectedCategory.value = '';\r\n    } else {\r\n      selectedCategory.value = categoryStr;\r\n    }\r\n  } catch (error) {\r\n    console.warn('toggleCategoryFilter处理错误:', error, category);\r\n    selectedCategory.value = '';\r\n  }\r\n};\r\n\r\n// 清除分类筛选\r\nconst clearCategoryFilter = () => {\r\n  selectedCategory.value = '';\r\n};\r\n\r\n// 切换分类展开状态 - 使用安全的类型转换\r\nconst toggleCategoryExpand = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    expandedCategories.value[categoryStr] = !expandedCategories.value[categoryStr];\r\n  } catch (error) {\r\n    console.warn('toggleCategoryExpand处理错误:', error, category);\r\n  }\r\n};\r\n\r\n// 安全检查分类是否展开 - 避免对象类型转换错误\r\nconst isCategoryExpanded = (category) => {\r\n  // 检查是对象还是字符串\r\n  if (typeof category === 'object') {\r\n    try {\r\n      return isCategoryExpanded(JSON.stringify(category));\r\n    } catch (jsonError) {\r\n      console.warn('对象转字符串失败:', jsonError);\r\n      return true; // 默认展开\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (category === null || category === undefined) {\r\n      return true;\r\n    }\r\n    const categoryStr = safeCategoryToString(category);\r\n    // 默认展开所有分类，除非明确设置为false\r\n    return expandedCategories.value[categoryStr] !== false;\r\n  } catch (error) {\r\n    console.warn('isCategoryExpanded处理错误:', error, category);\r\n    return true; // 默认展开\r\n  }\r\n};\r\n\r\n// 安全的分类转字符串函数 - 根据规范处理各种类型\r\nconst safeCategoryToString = (category) => {\r\n  try {\r\n    if (category === null || category === undefined) {\r\n      return '📝 其他';\r\n    }\r\n    \r\n    if (typeof category === 'string') {\r\n      return category.trim() || '📝 其他';\r\n    }\r\n    \r\n    if (typeof category === 'object') {\r\n      // 如果是对象，尝试提取有效属性\r\n      if (category.name && typeof category.name === 'string') {\r\n        return category.name.trim();\r\n      }\r\n      if (category.title && typeof category.title === 'string') {\r\n        return category.title.trim();\r\n      }\r\n      if (category.label && typeof category.label === 'string') {\r\n        return category.label.trim();\r\n      }\r\n      \r\n      // 尝试使用JSON.stringify安全地转换对象\r\n      try {\r\n        const jsonStr = JSON.stringify(category);\r\n        if (jsonStr && jsonStr !== '[object Object]') {\r\n          return jsonStr;\r\n        }\r\n      } catch (jsonError) {\r\n        // JSON转换失败时继续处理\r\n        console.warn('JSON转换失败:', jsonError);\r\n      }\r\n      \r\n      // 对象转换失败时的安全处理\r\n      console.warn('分类是对象但缺少有效字段:', category);\r\n      return '📝 其他';\r\n    }\r\n    \r\n    // 其他类型的安全转换\r\n    const stringResult = String(category);\r\n    // 检查是否是有效的字符串表示\r\n    if (stringResult && stringResult !== '[object Object]') {\r\n      return stringResult.trim() || '📝 其他';\r\n    } else {\r\n      return '📝 其他';\r\n    }\r\n  } catch (error) {\r\n    console.error('safeCategoryToString处理错误:', error, category);\r\n    return '📝 其他';\r\n  }\r\n};\r\n\r\n// 安全的字符串转换函数 - 增强版，防止\"Cannot convert object to primitive value\"错误\r\nconst safeString = (value) => {\r\n  try {\r\n    // 处理null/undefined\r\n    if (value == null) {\r\n      return '';\r\n    }\r\n    \r\n    // 处理基本类型\r\n    switch (typeof value) {\r\n      case 'string':\r\n        return value;\r\n      case 'number':\r\n      case 'boolean':\r\n      case 'bigint':\r\n        return String(value);\r\n      case 'symbol':\r\n        return value.toString();\r\n    }\r\n    \r\n    // 处理对象类型\r\n    if (typeof value === 'object') {\r\n      // 优先检查常见对象类型\r\n      if (value instanceof Date) {\r\n        return value.toISOString();\r\n      }\r\n      \r\n      if (value instanceof Error) {\r\n        return value.message || value.name || 'Error';\r\n      }\r\n      \r\n      // 尝试获取对象的常见字符串属性\r\n      const stringProps = ['name', 'title', 'label', 'text', 'message', 'value'];\r\n      for (const prop of stringProps) {\r\n        if (typeof value[prop] === 'string') {\r\n          return value[prop];\r\n        }\r\n      }\r\n      \r\n      // 安全地使用JSON.stringify\r\n      try {\r\n        const jsonStr = JSON.stringify(value, (key, val) => {\r\n          if (typeof val === 'object' && val !== null) {\r\n            return Object.prototype.toString.call(val);\r\n          }\r\n          return val;\r\n        });\r\n        if (jsonStr && jsonStr !== '{}' && jsonStr !== '[]') {\r\n          return jsonStr;\r\n        }\r\n      } catch (jsonError) {\r\n        console.warn('JSON.stringify failed:', jsonError);\r\n      }\r\n      \r\n      // 最后尝试调用toString()\r\n      try {\r\n        const toStringResult = Object.prototype.toString.call(value);\r\n        if (toStringResult !== '[object Object]') {\r\n          return toStringResult;\r\n        }\r\n      } catch (toStringError) {\r\n        console.warn('toString call failed:', toStringError);\r\n      }\r\n      \r\n      return '[object]';\r\n    }\r\n    \r\n    // 其他未知类型\r\n    return String(value);\r\n  } catch (error) {\r\n    console.error('safeString处理错误:', error, value);\r\n    return '';\r\n  }\r\n};\r\n\r\n// 获取模板图标 - 根据内存规范增强类型安全和错误处理\r\nconst getTemplateIcon = (template) => {\r\n  try {\r\n    // 基础验证\r\n    if (!template || typeof template !== 'object') {\r\n      console.warn('getTemplateIcon: 模板对象无效', template);\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    if (!template.icon) {\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    // 安全处理图标名称 - 确保必须是字符串类型\r\n    let iconName;\r\n    try {\r\n      if (typeof template.icon === 'string') {\r\n        iconName = template.icon.trim();\r\n      } else if (typeof template.icon === 'object' && template.icon !== null) {\r\n        // 如果是对象，尝试获取有效的字符串属性\r\n        if (template.icon.name && typeof template.icon.name === 'string') {\r\n          iconName = template.icon.name.trim();\r\n        } else if (template.icon.type && typeof template.icon.type === 'string') {\r\n          iconName = template.icon.type.trim();\r\n        } else {\r\n          // 对象转换为字符串时的安全处理\r\n          try {\r\n            const objStr = JSON.stringify(template.icon);\r\n            console.warn('getTemplateIcon: 图标是对象，尝试JSON转换', template.icon, objStr);\r\n            iconName = 'setting'; // 使用默认值\r\n          } catch (jsonError) {\r\n            console.error('getTemplateIcon: JSON转换失败', jsonError);\r\n            iconName = 'setting';\r\n          }\r\n        }\r\n      } else if (template.icon === null || template.icon === undefined) {\r\n        iconName = 'setting';\r\n      } else {\r\n        // 其他类型的安全转换\r\n        iconName = String(template.icon).trim();\r\n      }\r\n    } catch (typeError) {\r\n      console.error('getTemplateIcon: 类型处理错误', typeError, template.icon);\r\n      iconName = 'setting';\r\n    }\r\n    \r\n    // 验证图标名称\r\n    if (!iconName || iconName === '[object Object]' || iconName.length === 0) {\r\n      console.warn('getTemplateIcon: 无效的图标名称', iconName, template);\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    // 如果已经包含Outlined后缀，直接返回\r\n    if (iconName.endsWith('Outlined')) {\r\n      return iconName;\r\n    }\r\n    \r\n    // 特殊图标名称映射\r\n    const iconMap = {\r\n      'global': 'GlobalOutlined',\r\n      'database': 'DatabaseOutlined',\r\n      'server': 'ServerOutlined',\r\n      'network': 'RouterOutlined',\r\n      'cloud': 'CloudOutlined',\r\n      'container': 'ContainerOutlined',\r\n      'security': 'SafetyOutlined',\r\n      'storage': 'HddOutlined',\r\n      'monitor': 'DashboardOutlined',\r\n      'setting': 'SettingOutlined'\r\n    };\r\n    \r\n    // 检查是否有直接映射\r\n    const lowerIconName = iconName.toLowerCase();\r\n    if (iconMap[lowerIconName]) {\r\n      return iconMap[lowerIconName];\r\n    }\r\n    \r\n    // 处理首字母大写并添加Outlined后缀\r\n    try {\r\n      const capitalizedIcon = iconName.charAt(0).toUpperCase() + iconName.slice(1);\r\n      const finalIconName = `${capitalizedIcon}Outlined`;\r\n      \r\n      // 验证图标是否存在于Ant Design图标库中\r\n      const availableIcons = [\r\n        'GlobalOutlined', 'DatabaseOutlined', 'DesktopOutlined', 'RouterOutlined',\r\n        'CloudOutlined', 'ContainerOutlined', 'SafetyOutlined', 'HddOutlined',\r\n        'CodeOutlined', 'MessageOutlined', 'ThunderboltOutlined', 'NodeIndexOutlined',\r\n        'SettingOutlined', 'DashboardOutlined', 'ServerOutlined', 'WifiOutlined'\r\n      ];\r\n      \r\n      if (availableIcons.includes(finalIconName)) {\r\n        return finalIconName;\r\n      }\r\n    } catch (processError) {\r\n      console.error('getTemplateIcon: 图标名称处理错误', processError, iconName);\r\n    }\r\n    \r\n    // 如果图标不存在，返回默认图标\r\n    return 'SettingOutlined';\r\n  } catch (error) {\r\n    console.error('getTemplateIcon处理严重错误:', error, template);\r\n    return 'SettingOutlined';\r\n  }\r\n};\r\n\r\nconst handleSearch = async () => {\r\n  pagination.current = 1;\r\n  await loadIPList();\r\n};\r\n\r\nconst handleReset = async () => {\r\n  searchKeyword.value = '';\r\n  ipStatus.value = '';\r\n  ipType.value = '';\r\n  pagination.current = 1;\r\n  await loadIPList();\r\n};\r\n\r\nconst handleSearchInput = (value) => {\r\n  searchKeyword.value = value;\r\n};\r\n\r\nconst handleStatusChange = (value) => {\r\n  ipStatus.value = value;\r\n};\r\n\r\nconst handleTableChange = async (paginationInfo, filters, sorter) => {\r\n  console.log('handleTableChange 被调用:', {\r\n    paginationInfo, \r\n    当前分页状态: {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    }\r\n  });\r\n  \r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  \r\n  console.log('更新后的分页状态:', {\r\n    current: pagination.current,\r\n    pageSize: pagination.pageSize\r\n  });\r\n  \r\n  // 更新 URL 参数\r\n  const currentUrl = new URL(window.location);\r\n  currentUrl.searchParams.set('page', pagination.current.toString());\r\n  currentUrl.searchParams.set('page_size', pagination.pageSize.toString());\r\n  window.history.replaceState({}, '', currentUrl.toString());\r\n  console.log('已更新 URL:', currentUrl.toString());\r\n  \r\n  await loadIPList();\r\n};\r\n\r\nconst handleAdd = () => {\r\n  router.push({ name: 'ipAdd' });\r\n};\r\n\r\nconst handleView = (record) => {\r\n  selectedIP.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleEdit = (record) => {\r\n  // 检查IP是否受保护\r\n  if (record.is_protected || record.is_auto_discovered) {\r\n    message.warning({\r\n      content: `不能编辑此IP地址：${record.ip_address || record.ipAddress}\\n原因：${record.protection_reason || '自动发现的IP地址不允许编辑'}\\n可编辑字段：${Array.isArray(record.editable_fields) ? record.editable_fields.join(', ') : '备注、状态'}`,\r\n      duration: 5\r\n    });\r\n    return;\r\n  }\r\n  \r\n  editingIP.value = record;\r\n  Object.assign(formData, record);\r\n  editModalVisible.value = true;\r\n};\r\n\r\nconst handleDelete = async (record) => {\r\n  try {\r\n    // 显示加载状态\r\n    const loadingMessage = message.loading('正在检查删除影响...', 0);\r\n    \r\n    try {\r\n      // 检查删除影响\r\n      const impactResponse = await ipAPI.checkDeletionImpact(record.id);\r\n      loadingMessage();\r\n      \r\n      if (impactResponse.data && impactResponse.data.code === 200) {\r\n        const impactData = impactResponse.data.data;\r\n        \r\n        // 构建详细的确认对话框内容\r\n        const confirmContent = await new Promise((resolve) => {\r\n          const { createVNode } = Vue;\r\n          const { ExclamationCircleOutlined, WarningOutlined } = antdvIcons;\r\n          \r\n          const warningItems = impactData.deletion_warnings.map(warning => \r\n            createVNode('li', { style: 'margin: 4px 0; color: #ff4d4f;' }, warning)\r\n          );\r\n          \r\n          // 如果是自动发现的IP，添加特殊警告\r\n          if (impactData.is_auto_discovered) {\r\n            warningItems.unshift(\r\n              createVNode('li', { \r\n                style: 'margin: 4px 0; color: #ff4d4f; font-weight: bold; background: #fff2f0; padding: 8px; border-radius: 4px; border-left: 4px solid #ff4d4f;' \r\n              }, '⚠️ 警告：此IP为Zabbix自动发现，删除后可能影响监控系统！')\r\n            );\r\n          }\r\n          \r\n          const content = createVNode('div', {}, [\r\n            createVNode('p', { style: 'font-weight: bold; margin-bottom: 12px; color: #ff4d4f;' }, \r\n              impactData.is_auto_discovered ? \r\n              `⚠️ 删除自动发现的IP地址: ${impactData.ip_address}` : \r\n              `确认删除 IP地址: ${impactData.ip_address}`\r\n            ),\r\n            \r\n            // 基本信息\r\n            createVNode('div', { style: 'margin-bottom: 12px; padding: 8px; background: #f5f5f5; border-radius: 4px;' }, [\r\n              createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `主机名: ${impactData.hostname || '未设置'}`),\r\n              createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `来源: ${impactData.is_auto_discovered ? 'Zabbix自动发现' : '手动创建'}`),\r\n              impactData.zabbix_drule_id ? createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `Zabbix规则ID: ${impactData.zabbix_drule_id}`) : null\r\n            ]),\r\n            \r\n            // 影响统计\r\n            createVNode('div', { style: 'margin-bottom: 12px;' }, [\r\n              createVNode('p', { style: 'margin: 0; font-weight: bold; color: #fa8c16;' }, '删除影响范围:'),\r\n              impactData.scan_results_count > 0 ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, `· 扫描结果: ${impactData.scan_results_count} 条记录`) : null,\r\n              impactData.related_tasks.length > 0 ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, `· 相关任务: ${impactData.related_tasks.length} 个`) : null,\r\n              impactData.will_cleanup_zabbix ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, '· Zabbix监控数据: 将尝试清理') : null\r\n            ]),\r\n            \r\n            // 警告列表\r\n            createVNode('div', {}, [\r\n              createVNode('p', { style: 'margin: 8px 0 4px 0; font-weight: bold; color: #ff4d4f;' }, [\r\n                createVNode(WarningOutlined, { style: 'margin-right: 4px;' }),\r\n                '警告信息:'\r\n              ]),\r\n              createVNode('ul', { style: 'margin: 0; padding-left: 16px; max-height: 200px; overflow-y: auto;' }, warningItems)\r\n            ]),\r\n            \r\n            createVNode('p', { style: 'margin-top: 12px; font-weight: bold; color: #ff4d4f; text-align: center;' }, '此操作不可恢复！')\r\n          ]);\r\n          \r\n          resolve(content);\r\n        });\r\n        \r\n        // 显示确认对话框\r\n        await new Promise((resolve, reject) => {\r\n          const modal = Modal.confirm({\r\n            title: impactData.is_auto_discovered ? '删除自动发现的IP地址及相关数据' : '删除IP地址及相关数据',\r\n            content: confirmContent,\r\n            width: 600,\r\n            okText: '确认删除',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            icon: createVNode(ExclamationCircleOutlined, { style: 'color: #ff4d4f;' }),\r\n            onOk: () => resolve(true),\r\n            onCancel: () => reject(new Error('User cancelled'))\r\n          });\r\n        });\r\n        \r\n      } else {\r\n        loadingMessage();\r\n        throw new Error('获取删除影响信息失败');\r\n      }\r\n      \r\n    } catch (impactError) {\r\n      loadingMessage();\r\n      console.warn('检查删除影响失败，使用默认确认对话框:', impactError);\r\n      \r\n      // 如果检查影响失败，使用简单的确认对话框\r\n      await new Promise((resolve, reject) => {\r\n        const modal = Modal.confirm({\r\n          title: '确认删除IP',\r\n          content: `确定要删除IP地址 \"${record.ipAddress || record.ip_address}\" 吗？\\n\\n警告：此操作将删除IP记录及所有相关数据（包括扫描结果、Zabbix监控数据等），该操作不可恢复！`,\r\n          okText: '确认删除',\r\n          okType: 'danger',\r\n          cancelText: '取消',\r\n          onOk: () => resolve(true),\r\n          onCancel: () => reject(new Error('User cancelled'))\r\n        });\r\n      });\r\n    }\r\n    \r\n    // 执行删除操作\r\n    const deleteMessage = message.loading('正在删除IP及相关数据...', 0);\r\n    \r\n    try {\r\n      const response = await ipAPI.deleteIP(record.id);\r\n      deleteMessage();\r\n      \r\n      if (response.data && response.data.code === 200) {\r\n        const cleanupData = response.data.data;\r\n        \r\n        // 构建成功消息\r\n        let successMessage = `IP地址 \"${cleanupData.ip_address}\" 已成功删除`;\r\n        \r\n        const cleanupDetails = [];\r\n        if (cleanupData.scan_results_deleted > 0) {\r\n          cleanupDetails.push(`扫描结果: ${cleanupData.scan_results_deleted}条`);\r\n        }\r\n        if (cleanupData.zabbix_cleanup && cleanupData.zabbix_cleanup.success) {\r\n          if (cleanupData.zabbix_cleanup.hosts && cleanupData.zabbix_cleanup.hosts.length > 0) {\r\n            const deletedCount = cleanupData.zabbix_cleanup.hosts.filter(h => h.deleted).length;\r\n            cleanupDetails.push(`Zabbix主机: ${deletedCount}个`);\r\n          }\r\n        }\r\n        \r\n        if (cleanupDetails.length > 0) {\r\n          successMessage += `\\n同时清理了：${cleanupDetails.join('、')}`;\r\n        }\r\n        \r\n        message.success({\r\n          content: successMessage,\r\n          duration: 6\r\n        });\r\n        \r\n        // 直接从列表中移除已删除的IP，而不是刷新整个列表\r\n        ipData.value = ipData.value.filter(ip => ip.id !== record.id);\r\n        pagination.total = ipData.value.length;\r\n      } else {\r\n        message.error('删除IP地址失败');\r\n      }\r\n    } catch (deleteError) {\r\n      deleteMessage();\r\n      throw deleteError;\r\n    }\r\n    \r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除IP地址失败:', error);\r\n      message.error(`删除IP地址失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst handlePing = async (record) => {\r\n  record.pinging = true;\r\n  try {\r\n    // 调用后端ping API\r\n    const response = await ipAPI.pingIP(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const pingData = response.data.data;\r\n      // 更新记录的ping状态\r\n      record.ping_status = pingData.status;\r\n      record.pingStatus = pingData.status; // 兼容字段\r\n      record.last_seen = pingData.last_seen;\r\n      record.lastSeen = pingData.last_seen; // 兼容字段\r\n      \r\n      const statusText = pingData.is_online ? '在线' : '离线';\r\n      const responseTimeText = pingData.response_time ? ` (${pingData.response_time}ms)` : '';\r\n      \r\n      message.success(`Ping ${record.ip_address || record.ipAddress} 完成: ${statusText}${responseTimeText}`, 1);\r\n    } else {\r\n      message.error(`Ping失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Ping测试失败:', error);\r\n    let errorMessage = 'Ping失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n  } finally {\r\n    record.pinging = false;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nconst handleExport = () => {\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst handleListManagement = () => {\r\n  message.info('列表管理功能开发中...');\r\n};\r\n\r\nconst handleScan = () => {\r\n  // 重置扫描表单并设置当前页面可能的IP范围\r\n  resetScanForm();\r\n  \r\n  // 如果有搜索关键词，尝试智能设置IP范围\r\n  if (searchKeyword.value) {\r\n    const keyword = searchKeyword.value.trim();\r\n    // 如果搜索关键词是IP格式，自动设置为扫描范围\r\n    const ipPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n    if (ipPattern.test(keyword)) {\r\n      // 提取网段\r\n      const ipParts = keyword.split('.');\r\n      const networkBase = `${ipParts[0]}.${ipParts[1]}.${ipParts[2]}.0/24`;\r\n      scanFormData.ipRanges = networkBase;\r\n    }\r\n  }\r\n  \r\n  scanModalVisible.value = true;\r\n};\r\n\r\nconst handleScanConfirm = async () => {\r\n  try {\r\n    await scanFormRef.value.validate();\r\n    \r\n    // 处理IP范围数据\r\n    const ipRanges = scanFormData.ipRanges.split('\\n')\r\n      .map(range => range.trim())\r\n      .filter(range => range.length > 0);\r\n    \r\n    // 构建Python扫描配置数据，发送给后端\r\n    const scanConfig = {\r\n      ipRanges: ipRanges,\r\n      checkType: scanFormData.checkType,\r\n      ports: scanFormData.ports,\r\n      key: scanFormData.key,\r\n      // Python扫描器参数\r\n      maxConcurrent: scanFormData.maxConcurrent || 100,\r\n      timeout: scanFormData.timeout || 3.0,\r\n      pingTimeout: scanFormData.pingTimeout || 1.0,\r\n      // 保留一些参数用于服务检测\r\n      snmpCommunity: scanFormData.snmpCommunity,\r\n      snmpv3Config: scanFormData.snmpv3Config\r\n    };\r\n    \r\n    console.log('发送Python扫描配置:', scanConfig);\r\n    \r\n    try {\r\n      // 调用后端Python扫描API\r\n      const response = await ipAPI.createScanTask(scanConfig);\r\n      \r\n      if (response.data && response.data.code === 200) {\r\n        const taskData = response.data.data;\r\n        \r\n        // 显示成功消息\r\n        const scanEngineText = taskData.scanEngine === 'python' ? 'Python原生扫描' : '扫描';\r\n        \r\n        message.success({\r\n          content: `${scanEngineText}任务创建成功！\\n扫描范围: ${ipRanges.join(', ')}\\n检查类型: ${getCheckTypeName(scanFormData.checkType)}\\n任务ID: ${taskData.taskId}\\n并发数: ${scanConfig.maxConcurrent}\\n超时配置: 连接${scanConfig.timeout}s, Ping${scanConfig.pingTimeout}s\\n已启动后台异步处理，系统将自动扫描网络并保存结果到数据库...`,\r\n          duration: 8\r\n        });\r\n        \r\n        // 刷新IP列表\r\n        await loadIPList();\r\n        \r\n        // 自动打开任务查询面板查看进度\r\n        setTimeout(() => {\r\n          handleScanTaskQuery();\r\n        }, 1000);\r\n        \r\n      } else {\r\n        throw new Error(response.data?.message || 'Python扫描任务创建失败');\r\n      }\r\n    } catch (apiError) {\r\n      console.error('后端Python扫描API调用失败:', apiError);\r\n      message.error(`Python扫描任务创建失败: ${apiError.response?.data?.message || apiError.message}`);\r\n      return;\r\n    }\r\n    \r\n    scanModalVisible.value = false;\r\n    resetScanForm();\r\n  } catch (error) {\r\n    console.error('扫描配置验证失败:', error);\r\n    message.error('请检查扫描配置是否正确');\r\n  }\r\n};\r\n\r\n// 获取检查类型名称\r\nconst getCheckTypeName = (type) => {\r\n  const typeNames = {\r\n    0: 'SSH', 1: 'LDAP', 2: 'SMTP', 3: 'FTP', 4: 'HTTP',\r\n    5: 'POP', 6: 'NNTP', 7: 'IMAP', 8: 'TCP', 9: 'Zabbix agent',\r\n    10: 'SNMPv1', 11: 'SNMPv2', 12: 'ICMP ping', 13: 'SNMPv3',\r\n    14: 'HTTPS', 15: 'Telnet'\r\n  };\r\n  return typeNames[type] || '未知类型';\r\n};\r\n\r\nconst handleScanCancel = () => {\r\n  scanModalVisible.value = false;\r\n  resetScanForm();\r\n};\r\n\r\nconst handleTypeChange = (value) => {\r\n  // 根据类型设置默认端口\r\n  const defaultPorts = {\r\n    0: '22',      // SSH\r\n    1: '389',     // LDAP\r\n    2: '25',      // SMTP\r\n    3: '21',      // FTP\r\n    4: '80',      // HTTP\r\n    5: '110',     // POP\r\n    6: '119',     // NNTP\r\n    7: '143',     // IMAP\r\n    8: '0',       // TCP\r\n    9: '10050',   // Zabbix agent\r\n    10: '161',    // SNMPv1\r\n    11: '161',    // SNMPv2\r\n    12: '0',      // ICMP (不需要端口)\r\n    13: '161',    // SNMPv3\r\n    14: '443',    // HTTPS\r\n    15: '23'      // Telnet\r\n  };\r\n  \r\n  scanFormData.ports = defaultPorts[value] || '0';\r\n  \r\n  // 清空相关字段\r\n  scanFormData.key = '';\r\n  if (value !== 10 && value !== 11) {\r\n    scanFormData.snmpCommunity = 'public';\r\n  }\r\n  if (value !== 13) {\r\n    // 清空SNMPv3配置\r\n    scanFormData.snmpv3Config.securityLevel = '0';\r\n    scanFormData.snmpv3Config.securityName = '';\r\n    scanFormData.snmpv3Config.contextName = '';\r\n    scanFormData.snmpv3Config.authProtocol = 0;\r\n    scanFormData.snmpv3Config.authPassphrase = '';\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  }\r\n};\r\n\r\nconst handleSecurityLevelChange = (value) => {\r\n  // 清空认证和隐私配置\r\n  if (value === '0') {\r\n    scanFormData.snmpv3Config.authProtocol = 0;\r\n    scanFormData.snmpv3Config.authPassphrase = '';\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  } else if (value === '1') {\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  }\r\n};\r\n\r\nconst resetScanForm = () => {\r\n  Object.assign(scanFormData, {\r\n    ipRanges: '192.168.1.0/24',\r\n    checkType: 12,\r\n    ports: '0',\r\n    key: '',\r\n    // Python扫描器参数\r\n    maxConcurrent: 100,\r\n    timeout: 3.0,\r\n    pingTimeout: 1.0,\r\n    // 保留参数\r\n    snmpCommunity: 'public',\r\n    snmpv3Config: {\r\n      securityLevel: '0',\r\n      securityName: '',\r\n      contextName: '',\r\n      authProtocol: 0,\r\n      authPassphrase: '',\r\n      privProtocol: 0,\r\n      privPassphrase: ''\r\n    },\r\n    uniqueCheck: 0,\r\n    hostSource: 1,\r\n    nameSource: 0\r\n  });\r\n  scanFormRef.value?.resetFields();\r\n};\r\n\r\n// 扫描任务查询相关函数\r\nconst handleScanTaskQuery = () => {\r\n  scanTaskModalVisible.value = true;\r\n  loadScanTasks();\r\n  \r\n  // 启动异步状态监控\r\n  startAsyncStatusMonitoring();\r\n};\r\n\r\n// 异步状态监控\r\nlet statusCheckInterval = null;\r\n\r\n// 组件初始化状态标记\r\nlet isComponentInitialized = false;\r\nlet isMonitoringActive = false;\r\n\r\nconst startAsyncStatusMonitoring = () => {\r\n  // 防止重复启动\r\n  if (isMonitoringActive) {\r\n    console.log('异步监控已在运行，跳过重复启动');\r\n    return;\r\n  }\r\n  \r\n  // 清理旧的间隔器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  console.log('启动异步状态监控...');\r\n  isMonitoringActive = true;\r\n  \r\n  // 每5秒检查一次任务状态（减少频率）\r\n  statusCheckInterval = setInterval(async () => {\r\n    if (scanTaskModalVisible.value && isMonitoringActive) {\r\n      await checkRunningTasksStatus();\r\n    } else {\r\n      // 弹窗关闭时停止监控\r\n      stopAsyncStatusMonitoring();\r\n    }\r\n  }, 5000); // 从3秒改为5秒\r\n};\r\n\r\nconst stopAsyncStatusMonitoring = () => {\r\n  console.log('停止异步状态监控...');\r\n  \r\n  // 标记监控已停止\r\n  isMonitoringActive = false;\r\n  \r\n  // 清理主定时器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  // 清理可能存在的其他定时器引用\r\n  [statusCheckInterval].forEach(timer => {\r\n    if (timer) {\r\n      clearInterval(timer);\r\n    }\r\n  });\r\n  \r\n  // 等待一个微任务周期，确保正在运行的检查完成\r\n  setTimeout(() => {\r\n    console.log('异步状态监控已停止');\r\n  }, 100);\r\n};\r\n\r\nconst checkRunningTasksStatus = async () => {\r\n  try {\r\n    // 找到所有运行中的任务\r\n    const runningTasks = scanTasks.value.filter(task => \r\n      task.status === 'running' || task.status === 'pending'\r\n    );\r\n    \r\n    // 如果没有运行中的任务，停止监控\r\n    if (runningTasks.length === 0) {\r\n      stopAsyncStatusMonitoring();\r\n      return;\r\n    }\r\n    \r\n    for (const task of runningTasks) {\r\n      try {\r\n        const response = await ipAPI.getAsyncTaskStatus(task.id);\r\n        if (response.data && response.data.code === 200) {\r\n          const statusData = response.data.data;\r\n          \r\n          // 只有当状态发生变化时才更新\r\n          const taskIndex = scanTasks.value.findIndex(t => t.id === task.id);\r\n          if (taskIndex !== -1) {\r\n            const currentTask = scanTasks.value[taskIndex];\r\n            const hasStatusChanged = currentTask.status !== statusData.status;\r\n            const hasProgressChanged = currentTask.progress !== statusData.progress;\r\n            \r\n            if (hasStatusChanged || hasProgressChanged) {\r\n              // 使用 Vue 的响应式更新，减少 DOM 操作\r\n              Object.assign(scanTasks.value[taskIndex], {\r\n                status: statusData.status,\r\n                progress: statusData.progress,\r\n                result_data: statusData.result_data,\r\n                error_message: statusData.error_message\r\n              });\r\n              \r\n              // 如果任务完成，显示通知\r\n              if (statusData.status === 'completed' && hasStatusChanged) {\r\n                const resultData = statusData.result_data || {};\r\n                message.success({\r\n                  content: `任务 ${task.id} 已完成！\\n发现主机: ${resultData.discovered_hosts || 0} 个\\n新增IP: ${resultData.saved_count || 0} 个\\n更新IP: ${resultData.updated_count || 0} 个`,\r\n                  duration: 5\r\n                });\r\n                \r\n                // 延迟刷新IP列表，避免并发更新\r\n                setTimeout(() => {\r\n                  loadIPList();\r\n                }, 1000);\r\n              }\r\n              \r\n              // 如果任务失败，显示错误\r\n              if (statusData.status === 'failed' && hasStatusChanged) {\r\n                message.error({\r\n                  content: `任务 ${task.id} 失败：${statusData.error_message || '未知错误'}`,\r\n                  duration: 5\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // 静默处理单个任务检查失败\r\n        console.debug(`检查任务 ${task.id} 状态失败:`, error.message);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.debug('检查运行任务状态失败:', error.message);\r\n  }\r\n};\r\n\r\n\r\nconst loadScanTasks = async () => {\r\n  taskLoading.value = true;\r\n  try {\r\n    const params = {\r\n      page: taskPagination.current,\r\n      page_size: taskPagination.pageSize\r\n    };\r\n    \r\n    // 添加查询条件\r\n    if (taskStatusFilter.value && taskStatusFilter.value !== '') {\r\n      params.status = taskStatusFilter.value;\r\n    }\r\n    if (taskNameFilter.value && taskNameFilter.value !== '') {\r\n      params.search = taskNameFilter.value;\r\n    }\r\n    if (taskDateRange.value && Array.isArray(taskDateRange.value) && taskDateRange.value.length === 2) {\r\n      params.created_after = taskDateRange.value[0].toISOString();\r\n      params.created_before = taskDateRange.value[1].toISOString();\r\n    }\r\n    \r\n    console.log('调用扫描任务API，参数:', params);\r\n    \r\n    // 调用后端API获取扫描任务列表\r\n    const response = await ipAPI.getScanTasks(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 过滤掉已取消的任务\r\n          let tasks = data.results || [];\r\n          tasks = tasks.filter(task => task.status !== 'cancelled');\r\n          scanTasks.value = tasks;\r\n          taskPagination.total = tasks.length; // 使用过滤后的数量\r\n          console.log('成功获取扫描任务（统一格式，已过滤取消任务）:', scanTasks.value);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取扫描任务列表失败: ${response.data.message}`);\r\n          scanTasks.value = [];\r\n          taskPagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 过滤掉已取消的任务\r\n        let tasks = response.data.results || [];\r\n        tasks = tasks.filter(task => task.status !== 'cancelled');\r\n        scanTasks.value = tasks;\r\n        taskPagination.total = tasks.length; // 使用过滤后的数量\r\n        console.log('成功获取扫描任务（DRF格式，已过滤取消任务）:', scanTasks.value);\r\n        message.success('获取扫描任务列表成功', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取扫描任务列表失败: 无效的响应数据');\r\n      scanTasks.value = [];\r\n      taskPagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载扫描任务失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '加载扫描任务失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    scanTasks.value = [];\r\n    taskPagination.total = 0;\r\n  } finally {\r\n    taskLoading.value = false;\r\n  }\r\n};\r\n\r\nconst handleSearchTasks = () => {\r\n  taskPagination.current = 1;\r\n  loadScanTasks();\r\n};\r\n\r\nconst handleRefreshTasks = () => {\r\n  taskStatusFilter.value = '';\r\n  taskDateRange.value = [];\r\n  taskNameFilter.value = '';\r\n  taskPagination.current = 1;\r\n  loadScanTasks();\r\n};\r\n\r\n\r\nconst handleTaskTableChange = (paginationInfo) => {\r\n  taskPagination.current = paginationInfo.current;\r\n  taskPagination.pageSize = paginationInfo.pageSize;\r\n  loadScanTasks();\r\n};\r\n\r\nconst handleViewTaskDetail = (record) => {\r\n  selectedTask.value = record;\r\n  taskDetailModalVisible.value = true;\r\n};\r\n\r\nconst handleViewTaskResults = async (record) => {\r\n  selectedTask.value = record;\r\n  await loadTaskResults(record.id);\r\n  taskResultModalVisible.value = true;\r\n};\r\n\r\nconst handleCancelTask = async (record) => {\r\n  try {\r\n    // 如果任务正在运行，先停止异步处理\r\n    if (record.status === 'running' || record.status === 'pending') {\r\n      try {\r\n        const stopResponse = await ipAPI.stopAsyncTask(record.id);\r\n        if (stopResponse.data && stopResponse.data.code === 200) {\r\n          message.success('异步任务已停止', 1);\r\n        }\r\n      } catch (stopError) {\r\n        console.warn('停止异步任务失败:', stopError);\r\n      }\r\n    }\r\n    \r\n    // 取消任务\r\n    const response = await ipAPI.cancelScanTask(record.id);\r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`任务 ${record.task_name || record.id} 已取消`, 1);\r\n      // 直接从列表中移除已取消的任务，而不是刷新整个列表\r\n      scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\r\n      taskPagination.total = scanTasks.value.length;\r\n    } else {\r\n      message.error('取消任务失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('取消任务失败:', error);\r\n    message.error(`取消任务失败: ${error.response?.data?.message || error.message}`);\r\n  }\r\n};\r\n\r\nconst handleDeleteTask = async (record) => {\r\n  try {\r\n    // 显示确认对话框\r\n    await new Promise((resolve, reject) => {\r\n      const modal = Modal.confirm({\r\n        title: '确认删除任务',\r\n        content: `确定要删除任务 \"${record.id}\" 吗？该操作不可恢复！`,\r\n        okText: '确认删除',\r\n        okType: 'danger',\r\n        cancelText: '取消',\r\n        onOk: () => resolve(true),\r\n        onCancel: () => reject(new Error('User cancelled'))\r\n      });\r\n    });\r\n    \r\n    // 调用删除API\r\n    const response = await ipAPI.deleteScanTask(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`任务 \"${record.id}\" 已成功删除`, 1);\r\n      \r\n      // 直接从列表中移除已删除的任务，而不是刷新整个列表\r\n      scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\r\n      taskPagination.total = scanTasks.value.length;\r\n    } else {\r\n      message.error('删除任务失败');\r\n    }\r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除任务失败:', error);\r\n      message.error(`删除任务失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst loadTaskResults = async (taskId) => {\r\n  resultLoading.value = true;\r\n  try {\r\n    const response = await ipAPI.getScanTaskResults(taskId);\r\n    if (response.data && response.data.code === 200) {\r\n      taskResults.value = response.data.data || [];\r\n    } else {\r\n      message.error('获取扫描结果失败');\r\n      taskResults.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载扫描结果失败:', error);\r\n    message.error(`加载扫描结果失败: ${error.response?.data?.message || error.message}`);\r\n    taskResults.value = [];\r\n  } finally {\r\n    resultLoading.value = false;\r\n  }\r\n};\r\n\r\n// 任务状态相关工具函数\r\nconst getTaskStatusColor = (status) => {\r\n  const colorMap = {\r\n    'pending': 'default',\r\n    'running': 'processing',\r\n    'completed': 'success',\r\n    'failed': 'error',\r\n    'cancelled': 'warning'\r\n  };\r\n  return colorMap[status] || 'default';\r\n};\r\n\r\nconst getTaskStatusText = (status) => {\r\n  const textMap = {\r\n    'pending': '等待中',\r\n    'running': '运行中',\r\n    'completed': '已完成',\r\n    'failed': '失败',\r\n    'cancelled': '已取消'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\n// 判断是否为长时间运行的任务\r\nconst isLongRunningTask = (task) => {\r\n  if (task.status !== 'running') {\r\n    return false;\r\n  }\r\n  \r\n  // 检查任务的运行时间，如果超过180秒（5分钟）则认为是长时间运行\r\n  if (task.started_at) {\r\n    const startTime = new Date(task.started_at);\r\n    const currentTime = new Date();\r\n    const diffInSeconds = (currentTime - startTime) / 1000;\r\n    return diffInSeconds > 180; // 3分钟\r\n  }\r\n  \r\n  // 根据进度判断：如果进度大于30%但仍在运行，可能是长时间任务\r\n  return task.progress > 30;\r\n};\r\n\r\n// 获取取消按钮的文本\r\nconst getCancelButtonText = (record) => {\r\n  if (record.status === 'running' && isLongRunningTask(record)) {\r\n    return '停止';\r\n  }\r\n  return '取消';\r\n};\r\n\r\n// 获取取消按钮的提示信息\r\nconst getCancelButtonTitle = (record) => {\r\n  if (record.status === 'completed') {\r\n    return '任务已完成，无法取消';\r\n  }\r\n  if (record.status === 'cancelled') {\r\n    return '任务已取消';\r\n  }\r\n  if (record.status === 'failed') {\r\n    return '任务已失败，无法取消';\r\n  }\r\n  if (record.status === 'running') {\r\n    if (isLongRunningTask(record)) {\r\n      return '停止正在持续运行的任务。任务将会立即停止，不再检查新的主机发现';\r\n    }\r\n    return '取消正在运行的任务';\r\n  }\r\n  if (record.status === 'pending') {\r\n    return '取消等待中的任务';\r\n  }\r\n  return '取消任务';\r\n};\r\n\r\n// 获取删除按钮的提示信息\r\nconst getDeleteButtonTitle = (record) => {\r\n  if (record.status === 'running') {\r\n    return '任务正在运行中，无法删除';\r\n  }\r\n  if (record.status === 'pending') {\r\n    return '任务正在等待处理，无法删除';\r\n  }\r\n  return `删除任务 ${record.id} 的记录（不可恢复）`;\r\n};\r\n\r\n\r\n\r\n\r\nconst handleRefresh = () => {\r\n  loadIPList();\r\n  message.success('数据已刷新', 1);\r\n};\r\n\r\nconst handleSave = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    // 转换字段名：前端驼峰命名转后端下划线命名\r\n    const submitData = {\r\n      ip_address: formData.ipAddress,\r\n      hostname: formData.hostname,\r\n      status: formData.status,\r\n      type: formData.type,\r\n      mac_address: formData.macAddress,\r\n      device: formData.device,\r\n      subnet: formData.subnet,\r\n      description: formData.description\r\n    };\r\n    \r\n    if (editingIP.value) {\r\n      // 编辑模式\r\n      await ipAPI.updateIP(editingIP.value.id, submitData);\r\n      message.success('IP信息更新成功', 1);\r\n    } else {\r\n      // 新增模式\r\n      await ipAPI.createIP(submitData);\r\n      message.success('IP添加成功', 1);\r\n    }\r\n    \r\n    editModalVisible.value = false;\r\n    resetForm();\r\n    await loadIPList();\r\n  } catch (error) {\r\n    console.error('保存IP失败:', error);\r\n    message.error(`保存失败: ${error.response?.data?.message || error.message}`);\r\n  }\r\n};\r\n\r\nconst handleCancel = () => {\r\n  editModalVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\nconst resetForm = () => {\r\n  Object.assign(formData, {\r\n    ipAddress: '',\r\n    hostname: '',\r\n    status: 'available',\r\n    type: 'static',\r\n    macAddress: '',\r\n    device: '',\r\n    subnet: '',\r\n    description: ''\r\n  });\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 组件挂载时初始化数据\r\nonMounted(() => {\r\n  // 防止重复初始化\r\n  if (isComponentInitialized) {\r\n    console.log('IP列表组件已初始化，跳过重复初始化');\r\n    return;\r\n  }\r\n  \r\n  console.log('IP列表组件挂载，开始加载IP数据...');\r\n  isComponentInitialized = true;\r\n  \r\n  // 从 URL 参数中读取分页设置\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const pageParam = urlParams.get('page');\r\n  const pageSizeParam = urlParams.get('page_size');\r\n  \r\n  if (pageParam && !isNaN(parseInt(pageParam))) {\r\n    pagination.current = parseInt(pageParam);\r\n    console.log('从 URL 读取到 page 参数:', pagination.current);\r\n  }\r\n  \r\n  if (pageSizeParam && !isNaN(parseInt(pageSizeParam))) {\r\n    const requestedPageSize = parseInt(pageSizeParam);\r\n    // 检查是否在允许的选项中\r\n    const allowedSizes = [10, 20, 50, 100];\r\n    if (allowedSizes.includes(requestedPageSize)) {\r\n      pagination.pageSize = requestedPageSize;\r\n      console.log('从 URL 读取到 page_size 参数:', pagination.pageSize);\r\n    } else {\r\n      console.warn(`URL 中的 page_size=${requestedPageSize} 不在允许范围内，使用默认值 ${pagination.pageSize}`);\r\n    }\r\n  }\r\n  \r\n  // 全局抑制 ResizeObserver 错误\r\n  const originalError = console.error;\r\n  console.error = function(...args) {\r\n    if (args[0] && args[0].toString().includes('ResizeObserver loop completed')) {\r\n      return; // 忽略 ResizeObserver 错误\r\n    }\r\n    originalError.apply(console, args);\r\n  };\r\n  \r\n  // 使用现有的错误抑制函数\r\n  suppressResizeObserverError();\r\n  \r\n  // 延迟加载数据，避免DOM渲染冲突\r\n  nextTick(() => {\r\n    loadIPList();\r\n  });\r\n});\r\n\r\n// 组件即将卸载时的预清理\r\nonBeforeUnmount(() => {\r\n  console.log('IP列表组件即将卸载，进行预清理...');\r\n  \r\n  // 立即停止所有监控活动\r\n  stopAsyncStatusMonitoring();\r\n  \r\n  // 关闭所有弹窗，避免残留的DOM元素\r\n  scanTaskModalVisible.value = false;\r\n  taskDetailModalVisible.value = false;\r\n  taskResultModalVisible.value = false;\r\n  editModalVisible.value = false;\r\n  detailModalVisible.value = false;\r\n  scanModalVisible.value = false;\r\n});\r\n\r\n// 组件销毁时清理资源\r\nonUnmounted(() => {\r\n  console.log('IP列表组件销毁，清理监控定时器...');\r\n  \r\n  // 1. 停止异步状态监控\r\n  stopAsyncStatusMonitoring();\r\n  \r\n  // 2. 清理所有可能的定时器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  // 3. 强制清理所有ResizeObserver实例\r\n  try {\r\n    // 查找页面中所有的ResizeObserver实例并断开连接\r\n    const tableElements = document.querySelectorAll('.modern-table, .ant-table, .ant-progress');\r\n    tableElements.forEach(element => {\r\n      // 移除可能的观察器\r\n      if (element._resizeObserver) {\r\n        element._resizeObserver.disconnect();\r\n        delete element._resizeObserver;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.debug('清理ResizeObserver时出错:', error.message);\r\n  }\r\n  \r\n  // 4. 清理组件状态\r\n  scanTasks.value = [];\r\n  ipData.value = [];\r\n  taskResults.value = [];\r\n  \r\n  // 5. 重置初始化状态标记\r\n  isComponentInitialized = false;\r\n  isMonitoringActive = false;\r\n  \r\n  console.log('IP列表组件资源清理完成');\r\n});\r\n\r\n// 监听扫描任务弹窗状态\r\nwatch(scanTaskModalVisible, (newValue, oldValue) => {\r\n  console.log(`扫描任务弹窗状态变化: ${oldValue} -> ${newValue}`);\r\n  \r\n  if (!newValue) {\r\n    // 弹窗关闭时停止监控\r\n    console.log('弹窗关闭，停止异步监控');\r\n    stopAsyncStatusMonitoring();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* 简洁蓝白背景 */\r\n.ip-list-container {\r\n  background: #f8fafc;\r\n  min-height: 100vh;\r\n}\r\n\r\n/* 简洁卡片样式 */\r\n.table-card {\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n  background: #ffffff;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.table-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px 24px;\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.table-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin: 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #1e40af;\r\n}\r\n\r\n.table-extra {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n/* 简洁表格样式 */\r\n:deep(.modern-table) {\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n  background: #ffffff;\r\n}\r\n\r\n:deep(.modern-table .ant-table-thead > tr > th) {\r\n  background: #f1f5f9;\r\n  border: none;\r\n  color: #374151;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr > td) {\r\n  border: none;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #f1f5f9;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr:hover > td) {\r\n  background: #f8fafc;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr:last-child > td) {\r\n  border-bottom: none;\r\n}\r\n\r\n/* 简洁按钮样式 */\r\n:deep(.ant-btn-primary) {\r\n  background: #2563eb;\r\n  border: 1px solid #2563eb;\r\n  border-radius: 6px;\r\n  height: 36px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background: #1d4ed8;\r\n  border-color: #1d4ed8;\r\n}\r\n\r\n:deep(.ant-btn:not(.ant-btn-primary)) {\r\n  border-radius: 6px;\r\n  height: 36px;\r\n\r\n  background: #ffffff;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn:not(.ant-btn-primary):hover) {\r\n  border-color: #2563eb;\r\n  color: #2563eb;\r\n}\r\n\r\n/* 简洁标签样式 */\r\n:deep(.ant-tag) {\r\n  border-radius: 4px;\r\n  padding: 2px 8px;\r\n  font-weight: 500;\r\n  border: 1px solid;\r\n  font-size: 12px;\r\n}\r\n\r\n/* 状态标签简洁色彩 */\r\n:deep(.ant-tag-success) {\r\n  background: #dcfce7;\r\n  color: #166534;\r\n  border-color: #bbf7d0;\r\n}\r\n\r\n:deep(.ant-tag-processing) {\r\n  background: #dbeafe;\r\n  color: #1e40af;\r\n  border-color: #93c5fd;\r\n}\r\n\r\n:deep(.ant-tag-warning) {\r\n  background: #fef3c7;\r\n  color: #92400e;\r\n  border-color: #fde68a;\r\n}\r\n\r\n:deep(.ant-tag-error) {\r\n  background: #fee2e2;\r\n  color: #dc2626;\r\n  border-color: #fecaca;\r\n}\r\n\r\n:deep(.ant-tag-default) {\r\n  background: #f3f4f6;\r\n  color: #374151;\r\n  border-color: #d1d5db;\r\n}\r\n\r\n/* 保护状态样式 */\r\n.protected-button {\r\n  opacity: 0.5;\r\n  cursor: not-allowed !important;\r\n}\r\n\r\n.protected-button:hover {\r\n  background: none !important;\r\n  border-color: transparent !important;\r\n  transform: none !important;\r\n}\r\n\r\n/* 保护信息提示 */\r\n.protection-info {\r\n  margin-top: 4px;\r\n  color: #718096;\r\n  font-style: italic;\r\n}\r\n\r\n/* 统计卡片样式 */\r\n:deep(.ant-statistic) {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n:deep(.ant-statistic-title) {\r\n  color: #4a5568;\r\n  font-weight: 600;\r\n}\r\n\r\n:deep(.ant-statistic-content) {\r\n  color: #2d3748;\r\n  font-weight: 700;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .ip-list-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .table-header {\r\n    padding: 16px 20px;\r\n    flex-wrap: wrap;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .table-title {\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .table-extra {\r\n    flex-wrap: wrap;\r\n    gap: 8px;\r\n  }\r\n  \r\n  :deep(.modern-table .ant-table-thead > tr > th),\r\n  :deep(.modern-table .ant-table-tbody > tr > td) {\r\n    padding: 12px 16px;\r\n  }\r\n}\r\n\r\n/* 滚动条美化 */\r\n:deep(.ant-table-body)::-webkit-scrollbar {\r\n  width: 8px;\r\n  height: 8px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-track {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-thumb {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-thumb:hover {\r\n  background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);\r\n  font-size: 12px;\r\n  line-height: 1.4;\r\n}\r\n\r\n.table-header-text {\r\n  font-weight: 600;\r\n  color: #374151;\r\n}\r\n\r\n/* IP地址单元格 */\r\n.ip-address-cell {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.ip-info {\r\n  flex: 1;\r\n}\r\n\r\n.ip-address {\r\n  font-family: 'Courier New', monospace;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  font-size: 14px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.ip-hostname {\r\n  font-size: 12px;\r\n  color: #6b7280;\r\n}\r\n\r\n/* 状态标签 */\r\n.status-tag {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  font-size: 12px;\r\n  padding: 4px 8px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n/* 类型标签 */\r\n.type-tag {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n/* Ping状态 */\r\n.ping-status {\r\n  font-weight: 500;\r\n}\r\n\r\n/* 最后在线时间 */\r\n.last-seen {\r\n  color: #6b7280;\r\n  font-size: 12px;\r\n}\r\n\r\n.no-data {\r\n  color: #9ca3af;\r\n  font-style: italic;\r\n}\r\n\r\n.form-section {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.section-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin: 0 0 16px 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  padding-bottom: 8px;\r\n  border-bottom: 1px solid #e8f3ff;\r\n}\r\n\r\n.input-hint {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  margin-top: 4px;\r\n}\r\n\r\n/* 扫描弹窗样式 */\r\n:deep(.ant-modal-body) {\r\n  max-height: 600px;\r\n  overflow-y: auto;\r\n}\r\n:deep(.detail-modal .ant-modal-content) {\r\n  border-radius: 8px;\r\n}\r\n\r\n:deep(.edit-modal .ant-modal-content) {\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 按钮样式优化 */\r\n:deep(.ant-btn-primary) {\r\n  background: #1890ff;\r\n  border-color: #1890ff;\r\n  border-radius: 6px;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background: #40a9ff;\r\n  border-color: #40a9ff;\r\n}\r\n\r\n:deep(.ant-btn) {\r\n  border-radius: 6px;\r\n}\r\n\r\n/* 输入框样式 */\r\n:deep(.ant-input) {\r\n  border-radius: 6px;\r\n  border-color: #e8f3ff;\r\n}\r\n\r\n:deep(.ant-input:focus) {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n:deep(.ant-select .ant-select-selector) {\r\n  border-radius: 6px;\r\n  border-color: #e8f3ff;\r\n}\r\n\r\n:deep(.ant-select:not(.ant-select-disabled):hover .ant-select-selector) {\r\n  border-color: #1890ff;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  \r\n  .filter-header {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: flex-start;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .ip-list-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .filter-content {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .filter-header {\r\n    gap: 12px;\r\n  }\r\n  \r\n  .filter-title {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .title-icon {\r\n    font-size: 18px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .ip-list-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .ip-address-cell {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .filter-content {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .filter-actions {\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n}\r\n\r\n/* 表格容器样式 */\r\n.table-container {\r\n  overflow: hidden;\r\n  background: white;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 批量操作工具栏 */\r\n.batch-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background: #f0f7ff;\r\n  border: 1px solid #d6e4ff;\r\n  border-radius: 8px;\r\n  margin-bottom: 16px;\r\n  animation: slideDown 0.3s ease;\r\n}\r\n\r\n@keyframes slideDown {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.batch-info {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  color: #1890ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.batch-info strong {\r\n  color: #1890ff;\r\n  margin: 0 4px;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 监控状态按钮样式 */\r\n.monitoring-enabled {\r\n  background: #f6ffed !important;\r\n  border-color: #b7eb8f !important;\r\n}\r\n\r\n.monitoring-enabled:hover {\r\n  background: #d9f7be !important;\r\n  border-color: #95de64 !important;\r\n}\r\n\r\n/* 统计卡片样式 */\r\n.stat-card {\r\n  border-radius: 8px;\r\n  border: 1px solid #e8f3ff;\r\n  background: #ffffff;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.08);\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 批量Ping弹窗样式 - 重新设计 */\r\n.ping-confirm-phase,\r\n.ping-testing-phase,\r\n.ping-result-phase {\r\n  padding: 8px 0;\r\n}\r\n\r\n/* 阶段头部 */\r\n.phase-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n  border-radius: 12px;\r\n  border: 2px solid;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.ping-confirm-phase .phase-header {\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  border-color: #91caff;\r\n}\r\n\r\n.ping-testing-phase .phase-header {\r\n  background: linear-gradient(135deg, #fff7e6 0%, #fff2e8 100%);\r\n  border-color: #ffec8b;\r\n}\r\n\r\n.ping-result-phase .phase-header {\r\n  background: linear-gradient(135deg, #f6ffed 0%, #f0f9e8 100%);\r\n  border-color: #d9f7be;\r\n}\r\n\r\n.phase-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 56px;\r\n  height: 56px;\r\n  border-radius: 50%;\r\n  font-size: 24px;\r\n  position: relative;\r\n}\r\n\r\n.phase-icon.confirm {\r\n  background: rgba(24, 144, 255, 0.1);\r\n  color: #1890ff;\r\n}\r\n\r\n.phase-icon.testing {\r\n  background: rgba(250, 140, 22, 0.1);\r\n  color: #fa8c16;\r\n}\r\n\r\n.phase-icon.success {\r\n  background: rgba(82, 196, 26, 0.1);\r\n  color: #52c41a;\r\n}\r\n\r\n.phase-content {\r\n  flex: 1;\r\n}\r\n\r\n.phase-title {\r\n  margin: 0 0 8px 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.phase-description {\r\n  margin: 0;\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 统计网格 */\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.stat-card {\r\n  text-align: center;\r\n  padding: 20px 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-number {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n  line-height: 1;\r\n}\r\n\r\n.stat-number.primary { color: #1890ff; }\r\n.stat-number.success { color: #52c41a; }\r\n.stat-number.error { color: #ff4d4f; }\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n/* 测试参数 */\r\n.test-parameters {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.param-title {\r\n  margin: 0 0 16px 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.param-list {\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.param-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.param-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.param-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n.param-value {\r\n  color: #262626;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 提示信息 */\r\n.warning-tip,\r\n.tech-tip {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.warning-tip {\r\n  background: rgba(250, 140, 22, 0.05);\r\n  border: 1px solid rgba(250, 140, 22, 0.2);\r\n}\r\n\r\n.tech-tip {\r\n  background: rgba(24, 144, 255, 0.05);\r\n  border: 1px solid rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.tip-icon {\r\n  font-size: 16px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tip-text {\r\n  font-size: 13px;\r\n  color: #595959;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* 测试中的动画和状态 */\r\n.loading-spinner {\r\n  width: 24px;\r\n  height: 24px;\r\n  border: 2px solid #f3f3f3;\r\n  border-top: 2px solid #fa8c16;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  position: absolute;\r\n  top: 16px;\r\n  left: 16px;\r\n}\r\n\r\n.testing-icon {\r\n  margin-left: 4px;\r\n  z-index: 1;\r\n}\r\n\r\n.testing-info {\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.info-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.info-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n.info-value {\r\n  color: #262626;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n.info-value.status-active {\r\n  color: #fa8c16;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n/* 进度条 */\r\n.progress-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.progress-bar {\r\n  width: 100%;\r\n  height: 6px;\r\n  background: #f5f5f5;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.progress-fill {\r\n  height: 100%;\r\n  background: linear-gradient(90deg, #1890ff, #40a9ff, #69c0ff, #40a9ff, #1890ff);\r\n  background-size: 200% 100%;\r\n  border-radius: 3px;\r\n  animation: progressFlow 2s ease-in-out infinite;\r\n}\r\n\r\n.progress-text {\r\n  text-align: center;\r\n  font-size: 13px;\r\n  color: #8c8c8c;\r\n  font-style: italic;\r\n}\r\n\r\n/* 结果阶段 */\r\n.success-icon {\r\n  font-size: 32px;\r\n  animation: bounce 0.6s ease-out;\r\n}\r\n\r\n.result-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.result-card {\r\n  text-align: center;\r\n  padding: 24px 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n  transition: all 0.3s ease;\r\n  animation: fadeInUp 0.5s ease-out;\r\n}\r\n\r\n.result-card.success {\r\n  border-color: #d9f7be;\r\n  background: #f6ffed;\r\n}\r\n\r\n.result-card.error {\r\n  border-color: #ffccc7;\r\n  background: #fff2f0;\r\n}\r\n\r\n.result-card.primary {\r\n  border-color: #91caff;\r\n  background: #f0f7ff;\r\n}\r\n\r\n.result-card:nth-child(1) { animation-delay: 0.1s; }\r\n.result-card:nth-child(2) { animation-delay: 0.2s; }\r\n.result-card:nth-child(3) { animation-delay: 0.3s; }\r\n\r\n.result-number {\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n  line-height: 1;\r\n}\r\n\r\n.result-card.success .result-number { color: #52c41a; }\r\n.result-card.error .result-number { color: #ff4d4f; }\r\n.result-card.primary .result-number { color: #1890ff; }\r\n\r\n.result-label {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.result-summary {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: rgba(82, 196, 26, 0.05);\r\n  border-radius: 8px;\r\n  border: 1px solid rgba(82, 196, 26, 0.2);\r\n  margin-bottom: 24px;\r\n  animation: fadeIn 0.5s ease-in 0.4s both;\r\n}\r\n\r\n.summary-item {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.summary-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.summary-item.success-rate .summary-value {\r\n  color: #52c41a;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n}\r\n\r\n.summary-item.test-time .summary-value {\r\n  color: #8c8c8c;\r\n  font-size: 13px;\r\n}\r\n\r\n.summary-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 按钮操作区域 */\r\n.modal-actions {\r\n  text-align: center;\r\n  margin-top: 8px;\r\n}\r\n\r\n/* 动画定义 */\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@keyframes pulse {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.6; }\r\n}\r\n\r\n@keyframes progressFlow {\r\n  0% { background-position: 200% 0; }\r\n  100% { background-position: -200% 0; }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes bounce {\r\n  0%, 20%, 53%, 80%, 100% {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n  40%, 43% {\r\n    transform: translate3d(0, -8px, 0);\r\n  }\r\n  70% {\r\n    transform: translate3d(0, -4px, 0);\r\n  }\r\n  90% {\r\n    transform: translate3d(0, -2px, 0);\r\n  }\r\n}\r\n\r\n:deep(.ping-info-header) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n  padding: 16px;\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  border-radius: 8px;\r\n  border: 1px solid #d4edda;\r\n}\r\n\r\n:deep(.ping-icon) {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 48px;\r\n  height: 48px;\r\n  background: rgba(24, 144, 255, 0.1);\r\n  border-radius: 50%;\r\n}\r\n\r\n:deep(.ping-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.ping-stats) {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n  background: #fafafa;\r\n  border-radius: 6px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n:deep(.stat-item) {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n:deep(.stat-label) {\r\n  font-size: 14px;\r\n  color: #666;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.stat-value) {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.stat-value.primary) {\r\n  color: #1890ff;\r\n  background: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n:deep(.stat-value.success) {\r\n  color: #52c41a;\r\n  background: rgba(82, 196, 26, 0.1);\r\n}\r\n\r\n:deep(.stat-value.error) {\r\n  color: #ff4d4f;\r\n  background: rgba(255, 77, 79, 0.1);\r\n}\r\n\r\n:deep(.ping-description) {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n:deep(.ping-warning) {\r\n  padding: 12px;\r\n  background: rgba(250, 140, 22, 0.05);\r\n  border: 1px solid rgba(250, 140, 22, 0.2);\r\n  border-radius: 6px;\r\n}\r\n\r\n/* 批量Ping结果弹窗样式 */\r\n:deep(.ping-result-content) {\r\n  padding: 8px 0;\r\n}\r\n\r\n:deep(.result-header) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n  background: linear-gradient(135deg, #f6ffed 0%, #f0f9e8 100%);\r\n  border-radius: 8px;\r\n  border: 1px solid #d9f7be;\r\n}\r\n\r\n:deep(.result-icon.success) {\r\n  font-size: 32px;\r\n  color: #52c41a;\r\n}\r\n\r\n:deep(.result-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #52c41a;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.result-stats) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.result-grid) {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n:deep(.result-item) {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n:deep(.result-number) {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n:deep(.result-number.success) {\r\n  color: #52c41a;\r\n}\r\n\r\n:deep(.result-number.error) {\r\n  color: #ff4d4f;\r\n}\r\n\r\n:deep(.result-number.primary) {\r\n  color: #1890ff;\r\n}\r\n\r\n:deep(.result-label) {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.result-summary) {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: rgba(82, 196, 26, 0.05);\r\n  border-radius: 6px;\r\n  border: 1px solid rgba(82, 196, 26, 0.2);\r\n}\r\n\r\n/* 进度消息美化 */\r\n:deep(.ant-message-custom-content) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n/* 弹窗按钮美化 */\r\n:deep(.ant-modal-confirm .ant-btn-primary) {\r\n  background: linear-gradient(135deg, #1890ff 0%, #40a9ff 100%);\r\n  border: none;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.3);\r\n}\r\n\r\n:deep(.ant-modal-confirm .ant-btn-primary:hover) {\r\n  background: linear-gradient(135deg, #40a9ff 0%, #69c0ff 100%);\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.4);\r\n}\r\n\r\n/* Zabbix模板选择抽屉样式 */\r\n.template-drawer-content {\r\n  padding: 0;\r\n}\r\n\r\n.ip-info-card {\r\n  margin-bottom: 24px;\r\n  border-radius: 12px;\r\n  border: 1px solid #e8f3ff;\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n.ip-info-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.ip-icon {\r\n  font-size: 24px;\r\n  color: #1890ff;\r\n}\r\n\r\n.ip-details h4 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.ip-details p {\r\n  margin: 0;\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n}\r\n\r\n/* 搜索和筛选区域 */\r\n.template-search-section {\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n  background: #fafafa;\r\n  border-radius: 12px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.search-bar {\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n}\r\n\r\n.search-bar .ant-input-search {\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.search-bar .ant-input-search:hover {\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.15);\r\n}\r\n\r\n.search-bar .ant-input-search:focus-within {\r\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.category-filter {\r\n  margin: 16px 0;\r\n  padding-bottom: 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n.category-filter-tag {\r\n  margin-bottom: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  padding: 8px 12px;\r\n  font-size: 13px;\r\n  border-radius: 8px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  background: #f5f5f5;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.category-filter-tag:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  background: white;\r\n}\r\n\r\n.category-filter-tag-selected {\r\n  background: #1890ff !important;\r\n  color: white !important;\r\n  border-color: #1890ff !important;\r\n}\r\n\r\n.category-filter-tag-selected .category-count {\r\n  color: rgba(255, 255, 255, 0.8) !important;\r\n}\r\n\r\n.category-filter-tag-selected .category-selected {\r\n  background: white !important;\r\n  color: #1890ff !important;\r\n}\r\n\r\n.category-tag-selected {\r\n  background: #1890ff !important;\r\n  color: white !important;\r\n  border-color: #1890ff !important;\r\n}\r\n\r\n.category-filter-icon {\r\n  font-size: 14px;\r\n}\r\n\r\n.category-count {\r\n  font-weight: 600;\r\n  margin-left: 4px;\r\n}\r\n\r\n.category-selected {\r\n  background: rgba(255, 255, 255, 0.3);\r\n  padding: 2px 6px;\r\n  border-radius: 8px;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  margin-left: 4px;\r\n}\r\n\r\n.clear-filter-tag {\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 模板列表 */\r\n.template-list {\r\n  max-height: calc(100vh - 400px);\r\n  overflow-y: auto;\r\n}\r\n\r\n.empty-templates {\r\n  text-align: center;\r\n  padding: 80px 20px;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n.empty-templates .ant-empty {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.empty-templates .ant-empty-image {\r\n  height: 120px;\r\n}\r\n\r\n.empty-templates .ant-empty-description {\r\n  font-size: 15px;\r\n  color: #666;\r\n}\r\n\r\n.empty-templates .ant-btn {\r\n  margin-top: 16px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.template-loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 300px;\r\n  padding: 40px;\r\n}\r\n\r\n.template-loading-spinner {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 4px solid #f0f0f0;\r\n  border-top: 4px solid #1890ff;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n.selected-templates-info {\r\n  margin-bottom: 20px;\r\n  animation: slideDown 0.3s ease-out;\r\n}\r\n\r\n.search-results-info {\r\n  margin: 12px 0;\r\n  padding: 12px 16px;\r\n  background: #f6f6f6;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  color: #666;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n.search-results-info strong {\r\n  color: #1890ff;\r\n  font-weight: 600;\r\n}\r\n\r\n@keyframes slideDown {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.template-grid {\r\n  animation: fadeIn 0.5s ease;\r\n}\r\n\r\n.template-card {\r\n  animation: fadeInUp 0.4s ease-out;\r\n  animation-fill-mode: both;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n/* 分类样式 */\r\n.template-category {\r\n  margin-bottom: 20px;\r\n  border: 1px solid #f0f0f0;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background: white;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.category-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 12px 16px;\r\n  background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.category-title-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  flex: 1;\r\n}\r\n\r\n.category-title {\r\n  margin: 0;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.category-icon {\r\n  font-size: 16px;\r\n  color: #1890ff;\r\n}\r\n\r\n.category-stats {\r\n  display: flex;\r\n  gap: 8px;\r\n  align-items: center;\r\n}\r\n\r\n.selected-badge {\r\n  margin-left: 8px;\r\n}\r\n\r\n.expand-button {\r\n  color: #666;\r\n  border: none;\r\n  background: transparent;\r\n}\r\n\r\n.expand-button:hover {\r\n  color: #1890ff;\r\n  background: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n/* 模板网格 */\r\n.template-grid-wrapper {\r\n  padding: 16px;\r\n  overflow: hidden;\r\n  max-width: 100%;\r\n}\r\n\r\n.template-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\r\n  gap: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0;\r\n  justify-content: start;\r\n}\r\n\r\n.template-card-container {\r\n  position: relative;\r\n}\r\n\r\n.template-checkbox {\r\n  width: 100%;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.template-checkbox .ant-checkbox) {\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 12px;\r\n  z-index: 10;\r\n  background: white;\r\n  border-radius: 50%;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.template-card {\r\n  width: 100%;\r\n  max-width: 260px;\r\n  height: 140px;\r\n  border-radius: 8px;\r\n  border: 1px solid #e8e8e8;\r\n  transition: all 0.2s ease;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  background: #ffffff;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.06);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.template-card:hover {\r\n  border-color: #40a9ff;\r\n  box-shadow: 0 12px 24px rgba(24, 144, 255, 0.25);\r\n  transform: translateY(-6px);\r\n}\r\n\r\n.template-card.selected {\r\n  border-color: #40a9ff;\r\n  background: linear-gradient(135deg, #e6f7ff 0%, #d6f0ff 100%);\r\n  box-shadow: 0 12px 28px rgba(24, 144, 255, 0.35);\r\n  transform: translateY(-6px);\r\n}\r\n\r\n.template-card.selected::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 0;\r\n  height: 0;\r\n  border-style: solid;\r\n  border-width: 0 36px 36px 0;\r\n  border-color: transparent #40a9ff transparent transparent;\r\n}\r\n\r\n.template-card.selected::before {\r\n  content: '✓';\r\n  position: absolute;\r\n  top: 6px;\r\n  right: 6px;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  z-index: 2;\r\n}\r\n\r\n:deep(.template-card .ant-card-head) {\r\n  min-height: auto;\r\n  padding: 12px 16px 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);\r\n}\r\n\r\n:deep(.template-card .ant-card-head-title) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.template-card .ant-card-body) {\r\n  padding: 12px 16px;\r\n  height: calc(100% - 50px);\r\n  overflow: hidden;\r\n}\r\n\r\n.template-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  width: 100%;\r\n  padding: 8px 10px;\r\n  background: #fafafa;\r\n  border-bottom: 1px solid #e8e8e8;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.template-icon {\r\n  font-size: 14px;\r\n  color: #1890ff;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.template-name {\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  flex: 1;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.template-card:hover .template-name {\r\n  color: #40a9ff;\r\n}\r\n\r\n.template-content {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 8px 10px;\r\n  flex: 1;\r\n}\r\n\r\n.template-description {\r\n  font-size: 12px;\r\n  color: #666;\r\n  line-height: 1.4;\r\n  margin-bottom: 8px;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.template-stats {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 6px 0;\r\n  padding: 6px 8px;\r\n  background: #f8f9fa;\r\n  border-radius: 4px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.stat-item {\r\n  text-align: center;\r\n  flex: 1;\r\n}\r\n\r\n.stat-label {\r\n  display: block;\r\n  font-size: 10px;\r\n  color: #666;\r\n  margin-bottom: 1px;\r\n  font-weight: 400;\r\n}\r\n\r\n.stat-value {\r\n  display: block;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n}\r\n\r\n.template-groups {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 3px;\r\n  align-items: center;\r\n  margin-top: auto;\r\n  padding-top: 4px;\r\n}\r\n\r\n.template-groups .ant-tag {\r\n  font-size: 9px;\r\n  padding: 1px 4px;\r\n  margin: 0;\r\n  border-radius: 8px;\r\n  background: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n  color: #1890ff;\r\n  line-height: 1.2;\r\n}\r\n\r\n.template-groups .ant-tag:hover {\r\n  background: linear-gradient(135deg, #e0e0e0 0%, #d0d0d0 100%);\r\n}\r\n\r\n.more-groups {\r\n  font-size: 10px;\r\n  color: #888;\r\n  font-weight: 500;\r\n  background: #f5f5f5;\r\n  padding: 1px 4px;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 模板抽屉响应式设计 */\r\n@media (max-width: 1400px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 14px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 12px;\r\n  }\r\n  \r\n  .template-card {\r\n    height: 140px;\r\n  }\r\n  \r\n  .template-header {\r\n    padding: 10px 10px 5px;\r\n  }\r\n  \r\n  .template-name {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .template-icon {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .template-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .template-grid-wrapper {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .template-card {\r\n    height: 120px;\r\n  }\r\n  \r\n  .template-header {\r\n    padding: 8px 8px 4px;\r\n    gap: 6px;\r\n  }\r\n  \r\n  .template-name {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-icon {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-stats {\r\n    margin: 6px 0;\r\n    padding: 6px 0;\r\n  }\r\n  \r\n  .stat-label {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .stat-value {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-groups {\r\n    margin-top: 6px;\r\n    padding: 0 8px;\r\n    gap: 3px;\r\n  }\r\n  \r\n  .template-groups .ant-tag {\r\n    font-size: 9px;\r\n    padding: 1px 4px;\r\n  }\r\n  \r\n  .more-groups {\r\n    font-size: 9px;\r\n    padding: 1px 3px;\r\n  }\r\n  \r\n  .category-header {\r\n    padding: 10px 12px;\r\n  }\r\n  \r\n  .category-title {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .category-icon {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .template-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .category-header {\r\n    padding: 12px 16px;\r\n  }\r\n  \r\n  .template-search-section {\r\n    padding: 16px;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}