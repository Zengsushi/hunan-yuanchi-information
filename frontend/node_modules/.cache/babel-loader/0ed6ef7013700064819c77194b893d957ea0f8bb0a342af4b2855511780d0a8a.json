{"ast":null,"code":"/**\r\n * WebSocket集成模块\r\n * 处理用户登录时的WebSocket连接建立和踢出通知处理\r\n */\n\nimport websocketManager from './websocketManager';\nimport { message } from 'ant-design-vue';\nclass WebSocketIntegration {\n  constructor() {\n    this.isInitialized = false;\n    this.currentUser = null;\n\n    // 绑定事件处理器\n    this.setupEventHandlers();\n  }\n\n  /**\r\n   * 初始化WebSocket集成\r\n   * 在用户登录后调用\r\n   */\n  initialize() {\n    if (this.isInitialized) {\n      console.log('WebSocket集成已初始化，跳过重复初始化');\n\n      // 检查是否需要重新连接\n      const token = localStorage.getItem('token');\n      const isLoggedIn = localStorage.getItem('isLoggedIn');\n      if (token && isLoggedIn === 'true' && !websocketManager.isConnected()) {\n        console.log('检测到未连接，尝试重新连接WebSocket...');\n        this.connectWebSocket(token);\n      }\n      return;\n    }\n    const token = localStorage.getItem('token');\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\n    if (token && isLoggedIn === 'true') {\n      console.log('初始化WebSocket连接...');\n      this.connectWebSocket(token);\n    } else {\n      console.log('用户未登录，跳过WebSocket初始化');\n    }\n    this.isInitialized = true;\n  }\n\n  /**\r\n   * 建立WebSocket连接\r\n   * @param {string} token - 用户认证token\r\n   */\n  connectWebSocket(token) {\n    if (!token) {\n      console.warn('无法建立WebSocket连接：缺少token');\n      return;\n    }\n\n    // 如果已经有连接，先检查状态\n    if (websocketManager.isConnected()) {\n      console.log('WebSocket已连接，跳过重复连接');\n      return;\n    }\n    try {\n      console.log('开始建立WebSocket连接...');\n      const success = websocketManager.connect(token);\n      if (success) {\n        console.log('WebSocket连接已启动');\n      } else {\n        console.log('WebSocket连接被跳过（可能已存在连接）');\n      }\n    } catch (error) {\n      console.error('启动WebSocket连接失败:', error);\n    }\n  }\n\n  /**\r\n   * 断开WebSocket连接\r\n   */\n  disconnectWebSocket() {\n    try {\n      websocketManager.disconnect();\n      console.log('WebSocket连接已断开');\n    } catch (error) {\n      console.error('断开WebSocket连接失败:', error);\n    }\n  }\n\n  /**\r\n   * 设置事件处理器\r\n   */\n  setupEventHandlers() {\n    // 连接建立事件\n    websocketManager.on('onConnected', event => {\n      console.log('WebSocket连接已建立');\n\n      // 可以在这里添加连接成功的提示\n      // message.success({\n      //   content: '实时通信连接已建立',\n      //   duration: 2\n      // });\n    });\n\n    // 连接断开事件\n    websocketManager.on('onDisconnected', event => {\n      console.log('WebSocket连接已断开');\n\n      // 如果是异常断开，可以提示用户\n      if (event.code !== 1000 && this.isLoggedIn()) {\n        console.warn('WebSocket连接异常断开，将尝试重连');\n      }\n    });\n\n    // 被踢出事件\n    websocketManager.on('onKickedOut', data => {\n      console.warn('收到踢出通知:', data);\n      this.handleKickedOut(data);\n    });\n\n    // 强制登出事件\n    websocketManager.on('onForceLogout', data => {\n      console.warn('收到强制登出通知:', data);\n      this.handleForceLogout(data);\n    });\n\n    // 连接错误事件\n    websocketManager.on('onError', error => {\n      console.error('WebSocket连接错误:', error);\n\n      // 如果用户已登录但WebSocket连接失败，可以提示\n      if (this.isLoggedIn()) {\n        console.warn('实时通信连接出现问题，某些功能可能受到影响');\n      }\n    });\n  }\n\n  /**\r\n   * 处理被踢出通知\r\n   * @param {Object} data - 踢出通知数据\r\n   */\n  handleKickedOut(data) {\n    const {\n      message: kickMessage,\n      reason,\n      kicked_by\n    } = data;\n    console.log('处理被踢出通知:', data);\n    console.log('kickMessage:', kickMessage);\n    console.log('reason:', reason);\n    console.log('kicked_by:', kicked_by);\n    console.log('即将显示倒计时提示');\n\n    // 创建倒计时功能\n    this.showKickOutCountdown(kickMessage, reason, kicked_by);\n    console.log('倒计时功能已启动');\n  }\n\n  /**\r\n   * 显示被踢出倒计时提示\r\n   * @param {string} kickMessage - 踢出消息\r\n   * @param {string} reason - 踢出原因\r\n   * @param {string} kicked_by - 操作者\r\n   */\n  showKickOutCountdown(kickMessage, reason, kicked_by) {\n    console.log('开始显示踢出倒计时提示');\n    console.log('参数:', {\n      kickMessage,\n      reason,\n      kicked_by\n    });\n    let countdown = 5; // 5秒倒计时\n\n    // 创建带倒计时的消息内容\n    const updateMessage = () => {\n      const messageObj = {\n        content: `${kickMessage} - ${countdown}秒后自动退出`,\n        description: `原因：${reason} (操作者：${kicked_by})`,\n        duration: 0,\n        // 不自动消失\n        key: 'kick-out-notification',\n        // 唯一标识符，用于更新消息\n        onClose: () => {\n          console.log('用户手动关闭踢出提示');\n          // 如果用户手动关闭，也要执行登出\n          this.performLogout('kicked');\n        }\n      };\n      console.log('生成的消息对象:', messageObj);\n      return messageObj;\n    };\n\n    // 显示初始消息\n    console.log('显示初始踢出消息');\n    message.error(updateMessage());\n    console.log('初始消息已显示');\n\n    // 开始倒计时\n    console.log('开始5秒倒计时');\n    const timer = setInterval(() => {\n      countdown--;\n      console.log(`倒计时: ${countdown}秒`);\n      if (countdown > 0) {\n        // 更新消息\n        console.log('更新踢出消息');\n        message.error(updateMessage());\n      } else {\n        // 倒计时结束，清除定时器并执行登出\n        console.log('倒计时结束，清除定时器');\n        clearInterval(timer);\n\n        // 显示最后一个消息\n        console.log('显示最后一个踢出消息');\n        message.error({\n          content: `${kickMessage} - 正在退出登录...`,\n          description: `原因：${reason} (操作者：${kicked_by})`,\n          duration: 2,\n          key: 'kick-out-notification'\n        });\n\n        // 执行登出\n        console.log('即将执行登出操作');\n        setTimeout(() => {\n          this.performLogout('kicked');\n        }, 500);\n      }\n    }, 1000);\n    console.log('倒计时定时器已设置');\n  }\n\n  /**\r\n   * 处理强制登出通知\r\n   * @param {Object} data - 强制登出通知数据\r\n   */\n  handleForceLogout(data) {\n    const {\n      message: logoutMessage,\n      reason\n    } = data;\n    console.log('处理强制登出通知:', data);\n\n    // 创建倒计时功能\n    this.showForceLogoutCountdown(logoutMessage, reason);\n  }\n\n  /**\r\n   * 显示强制登出倒计时提示\r\n   * @param {string} logoutMessage - 登出消息\r\n   * @param {string} reason - 登出原因\r\n   */\n  showForceLogoutCountdown(logoutMessage, reason) {\n    let countdown = 5; // 5秒倒计时\n\n    // 创建带倒计时的消息内容\n    const updateMessage = () => {\n      return {\n        content: `${logoutMessage} - ${countdown}秒后自动退出`,\n        description: `原因：${reason}`,\n        duration: 0,\n        // 不自动消失\n        key: 'force-logout-notification',\n        // 唯一标识符\n        onClose: () => {\n          // 如果用户手动关闭，也要执行登出\n          this.performLogout('force');\n        }\n      };\n    };\n\n    // 显示初始消息\n    message.warning(updateMessage());\n\n    // 开始倒计时\n    const timer = setInterval(() => {\n      countdown--;\n      if (countdown > 0) {\n        // 更新消息\n        message.warning(updateMessage());\n      } else {\n        // 倒计时结束，清除定时器并执行登出\n        clearInterval(timer);\n\n        // 显示最后一个消息\n        message.warning({\n          content: `${logoutMessage} - 正在退出登录...`,\n          description: `原因：${reason}`,\n          duration: 2,\n          key: 'force-logout-notification'\n        });\n\n        // 执行登出\n        setTimeout(() => {\n          this.performLogout('force');\n        }, 500);\n      }\n    }, 1000);\n  }\n\n  /**\r\n   * 执行登出操作\r\n   * @param {string} reason - 登出原因\r\n   */\n  performLogout(reason = 'normal') {\n    console.log(`执行登出操作，原因：${reason}`);\n    try {\n      // 断开WebSocket连接\n      this.disconnectWebSocket();\n\n      // 清除本地存储的登录状态\n      localStorage.removeItem('token');\n      localStorage.removeItem('userInfo');\n      localStorage.removeItem('isLoggedIn');\n      localStorage.removeItem('userType');\n      localStorage.removeItem('username');\n      localStorage.removeItem('isAdmin');\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('remember_user');\n      localStorage.removeItem('remember_mode');\n\n      // 根据登出原因显示不同的消息\n      const messages = {\n        kicked: '',\n        // 不再显示，因为已经在handleKickedOut中显示过了\n        force: '',\n        // 不再显示，因为已经在handleForceLogout中显示过了\n        normal: '已退出登录'\n      };\n\n      // 只有在非WebSocket触发的登出情况下才显示消息\n      if (reason === 'normal') {\n        message.info({\n          content: messages[reason] || messages.normal,\n          duration: 2\n        });\n      }\n\n      // 跳转到登录页面\n      setTimeout(() => {\n        window.location.href = '/#/login';\n      }, 1000);\n    } catch (error) {\n      console.error('执行登出操作时出错:', error);\n\n      // 即使出错也要强制跳转到登录页\n      setTimeout(() => {\n        window.location.href = '/#/login';\n      }, 1000);\n    }\n  }\n\n  /**\r\n   * 检查用户是否已登录\r\n   */\n  isLoggedIn() {\n    const token = localStorage.getItem('token');\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\n    return token && isLoggedIn === 'true';\n  }\n\n  /**\r\n   * 获取WebSocket连接状态\r\n   */\n  getConnectionStatus() {\n    return websocketManager.getStatus();\n  }\n\n  /**\r\n   * 检查WebSocket是否已连接\r\n   */\n  isWebSocketConnected() {\n    return websocketManager.isConnected();\n  }\n\n  /**\r\n   * 发送WebSocket消息\r\n   * @param {Object} message - 消息对象\r\n   */\n  sendMessage(message) {\n    return websocketManager.send(message);\n  }\n\n  /**\r\n   * 添加自定义事件监听器\r\n   * @param {string} eventType - 事件类型\r\n   * @param {Function} callback - 回调函数\r\n   */\n  addEventListener(eventType, callback) {\n    websocketManager.on(eventType, callback);\n  }\n\n  /**\r\n   * 移除自定义事件监听器\r\n   * @param {string} eventType - 事件类型\r\n   * @param {Function} callback - 回调函数\r\n   */\n  removeEventListener(eventType, callback) {\n    websocketManager.off(eventType, callback);\n  }\n\n  /**\r\n   * 清理资源\r\n   */\n  cleanup() {\n    this.disconnectWebSocket();\n    this.isInitialized = false;\n    this.currentUser = null;\n  }\n\n  /**\r\n   * 重置 WebSocket 集成状态\r\n   * 用于新的登录会话\r\n   */\n  reset() {\n    console.log('重置 WebSocket 集成状态...');\n    this.disconnectWebSocket();\n    this.isInitialized = false;\n    this.currentUser = null;\n  }\n}\n\n// 创建全局WebSocket集成实例\nconst webSocketIntegration = new WebSocketIntegration();\n\n// 初始化逻辑已移到用户登录成功后的API调用中\n\nexport default webSocketIntegration;","map":{"version":3,"names":["websocketManager","message","WebSocketIntegration","constructor","isInitialized","currentUser","setupEventHandlers","initialize","console","log","token","localStorage","getItem","isLoggedIn","isConnected","connectWebSocket","warn","success","connect","error","disconnectWebSocket","disconnect","on","event","code","data","handleKickedOut","handleForceLogout","kickMessage","reason","kicked_by","showKickOutCountdown","countdown","updateMessage","messageObj","content","description","duration","key","onClose","performLogout","timer","setInterval","clearInterval","setTimeout","logoutMessage","showForceLogoutCountdown","warning","removeItem","messages","kicked","force","normal","info","window","location","href","getConnectionStatus","getStatus","isWebSocketConnected","sendMessage","send","addEventListener","eventType","callback","removeEventListener","off","cleanup","reset","webSocketIntegration"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/utils/webSocketIntegration.js"],"sourcesContent":["/**\r\n * WebSocket集成模块\r\n * 处理用户登录时的WebSocket连接建立和踢出通知处理\r\n */\r\n\r\nimport websocketManager from './websocketManager';\r\nimport { message } from 'ant-design-vue';\r\n\r\nclass WebSocketIntegration {\r\n  constructor() {\r\n    this.isInitialized = false;\r\n    this.currentUser = null;\r\n    \r\n    // 绑定事件处理器\r\n    this.setupEventHandlers();\r\n  }\r\n\r\n  /**\r\n   * 初始化WebSocket集成\r\n   * 在用户登录后调用\r\n   */\r\n  initialize() {\r\n    if (this.isInitialized) {\r\n      console.log('WebSocket集成已初始化，跳过重复初始化');\r\n      \r\n      // 检查是否需要重新连接\r\n      const token = localStorage.getItem('token');\r\n      const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n      \r\n      if (token && isLoggedIn === 'true' && !websocketManager.isConnected()) {\r\n        console.log('检测到未连接，尝试重新连接WebSocket...');\r\n        this.connectWebSocket(token);\r\n      }\r\n      return;\r\n    }\r\n\r\n    const token = localStorage.getItem('token');\r\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n    \r\n    if (token && isLoggedIn === 'true') {\r\n      console.log('初始化WebSocket连接...');\r\n      this.connectWebSocket(token);\r\n    } else {\r\n      console.log('用户未登录，跳过WebSocket初始化');\r\n    }\r\n    \r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * 建立WebSocket连接\r\n   * @param {string} token - 用户认证token\r\n   */\r\n  connectWebSocket(token) {\r\n    if (!token) {\r\n      console.warn('无法建立WebSocket连接：缺少token');\r\n      return;\r\n    }\r\n\r\n    // 如果已经有连接，先检查状态\r\n    if (websocketManager.isConnected()) {\r\n      console.log('WebSocket已连接，跳过重复连接');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('开始建立WebSocket连接...');\r\n      const success = websocketManager.connect(token);\r\n      if (success) {\r\n        console.log('WebSocket连接已启动');\r\n      } else {\r\n        console.log('WebSocket连接被跳过（可能已存在连接）');\r\n      }\r\n    } catch (error) {\r\n      console.error('启动WebSocket连接失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 断开WebSocket连接\r\n   */\r\n  disconnectWebSocket() {\r\n    try {\r\n      websocketManager.disconnect();\r\n      console.log('WebSocket连接已断开');\r\n    } catch (error) {\r\n      console.error('断开WebSocket连接失败:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 设置事件处理器\r\n   */\r\n  setupEventHandlers() {\r\n    // 连接建立事件\r\n    websocketManager.on('onConnected', (event) => {\r\n      console.log('WebSocket连接已建立');\r\n      \r\n      // 可以在这里添加连接成功的提示\r\n      // message.success({\r\n      //   content: '实时通信连接已建立',\r\n      //   duration: 2\r\n      // });\r\n    });\r\n\r\n    // 连接断开事件\r\n    websocketManager.on('onDisconnected', (event) => {\r\n      console.log('WebSocket连接已断开');\r\n      \r\n      // 如果是异常断开，可以提示用户\r\n      if (event.code !== 1000 && this.isLoggedIn()) {\r\n        console.warn('WebSocket连接异常断开，将尝试重连');\r\n      }\r\n    });\r\n\r\n    // 被踢出事件\r\n    websocketManager.on('onKickedOut', (data) => {\r\n      console.warn('收到踢出通知:', data);\r\n      this.handleKickedOut(data);\r\n    });\r\n\r\n    // 强制登出事件\r\n    websocketManager.on('onForceLogout', (data) => {\r\n      console.warn('收到强制登出通知:', data);\r\n      this.handleForceLogout(data);\r\n    });\r\n\r\n    // 连接错误事件\r\n    websocketManager.on('onError', (error) => {\r\n      console.error('WebSocket连接错误:', error);\r\n      \r\n      // 如果用户已登录但WebSocket连接失败，可以提示\r\n      if (this.isLoggedIn()) {\r\n        console.warn('实时通信连接出现问题，某些功能可能受到影响');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理被踢出通知\r\n   * @param {Object} data - 踢出通知数据\r\n   */\r\n  handleKickedOut(data) {\r\n    const { message: kickMessage, reason, kicked_by } = data;\r\n    \r\n    console.log('处理被踢出通知:', data);\r\n    console.log('kickMessage:', kickMessage);\r\n    console.log('reason:', reason);\r\n    console.log('kicked_by:', kicked_by);\r\n    console.log('即将显示倒计时提示');\r\n    \r\n    // 创建倒计时功能\r\n    this.showKickOutCountdown(kickMessage, reason, kicked_by);\r\n    \r\n    console.log('倒计时功能已启动');\r\n  }\r\n\r\n  /**\r\n   * 显示被踢出倒计时提示\r\n   * @param {string} kickMessage - 踢出消息\r\n   * @param {string} reason - 踢出原因\r\n   * @param {string} kicked_by - 操作者\r\n   */\r\n  showKickOutCountdown(kickMessage, reason, kicked_by) {\r\n    console.log('开始显示踢出倒计时提示');\r\n    console.log('参数:', { kickMessage, reason, kicked_by });\r\n    \r\n    let countdown = 5; // 5秒倒计时\r\n    \r\n    // 创建带倒计时的消息内容\r\n    const updateMessage = () => {\r\n      const messageObj = {\r\n        content: `${kickMessage} - ${countdown}秒后自动退出`,\r\n        description: `原因：${reason} (操作者：${kicked_by})`,\r\n        duration: 0, // 不自动消失\r\n        key: 'kick-out-notification', // 唯一标识符，用于更新消息\r\n        onClose: () => {\r\n          console.log('用户手动关闭踢出提示');\r\n          // 如果用户手动关闭，也要执行登出\r\n          this.performLogout('kicked');\r\n        }\r\n      };\r\n      console.log('生成的消息对象:', messageObj);\r\n      return messageObj;\r\n    };\r\n    \r\n    // 显示初始消息\r\n    console.log('显示初始踢出消息');\r\n    message.error(updateMessage());\r\n    console.log('初始消息已显示');\r\n    \r\n    // 开始倒计时\r\n    console.log('开始5秒倒计时');\r\n    const timer = setInterval(() => {\r\n      countdown--;\r\n      console.log(`倒计时: ${countdown}秒`);\r\n      \r\n      if (countdown > 0) {\r\n        // 更新消息\r\n        console.log('更新踢出消息');\r\n        message.error(updateMessage());\r\n      } else {\r\n        // 倒计时结束，清除定时器并执行登出\r\n        console.log('倒计时结束，清除定时器');\r\n        clearInterval(timer);\r\n        \r\n        // 显示最后一个消息\r\n        console.log('显示最后一个踢出消息');\r\n        message.error({\r\n          content: `${kickMessage} - 正在退出登录...`,\r\n          description: `原因：${reason} (操作者：${kicked_by})`,\r\n          duration: 2,\r\n          key: 'kick-out-notification'\r\n        });\r\n        \r\n        // 执行登出\r\n        console.log('即将执行登出操作');\r\n        setTimeout(() => {\r\n          this.performLogout('kicked');\r\n        }, 500);\r\n      }\r\n    }, 1000);\r\n    \r\n    console.log('倒计时定时器已设置');\r\n  }\r\n\r\n  /**\r\n   * 处理强制登出通知\r\n   * @param {Object} data - 强制登出通知数据\r\n   */\r\n  handleForceLogout(data) {\r\n    const { message: logoutMessage, reason } = data;\r\n    \r\n    console.log('处理强制登出通知:', data);\r\n    \r\n    // 创建倒计时功能\r\n    this.showForceLogoutCountdown(logoutMessage, reason);\r\n  }\r\n\r\n  /**\r\n   * 显示强制登出倒计时提示\r\n   * @param {string} logoutMessage - 登出消息\r\n   * @param {string} reason - 登出原因\r\n   */\r\n  showForceLogoutCountdown(logoutMessage, reason) {\r\n    let countdown = 5; // 5秒倒计时\r\n    \r\n    // 创建带倒计时的消息内容\r\n    const updateMessage = () => {\r\n      return {\r\n        content: `${logoutMessage} - ${countdown}秒后自动退出`,\r\n        description: `原因：${reason}`,\r\n        duration: 0, // 不自动消失\r\n        key: 'force-logout-notification', // 唯一标识符\r\n        onClose: () => {\r\n          // 如果用户手动关闭，也要执行登出\r\n          this.performLogout('force');\r\n        }\r\n      };\r\n    };\r\n    \r\n    // 显示初始消息\r\n    message.warning(updateMessage());\r\n    \r\n    // 开始倒计时\r\n    const timer = setInterval(() => {\r\n      countdown--;\r\n      \r\n      if (countdown > 0) {\r\n        // 更新消息\r\n        message.warning(updateMessage());\r\n      } else {\r\n        // 倒计时结束，清除定时器并执行登出\r\n        clearInterval(timer);\r\n        \r\n        // 显示最后一个消息\r\n        message.warning({\r\n          content: `${logoutMessage} - 正在退出登录...`,\r\n          description: `原因：${reason}`,\r\n          duration: 2,\r\n          key: 'force-logout-notification'\r\n        });\r\n        \r\n        // 执行登出\r\n        setTimeout(() => {\r\n          this.performLogout('force');\r\n        }, 500);\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  /**\r\n   * 执行登出操作\r\n   * @param {string} reason - 登出原因\r\n   */\r\n  performLogout(reason = 'normal') {\r\n    console.log(`执行登出操作，原因：${reason}`);\r\n    \r\n    try {\r\n      // 断开WebSocket连接\r\n      this.disconnectWebSocket();\r\n      \r\n      // 清除本地存储的登录状态\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userInfo');\r\n      localStorage.removeItem('isLoggedIn');\r\n      localStorage.removeItem('userType');\r\n      localStorage.removeItem('username');\r\n      localStorage.removeItem('isAdmin');\r\n      localStorage.removeItem('userRole');\r\n      localStorage.removeItem('remember_user');\r\n      localStorage.removeItem('remember_mode');\r\n      \r\n      // 根据登出原因显示不同的消息\r\n      const messages = {\r\n        kicked: '', // 不再显示，因为已经在handleKickedOut中显示过了\r\n        force: '',  // 不再显示，因为已经在handleForceLogout中显示过了\r\n        normal: '已退出登录'\r\n      };\r\n      \r\n      // 只有在非WebSocket触发的登出情况下才显示消息\r\n      if (reason === 'normal') {\r\n        message.info({\r\n          content: messages[reason] || messages.normal,\r\n          duration: 2\r\n        });\r\n      }\r\n      \r\n      // 跳转到登录页面\r\n      setTimeout(() => {\r\n        window.location.href = '/#/login';\r\n      }, 1000);\r\n      \r\n    } catch (error) {\r\n      console.error('执行登出操作时出错:', error);\r\n      \r\n      // 即使出错也要强制跳转到登录页\r\n      setTimeout(() => {\r\n        window.location.href = '/#/login';\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查用户是否已登录\r\n   */\r\n  isLoggedIn() {\r\n    const token = localStorage.getItem('token');\r\n    const isLoggedIn = localStorage.getItem('isLoggedIn');\r\n    return token && isLoggedIn === 'true';\r\n  }\r\n\r\n  /**\r\n   * 获取WebSocket连接状态\r\n   */\r\n  getConnectionStatus() {\r\n    return websocketManager.getStatus();\r\n  }\r\n\r\n  /**\r\n   * 检查WebSocket是否已连接\r\n   */\r\n  isWebSocketConnected() {\r\n    return websocketManager.isConnected();\r\n  }\r\n\r\n  /**\r\n   * 发送WebSocket消息\r\n   * @param {Object} message - 消息对象\r\n   */\r\n  sendMessage(message) {\r\n    return websocketManager.send(message);\r\n  }\r\n\r\n  /**\r\n   * 添加自定义事件监听器\r\n   * @param {string} eventType - 事件类型\r\n   * @param {Function} callback - 回调函数\r\n   */\r\n  addEventListener(eventType, callback) {\r\n    websocketManager.on(eventType, callback);\r\n  }\r\n\r\n  /**\r\n   * 移除自定义事件监听器\r\n   * @param {string} eventType - 事件类型\r\n   * @param {Function} callback - 回调函数\r\n   */\r\n  removeEventListener(eventType, callback) {\r\n    websocketManager.off(eventType, callback);\r\n  }\r\n\r\n  /**\r\n   * 清理资源\r\n   */\r\n  cleanup() {\r\n    this.disconnectWebSocket();\r\n    this.isInitialized = false;\r\n    this.currentUser = null;\r\n  }\r\n\r\n  /**\r\n   * 重置 WebSocket 集成状态\r\n   * 用于新的登录会话\r\n   */\r\n  reset() {\r\n    console.log('重置 WebSocket 集成状态...');\r\n    this.disconnectWebSocket();\r\n    this.isInitialized = false;\r\n    this.currentUser = null;\r\n  }\r\n}\r\n\r\n// 创建全局WebSocket集成实例\r\nconst webSocketIntegration = new WebSocketIntegration();\r\n\r\n// 初始化逻辑已移到用户登录成功后的API调用中\r\n\r\nexport default webSocketIntegration;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}