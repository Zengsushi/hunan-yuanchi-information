{"ast":null,"code":"import { ref, computed, onMounted, watch } from 'vue';\nimport { message } from 'ant-design-vue';\nimport { dictionaryAPI } from '@/api/index';\nimport { BookOutlined, PlusOutlined, ReloadOutlined, AppstoreOutlined, TagOutlined, DesktopOutlined, BellOutlined, GlobalOutlined, BarChartOutlined, SettingOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons-vue';\n\n// 响应式数据\n\nexport default {\n  __name: 'AdminDictionary',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const activeCategory = ref('user_category'); // 使用后端实际存在的分类\n    const searchText = ref('');\n    const loading = ref(false);\n    const initLoading = ref(false); // 初始化数据加载状态\n    const modalVisible = ref(false);\n    const isEditing = ref(false);\n    const formRef = ref(null);\n\n    // 分类管理相关状态\n    const categoryModalVisible = ref(false);\n    const manageCategoriesModalVisible = ref(false);\n    const editCategoryModalVisible = ref(false);\n    const categoryFormRef = ref(null);\n    const editCategoryFormRef = ref(null);\n\n    // 分类列表（从后端动态获取）\n    const categoryList = ref([]);\n    const allDictionaries = ref([]);\n\n    // 获取字典分类\n    const fetchCategories = async () => {\n      try {\n        const response = await dictionaryAPI.getDictionaryCategories();\n        if (response.data && response.data.code === 200) {\n          const categories = response.data.data || [];\n          if (categories.length > 0) {\n            categoryList.value = categories.map(cat => ({\n              key: cat.key,\n              name: cat.label,\n              icon: getIconByCategory(cat.key),\n              count: cat.count || 0\n            }));\n\n            // 设置默认激活分类\n            // 如果当前激活分类不在有效分类中，则使用第一个分类\n            const validKeys = categories.map(cat => cat.key);\n            if (!validKeys.includes(activeCategory.value)) {\n              activeCategory.value = categories[0].key;\n            }\n          } else {\n            console.warn('后端返回的分类列表为空，使用默认分类');\n          }\n        } else {\n          console.warn('获取字典分类响应异常:', response.data);\n          message.warning('获取字典分类失败，使用默认分类');\n        }\n      } catch (error) {\n        console.error('获取字典分类失败:', error);\n        if (error.response && error.response.status === 404) {\n          message.error('字典分类接口不存在，请检查后端配置');\n        } else {\n          message.error('获取字典分类失败，请检查网络连接');\n        }\n        // 使用默认分类作为备用\n      }\n    };\n\n    // 根据分类键名获取图标\n    const getIconByCategory = categoryKey => {\n      const iconMap = {\n        'user_category': AppstoreOutlined,\n        'system_config': TagOutlined,\n        'asset_type': DesktopOutlined,\n        'department': GlobalOutlined,\n        'status': BellOutlined,\n        'priority': BarChartOutlined,\n        'environment': GlobalOutlined,\n        // 兼容旧的分类名\n        'asset_category': DesktopOutlined,\n        'asset_status': BellOutlined,\n        'device_type': DesktopOutlined,\n        'alert_level': BellOutlined,\n        'network_type': GlobalOutlined,\n        'monitor_metric': BarChartOutlined\n      };\n      return iconMap[categoryKey] || AppstoreOutlined;\n    };\n\n    // 设置默认分类（备用方案）\n\n    // 获取字典数据\n    const fetchDictionaries = async () => {\n      if (!activeCategory.value) {\n        console.warn('没有选择分类，跳过获取字典数据');\n        return;\n      }\n      loading.value = true;\n      try {\n        const response = await dictionaryAPI.getDictionaryByCategory(activeCategory.value, {\n          simple: 'false' // 获取完整数据，不再过滤状态，让用户看到所有数据\n        });\n        if (response.data && response.data.code === 200) {\n          allDictionaries.value = response.data.data || [];\n          pagination.value.total = allDictionaries.value.length;\n          if (allDictionaries.value.length === 0) {\n            console.info(`分类 ${getCurrentCategoryName()} 暂无数据`);\n          }\n        } else if (response.data && response.data.code === 400) {\n          // 处理无效分类错误\n          console.error('无效的字典分类:', response.data);\n          message.error(`分类 \"${activeCategory.value}\" 无效: ${response.data.message}`);\n\n          // 如果是无效分类，回退到第一个有效分类\n          if (categoryList.value.length > 0) {\n            activeCategory.value = categoryList.value[0].key;\n            return; // 会触发watch重新获取数据\n          }\n          allDictionaries.value = [];\n          pagination.value.total = 0;\n        } else {\n          console.warn('获取字典数据响应异常:', response.data);\n          message.warning(`获取${getCurrentCategoryName()}数据失败`);\n          allDictionaries.value = [];\n          pagination.value.total = 0;\n        }\n      } catch (error) {\n        console.error('获取字典数据失败:', error);\n        if (error.response && error.response.status === 404) {\n          message.error('字典数据接口不存在，请检查后端配置');\n        } else {\n          message.error(`获取${getCurrentCategoryName()}数据失败，请检查网络连接`);\n        }\n        allDictionaries.value = [];\n        pagination.value.total = 0;\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 表格配置\n    const pagination = ref({\n      current: 1,\n      pageSize: 10,\n      total: 0,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: total => `共 ${total} 条记录`\n    });\n\n    // 表格列配置\n    const tableColumns = [{\n      title: '键名',\n      dataIndex: 'key',\n      key: 'key',\n      width: 150,\n      fixed: 'left'\n    }, {\n      title: '显示名称',\n      dataIndex: 'label',\n      key: 'label',\n      width: 150\n    }, {\n      title: '描述',\n      dataIndex: 'description',\n      key: 'description',\n      ellipsis: true\n    }, {\n      title: '优先级',\n      dataIndex: 'priority',\n      key: 'priority',\n      width: 100,\n      sorter: (a, b) => a.priority - b.priority\n    }, {\n      title: '状态',\n      dataIndex: 'status',\n      key: 'status',\n      width: 100\n    }, {\n      title: '创建时间',\n      dataIndex: 'created_at',\n      key: 'created_at',\n      width: 150\n    }, {\n      title: '操作',\n      key: 'actions',\n      width: 200,\n      fixed: 'right'\n    }];\n\n    // 表单数据和验证规则\n    const formData = ref({\n      category: '',\n      key: '',\n      label: '',\n      description: '',\n      priority: 0,\n      status: 'active',\n      config: ''\n    });\n    const formRules = {\n      category: [{\n        required: true,\n        message: '请选择字典分类'\n      }],\n      key: [{\n        required: true,\n        message: '请输入字典键名'\n      }, {\n        pattern: /^[a-zA-Z0-9_]+$/,\n        message: '键名只能包含字母、数字和下划线'\n      }],\n      label: [{\n        required: true,\n        message: '请输入显示名称'\n      }],\n      priority: [{\n        required: true,\n        message: '请输入排序权重'\n      }],\n      status: [{\n        required: true,\n        message: '请选择状态'\n      }]\n    };\n\n    // 分类表单数据和验证规则\n    const categoryFormData = ref({\n      key: '',\n      label: '',\n      description: ''\n    });\n    const editCategoryFormData = ref({\n      key: '',\n      label: '',\n      description: ''\n    });\n    const categoryFormRules = {\n      key: [{\n        required: true,\n        message: '请输入分类键名'\n      }, {\n        pattern: /^[a-zA-Z0-9_]+$/,\n        message: '键名只能包含字母、数字和下划线'\n      }],\n      label: [{\n        required: true,\n        message: '请输入分类名称'\n      }]\n    };\n\n    // 分类管理表格列配置\n    const categoryTableColumns = [{\n      title: '键名',\n      dataIndex: 'key',\n      key: 'key',\n      width: 150\n    }, {\n      title: '名称',\n      dataIndex: 'name',\n      key: 'name',\n      width: 150\n    }, {\n      title: '字典项数量',\n      dataIndex: 'count',\n      key: 'count',\n      width: 120\n    }, {\n      title: '操作',\n      key: 'actions',\n      width: 150\n    }];\n\n    // 计算属性\n    const currentDictionaries = computed(() => {\n      return allDictionaries.value;\n    });\n    const filteredDictionaries = computed(() => {\n      if (!searchText.value) {\n        return currentDictionaries.value;\n      }\n      return currentDictionaries.value.filter(item => item.key.toLowerCase().includes(searchText.value.toLowerCase()) || item.label.toLowerCase().includes(searchText.value.toLowerCase()) || item.description && item.description.toLowerCase().includes(searchText.value.toLowerCase()));\n    });\n\n    // 初始化字典数据\n    const initDictionaryData = async () => {\n      initLoading.value = true;\n      try {\n        const response = await dictionaryAPI.initDictionaryData();\n        console.log('初始化字典数据响应:', response.data);\n        if (response.data && response.data.code === 200) {\n          // 新的批量创建接口响应格式\n          const result = response.data.data || {};\n          const createdItems = result.created || [];\n          const updatedItems = result.updated || [];\n          const errors = result.errors || [];\n          const createdCount = createdItems.length;\n          const updatedCount = updatedItems.length;\n          const errorCount = errors.length;\n          const totalSuccess = createdCount + updatedCount;\n          if (totalSuccess > 0) {\n            // 有成功的操作\n            let successMessage = '初始化完成！';\n            const details = [];\n            if (createdCount > 0) details.push(`创建了 ${createdCount} 个`);\n            if (updatedCount > 0) details.push(`更新了 ${updatedCount} 个`);\n            if (errorCount > 0) details.push(`${errorCount} 个失败`);\n            successMessage += details.join('，') + '字典项';\n            message.success(successMessage);\n\n            // 刷新数据\n            await Promise.all([fetchCategories(), fetchDictionaries()]);\n            console.log('初始化结果:', {\n              createdCount,\n              updatedCount,\n              errorCount\n            });\n          } else {\n            // 全部失败\n            message.error(`初始化失败，所有 ${errorCount} 个字典项都处理失败`);\n            console.error('初始化全部失败:', errors);\n          }\n        } else {\n          const errorMessage = response.data?.message || '初始化失败';\n          message.error(errorMessage);\n          console.error('初始化失败响应:', response.data);\n        }\n      } catch (error) {\n        console.error('初始化字典数据失败:', error);\n        if (error.response && error.response.status === 401) {\n          message.error('需要登录认证，请重新登录');\n        } else if (error.response && error.response.status === 403) {\n          message.error('权限不足，需要管理员权限');\n        } else if (error.response && error.response.data) {\n          const errorData = error.response.data;\n          if (errorData.message) {\n            message.error(`初始化失败: ${errorData.message}`);\n          } else {\n            message.error('初始化失败，请检查网络连接');\n          }\n        } else {\n          message.error('初始化失败，请检查网络连接');\n        }\n      } finally {\n        initLoading.value = false;\n      }\n    };\n\n    // 方法\n    const getCurrentCategoryName = () => {\n      const category = categoryList.value.find(cat => cat.key === activeCategory.value);\n      return category ? category.name : '未知分类';\n    };\n    const getPriorityColor = priority => {\n      if (priority >= 90) return 'red';\n      if (priority >= 70) return 'orange';\n      if (priority >= 50) return 'blue';\n      return 'default';\n    };\n    const handleCategoryChange = key => {\n      activeCategory.value = key;\n      searchText.value = '';\n      pagination.value.current = 1;\n      fetchDictionaries(); // 获取新分类的数据\n    };\n    const handleSearch = () => {\n      pagination.value.current = 1;\n    };\n    const refreshData = async () => {\n      await Promise.all([fetchCategories(), fetchDictionaries()]);\n      message.success('数据刷新成功');\n    };\n    const showAddModal = () => {\n      isEditing.value = false;\n      modalVisible.value = true;\n      formData.value = {\n        category: activeCategory.value,\n        key: '',\n        label: '',\n        description: '',\n        priority: 0,\n        status: 'active',\n        config: ''\n      };\n    };\n    const editDictionary = record => {\n      isEditing.value = true;\n      modalVisible.value = true;\n      formData.value = {\n        ...record\n      };\n    };\n    const handleSubmit = async () => {\n      try {\n        await formRef.value.validate();\n\n        // 验证config格式（如果有值）\n        if (formData.value.config && formData.value.config.trim()) {\n          try {\n            JSON.parse(formData.value.config);\n          } catch (e) {\n            message.error('配置信息必须是有效的JSON格式');\n            return;\n          }\n        }\n        loading.value = true;\n\n        // 准备提交数据，清理空值\n        const submitData = {\n          ...formData.value\n        };\n        if (!submitData.config || !submitData.config.trim()) {\n          delete submitData.config;\n        }\n        if (isEditing.value) {\n          // 更新字典项\n          const response = await dictionaryAPI.updateDictionary(submitData.id, submitData);\n          if (response.data && response.data.code === 200) {\n            message.success('字典项更新成功');\n            await fetchDictionaries(); // 刷新数据\n            modalVisible.value = false;\n          } else {\n            const errorMsg = response.data?.message || response.data?.error || '更新失败';\n            message.error(errorMsg);\n          }\n        } else {\n          // 创建新字典项\n          const response = await dictionaryAPI.createDictionary(submitData);\n          if (response.data && response.data.code === 200) {\n            message.success('字典项创建成功');\n            await fetchDictionaries(); // 刷新数据\n            modalVisible.value = false;\n          } else {\n            const errorMsg = response.data?.message || response.data?.error || '创建失败';\n            message.error(errorMsg);\n          }\n        }\n      } catch (error) {\n        console.error('表单提交失败:', error);\n        if (error.response && error.response.data) {\n          const errorData = error.response.data;\n          if (errorData.error && typeof errorData.error === 'object') {\n            // 处理表单验证错误\n            const firstError = Object.values(errorData.error)[0];\n            message.error(Array.isArray(firstError) ? firstError[0] : firstError);\n          } else {\n            message.error(errorData.message || '操作失败');\n          }\n        } else {\n          message.error('操作失败，请检查网络连接后重试');\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n    const handleCancel = () => {\n      modalVisible.value = false;\n      if (formRef.value) {\n        formRef.value.resetFields();\n      }\n    };\n    const toggleStatus = async record => {\n      const newStatus = record.status === 'active' ? 'inactive' : 'active';\n      try {\n        loading.value = true;\n        const response = await dictionaryAPI.updateDictionary(record.id, {\n          ...record,\n          status: newStatus\n        });\n        if (response.data && response.data.code === 200) {\n          // 更新本地数据\n          const index = allDictionaries.value.findIndex(item => item.id === record.id);\n          if (index !== -1) {\n            allDictionaries.value[index].status = newStatus;\n          }\n          message.success(`字典项已${newStatus === 'active' ? '启用' : '禁用'}`);\n        } else {\n          message.error(response.data?.message || response.data?.error || '状态更新失败');\n        }\n      } catch (error) {\n        console.error('状态更新失败:', error);\n        message.error('状态更新失败，请检查网络连接');\n      } finally {\n        loading.value = false;\n      }\n    };\n    const deleteDictionary = async record => {\n      try {\n        loading.value = true;\n        const response = await dictionaryAPI.deleteDictionary(record.id);\n        if (response.data && response.data.code === 200) {\n          message.success('字典项删除成功');\n          // 更新本地数据而不是重新获取\n          allDictionaries.value = allDictionaries.value.filter(item => item.id !== record.id);\n          pagination.value.total = allDictionaries.value.length;\n        } else {\n          message.error(response.data?.message || response.data?.error || '删除失败');\n        }\n      } catch (error) {\n        console.error('删除字典项失败:', error);\n        if (error.response && error.response.data) {\n          message.error(error.response.data.message || '删除失败');\n        } else {\n          message.error('删除失败，请检查网络连接');\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 分类管理方法\n    const showAddCategoryModal = () => {\n      categoryModalVisible.value = true;\n      categoryFormData.value = {\n        key: '',\n        label: '',\n        description: ''\n      };\n    };\n    const showManageCategoriesModal = () => {\n      manageCategoriesModalVisible.value = true;\n    };\n    const handleCreateCategory = async () => {\n      try {\n        await categoryFormRef.value.validate();\n        loading.value = true;\n        const response = await dictionaryAPI.createDictionaryCategory(categoryFormData.value);\n        if (response.data && response.data.code === 200) {\n          message.success('分类创建成功');\n          categoryModalVisible.value = false;\n          await fetchCategories(); // 刷新分类列表\n        } else {\n          const errorMsg = response.data?.message || response.data?.error || '创建失败';\n          message.error(errorMsg);\n        }\n      } catch (error) {\n        console.error('创建分类失败:', error);\n        if (error.response && error.response.data) {\n          const errorData = error.response.data;\n          if (errorData.error && typeof errorData.error === 'object') {\n            const firstError = Object.values(errorData.error)[0];\n            message.error(Array.isArray(firstError) ? firstError[0] : firstError);\n          } else {\n            message.error(errorData.message || '创建失败');\n          }\n        } else {\n          message.error('创建失败，请检查网络连接');\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n    const handleCancelCategory = () => {\n      categoryModalVisible.value = false;\n      if (categoryFormRef.value) {\n        categoryFormRef.value.resetFields();\n      }\n    };\n    const editCategory = record => {\n      editCategoryModalVisible.value = true;\n      editCategoryFormData.value = {\n        key: record.key,\n        label: record.name,\n        description: record.description || ''\n      };\n    };\n    const handleUpdateCategory = async () => {\n      try {\n        await editCategoryFormRef.value.validate();\n        loading.value = true;\n        const response = await dictionaryAPI.updateDictionaryCategory(editCategoryFormData.value.key, editCategoryFormData.value);\n        if (response.data && response.data.code === 200) {\n          message.success('分类更新成功');\n          editCategoryModalVisible.value = false;\n          await fetchCategories(); // 刷新分类列表\n        } else {\n          const errorMsg = response.data?.message || response.data?.error || '更新失败';\n          message.error(errorMsg);\n        }\n      } catch (error) {\n        console.error('更新分类失败:', error);\n        if (error.response && error.response.data) {\n          const errorData = error.response.data;\n          message.error(errorData.message || '更新失败');\n        } else {\n          message.error('更新失败，请检查网络连接');\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n    const handleCancelEditCategory = () => {\n      editCategoryModalVisible.value = false;\n      if (editCategoryFormRef.value) {\n        editCategoryFormRef.value.resetFields();\n      }\n    };\n    const deleteCategory = async record => {\n      try {\n        loading.value = true;\n        const response = await dictionaryAPI.deleteDictionaryCategory(record.key);\n        if (response.data && response.data.code === 200) {\n          message.success('分类删除成功');\n          await fetchCategories(); // 刷新分类列表\n\n          // 如果删除的是当前激活的分类，切换到第一个分类\n          if (activeCategory.value === record.key && categoryList.value.length > 0) {\n            activeCategory.value = categoryList.value[0].key;\n          }\n        } else {\n          const errorMsg = response.data?.message || response.data?.error || '删除失败';\n          message.error(errorMsg);\n        }\n      } catch (error) {\n        console.error('删除分类失败:', error);\n        if (error.response && error.response.data) {\n          const errorData = error.response.data;\n          message.error(errorData.message || '删除失败');\n        } else {\n          message.error('删除失败，请检查网络连接');\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 监听器\n    watch(() => filteredDictionaries.value, newVal => {\n      pagination.value.total = newVal.length;\n    }, {\n      immediate: true\n    });\n    watch(() => activeCategory.value, (newCategory, oldCategory) => {\n      console.log(`分类切换: ${oldCategory} -> ${newCategory}`);\n      if (newCategory) {\n        fetchDictionaries();\n      }\n    }, {\n      immediate: false\n    });\n\n    // 生命周期\n    onMounted(async () => {\n      console.log('AdminDictionary 组件已挂载，开始初始化');\n      try {\n        await fetchCategories();\n        if (activeCategory.value) {\n          await fetchDictionaries();\n        } else {\n          console.warn('没有可用的分类，无法获取字典数据');\n        }\n      } catch (error) {\n        console.error('组件初始化失败:', error);\n        message.error('页面初始化失败，请刷新重试');\n      }\n    });\n    const __returned__ = {\n      activeCategory,\n      searchText,\n      loading,\n      initLoading,\n      modalVisible,\n      isEditing,\n      formRef,\n      categoryModalVisible,\n      manageCategoriesModalVisible,\n      editCategoryModalVisible,\n      categoryFormRef,\n      editCategoryFormRef,\n      categoryList,\n      allDictionaries,\n      fetchCategories,\n      getIconByCategory,\n      fetchDictionaries,\n      pagination,\n      tableColumns,\n      formData,\n      formRules,\n      categoryFormData,\n      editCategoryFormData,\n      categoryFormRules,\n      categoryTableColumns,\n      currentDictionaries,\n      filteredDictionaries,\n      initDictionaryData,\n      getCurrentCategoryName,\n      getPriorityColor,\n      handleCategoryChange,\n      handleSearch,\n      refreshData,\n      showAddModal,\n      editDictionary,\n      handleSubmit,\n      handleCancel,\n      toggleStatus,\n      deleteDictionary,\n      showAddCategoryModal,\n      showManageCategoriesModal,\n      handleCreateCategory,\n      handleCancelCategory,\n      editCategory,\n      handleUpdateCategory,\n      handleCancelEditCategory,\n      deleteCategory,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      get message() {\n        return message;\n      },\n      get dictionaryAPI() {\n        return dictionaryAPI;\n      },\n      get BookOutlined() {\n        return BookOutlined;\n      },\n      get PlusOutlined() {\n        return PlusOutlined;\n      },\n      get ReloadOutlined() {\n        return ReloadOutlined;\n      },\n      get AppstoreOutlined() {\n        return AppstoreOutlined;\n      },\n      get TagOutlined() {\n        return TagOutlined;\n      },\n      get DesktopOutlined() {\n        return DesktopOutlined;\n      },\n      get BellOutlined() {\n        return BellOutlined;\n      },\n      get GlobalOutlined() {\n        return GlobalOutlined;\n      },\n      get BarChartOutlined() {\n        return BarChartOutlined;\n      },\n      get SettingOutlined() {\n        return SettingOutlined;\n      },\n      get DeleteOutlined() {\n        return DeleteOutlined;\n      },\n      get EditOutlined() {\n        return EditOutlined;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","message","dictionaryAPI","BookOutlined","PlusOutlined","ReloadOutlined","AppstoreOutlined","TagOutlined","DesktopOutlined","BellOutlined","GlobalOutlined","BarChartOutlined","SettingOutlined","DeleteOutlined","EditOutlined","activeCategory","searchText","loading","initLoading","modalVisible","isEditing","formRef","categoryModalVisible","manageCategoriesModalVisible","editCategoryModalVisible","categoryFormRef","editCategoryFormRef","categoryList","allDictionaries","fetchCategories","response","getDictionaryCategories","data","code","categories","length","value","map","cat","key","name","label","icon","getIconByCategory","count","validKeys","includes","console","warn","warning","error","status","categoryKey","iconMap","fetchDictionaries","getDictionaryByCategory","simple","pagination","total","info","getCurrentCategoryName","current","pageSize","showSizeChanger","showQuickJumper","showTotal","tableColumns","title","dataIndex","width","fixed","ellipsis","sorter","a","b","priority","formData","category","description","config","formRules","required","pattern","categoryFormData","editCategoryFormData","categoryFormRules","categoryTableColumns","currentDictionaries","filteredDictionaries","filter","item","toLowerCase","initDictionaryData","log","result","createdItems","created","updatedItems","updated","errors","createdCount","updatedCount","errorCount","totalSuccess","successMessage","details","push","join","success","Promise","all","errorMessage","errorData","find","getPriorityColor","handleCategoryChange","handleSearch","refreshData","showAddModal","editDictionary","record","handleSubmit","validate","trim","JSON","parse","e","submitData","updateDictionary","id","errorMsg","createDictionary","firstError","Object","values","Array","isArray","handleCancel","resetFields","toggleStatus","newStatus","index","findIndex","deleteDictionary","showAddCategoryModal","showManageCategoriesModal","handleCreateCategory","createDictionaryCategory","handleCancelCategory","editCategory","handleUpdateCategory","updateDictionaryCategory","handleCancelEditCategory","deleteCategory","deleteDictionaryCategory","newVal","immediate","newCategory","oldCategory"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/views/admin/AdminDictionary.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-dictionary admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <BookOutlined />\r\n          字典管理\r\n        </h1>\r\n        <p class=\"page-description\">管理监控系统的字典数据</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-button \r\n            type=\"default\" \r\n            @click=\"initDictionaryData\"\r\n            :loading=\"initLoading\"\r\n          >\r\n            <ReloadOutlined />\r\n            初始化数据\r\n          </a-button>\r\n          <a-button type=\"primary\" @click=\"showAddModal\">\r\n            <PlusOutlined />\r\n            新建字典\r\n          </a-button>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 字典分类导航 -->\r\n    <div class=\"dictionary-layout admin-layout\">\r\n      <!-- 左侧菜单 -->\r\n      <div class=\"dictionary-menu admin-menu\">\r\n        <div class=\"menu-title\">\r\n          字典分类\r\n          <a-space class=\"menu-actions\">\r\n            <a-button type=\"text\" size=\"small\" @click=\"showAddCategoryModal\">\r\n              <PlusOutlined />\r\n            </a-button>\r\n            <a-button type=\"text\" size=\"small\" @click=\"showManageCategoriesModal\">\r\n              <SettingOutlined />\r\n            </a-button>\r\n          </a-space>\r\n        </div>\r\n        <div class=\"menu-list\">\r\n          <div \r\n            v-for=\"category in categoryList\" \r\n            :key=\"category.key\"\r\n            :class=\"['menu-item', { 'active': activeCategory === category.key }]\"\r\n            @click=\"handleCategoryChange(category.key)\"\r\n          >\r\n            <component :is=\"category.icon\" class=\"menu-icon\" />\r\n            <span class=\"menu-text\">{{ category.name }}</span>\r\n            <span class=\"menu-count\">({{ category.count || 0 }})</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧内容 -->\r\n      <div class=\"dictionary-content admin-content\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索字典项...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n              />\r\n              <a-button @click=\"refreshData\">\r\n                <ReloadOutlined />\r\n              </a-button>\r\n            </a-space>\r\n          </template>\r\n\r\n          <a-table\r\n            :columns=\"tableColumns\"\r\n            :data-source=\"filteredDictionaries\"\r\n            :pagination=\"pagination\"\r\n            :loading=\"loading\"\r\n            row-key=\"id\"\r\n            size=\"middle\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <template v-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"record.status === 'active' ? 'green' : 'red'\">\r\n                  {{ record.status === 'active' ? '启用' : '禁用' }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'priority'\">\r\n                <a-tag :color=\"getPriorityColor(record.priority)\">\r\n                  {{ record.priority }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'actions'\">\r\n                <a-space>\r\n                  <a-button type=\"link\" size=\"small\" @click=\"editDictionary(record)\">\r\n                    编辑\r\n                  </a-button>\r\n                  <a-button \r\n                    type=\"link\" \r\n                    size=\"small\" \r\n                    @click=\"toggleStatus(record)\"\r\n                  >\r\n                    {{ record.status === 'active' ? '禁用' : '启用' }}\r\n                  </a-button>\r\n                  <a-popconfirm\r\n                    title=\"确定要删除这个字典项吗？\"\r\n                    @confirm=\"deleteDictionary(record)\"\r\n                  >\r\n                    <a-button type=\"link\" size=\"small\" danger>\r\n                      删除\r\n                    </a-button>\r\n                  </a-popconfirm>\r\n                </a-space>\r\n              </template>\r\n            </template>\r\n          </a-table>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 添加/编辑字典弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"isEditing ? '编辑字典项' : '新建字典项'\"\r\n      width=\"600px\"\r\n      @ok=\"handleSubmit\"\r\n      @cancel=\"handleCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"字典分类\" name=\"category\">\r\n              <a-select v-model:value=\"formData.category\" placeholder=\"选择字典分类\">\r\n                <a-select-option \r\n                  v-for=\"category in categoryList\" \r\n                  :key=\"category.key\" \r\n                  :value=\"category.key\"\r\n                >\r\n                  {{ category.name }}\r\n                </a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"字典键名\" name=\"key\">\r\n              <a-input v-model:value=\"formData.key\" placeholder=\"输入字典键名\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"显示名称\" name=\"label\">\r\n              <a-input v-model:value=\"formData.label\" placeholder=\"输入显示名称\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"排序权重\" name=\"priority\">\r\n              <a-input-number \r\n                v-model:value=\"formData.priority\" \r\n                :min=\"0\" \r\n                :max=\"999\"\r\n                placeholder=\"数值越大优先级越高\"\r\n                style=\"width: 100%\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item label=\"描述信息\" name=\"description\">\r\n          <a-textarea \r\n            v-model:value=\"formData.description\" \r\n            placeholder=\"输入字典项的详细描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"状态\" name=\"status\">\r\n              <a-select v-model:value=\"formData.status\">\r\n                <a-select-option value=\"active\">启用</a-select-option>\r\n                <a-select-option value=\"inactive\">禁用</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"扩展配置\" name=\"config\">\r\n              <a-input v-model:value=\"formData.config\" placeholder=\"JSON格式配置（可选）\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 创建分类弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"categoryModalVisible\"\r\n      title=\"创建字典分类\"\r\n      width=\"500px\"\r\n      @ok=\"handleCreateCategory\"\r\n      @cancel=\"handleCancelCategory\"\r\n    >\r\n      <a-form\r\n        ref=\"categoryFormRef\"\r\n        :model=\"categoryFormData\"\r\n        :rules=\"categoryFormRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-form-item label=\"分类键名\" name=\"key\">\r\n          <a-input v-model:value=\"categoryFormData.key\" placeholder=\"输入分类键名（英文）\" />\r\n        </a-form-item>\r\n        <a-form-item label=\"分类名称\" name=\"label\">\r\n          <a-input v-model:value=\"categoryFormData.label\" placeholder=\"输入分类显示名称\" />\r\n        </a-form-item>\r\n        <a-form-item label=\"描述\" name=\"description\">\r\n          <a-textarea \r\n            v-model:value=\"categoryFormData.description\" \r\n            placeholder=\"输入分类描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n\r\n    <!-- 管理分类弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"manageCategoriesModalVisible\"\r\n      title=\"管理字典分类\"\r\n      width=\"700px\"\r\n      :footer=\"null\"\r\n    >\r\n      <a-table\r\n        :columns=\"categoryTableColumns\"\r\n        :data-source=\"categoryList\"\r\n        :pagination=\"false\"\r\n        row-key=\"key\"\r\n        size=\"small\"\r\n      >\r\n        <template #bodyCell=\"{ column, record }\">\r\n          <template v-if=\"column.key === 'actions'\">\r\n            <a-space>\r\n              <a-button type=\"link\" size=\"small\" @click=\"editCategory(record)\">\r\n                <EditOutlined />\r\n                编辑\r\n              </a-button>\r\n              <a-popconfirm\r\n                title=\"确定要删除这个分类吗？删除后该分类下的所有字典项也会被删除！\"\r\n                @confirm=\"deleteCategory(record)\"\r\n              >\r\n                <a-button type=\"link\" size=\"small\" danger>\r\n                  <DeleteOutlined />\r\n                  删除\r\n                </a-button>\r\n              </a-popconfirm>\r\n            </a-space>\r\n          </template>\r\n        </template>\r\n      </a-table>\r\n    </a-modal>\r\n\r\n    <!-- 编辑分类弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"editCategoryModalVisible\"\r\n      title=\"编辑字典分类\"\r\n      width=\"500px\"\r\n      @ok=\"handleUpdateCategory\"\r\n      @cancel=\"handleCancelEditCategory\"\r\n    >\r\n      <a-form\r\n        ref=\"editCategoryFormRef\"\r\n        :model=\"editCategoryFormData\"\r\n        :rules=\"categoryFormRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-form-item label=\"分类键名\" name=\"key\">\r\n          <a-input v-model:value=\"editCategoryFormData.key\" disabled />\r\n        </a-form-item>\r\n        <a-form-item label=\"分类名称\" name=\"label\">\r\n          <a-input v-model:value=\"editCategoryFormData.label\" placeholder=\"输入分类显示名称\" />\r\n        </a-form-item>\r\n        <a-form-item label=\"描述\" name=\"description\">\r\n          <a-textarea \r\n            v-model:value=\"editCategoryFormData.description\" \r\n            placeholder=\"输入分类描述\"\r\n            :rows=\"3\"\r\n          />\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { dictionaryAPI } from '@/api/index';\r\nimport {\r\n  BookOutlined,\r\n  PlusOutlined,\r\n  ReloadOutlined,\r\n  AppstoreOutlined,\r\n  TagOutlined,\r\n  DesktopOutlined,\r\n  BellOutlined,\r\n  GlobalOutlined,\r\n  BarChartOutlined,\r\n  SettingOutlined,\r\n  DeleteOutlined,\r\n  EditOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// 响应式数据\r\nconst activeCategory = ref('user_category'); // 使用后端实际存在的分类\r\nconst searchText = ref('');\r\nconst loading = ref(false);\r\nconst initLoading = ref(false); // 初始化数据加载状态\r\nconst modalVisible = ref(false);\r\nconst isEditing = ref(false);\r\nconst formRef = ref(null);\r\n\r\n// 分类管理相关状态\r\nconst categoryModalVisible = ref(false);\r\nconst manageCategoriesModalVisible = ref(false);\r\nconst editCategoryModalVisible = ref(false);\r\nconst categoryFormRef = ref(null);\r\nconst editCategoryFormRef = ref(null);\r\n\r\n// 分类列表（从后端动态获取）\r\nconst categoryList = ref([]);\r\nconst allDictionaries = ref([]);\r\n\r\n// 获取字典分类\r\nconst fetchCategories = async () => {\r\n  try {\r\n    const response = await dictionaryAPI.getDictionaryCategories();\r\n    if (response.data && response.data.code === 200) {\r\n      const categories = response.data.data || [];\r\n      if (categories.length > 0) {\r\n        categoryList.value = categories.map(cat => ({\r\n          key: cat.key,\r\n          name: cat.label,\r\n          icon: getIconByCategory(cat.key),\r\n          count: cat.count || 0\r\n        }));\r\n        \r\n        // 设置默认激活分类\r\n        // 如果当前激活分类不在有效分类中，则使用第一个分类\r\n        const validKeys = categories.map(cat => cat.key);\r\n        if (!validKeys.includes(activeCategory.value)) {\r\n          activeCategory.value = categories[0].key;\r\n        }\r\n      } else {\r\n        console.warn('后端返回的分类列表为空，使用默认分类');\r\n      }\r\n    } else {\r\n      console.warn('获取字典分类响应异常:', response.data);\r\n      message.warning('获取字典分类失败，使用默认分类');\r\n    }\r\n  } catch (error) {\r\n    console.error('获取字典分类失败:', error);\r\n    if (error.response && error.response.status === 404) {\r\n      message.error('字典分类接口不存在，请检查后端配置');\r\n    } else {\r\n      message.error('获取字典分类失败，请检查网络连接');\r\n    }\r\n    // 使用默认分类作为备用\r\n  }\r\n};\r\n\r\n// 根据分类键名获取图标\r\nconst getIconByCategory = (categoryKey) => {\r\n  const iconMap = {\r\n    'user_category': AppstoreOutlined,\r\n    'system_config': TagOutlined,\r\n    'asset_type': DesktopOutlined,\r\n    'department': GlobalOutlined,\r\n    'status': BellOutlined,\r\n    'priority': BarChartOutlined,\r\n    'environment': GlobalOutlined,\r\n    // 兼容旧的分类名\r\n    'asset_category': DesktopOutlined,\r\n    'asset_status': BellOutlined,\r\n    'device_type': DesktopOutlined,\r\n    'alert_level': BellOutlined,\r\n    'network_type': GlobalOutlined,\r\n    'monitor_metric': BarChartOutlined\r\n  };\r\n  return iconMap[categoryKey] || AppstoreOutlined;\r\n};\r\n\r\n// 设置默认分类（备用方案）\r\n\r\n// 获取字典数据\r\nconst fetchDictionaries = async () => {\r\n  if (!activeCategory.value) {\r\n    console.warn('没有选择分类，跳过获取字典数据');\r\n    return;\r\n  }\r\n  \r\n  loading.value = true;\r\n  try {\r\n    const response = await dictionaryAPI.getDictionaryByCategory(activeCategory.value, {\r\n      simple: 'false' // 获取完整数据，不再过滤状态，让用户看到所有数据\r\n    });\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      allDictionaries.value = response.data.data || [];\r\n      pagination.value.total = allDictionaries.value.length;\r\n      \r\n      if (allDictionaries.value.length === 0) {\r\n        console.info(`分类 ${getCurrentCategoryName()} 暂无数据`);\r\n      }\r\n    } else if (response.data && response.data.code === 400) {\r\n      // 处理无效分类错误\r\n      console.error('无效的字典分类:', response.data);\r\n      message.error(`分类 \"${activeCategory.value}\" 无效: ${response.data.message}`);\r\n      \r\n      // 如果是无效分类，回退到第一个有效分类\r\n      if (categoryList.value.length > 0) {\r\n        activeCategory.value = categoryList.value[0].key;\r\n        return; // 会触发watch重新获取数据\r\n      }\r\n      \r\n      allDictionaries.value = [];\r\n      pagination.value.total = 0;\r\n    } else {\r\n      console.warn('获取字典数据响应异常:', response.data);\r\n      message.warning(`获取${getCurrentCategoryName()}数据失败`);\r\n      allDictionaries.value = [];\r\n      pagination.value.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('获取字典数据失败:', error);\r\n    if (error.response && error.response.status === 404) {\r\n      message.error('字典数据接口不存在，请检查后端配置');\r\n    } else {\r\n      message.error(`获取${getCurrentCategoryName()}数据失败，请检查网络连接`);\r\n    }\r\n    allDictionaries.value = [];\r\n    pagination.value.total = 0;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 表格配置\r\nconst pagination = ref({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`\r\n});\r\n\r\n// 表格列配置\r\nconst tableColumns = [\r\n  {\r\n    title: '键名',\r\n    dataIndex: 'key',\r\n    key: 'key',\r\n    width: 150,\r\n    fixed: 'left'\r\n  },\r\n  {\r\n    title: '显示名称',\r\n    dataIndex: 'label',\r\n    key: 'label',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '描述',\r\n    dataIndex: 'description',\r\n    key: 'description',\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: '优先级',\r\n    dataIndex: 'priority',\r\n    key: 'priority',\r\n    width: 100,\r\n    sorter: (a, b) => a.priority - b.priority\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status',\r\n    width: 100\r\n  },\r\n  {\r\n    title: '创建时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'actions',\r\n    width: 200,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 表单数据和验证规则\r\nconst formData = ref({\r\n  category: '',\r\n  key: '',\r\n  label: '',\r\n  description: '',\r\n  priority: 0,\r\n  status: 'active',\r\n  config: ''\r\n});\r\n\r\nconst formRules = {\r\n  category: [{ required: true, message: '请选择字典分类' }],\r\n  key: [\r\n    { required: true, message: '请输入字典键名' },\r\n    { pattern: /^[a-zA-Z0-9_]+$/, message: '键名只能包含字母、数字和下划线' }\r\n  ],\r\n  label: [{ required: true, message: '请输入显示名称' }],\r\n  priority: [{ required: true, message: '请输入排序权重' }],\r\n  status: [{ required: true, message: '请选择状态' }]\r\n};\r\n\r\n// 分类表单数据和验证规则\r\nconst categoryFormData = ref({\r\n  key: '',\r\n  label: '',\r\n  description: ''\r\n});\r\n\r\nconst editCategoryFormData = ref({\r\n  key: '',\r\n  label: '',\r\n  description: ''\r\n});\r\n\r\nconst categoryFormRules = {\r\n  key: [\r\n    { required: true, message: '请输入分类键名' },\r\n    { pattern: /^[a-zA-Z0-9_]+$/, message: '键名只能包含字母、数字和下划线' }\r\n  ],\r\n  label: [{ required: true, message: '请输入分类名称' }]\r\n};\r\n\r\n// 分类管理表格列配置\r\nconst categoryTableColumns = [\r\n  {\r\n    title: '键名',\r\n    dataIndex: 'key',\r\n    key: 'key',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '名称',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '字典项数量',\r\n    dataIndex: 'count',\r\n    key: 'count',\r\n    width: 120\r\n  },\r\n  {\r\n    title: '操作',\r\n     key: 'actions',\r\n     width: 150\r\n   }\r\n ];\r\n\r\n// 计算属性\r\nconst currentDictionaries = computed(() => {\r\n  return allDictionaries.value;\r\n});\r\n\r\nconst filteredDictionaries = computed(() => {\r\n  if (!searchText.value) {\r\n    return currentDictionaries.value;\r\n  }\r\n  return currentDictionaries.value.filter(item => \r\n    item.key.toLowerCase().includes(searchText.value.toLowerCase()) ||\r\n    item.label.toLowerCase().includes(searchText.value.toLowerCase()) ||\r\n    (item.description && item.description.toLowerCase().includes(searchText.value.toLowerCase()))\r\n  );\r\n});\r\n\r\n// 初始化字典数据\r\nconst initDictionaryData = async () => {\r\n  initLoading.value = true;\r\n  try {\r\n    const response = await dictionaryAPI.initDictionaryData();\r\n    console.log('初始化字典数据响应:', response.data);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 新的批量创建接口响应格式\r\n      const result = response.data.data || {};\r\n      const createdItems = result.created || [];\r\n      const updatedItems = result.updated || [];\r\n      const errors = result.errors || [];\r\n      \r\n      const createdCount = createdItems.length;\r\n      const updatedCount = updatedItems.length;\r\n      const errorCount = errors.length;\r\n      const totalSuccess = createdCount + updatedCount;\r\n      \r\n      if (totalSuccess > 0) {\r\n        // 有成功的操作\r\n        let successMessage = '初始化完成！';\r\n        const details = [];\r\n        if (createdCount > 0) details.push(`创建了 ${createdCount} 个`);\r\n        if (updatedCount > 0) details.push(`更新了 ${updatedCount} 个`);\r\n        if (errorCount > 0) details.push(`${errorCount} 个失败`);\r\n        successMessage += details.join('，') + '字典项';\r\n        \r\n        message.success(successMessage);\r\n        \r\n        // 刷新数据\r\n        await Promise.all([\r\n          fetchCategories(),\r\n          fetchDictionaries()\r\n        ]);\r\n        \r\n        console.log('初始化结果:', { createdCount, updatedCount, errorCount });\r\n      } else {\r\n        // 全部失败\r\n        message.error(`初始化失败，所有 ${errorCount} 个字典项都处理失败`);\r\n        console.error('初始化全部失败:', errors);\r\n      }\r\n    } else {\r\n      const errorMessage = response.data?.message || '初始化失败';\r\n      message.error(errorMessage);\r\n      console.error('初始化失败响应:', response.data);\r\n    }\r\n  } catch (error) {\r\n    console.error('初始化字典数据失败:', error);\r\n    if (error.response && error.response.status === 401) {\r\n      message.error('需要登录认证，请重新登录');\r\n    } else if (error.response && error.response.status === 403) {\r\n      message.error('权限不足，需要管理员权限');\r\n    } else if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      if (errorData.message) {\r\n        message.error(`初始化失败: ${errorData.message}`);\r\n      } else {\r\n        message.error('初始化失败，请检查网络连接');\r\n      }\r\n    } else {\r\n      message.error('初始化失败，请检查网络连接');\r\n    }\r\n  } finally {\r\n    initLoading.value = false;\r\n  }\r\n};\r\n\r\n// 方法\r\nconst getCurrentCategoryName = () => {\r\n  const category = categoryList.value.find(cat => cat.key === activeCategory.value);\r\n  return category ? category.name : '未知分类';\r\n};\r\n\r\nconst getPriorityColor = (priority) => {\r\n  if (priority >= 90) return 'red';\r\n  if (priority >= 70) return 'orange';\r\n  if (priority >= 50) return 'blue';\r\n  return 'default';\r\n};\r\n\r\nconst handleCategoryChange = (key) => {\r\n  activeCategory.value = key;\r\n  searchText.value = '';\r\n  pagination.value.current = 1;\r\n  fetchDictionaries(); // 获取新分类的数据\r\n};\r\n\r\nconst handleSearch = () => {\r\n  pagination.value.current = 1;\r\n};\r\n\r\nconst refreshData = async () => {\r\n  await Promise.all([\r\n    fetchCategories(),\r\n    fetchDictionaries()\r\n  ]);\r\n  message.success('数据刷新成功');\r\n};\r\n\r\nconst showAddModal = () => {\r\n  isEditing.value = false;\r\n  modalVisible.value = true;\r\n  formData.value = {\r\n    category: activeCategory.value,\r\n    key: '',\r\n    label: '',\r\n    description: '',\r\n    priority: 0,\r\n    status: 'active',\r\n    config: ''\r\n  };\r\n};\r\n\r\nconst editDictionary = (record) => {\r\n  isEditing.value = true;\r\n  modalVisible.value = true;\r\n  formData.value = { ...record };\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    // 验证config格式（如果有值）\r\n    if (formData.value.config && formData.value.config.trim()) {\r\n      try {\r\n        JSON.parse(formData.value.config);\r\n      } catch (e) {\r\n        message.error('配置信息必须是有效的JSON格式');\r\n        return;\r\n      }\r\n    }\r\n    \r\n    loading.value = true;\r\n    \r\n    // 准备提交数据，清理空值\r\n    const submitData = { ...formData.value };\r\n    if (!submitData.config || !submitData.config.trim()) {\r\n      delete submitData.config;\r\n    }\r\n    \r\n    if (isEditing.value) {\r\n      // 更新字典项\r\n      const response = await dictionaryAPI.updateDictionary(submitData.id, submitData);\r\n      if (response.data && response.data.code === 200) {\r\n        message.success('字典项更新成功');\r\n        await fetchDictionaries(); // 刷新数据\r\n        modalVisible.value = false;\r\n      } else {\r\n        const errorMsg = response.data?.message || response.data?.error || '更新失败';\r\n        message.error(errorMsg);\r\n      }\r\n    } else {\r\n      // 创建新字典项\r\n      const response = await dictionaryAPI.createDictionary(submitData);\r\n      if (response.data && response.data.code === 200) {\r\n        message.success('字典项创建成功');\r\n        await fetchDictionaries(); // 刷新数据\r\n        modalVisible.value = false;\r\n      } else {\r\n        const errorMsg = response.data?.message || response.data?.error || '创建失败';\r\n        message.error(errorMsg);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('表单提交失败:', error);\r\n    if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      if (errorData.error && typeof errorData.error === 'object') {\r\n        // 处理表单验证错误\r\n        const firstError = Object.values(errorData.error)[0];\r\n        message.error(Array.isArray(firstError) ? firstError[0] : firstError);\r\n      } else {\r\n        message.error(errorData.message || '操作失败');\r\n      }\r\n    } else {\r\n      message.error('操作失败，请检查网络连接后重试');\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst handleCancel = () => {\r\n  modalVisible.value = false;\r\n  if (formRef.value) {\r\n    formRef.value.resetFields();\r\n  }\r\n};\r\n\r\nconst toggleStatus = async (record) => {\r\n  const newStatus = record.status === 'active' ? 'inactive' : 'active';\r\n  \r\n  try {\r\n    loading.value = true;\r\n    const response = await dictionaryAPI.updateDictionary(record.id, {\r\n      ...record,\r\n      status: newStatus\r\n    });\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 更新本地数据\r\n      const index = allDictionaries.value.findIndex(item => item.id === record.id);\r\n      if (index !== -1) {\r\n        allDictionaries.value[index].status = newStatus;\r\n      }\r\n      message.success(`字典项已${newStatus === 'active' ? '启用' : '禁用'}`);\r\n    } else {\r\n      message.error(response.data?.message || response.data?.error || '状态更新失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('状态更新失败:', error);\r\n    message.error('状态更新失败，请检查网络连接');\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst deleteDictionary = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await dictionaryAPI.deleteDictionary(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('字典项删除成功');\r\n      // 更新本地数据而不是重新获取\r\n      allDictionaries.value = allDictionaries.value.filter(item => item.id !== record.id);\r\n      pagination.value.total = allDictionaries.value.length;\r\n    } else {\r\n      message.error(response.data?.message || response.data?.error || '删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('删除字典项失败:', error);\r\n    if (error.response && error.response.data) {\r\n      message.error(error.response.data.message || '删除失败');\r\n    } else {\r\n      message.error('删除失败，请检查网络连接');\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 分类管理方法\r\nconst showAddCategoryModal = () => {\r\n  categoryModalVisible.value = true;\r\n  categoryFormData.value = {\r\n    key: '',\r\n    label: '',\r\n    description: ''\r\n  };\r\n};\r\n\r\nconst showManageCategoriesModal = () => {\r\n  manageCategoriesModalVisible.value = true;\r\n};\r\n\r\nconst handleCreateCategory = async () => {\r\n  try {\r\n    await categoryFormRef.value.validate();\r\n    loading.value = true;\r\n    \r\n    const response = await dictionaryAPI.createDictionaryCategory(categoryFormData.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('分类创建成功');\r\n      categoryModalVisible.value = false;\r\n      await fetchCategories(); // 刷新分类列表\r\n    } else {\r\n      const errorMsg = response.data?.message || response.data?.error || '创建失败';\r\n      message.error(errorMsg);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建分类失败:', error);\r\n    if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      if (errorData.error && typeof errorData.error === 'object') {\r\n        const firstError = Object.values(errorData.error)[0];\r\n        message.error(Array.isArray(firstError) ? firstError[0] : firstError);\r\n      } else {\r\n        message.error(errorData.message || '创建失败');\r\n      }\r\n    } else {\r\n      message.error('创建失败，请检查网络连接');\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst handleCancelCategory = () => {\r\n  categoryModalVisible.value = false;\r\n  if (categoryFormRef.value) {\r\n    categoryFormRef.value.resetFields();\r\n  }\r\n};\r\n\r\nconst editCategory = (record) => {\r\n  editCategoryModalVisible.value = true;\r\n  editCategoryFormData.value = {\r\n    key: record.key,\r\n    label: record.name,\r\n    description: record.description || ''\r\n  };\r\n};\r\n\r\nconst handleUpdateCategory = async () => {\r\n  try {\r\n    await editCategoryFormRef.value.validate();\r\n    loading.value = true;\r\n    \r\n    const response = await dictionaryAPI.updateDictionaryCategory(\r\n      editCategoryFormData.value.key,\r\n      editCategoryFormData.value\r\n    );\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('分类更新成功');\r\n      editCategoryModalVisible.value = false;\r\n      await fetchCategories(); // 刷新分类列表\r\n    } else {\r\n      const errorMsg = response.data?.message || response.data?.error || '更新失败';\r\n      message.error(errorMsg);\r\n    }\r\n  } catch (error) {\r\n    console.error('更新分类失败:', error);\r\n    if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      message.error(errorData.message || '更新失败');\r\n    } else {\r\n      message.error('更新失败，请检查网络连接');\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\nconst handleCancelEditCategory = () => {\r\n  editCategoryModalVisible.value = false;\r\n  if (editCategoryFormRef.value) {\r\n    editCategoryFormRef.value.resetFields();\r\n  }\r\n};\r\n\r\nconst deleteCategory = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await dictionaryAPI.deleteDictionaryCategory(record.key);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('分类删除成功');\r\n      await fetchCategories(); // 刷新分类列表\r\n      \r\n      // 如果删除的是当前激活的分类，切换到第一个分类\r\n      if (activeCategory.value === record.key && categoryList.value.length > 0) {\r\n        activeCategory.value = categoryList.value[0].key;\r\n      }\r\n    } else {\r\n      const errorMsg = response.data?.message || response.data?.error || '删除失败';\r\n      message.error(errorMsg);\r\n    }\r\n  } catch (error) {\r\n    console.error('删除分类失败:', error);\r\n    if (error.response && error.response.data) {\r\n      const errorData = error.response.data;\r\n      message.error(errorData.message || '删除失败');\r\n    } else {\r\n      message.error('删除失败，请检查网络连接');\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 监听器\r\nwatch(() => filteredDictionaries.value, (newVal) => {\r\n  pagination.value.total = newVal.length;\r\n}, { immediate: true });\r\n\r\nwatch(() => activeCategory.value, (newCategory, oldCategory) => {\r\n  console.log(`分类切换: ${oldCategory} -> ${newCategory}`);\r\n  if (newCategory) {\r\n    fetchDictionaries();\r\n  }\r\n}, { immediate: false });\r\n\r\n// 生命周期\r\nonMounted(async () => {\r\n  console.log('AdminDictionary 组件已挂载，开始初始化');\r\n  try {\r\n    await fetchCategories();\r\n    if (activeCategory.value) {\r\n      await fetchDictionaries();\r\n    } else {\r\n      console.warn('没有可用的分类，无法获取字典数据');\r\n    }\r\n  } catch (error) {\r\n    console.error('组件初始化失败:', error);\r\n    message.error('页面初始化失败，请刷新重试');\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 字典管理页面特有的样式 */\r\n/* 所有通用样式已在 admin-common.css 中定义 */\r\n\r\n.menu-title {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.menu-actions {\r\n  opacity: 0.7;\r\n  transition: opacity 0.3s;\r\n}\r\n\r\n.menu-actions:hover {\r\n  opacity: 1;\r\n}\r\n\r\n.menu-count {\r\n  font-size: 12px;\r\n  color: #999;\r\n  margin-left: 8px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}