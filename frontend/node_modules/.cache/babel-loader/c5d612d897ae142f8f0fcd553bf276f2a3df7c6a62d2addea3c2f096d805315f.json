{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n/**\r\n * 路由守卫 - 专门处理ResizeObserver和资源清理\r\n */\n\n// 全局资源清理函数\nexport const cleanupGlobalResources = () => {\n  console.log('执行全局资源清理...');\n  try {\n    // 1. 清理所有定时器\n    const highestTimeoutId = setTimeout(function () {}, 1);\n    for (let i = 0; i < highestTimeoutId; i++) {\n      clearTimeout(i);\n    }\n    const highestIntervalId = setInterval(function () {}, 1);\n    for (let i = 0; i < highestIntervalId; i++) {\n      clearInterval(i);\n    }\n\n    // 2. 强制断开所有ResizeObserver\n    const allElements = document.querySelectorAll('*');\n    allElements.forEach(element => {\n      if (element._resizeObserver) {\n        try {\n          element._resizeObserver.disconnect();\n          delete element._resizeObserver;\n        } catch (error) {\n          // 静默处理\n        }\n      }\n    });\n\n    // 3. 清理可能的事件监听器\n    const events = ['resize', 'scroll', 'load'];\n    events.forEach(eventType => {\n      const listeners = window[`__${eventType}_listeners__`];\n      if (listeners && Array.isArray(listeners)) {\n        listeners.forEach(listener => {\n          try {\n            window.removeEventListener(eventType, listener);\n          } catch (error) {\n            // 静默处理\n          }\n        });\n        window[`__${eventType}_listeners__`] = [];\n      }\n    });\n\n    // 4. 强制垃圾回收提示（如果支持）\n    if (window.gc && typeof window.gc === 'function') {\n      window.gc();\n    }\n    console.log('全局资源清理完成');\n  } catch (error) {\n    console.debug('全局资源清理时出错:', error.message);\n  }\n};\n\n// 路由切换前的清理\nexport const beforeRouteLeave = (to, from, next) => {\n  console.log(`路由切换: ${from.path} -> ${to.path}`);\n\n  // 如果是从IP管理页面离开\n  if (from.path && from.path.includes('ip')) {\n    console.log('从IP管理页面离开，执行深度清理...');\n\n    // 延迟执行清理，确保组件生命周期完成\n    setTimeout(() => {\n      cleanupGlobalResources();\n    }, 100);\n  }\n  next();\n};\n\n// 路由切换后的初始化\nexport const afterRouteEnter = (to, from) => {\n  console.log(`路由进入: ${to.path}`);\n\n  // 如果是进入IP管理页面\n  if (to.path && to.path.includes('ip')) {\n    console.log('进入IP管理页面，重新初始化错误处理...');\n\n    // 延迟重新初始化错误处理\n    setTimeout(() => {\n      if (window.suppressResizeObserverError) {\n        window.suppressResizeObserverError();\n      }\n    }, 200);\n  }\n};\n\n// 创建安全的路由切换处理器\nexport const createSafeRouteHandler = router => {\n  // 路由前置守卫\n  router.beforeEach((to, from, next) => {\n    beforeRouteLeave(to, from, next);\n  });\n\n  // 路由后置守卫\n  router.afterEach((to, from) => {\n    afterRouteEnter(to, from);\n  });\n  return router;\n};\nexport default {\n  cleanupGlobalResources,\n  beforeRouteLeave,\n  afterRouteEnter,\n  createSafeRouteHandler\n};","map":{"version":3,"names":["cleanupGlobalResources","console","log","highestTimeoutId","setTimeout","i","clearTimeout","highestIntervalId","setInterval","clearInterval","allElements","document","querySelectorAll","forEach","element","_resizeObserver","disconnect","error","events","eventType","listeners","window","Array","isArray","listener","removeEventListener","gc","debug","message","beforeRouteLeave","to","from","next","path","includes","afterRouteEnter","suppressResizeObserverError","createSafeRouteHandler","router","beforeEach","afterEach"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/utils/routeGuard.js"],"sourcesContent":["/**\r\n * 路由守卫 - 专门处理ResizeObserver和资源清理\r\n */\r\n\r\n// 全局资源清理函数\r\nexport const cleanupGlobalResources = () => {\r\n  console.log('执行全局资源清理...');\r\n  \r\n  try {\r\n    // 1. 清理所有定时器\r\n    const highestTimeoutId = setTimeout(function(){}, 1);\r\n    for (let i = 0; i < highestTimeoutId; i++) {\r\n      clearTimeout(i);\r\n    }\r\n    \r\n    const highestIntervalId = setInterval(function(){}, 1);\r\n    for (let i = 0; i < highestIntervalId; i++) {\r\n      clearInterval(i);\r\n    }\r\n    \r\n    // 2. 强制断开所有ResizeObserver\r\n    const allElements = document.querySelectorAll('*');\r\n    allElements.forEach(element => {\r\n      if (element._resizeObserver) {\r\n        try {\r\n          element._resizeObserver.disconnect();\r\n          delete element._resizeObserver;\r\n        } catch (error) {\r\n          // 静默处理\r\n        }\r\n      }\r\n    });\r\n    \r\n    // 3. 清理可能的事件监听器\r\n    const events = ['resize', 'scroll', 'load'];\r\n    events.forEach(eventType => {\r\n      const listeners = window[`__${eventType}_listeners__`];\r\n      if (listeners && Array.isArray(listeners)) {\r\n        listeners.forEach(listener => {\r\n          try {\r\n            window.removeEventListener(eventType, listener);\r\n          } catch (error) {\r\n            // 静默处理\r\n          }\r\n        });\r\n        window[`__${eventType}_listeners__`] = [];\r\n      }\r\n    });\r\n    \r\n    // 4. 强制垃圾回收提示（如果支持）\r\n    if (window.gc && typeof window.gc === 'function') {\r\n      window.gc();\r\n    }\r\n    \r\n    console.log('全局资源清理完成');\r\n  } catch (error) {\r\n    console.debug('全局资源清理时出错:', error.message);\r\n  }\r\n};\r\n\r\n// 路由切换前的清理\r\nexport const beforeRouteLeave = (to, from, next) => {\r\n  console.log(`路由切换: ${from.path} -> ${to.path}`);\r\n  \r\n  // 如果是从IP管理页面离开\r\n  if (from.path && from.path.includes('ip')) {\r\n    console.log('从IP管理页面离开，执行深度清理...');\r\n    \r\n    // 延迟执行清理，确保组件生命周期完成\r\n    setTimeout(() => {\r\n      cleanupGlobalResources();\r\n    }, 100);\r\n  }\r\n  \r\n  next();\r\n};\r\n\r\n// 路由切换后的初始化\r\nexport const afterRouteEnter = (to, from) => {\r\n  console.log(`路由进入: ${to.path}`);\r\n  \r\n  // 如果是进入IP管理页面\r\n  if (to.path && to.path.includes('ip')) {\r\n    console.log('进入IP管理页面，重新初始化错误处理...');\r\n    \r\n    // 延迟重新初始化错误处理\r\n    setTimeout(() => {\r\n      if (window.suppressResizeObserverError) {\r\n        window.suppressResizeObserverError();\r\n      }\r\n    }, 200);\r\n  }\r\n};\r\n\r\n// 创建安全的路由切换处理器\r\nexport const createSafeRouteHandler = (router) => {\r\n  // 路由前置守卫\r\n  router.beforeEach((to, from, next) => {\r\n    beforeRouteLeave(to, from, next);\r\n  });\r\n  \r\n  // 路由后置守卫\r\n  router.afterEach((to, from) => {\r\n    afterRouteEnter(to, from);\r\n  });\r\n  \r\n  return router;\r\n};\r\n\r\nexport default {\r\n  cleanupGlobalResources,\r\n  beforeRouteLeave,\r\n  afterRouteEnter,\r\n  createSafeRouteHandler\r\n};"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,sBAAsB,GAAGA,CAAA,KAAM;EAC1CC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAE1B,IAAI;IACF;IACA,MAAMC,gBAAgB,GAAGC,UAAU,CAAC,YAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IACpD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,gBAAgB,EAAEE,CAAC,EAAE,EAAE;MACzCC,YAAY,CAACD,CAAC,CAAC;IACjB;IAEA,MAAME,iBAAiB,GAAGC,WAAW,CAAC,YAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IACtD,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,iBAAiB,EAAEF,CAAC,EAAE,EAAE;MAC1CI,aAAa,CAACJ,CAAC,CAAC;IAClB;;IAEA;IACA,MAAMK,WAAW,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,GAAG,CAAC;IAClDF,WAAW,CAACG,OAAO,CAACC,OAAO,IAAI;MAC7B,IAAIA,OAAO,CAACC,eAAe,EAAE;QAC3B,IAAI;UACFD,OAAO,CAACC,eAAe,CAACC,UAAU,CAAC,CAAC;UACpC,OAAOF,OAAO,CAACC,eAAe;QAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;UACd;QAAA;MAEJ;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,MAAM,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC;IAC3CA,MAAM,CAACL,OAAO,CAACM,SAAS,IAAI;MAC1B,MAAMC,SAAS,GAAGC,MAAM,CAAC,KAAKF,SAAS,cAAc,CAAC;MACtD,IAAIC,SAAS,IAAIE,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,EAAE;QACzCA,SAAS,CAACP,OAAO,CAACW,QAAQ,IAAI;UAC5B,IAAI;YACFH,MAAM,CAACI,mBAAmB,CAACN,SAAS,EAAEK,QAAQ,CAAC;UACjD,CAAC,CAAC,OAAOP,KAAK,EAAE;YACd;UAAA;QAEJ,CAAC,CAAC;QACFI,MAAM,CAAC,KAAKF,SAAS,cAAc,CAAC,GAAG,EAAE;MAC3C;IACF,CAAC,CAAC;;IAEF;IACA,IAAIE,MAAM,CAACK,EAAE,IAAI,OAAOL,MAAM,CAACK,EAAE,KAAK,UAAU,EAAE;MAChDL,MAAM,CAACK,EAAE,CAAC,CAAC;IACb;IAEAzB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACzB,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdhB,OAAO,CAAC0B,KAAK,CAAC,YAAY,EAAEV,KAAK,CAACW,OAAO,CAAC;EAC5C;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClD/B,OAAO,CAACC,GAAG,CAAC,SAAS6B,IAAI,CAACE,IAAI,OAAOH,EAAE,CAACG,IAAI,EAAE,CAAC;;EAE/C;EACA,IAAIF,IAAI,CAACE,IAAI,IAAIF,IAAI,CAACE,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;IACzCjC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;IAElC;IACAE,UAAU,CAAC,MAAM;MACfJ,sBAAsB,CAAC,CAAC;IAC1B,CAAC,EAAE,GAAG,CAAC;EACT;EAEAgC,IAAI,CAAC,CAAC;AACR,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAGA,CAACL,EAAE,EAAEC,IAAI,KAAK;EAC3C9B,OAAO,CAACC,GAAG,CAAC,SAAS4B,EAAE,CAACG,IAAI,EAAE,CAAC;;EAE/B;EACA,IAAIH,EAAE,CAACG,IAAI,IAAIH,EAAE,CAACG,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;IACrCjC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;IAEpC;IACAE,UAAU,CAAC,MAAM;MACf,IAAIiB,MAAM,CAACe,2BAA2B,EAAE;QACtCf,MAAM,CAACe,2BAA2B,CAAC,CAAC;MACtC;IACF,CAAC,EAAE,GAAG,CAAC;EACT;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAIC,MAAM,IAAK;EAChD;EACAA,MAAM,CAACC,UAAU,CAAC,CAACT,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;IACpCH,gBAAgB,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,CAAC;EAClC,CAAC,CAAC;;EAEF;EACAM,MAAM,CAACE,SAAS,CAAC,CAACV,EAAE,EAAEC,IAAI,KAAK;IAC7BI,eAAe,CAACL,EAAE,EAAEC,IAAI,CAAC;EAC3B,CAAC,CAAC;EAEF,OAAOO,MAAM;AACf,CAAC;AAED,eAAe;EACbtC,sBAAsB;EACtB6B,gBAAgB;EAChBM,eAAe;EACfE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}