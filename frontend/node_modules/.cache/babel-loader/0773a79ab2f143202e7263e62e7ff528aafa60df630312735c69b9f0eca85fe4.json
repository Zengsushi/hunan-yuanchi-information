{"ast":null,"code":"import axios from 'axios';\n\n// WebSocket集成将通过全局变量访问，避免页面加载时自动导入\n// 集成模块将在用户登录成功后由UserLogin.vue动态导入并暴露为window.webSocketIntegration\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://127.0.0.1:8001/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 添加认证token\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 统一错误处理\n  if (error.response?.status === 401) {\n    // 未授权，清除本地存储并跳转到登录页\n    console.warn('收到401错误，用户已被踢出或token已过期');\n\n    // 清除所有相关的本地存储\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userType');\n    localStorage.removeItem('username');\n    localStorage.removeItem('isAdmin');\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('remember_user');\n    localStorage.removeItem('remember_mode');\n\n    // 断开WebSocket连接\n    if (window.webSocketIntegration && window.webSocketIntegration.disconnectWebSocket) {\n      window.webSocketIntegration.disconnectWebSocket();\n    }\n\n    // 显示提示信息\n    if (typeof window !== 'undefined' && window.antd && window.antd.message) {\n      window.antd.message.warning('您的登录状态已失效，请重新登录');\n    }\n\n    // 延迟跳转，确保消息显示\n    setTimeout(() => {\n      window.location.href = '/#/login';\n    }, 1000);\n  }\n  return Promise.reject(error);\n});\n\n// 用户管理API\nexport const userAPI = {\n  /**\r\n   * 用户登录\r\n   * @param {Object} loginData - 登录数据\r\n   * @param {string} loginData.username - 用户名\r\n   * @param {string} loginData.password - 密码\r\n   * @param {boolean} loginData.remember - 是否记住密码\r\n   * @returns {Promise} 登录响应\r\n   */\n  async login(loginData) {\n    const response = await api.post('/auth/login/', loginData);\n\n    // 不在这里初始化WebSocket，由UserLogin.vue组件负责\n    // WebSocket初始化逻辑已移到登录组件中，避免重复连接\n\n    return response;\n  },\n  /**\r\n   * 用户登出\r\n   * @returns {Promise} 登出响应\r\n   */\n  async logout() {\n    const response = await api.post('/auth/logout/');\n\n    // 登出成功后断开WebSocket连接\n    if (window.webSocketIntegration) {\n      console.log('登出成功，断开WebSocket连接...');\n      window.webSocketIntegration.disconnectWebSocket();\n    }\n    return response;\n  },\n  /**\r\n   * 获取当前用户信息\r\n   * @returns {Promise} 用户信息\r\n   */\n  getCurrentUser() {\n    return api.get('/auth/me/');\n  },\n  /**\r\n   * 刷新Token\r\n   * @returns {Promise} 新的Token\r\n   */\n  refreshToken() {\n    return api.post('/auth/refresh/');\n  },\n  /**\r\n   * 修改密码\r\n   * @param {Object} passwordData - 密码数据\r\n   * @param {string} passwordData.oldPassword - 旧密码\r\n   * @param {string} passwordData.newPassword - 新密码\r\n   * @returns {Promise} 修改结果\r\n   */\n  changePassword(passwordData) {\n    return api.put('/auth/change-password/', passwordData);\n  },\n  /**\r\n   * 获取用户列表\r\n   * @param {Object} params - 查询参数\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @param {string} params.search - 搜索关键词\r\n   * @param {string} params.role - 角色筛选\r\n   * @returns {Promise} 用户列表响应\r\n   */\n  getUserList(params = {}) {\n    return api.get('/users/', {\n      params\n    });\n  },\n  /**\r\n   * 获取用户统计信息\r\n   * @returns {Promise} 用户统计数据\r\n   */\n  getUserStats() {\n    return api.get('/users/statistics/');\n  },\n  /**\r\n   * 创建新用户\r\n   * @param {Object} userData - 用户数据\r\n   * @param {string} userData.username - 用户名\r\n   * @param {string} userData.realName - 真实姓名\r\n   * @param {string} userData.email - 邮箱\r\n   * @param {string} userData.role - 角色\r\n   * @param {string} userData.password - 密码\r\n   * @returns {Promise} 创建结果\r\n   */\n  createUser(userData) {\n    return api.post('/users/', userData);\n  },\n  /**\r\n   * 更新用户信息\r\n   * @param {number|string} userId - 用户ID\r\n   * @param {Object} userData - 更新的用户数据\r\n   * @returns {Promise} 更新结果\r\n   */\n  updateUser(userId, userData) {\n    return api.put(`/users/${userId}/`, userData);\n  },\n  /**\r\n   * 删除用户\r\n   * @param {number|string} userId - 用户ID\r\n   * @returns {Promise} 删除结果\r\n   */\n  deleteUser(userId) {\n    return api.delete(`/users/${userId}/`);\n  },\n  /**\r\n   * 切换用户状态\r\n   * @param {number|string} userId - 用户ID\r\n   * @param {boolean} active - 激活状态\r\n   * @returns {Promise} 切换结果\r\n   */\n  toggleUserStatus(userId, active) {\n    return api.patch(`/users/${userId}/status/`, {\n      active\n    });\n  },\n  /**\r\n   * 重置用户密码\r\n   * @param {number|string} userId - 用户ID\r\n   * @returns {Promise} 重置结果\r\n   */\n  resetUserPassword(userId) {\n    return api.post(`/users/${userId}/reset_password/`);\n  },\n  /**\r\n   * 踢出用户（关闭所有会话）\r\n   * @param {number|string} userId - 用户ID\r\n   * @returns {Promise} 踢出结果\r\n   */\n  kickOutUser(userId) {\n    return api.post(`/users/${userId}/kick_out/`);\n  },\n  /**\r\n   * 获取所有在线会话信息\r\n   * @returns {Promise} 在线会话列表\r\n   */\n  getOnlineSessions() {\n    return api.get('/users/online-sessions/');\n  },\n  /**\r\n   * 批量删除用户\r\n   * @param {Array} userIds - 用户ID数组\r\n   * @returns {Promise} 批量删除结果\r\n   */\n  batchDeleteUsers(userIds) {\n    return api.delete('/users/batch/', {\n      data: {\n        userIds\n      }\n    });\n  },\n  /**\r\n   * 导出用户列表\r\n   * @param {Object} params - 导出参数\r\n   * @returns {Promise} 导出文件\r\n   */\n  exportUsers(params = {}) {\n    return api.get('/users/export/', {\n      params,\n      responseType: 'blob'\n    });\n  },\n  /**\r\n   * 导入用户列表\r\n   * @param {FormData} formData - 包含文件的表单数据\r\n   * @returns {Promise} 导入结果\r\n   */\n  importUsers(formData) {\n    return api.post('/users/import/', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};\n\n// 角色管理API\nexport const roleAPI = {\n  /**\r\n   * 获取角色列表\r\n   * @returns {Promise} 角色列表\r\n   */\n  getRoleList() {\n    return api.get('/admin/roles/');\n  },\n  /**\r\n   * 创建角色\r\n   * @param {Object} roleData - 角色数据\r\n   * @returns {Promise} 创建结果\r\n   */\n  createRole(roleData) {\n    return api.post('/admin/roles/', roleData);\n  },\n  /**\r\n   * 更新角色\r\n   * @param {number|string} roleId - 角色ID\r\n   * @param {Object} roleData - 角色数据\r\n   * @returns {Promise} 更新结果\r\n   */\n  updateRole(roleId, roleData) {\n    return api.put(`/admin/roles/${roleId}/`, roleData);\n  },\n  /**\r\n   * 删除角色\r\n   * @param {number|string} roleId - 角色ID\r\n   * @returns {Promise} 删除结果\r\n   */\n  deleteRole(roleId) {\n    return api.delete(`/admin/roles/${roleId}/`);\n  },\n  /**\r\n   * 获取角色权限\r\n   * @param {number|string} roleId - 角色ID\r\n   * @returns {Promise} 权限列表\r\n   */\n  getRolePermissions(roleId) {\n    return api.get(`/admin/roles/${roleId}/permissions/`);\n  },\n  /**\r\n   * 更新角色权限\r\n   * @param {number|string} roleId - 角色ID\r\n   * @param {Array} permissions - 权限数组\r\n   * @returns {Promise} 更新结果\r\n   */\n  updateRolePermissions(roleId, permissions) {\n    return api.put(`/admin/roles/${roleId}/permissions/`, {\n      permissions\n    });\n  }\n};\n\n// 权限管理API\nexport const permissionAPI = {\n  /**\r\n   * 获取权限树\r\n   * @returns {Promise} 权限树结构\r\n   */\n  getPermissionTree() {\n    return api.get('/admin/permissions/tree/');\n  },\n  /**\r\n   * 获取所有权限\r\n   * @returns {Promise} 权限列表\r\n   */\n  getAllPermissions() {\n    return api.get('/admin/permissions/');\n  }\n};\n\n// 统一导出所有API\nexport { api as axiosInstance };","map":{"version":3,"names":["axios","api","create","baseURL","process","env","VUE_APP_API_BASE_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","console","warn","removeItem","window","webSocketIntegration","disconnectWebSocket","antd","message","warning","setTimeout","location","href","userAPI","login","loginData","post","logout","log","getCurrentUser","get","refreshToken","changePassword","passwordData","put","getUserList","params","getUserStats","createUser","userData","updateUser","userId","deleteUser","delete","toggleUserStatus","active","patch","resetUserPassword","kickOutUser","getOnlineSessions","batchDeleteUsers","userIds","data","exportUsers","responseType","importUsers","formData","roleAPI","getRoleList","createRole","roleData","updateRole","roleId","deleteRole","getRolePermissions","updateRolePermissions","permissions","permissionAPI","getPermissionTree","getAllPermissions","axiosInstance"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/api/users.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// WebSocket集成将通过全局变量访问，避免页面加载时自动导入\r\n// 集成模块将在用户登录成功后由UserLogin.vue动态导入并暴露为window.webSocketIntegration\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://127.0.0.1:8001/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    // 添加认证token\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  error => {\r\n    // 统一错误处理\r\n    if (error.response?.status === 401) {\r\n      // 未授权，清除本地存储并跳转到登录页\r\n      console.warn('收到401错误，用户已被踢出或token已过期');\r\n      \r\n      // 清除所有相关的本地存储\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userInfo');\r\n      localStorage.removeItem('isLoggedIn');\r\n      localStorage.removeItem('userType');\r\n      localStorage.removeItem('username');\r\n      localStorage.removeItem('isAdmin');\r\n      localStorage.removeItem('userRole');\r\n      localStorage.removeItem('remember_user');\r\n      localStorage.removeItem('remember_mode');\r\n      \r\n      // 断开WebSocket连接\r\n      if (window.webSocketIntegration && window.webSocketIntegration.disconnectWebSocket) {\r\n        window.webSocketIntegration.disconnectWebSocket();\r\n      }\r\n      \r\n      // 显示提示信息\r\n      if (typeof window !== 'undefined' && window.antd && window.antd.message) {\r\n        window.antd.message.warning('您的登录状态已失效，请重新登录');\r\n      }\r\n      \r\n      // 延迟跳转，确保消息显示\r\n      setTimeout(() => {\r\n        window.location.href = '/#/login';\r\n      }, 1000);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 用户管理API\r\nexport const userAPI = {\r\n  /**\r\n   * 用户登录\r\n   * @param {Object} loginData - 登录数据\r\n   * @param {string} loginData.username - 用户名\r\n   * @param {string} loginData.password - 密码\r\n   * @param {boolean} loginData.remember - 是否记住密码\r\n   * @returns {Promise} 登录响应\r\n   */\r\n  async login(loginData) {\r\n    const response = await api.post('/auth/login/', loginData);\r\n    \r\n    // 不在这里初始化WebSocket，由UserLogin.vue组件负责\r\n    // WebSocket初始化逻辑已移到登录组件中，避免重复连接\r\n    \r\n    return response;\r\n  },\r\n\r\n  /**\r\n   * 用户登出\r\n   * @returns {Promise} 登出响应\r\n   */\r\n  async logout() {\r\n    const response = await api.post('/auth/logout/');\r\n    \r\n    // 登出成功后断开WebSocket连接\r\n    if (window.webSocketIntegration) {\r\n      console.log('登出成功，断开WebSocket连接...');\r\n      window.webSocketIntegration.disconnectWebSocket();\r\n    }\r\n    \r\n    return response;\r\n  },\r\n\r\n  /**\r\n   * 获取当前用户信息\r\n   * @returns {Promise} 用户信息\r\n   */\r\n  getCurrentUser() {\r\n    return api.get('/auth/me/');\r\n  },\r\n\r\n  /**\r\n   * 刷新Token\r\n   * @returns {Promise} 新的Token\r\n   */\r\n  refreshToken() {\r\n    return api.post('/auth/refresh/');\r\n  },\r\n\r\n  /**\r\n   * 修改密码\r\n   * @param {Object} passwordData - 密码数据\r\n   * @param {string} passwordData.oldPassword - 旧密码\r\n   * @param {string} passwordData.newPassword - 新密码\r\n   * @returns {Promise} 修改结果\r\n   */\r\n  changePassword(passwordData) {\r\n    return api.put('/auth/change-password/', passwordData);\r\n  },\r\n\r\n  /**\r\n   * 获取用户列表\r\n   * @param {Object} params - 查询参数\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @param {string} params.search - 搜索关键词\r\n   * @param {string} params.role - 角色筛选\r\n   * @returns {Promise} 用户列表响应\r\n   */\r\n  getUserList(params = {}) {\r\n    return api.get('/users/', { params });\r\n  },\r\n\r\n  \r\n\r\n  /**\r\n   * 获取用户统计信息\r\n   * @returns {Promise} 用户统计数据\r\n   */\r\n  getUserStats() {\r\n    return api.get('/users/statistics/');\r\n  },\r\n\r\n  /**\r\n   * 创建新用户\r\n   * @param {Object} userData - 用户数据\r\n   * @param {string} userData.username - 用户名\r\n   * @param {string} userData.realName - 真实姓名\r\n   * @param {string} userData.email - 邮箱\r\n   * @param {string} userData.role - 角色\r\n   * @param {string} userData.password - 密码\r\n   * @returns {Promise} 创建结果\r\n   */\r\n  createUser(userData) {\r\n    return api.post('/users/', userData);\r\n  },\r\n\r\n  /**\r\n   * 更新用户信息\r\n   * @param {number|string} userId - 用户ID\r\n   * @param {Object} userData - 更新的用户数据\r\n   * @returns {Promise} 更新结果\r\n   */\r\n  updateUser(userId, userData) {\r\n    return api.put(`/users/${userId}/`, userData);\r\n  },\r\n\r\n  /**\r\n   * 删除用户\r\n   * @param {number|string} userId - 用户ID\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  deleteUser(userId) {\r\n    return api.delete(`/users/${userId}/`);\r\n  },\r\n\r\n  /**\r\n   * 切换用户状态\r\n   * @param {number|string} userId - 用户ID\r\n   * @param {boolean} active - 激活状态\r\n   * @returns {Promise} 切换结果\r\n   */\r\n  toggleUserStatus(userId, active) {\r\n    return api.patch(`/users/${userId}/status/`, { active });\r\n  },\r\n\r\n  /**\r\n   * 重置用户密码\r\n   * @param {number|string} userId - 用户ID\r\n   * @returns {Promise} 重置结果\r\n   */\r\n  resetUserPassword(userId) {\r\n    return api.post(`/users/${userId}/reset_password/`);\r\n  },\r\n\r\n  /**\r\n   * 踢出用户（关闭所有会话）\r\n   * @param {number|string} userId - 用户ID\r\n   * @returns {Promise} 踢出结果\r\n   */\r\n  kickOutUser(userId) {\r\n    return api.post(`/users/${userId}/kick_out/`);\r\n  },\r\n\r\n  /**\r\n   * 获取所有在线会话信息\r\n   * @returns {Promise} 在线会话列表\r\n   */\r\n  getOnlineSessions() {\r\n    return api.get('/users/online-sessions/');\r\n  },\r\n\r\n  /**\r\n   * 批量删除用户\r\n   * @param {Array} userIds - 用户ID数组\r\n   * @returns {Promise} 批量删除结果\r\n   */\r\n  batchDeleteUsers(userIds) {\r\n    return api.delete('/users/batch/', { data: { userIds } });\r\n  },\r\n\r\n  /**\r\n   * 导出用户列表\r\n   * @param {Object} params - 导出参数\r\n   * @returns {Promise} 导出文件\r\n   */\r\n  exportUsers(params = {}) {\r\n    return api.get('/users/export/', { \r\n      params,\r\n      responseType: 'blob'\r\n    });\r\n  },\r\n\r\n  /**\r\n   * 导入用户列表\r\n   * @param {FormData} formData - 包含文件的表单数据\r\n   * @returns {Promise} 导入结果\r\n   */\r\n  importUsers(formData) {\r\n    return api.post('/users/import/', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// 角色管理API\r\nexport const roleAPI = {\r\n  /**\r\n   * 获取角色列表\r\n   * @returns {Promise} 角色列表\r\n   */\r\n  getRoleList() {\r\n    return api.get('/admin/roles/');\r\n  },\r\n\r\n  /**\r\n   * 创建角色\r\n   * @param {Object} roleData - 角色数据\r\n   * @returns {Promise} 创建结果\r\n   */\r\n  createRole(roleData) {\r\n    return api.post('/admin/roles/', roleData);\r\n  },\r\n\r\n  /**\r\n   * 更新角色\r\n   * @param {number|string} roleId - 角色ID\r\n   * @param {Object} roleData - 角色数据\r\n   * @returns {Promise} 更新结果\r\n   */\r\n  updateRole(roleId, roleData) {\r\n    return api.put(`/admin/roles/${roleId}/`, roleData);\r\n  },\r\n\r\n  /**\r\n   * 删除角色\r\n   * @param {number|string} roleId - 角色ID\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  deleteRole(roleId) {\r\n    return api.delete(`/admin/roles/${roleId}/`);\r\n  },\r\n\r\n  /**\r\n   * 获取角色权限\r\n   * @param {number|string} roleId - 角色ID\r\n   * @returns {Promise} 权限列表\r\n   */\r\n  getRolePermissions(roleId) {\r\n    return api.get(`/admin/roles/${roleId}/permissions/`);\r\n  },\r\n\r\n  /**\r\n   * 更新角色权限\r\n   * @param {number|string} roleId - 角色ID\r\n   * @param {Array} permissions - 权限数组\r\n   * @returns {Promise} 更新结果\r\n   */\r\n  updateRolePermissions(roleId, permissions) {\r\n    return api.put(`/admin/roles/${roleId}/permissions/`, { permissions });\r\n  }\r\n};\r\n\r\n// 权限管理API\r\nexport const permissionAPI = {\r\n  /**\r\n   * 获取权限树\r\n   * @returns {Promise} 权限树结构\r\n   */\r\n  getPermissionTree() {\r\n    return api.get('/admin/permissions/tree/');\r\n  },\r\n\r\n  /**\r\n   * 获取所有权限\r\n   * @returns {Promise} 权限列表\r\n   */\r\n  getAllPermissions() {\r\n    return api.get('/admin/permissions/');\r\n  }\r\n};\r\n\r\n// 统一导出所有API\r\nexport {\r\n  api as axiosInstance\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}