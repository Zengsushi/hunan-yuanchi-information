{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ip-list-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" IP表格组件 \"), _createVNode($setup[\"IPTable\"], {\n    dataSource: $setup.ipData,\n    loading: $setup.loading,\n    pagination: $setup.pagination,\n    selectedRowKeys: $setup.selectedRowKeys,\n    searchKeyword: $setup.searchKeyword,\n    ipStatus: $setup.ipStatus,\n    ipType: $setup.ipType,\n    totalCount: $setup.statistics.total,\n    activeCount: $setup.statistics.active,\n    availableCount: $setup.statistics.available,\n    onlineCount: $setup.statistics.online,\n    onSelectChange: $setup.onSelectChange,\n    onSelectAll: $setup.onSelectAll,\n    onTableChange: $setup.handleTableChange,\n    onView: $setup.handleView,\n    onEdit: $setup.handleEdit,\n    onDelete: $setup.handleDelete,\n    onPing: $setup.handlePing,\n    onToggleMonitoring: $setup.handleToggleMonitoring,\n    onBatchDelete: $setup.handleBatchDelete,\n    onBatchToggleMonitoring: $setup.handleBatchToggleMonitoring,\n    onClearSelection: $setup.clearSelection,\n    onAdd: $setup.handleAdd,\n    onScan: $setup.handleScan,\n    onExport: $setup.handleExport,\n    onHeaderBatchPing: $setup.handleBatchPing,\n    onListManagement: $setup.handleListManagement,\n    onSearch: $setup.handleSearch,\n    onReset: $setup.handleReset,\n    onSearchInput: $setup.handleSearchInput,\n    onStatusChange: $setup.handleStatusChange,\n    onTypeChange: $setup.handleTypeChange,\n    batchDeleting: $setup.batchDeleting,\n    batchMonitoringToggling: $setup.batchMonitoringToggling\n  }, null, 8 /* PROPS */, [\"dataSource\", \"loading\", \"pagination\", \"selectedRowKeys\", \"searchKeyword\", \"ipStatus\", \"ipType\", \"totalCount\", \"activeCount\", \"availableCount\", \"onlineCount\", \"batchDeleting\", \"batchMonitoringToggling\"]), _createCommentVNode(\" 监控操作组件 \"), _createVNode($setup[\"MonitoringActions\"], {\n    selectedIP: $setup.selectedIP,\n    detailModalVisible: $setup.detailModalVisible,\n    scanModalVisible: $setup.scanModalVisible,\n    batchPingState: $setup.batchPingState,\n    taskResultModalVisible: $setup.taskResultModalVisible,\n    scanFormData: $setup.scanFormData,\n    scanRules: $setup.scanRules,\n    selectedTask: $setup.selectedTask,\n    taskResults: $setup.taskResults,\n    resultLoading: $setup.resultLoading,\n    resultColumns: $setup.resultColumns,\n    onCloseDetailModal: _cache[0] || (_cache[0] = $event => $setup.detailModalVisible = false),\n    onCloseScanModal: $setup.handleScanCancel,\n    onScanConfirm: $setup.handleScanConfirm,\n    onCloseBatchPing: $setup.closeBatchPingModal,\n    onStartBatchPing: $setup.startBatchPingTest,\n    onCloseTaskResult: _cache[1] || (_cache[1] = $event => $setup.taskResultModalVisible = false)\n  }, null, 8 /* PROPS */, [\"selectedIP\", \"detailModalVisible\", \"scanModalVisible\", \"batchPingState\", \"taskResultModalVisible\", \"scanFormData\", \"selectedTask\", \"taskResults\", \"resultLoading\"]), _createCommentVNode(\" 模板选择抽屉组件 \"), _createVNode($setup[\"TemplateDrawer\"], {\n    visible: $setup.templateDrawerVisible,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = $event => $setup.templateDrawerVisible = $event),\n    selectedTemplateIds: $setup.selectedTemplateIds,\n    \"onUpdate:selectedTemplateIds\": _cache[3] || (_cache[3] = $event => $setup.selectedTemplateIds = $event),\n    loading: $setup.templateLoading,\n    selectedIP: $setup.selectedIP,\n    onConfirm: $setup.handleCreateMonitoring,\n    onClose: $setup.handleCloseTemplateDrawer\n  }, null, 8 /* PROPS */, [\"visible\", \"selectedTemplateIds\", \"loading\", \"selectedIP\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","$setup","dataSource","ipData","loading","pagination","selectedRowKeys","searchKeyword","ipStatus","ipType","totalCount","statistics","total","activeCount","active","availableCount","available","onlineCount","online","onSelectChange","onSelectAll","onTableChange","handleTableChange","onView","handleView","onEdit","handleEdit","onDelete","handleDelete","onPing","handlePing","onToggleMonitoring","handleToggleMonitoring","onBatchDelete","handleBatchDelete","onBatchToggleMonitoring","handleBatchToggleMonitoring","onClearSelection","clearSelection","onAdd","handleAdd","onScan","handleScan","onExport","handleExport","onHeaderBatchPing","handleBatchPing","onListManagement","handleListManagement","onSearch","handleSearch","onReset","handleReset","onSearchInput","handleSearchInput","onStatusChange","handleStatusChange","onTypeChange","handleTypeChange","batchDeleting","batchMonitoringToggling","selectedIP","detailModalVisible","scanModalVisible","batchPingState","taskResultModalVisible","scanFormData","scanRules","selectedTask","taskResults","resultLoading","resultColumns","onCloseDetailModal","_cache","$event","onCloseScanModal","handleScanCancel","onScanConfirm","handleScanConfirm","onCloseBatchPing","closeBatchPingModal","onStartBatchPing","startBatchPingTest","onCloseTaskResult","visible","templateDrawerVisible","selectedTemplateIds","templateLoading","onConfirm","handleCreateMonitoring","onClose","handleCloseTemplateDrawer"],"sources":["E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\business\\IPList.vue"],"sourcesContent":["<template>\r\n  <div class=\"ip-list-container\">\r\n\r\n\r\n    <!-- IP表格组件 -->\r\n    <IPTable\r\n      :dataSource=\"ipData\"\r\n      :loading=\"loading\"\r\n      :pagination=\"pagination\"\r\n      :selectedRowKeys=\"selectedRowKeys\"\r\n      :searchKeyword=\"searchKeyword\"\r\n      :ipStatus=\"ipStatus\"\r\n      :ipType=\"ipType\"\r\n      :totalCount=\"statistics.total\"\r\n      :activeCount=\"statistics.active\"\r\n      :availableCount=\"statistics.available\"\r\n      :onlineCount=\"statistics.online\"\r\n      @select-change=\"onSelectChange\"\r\n      @select-all=\"onSelectAll\"\r\n      @table-change=\"handleTableChange\"\r\n      @view=\"handleView\"\r\n      @edit=\"handleEdit\"\r\n      @delete=\"handleDelete\"\r\n      @ping=\"handlePing\"\r\n      @toggle-monitoring=\"handleToggleMonitoring\"\r\n      @batch-delete=\"handleBatchDelete\"\r\n      @batch-toggle-monitoring=\"handleBatchToggleMonitoring\"\r\n      @clear-selection=\"clearSelection\"\r\n      @add=\"handleAdd\"\r\n      @scan=\"handleScan\"\r\n      @export=\"handleExport\"\r\n      @header-batch-ping=\"handleBatchPing\"\r\n      @list-management=\"handleListManagement\"\r\n      @search=\"handleSearch\"\r\n      @reset=\"handleReset\"\r\n      @search-input=\"handleSearchInput\"\r\n      @status-change=\"handleStatusChange\"\r\n      @type-change=\"handleTypeChange\"\r\n      :batchDeleting=\"batchDeleting\"\r\n      :batchMonitoringToggling=\"batchMonitoringToggling\"\r\n    />\r\n\r\n    <!-- 监控操作组件 -->\r\n    <MonitoringActions\r\n      :selectedIP=\"selectedIP\"\r\n      :detailModalVisible=\"detailModalVisible\"\r\n      :scanModalVisible=\"scanModalVisible\"\r\n      :batchPingState=\"batchPingState\"\r\n      :taskResultModalVisible=\"taskResultModalVisible\"\r\n      :scanFormData=\"scanFormData\"\r\n      :scanRules=\"scanRules\"\r\n      :selectedTask=\"selectedTask\"\r\n      :taskResults=\"taskResults\"\r\n      :resultLoading=\"resultLoading\"\r\n      :resultColumns=\"resultColumns\"\r\n      @close-detail-modal=\"detailModalVisible = false\"\r\n      @close-scan-modal=\"handleScanCancel\"\r\n      @scan-confirm=\"handleScanConfirm\"\r\n      @close-batch-ping=\"closeBatchPingModal\"\r\n      @start-batch-ping=\"startBatchPingTest\"\r\n      @close-task-result=\"taskResultModalVisible = false\"\r\n    />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <!-- 模板选择抽屉组件 -->\r\n    <TemplateDrawer \r\n      v-model:visible=\"templateDrawerVisible\"\r\n      v-model:selectedTemplateIds=\"selectedTemplateIds\"\r\n      :loading=\"templateLoading\"\r\n      :selectedIP=\"selectedIP\"\r\n      @confirm=\"handleCreateMonitoring\"\r\n      @close=\"handleCloseTemplateDrawer\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, computed, onMounted, onUnmounted, watch, onBeforeUnmount, nextTick, h, createVNode } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { message, Modal } from 'ant-design-vue';\r\nimport { ipAPI } from '@/api';\r\nimport { suppressResizeObserverError } from '@/utils/errorHandler';\r\nimport * as Vue from 'vue';\r\nimport * as antdvIcons from '@ant-design/icons-vue';\r\n\r\n// 导入拆分的组件\r\nimport IPTable from '@/components/business/IPTable.vue';\r\nimport MonitoringActions from '@/components/business/MonitoringActions.vue';\r\nimport TemplateDrawer from '@/components/business/TemplateDrawer.vue';\r\nimport { \r\n  ExclamationCircleOutlined,\r\n} from '@ant-design/icons-vue';\r\n\r\n// 路由实例\r\nconst router = useRouter();\r\n\r\n// 搜索条件\r\nconst searchKeyword = ref('');\r\nconst ipStatus = ref('');\r\nconst ipType = ref('');\r\n\r\n// IP数据状态 - 确保始终是数组\r\nconst ipData = ref([]);\r\nconst loading = ref(false);\r\n\r\n// 批量操作相关状态\r\nconst selectedRowKeys = ref([]);\r\nconst batchDeleting = ref(false);\r\nconst batchMonitoringToggling = ref(false);\r\n\r\n// 模板选择抽屉相关状态\r\nconst templateDrawerVisible = ref(false);\r\nconst zabbixTemplates = ref([]);\r\nconst selectedTemplateIds = ref([]);\r\nconst templateLoading = ref(false);\r\nconst templateSearchKeyword = ref('');\r\nconst monitoringCreating = ref(false);\r\nconst selectedCategory = ref(''); // 当前选中的分类\r\nconst expandedCategories = ref({}); // 展开的分类\r\n\r\n// 防御性检查，确保ipData始终是数组\r\nconst setIPData = (data) => {\r\n  if (Array.isArray(data)) {\r\n    // 为每个IP记录设置保护状态信息\r\n    const processedData = data.map(ip => {\r\n      // 确保保护状态字段存在\r\n      if (ip.is_protected === undefined) {\r\n        ip.is_protected = ip.is_auto_discovered || false;\r\n      }\r\n      \r\n      // 设置保护原因\r\n      if (!ip.protection_reason && ip.is_auto_discovered) {\r\n        ip.protection_reason = '自动发现的IP地址';\r\n      }\r\n      \r\n      // 设置可编辑字段列表\r\n      if (ip.is_auto_discovered) {\r\n        ip.editable_fields = ['description', 'status'];\r\n      } else {\r\n        ip.editable_fields = 'all';\r\n      }\r\n      \r\n      return ip;\r\n    });\r\n    \r\n    ipData.value = processedData;\r\n  } else {\r\n    console.warn('尝试设置非数组数据到ipData:', data);\r\n    ipData.value = [];\r\n  }\r\n};\r\n\r\n// 统计计算属性 - 添加防御性检查\r\nconst activeCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.status === 'active').length;\r\n});\r\n\r\nconst availableCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.status === 'available').length;\r\n});\r\n\r\nconst onlineCount = computed(() => {\r\n  if (!Array.isArray(ipData.value)) {\r\n    console.warn('ipData不是数组，返回0');\r\n    return 0;\r\n  }\r\n  return ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\r\n});\r\n\r\n// 统计对象\r\nconst statistics = computed(() => ({\r\n  total: ipData.value.length || 0,\r\n  active: activeCount.value,\r\n  available: availableCount.value,\r\n  online: onlineCount.value\r\n}));\r\n\r\n// 计算属性 - 扫描相关\r\nconst needsKey = computed(() => {\r\n  const type = scanFormData.checkType;\r\n  // Zabbix agent, SNMPv1, SNMPv2, SNMPv3 需要key\r\n  return type === 9 || type === 10 || type === 11 || type === 13;\r\n});\r\n\r\nconst isSNMPType = computed(() => {\r\n  const type = scanFormData.checkType;\r\n  return type === 10 || type === 11 || type === 13;\r\n});\r\n\r\nconst needsAuth = computed(() => {\r\n  return scanFormData.checkType === 13 && (scanFormData.snmpv3Config.securityLevel === '1' || scanFormData.snmpv3Config.securityLevel === '2');\r\n});\r\n\r\nconst needsPriv = computed(() => {\r\n  return scanFormData.checkType === 13 && scanFormData.snmpv3Config.securityLevel === '2';\r\n});\r\n\r\nconst getKeyPlaceholder = () => {\r\n  const type = scanFormData.checkType;\r\n  if (type === 9) {\r\n    return '例如：system.uname';\r\n  } else if (type === 10 || type === 11 || type === 13) {\r\n    return '例如：1.3.6.1.2.1.1.1.0';\r\n  }\r\n  return '请输入检查键值';\r\n};\r\n\r\n\r\n\r\n// 工具函数\r\nconst getStatusText = (status) => {\r\n  const textMap = {\r\n    'active': '在用',\r\n    'available': '可用',\r\n    'reserved': '预留',\r\n    'conflict': '冲突'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\nconst getTypeText = (type) => {\r\n  const typeMap = {\r\n    'static': '静态IP',\r\n    'dynamic': '动态IP',\r\n    'gateway': '网关',\r\n    'dns': 'DNS服务器'\r\n  };\r\n  return typeMap[type] || type;\r\n};\r\n\r\nconst formatDate = (date) => {\r\n  if (!date) return null;\r\n  return new Date(date).toLocaleString('zh-CN');\r\n};\r\n\r\n// 弹窗状态\r\nconst detailModalVisible = ref(false);\r\nconst editModalVisible = ref(false);\r\nconst scanModalVisible = ref(false);\r\nconst scanTaskModalVisible = ref(false);\r\nconst taskDetailModalVisible = ref(false);\r\nconst taskResultModalVisible = ref(false);\r\nconst selectedIP = ref(null);\r\nconst editingIP = ref(null);\r\nconst selectedTask = ref(null);\r\n\r\n// 扫描任务查询相关\r\nconst scanTasks = ref([]);\r\nconst taskResults = ref([]);\r\nconst taskLoading = ref(false);\r\nconst resultLoading = ref(false);\r\nconst taskStatusFilter = ref('');\r\nconst taskDateRange = ref([]);\r\nconst taskNameFilter = ref('');\r\nconst taskPagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条，共 ${total} 条`\r\n});\r\n\r\n// 表单相关\r\nconst formRef = ref();\r\nconst scanFormRef = ref();\r\nconst formData = reactive({\r\n  ipAddress: '',\r\n  hostname: '',\r\n  status: 'available',\r\n  type: 'static',\r\n  macAddress: '',\r\n  device: '',\r\n  subnet: '',\r\n  description: ''\r\n});\r\n\r\n// 扫描配置数据\r\nconst scanFormData = reactive({\r\n  ipRanges: '192.168.1.0/24', // IP范围\r\n  checkType: 12, // 默认ICMP ping\r\n  ports: '0',\r\n  key: '',\r\n  // Python扫描器新参数\r\n  maxConcurrent: 100, // 最大并发数\r\n  timeout: 3.0, // 连接超时时间\r\n  pingTimeout: 1.0, // Ping超时时间\r\n  // 保留的Zabbix相关参数(仅用于兼容性)\r\n  snmpCommunity: 'public',\r\n  snmpv3Config: {\r\n    securityLevel: '0',\r\n    securityName: '',\r\n    contextName: '',\r\n    authProtocol: 0,\r\n    authPassphrase: '',\r\n    privProtocol: 0,\r\n    privPassphrase: ''\r\n  },\r\n  uniqueCheck: 0,\r\n  hostSource: 1,\r\n  nameSource: 0\r\n});\r\n\r\n\r\n\r\n// 表单验证规则\r\nconst rules = {\r\n  ipAddress: [\r\n    { required: true, message: '请输入IP地址' },\r\n    { pattern: /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/, message: '请输入有效的IP地址' }\r\n  ],\r\n  status: [{ required: true, message: '请选择IP状态' }],\r\n  type: [{ required: true, message: '请选择IP类型' }]\r\n};\r\n\r\n// 扫描配置验证规则\r\nconst scanRules = {\r\n  ipRanges: [\r\n    { required: true, message: '请输入扫描IP范围' },\r\n    { \r\n      validator: (rule, value) => {\r\n        if (!value) return Promise.reject('请输入IP范围');\r\n        \r\n        const ranges = value.split('\\n').filter(range => range.trim());\r\n        for (const range of ranges) {\r\n          const trimmedRange = range.trim();\r\n          // 验证单个IP\r\n          const singleIpPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n          // 验证IP范围\r\n          const rangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n          // 验证CIDR\r\n          const cidrPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\\/[0-9]{1,2}$/;\r\n          // 验证简化范围格式 (192.168.1.1-100)\r\n          const simpleRangePattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}-[0-9]{1,3}$/;\r\n          \r\n          if (!singleIpPattern.test(trimmedRange) && \r\n              !rangePattern.test(trimmedRange) && \r\n              !cidrPattern.test(trimmedRange) &&\r\n              !simpleRangePattern.test(trimmedRange)) {\r\n            return Promise.reject(`无效的IP范围格式: ${trimmedRange}`);\r\n          }\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n  ],\r\n  checkType: [{ required: true, message: '请选择检查类型' }],\r\n  maxConcurrent: [\r\n    { type: 'number', min: 1, max: 200, message: '并发数必须在1-200之间' }\r\n  ],\r\n  timeout: [\r\n    { type: 'number', min: 1, max: 30, message: '超时时间必须在1-30秒之间' }\r\n  ],\r\n  pingTimeout: [\r\n    { type: 'number', min: 0.5, max: 10, message: 'Ping超时时间必须在0.5-10秒之间' }\r\n  ]\r\n};\r\n\r\n\r\n\r\n// 分页配置\r\nconst pagination = reactive({\r\n  current: 1,\r\n  pageSize: 20,\r\n  total: 0,\r\n  pageSizeOptions: ['10', '20', '50', '100'],\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total) => `共 ${total} 条记录`,\r\n});\r\n\r\n// 加载IP列表数据\r\nconst loadIPList = async () => {\r\n  loading.value = true;\r\n  try {\r\n    const params = {\r\n      page: pagination.current,\r\n      page_size: pagination.pageSize  // 使用Django标准的page_size参数名\r\n    };\r\n    \r\n    // 添加搜索条件\r\n    if (searchKeyword.value && searchKeyword.value.trim()) {\r\n      params.search = searchKeyword.value.trim();\r\n    }\r\n    if (ipStatus.value) {\r\n      params.status = ipStatus.value;\r\n    }\r\n    if (ipType.value) {\r\n      params.type = ipType.value;\r\n    }\r\n    \r\n    console.log('正在获取IP列表，参数:', params);\r\n    console.log('当前分页状态:', {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize,\r\n      total: pagination.total\r\n    });\r\n    \r\n    const response = await ipAPI.getIPList(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 特殊检查：如果返回的是URL路径列表，说明API路径错误\r\n      if (response.data.records && response.data['scan-tasks']) {\r\n        console.error('API路径错误：返回的是可用路径列表，而不是数据:', response.data);\r\n        message.error('获取IP列表失败: API路径错误，请检查后端配置');\r\n        setIPData([]);\r\n        pagination.total = 0;\r\n        return;\r\n      }\r\n      \r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 确保获取的数据是数组\r\n          let resultData = [];\r\n          if (data && data.results && Array.isArray(data.results)) {\r\n            resultData = data.results;\r\n          } else if (Array.isArray(data)) {\r\n            resultData = data;\r\n          } else {\r\n            console.warn('API返回的数据不是数组格式:', data);\r\n            resultData = [];\r\n          }\r\n          \r\n          setIPData(resultData);\r\n          pagination.total = data.count || data.total || resultData.length;\r\n          console.log('成功获取IP列表（统一格式）:', ipData.value);\r\n          message.success('IP列表数据已更新', 1);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取IP列表失败: ${response.data.message}`);\r\n          setIPData([]);\r\n          pagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 确保获取的数据是数组\r\n        let resultData = [];\r\n        if (response.data.results && Array.isArray(response.data.results)) {\r\n          resultData = response.data.results;\r\n        } else if (Array.isArray(response.data)) {\r\n          resultData = response.data;\r\n        } else {\r\n          console.warn('API返回的数据不是数组格式:', response.data);\r\n          resultData = [];\r\n        }\r\n        \r\n        setIPData(resultData);\r\n        pagination.total = response.data.count || response.data.total || resultData.length;\r\n        console.log('成功获取IP列表（DRF格式）:', ipData.value);\r\n        message.success('IP列表数据已更新', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取IP列表失败: 无效的响应数据');\r\n      setIPData([]);\r\n      pagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载IP列表失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '获取IP列表失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    \r\n    // 如果API调用失败，显示空数据而不是模拟数据\r\n    setIPData([]);\r\n    pagination.total = 0;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n\r\nconst columns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address', // 数据库字段名\r\n    key: 'ipAddress',\r\n    width: 70,\r\n    fixed: 'left'\r\n  },\r\n  {\r\n    title: '来源',\r\n    dataIndex: 'is_auto_discovered',\r\n    key: 'source',\r\n    width: 100\r\n  },\r\n  {\r\n    title: 'Ping状态',\r\n    dataIndex: 'ping_status', // 数据库字段名\r\n    key: 'pingStatus',\r\n    width: 80\r\n  },\r\n  {\r\n    title: '监控状态',\r\n    dataIndex: 'monitoring_enabled',\r\n    key: 'monitoringStatus',\r\n    width: 90\r\n  },\r\n  {\r\n    title: 'IP类型',\r\n    dataIndex: 'type',\r\n    key: 'type',\r\n    width: 80\r\n  },\r\n  {\r\n    title: 'MAC地址',\r\n    dataIndex: 'mac_address', // 数据库字段名\r\n    key: 'macAddress',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '关联资产',\r\n    dataIndex: 'device',\r\n    key: 'device',\r\n    width: 150\r\n  },\r\n  {\r\n    title: '所属网段',\r\n    dataIndex: 'subnet',\r\n    key: 'subnet',\r\n    width: 140\r\n  },\r\n  {\r\n    title: '最后在线时间',\r\n    dataIndex: 'last_seen', // 数据库字段名\r\n    key: 'lastSeen',\r\n    width: 160\r\n  },\r\n  {\r\n    title: '操作',\r\n    key: 'operation',\r\n    fixed: 'right',\r\n    width: 280\r\n  }\r\n];\r\n\r\n// 扫描任务表格列定义\r\n\r\n// 扫描结果表格列定义\r\nconst resultColumns = [\r\n  {\r\n    title: 'IP地址',\r\n    dataIndex: 'ip_address',\r\n    key: 'ip_address',\r\n    width: 90,\r\n  },\r\n  {\r\n    title: '主机名',\r\n    dataIndex: 'hostname',\r\n    key: 'hostname',\r\n    ellipsis: true\r\n  },\r\n  {\r\n    title: 'MAC地址',\r\n    dataIndex: 'mac_address',\r\n    key: 'mac_address'\r\n  },\r\n  {\r\n    title: '状态',\r\n    dataIndex: 'status',\r\n    key: 'status'\r\n  },\r\n  {\r\n    title: '响应时间',\r\n    dataIndex: 'response_time',\r\n    key: 'response_time'\r\n  },\r\n  {\r\n    title: '发现时间',\r\n    dataIndex: 'created_at',\r\n    key: 'created_at'\r\n  }\r\n];\r\n\r\n// 事件处理函数\r\n// 批量ping状态管理\r\nconst batchPingState = reactive({\r\n  isVisible: false,\r\n  phase: 'confirm', // confirm, testing, result\r\n  stats: {\r\n    total: 0,\r\n    currentOnline: 0,\r\n    currentOffline: 0,\r\n    testResult: null\r\n  },\r\n  testing: {\r\n    progress: 0,\r\n    currentIP: '',\r\n    startTime: null\r\n  }\r\n});\r\n\r\nconst handleBatchPing = async () => {\r\n  try {\r\n    // 获取当前页面的所有IP ID\r\n    const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\r\n    \r\n    if (allIpIds.length === 0) {\r\n      message.warning('没有可以ping的IP记录');\r\n      return;\r\n    }\r\n    \r\n    // 初始化状态\r\n    batchPingState.stats.total = allIpIds.length;\r\n    batchPingState.stats.currentOnline = ipData.value.filter(ip => ip.ping_status === 'online' || ip.pingStatus === 'online').length;\r\n    batchPingState.stats.currentOffline = allIpIds.length - batchPingState.stats.currentOnline;\r\n    batchPingState.phase = 'confirm';\r\n    batchPingState.isVisible = true;\r\n    \r\n  } catch (error) {\r\n    console.error('初始化批量ping失败:', error);\r\n    message.error('初始化批量ping失败');\r\n  }\r\n};\r\n\r\n// 开始ping测试\r\nconst startBatchPingTest = async () => {\r\n  try {\r\n    const allIpIds = ipData.value.map(ip => ip.id).filter(id => id);\r\n    \r\n    // 切换到测试阶段\r\n    batchPingState.phase = 'testing';\r\n    batchPingState.testing.startTime = new Date();\r\n    batchPingState.testing.progress = 0;\r\n    \r\n    loading.value = true;\r\n    \r\n    // 调用批量ping API\r\n    const response = await ipAPI.batchPingIPs(allIpIds);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const batchData = response.data.data;\r\n      const summary = batchData.summary;\r\n      \r\n      // 更新本地数据\r\n      const resultsMap = new Map();\r\n      batchData.results.forEach(result => {\r\n        resultsMap.set(result.ip_id, result);\r\n      });\r\n      \r\n      // 更新ipData中的记录\r\n      ipData.value.forEach(ip => {\r\n        const result = resultsMap.get(ip.id);\r\n        if (result) {\r\n          ip.ping_status = result.status;\r\n          ip.pingStatus = result.status; // 兼容字段\r\n          if (result.is_online) {\r\n            ip.last_seen = new Date().toISOString();\r\n            ip.lastSeen = new Date().toISOString(); // 兼容字段\r\n          }\r\n        }\r\n      });\r\n      \r\n      // 设置测试结果并切换到结果阶段\r\n      batchPingState.stats.testResult = summary;\r\n      batchPingState.phase = 'result';\r\n      \r\n    } else {\r\n      message.error(`批量ping测试失败: ${response.data?.message || '未知错误'}`);\r\n      batchPingState.isVisible = false;\r\n    }\r\n  } catch (error) {\r\n    console.error('批量ping测试失败:', error);\r\n    let errorMessage = '批量ping测试失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n    batchPingState.isVisible = false;\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 关闭批量ping弹窗\r\nconst closeBatchPingModal = () => {\r\n  batchPingState.isVisible = false;\r\n  batchPingState.phase = 'confirm';\r\n  batchPingState.stats.testResult = null;\r\n  batchPingState.testing.progress = 0;\r\n};\r\n\r\n// 行选择管理\r\nconst onSelectChange = (newSelectedRowKeys) => {\r\n  console.log('选中的行 keys:', newSelectedRowKeys);\r\n  selectedRowKeys.value = newSelectedRowKeys;\r\n};\r\n\r\nconst onSelectAll = (selected, selectedRows, changeRows) => {\r\n  console.log('全选/反选:', { selected, selectedRows: selectedRows.length, changeRows: changeRows.length });\r\n};\r\n\r\nconst clearSelection = () => {\r\n  selectedRowKeys.value = [];\r\n};\r\n\r\n// 批量删除\r\nconst handleBatchDelete = async () => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要删除的IP地址');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    Modal.confirm({\r\n      title: '批量删除确认',\r\n      content: `您将删除 ${selectedRowKeys.value.length} 个IP地址，此操作不可恢复！`,\r\n      okText: '确认删除',\r\n      okType: 'danger',\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchDeleting.value = true;\r\n        try {\r\n          const response = await ipAPI.batchDeleteIPs(selectedRowKeys.value);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量删除成功！删除: ${result.deleted_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n            \r\n            // 刷新列表\r\n            await loadIPList();\r\n          } else {\r\n            message.error(`批量删除失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('批量删除失败:', error);\r\n          message.error(`批量删除失败: ${error.message}`);\r\n        } finally {\r\n          batchDeleting.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('批量删除操作失败:', error);\r\n    message.error('批量删除操作失败');\r\n  }\r\n};\r\n\r\n// 批量切换监控状态\r\nconst handleBatchToggleMonitoring = async (enableMonitoring) => {\r\n  if (selectedRowKeys.value.length === 0) {\r\n    message.warning('请选择要操作的IP地址');\r\n    return;\r\n  }\r\n\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  try {\r\n    Modal.confirm({\r\n      title: `批量${actionText}`,\r\n      content: `您将对 ${selectedRowKeys.value.length} 个IP地址${actionText}，是否继续？`,\r\n      okText: `确认${actionText}`,\r\n      cancelText: '取消',\r\n      onOk: async () => {\r\n        batchMonitoringToggling.value = true;\r\n        try {\r\n          const response = await ipAPI.batchToggleMonitoring(selectedRowKeys.value, enableMonitoring);\r\n          \r\n          if (response.data && response.data.code === 200) {\r\n            const result = response.data.data;\r\n            message.success(`批量${actionText}成功！成功: ${result.success_count} 个，失败: ${result.failed_count} 个`, 1);\r\n            \r\n            // 更新本地数据\r\n            ipData.value.forEach(ip => {\r\n              if (selectedRowKeys.value.includes(ip.id)) {\r\n                ip.monitoring_enabled = enableMonitoring;\r\n              }\r\n            });\r\n            \r\n            // 清空选中状态\r\n            clearSelection();\r\n          } else {\r\n            message.error(`批量${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n          }\r\n        } catch (error) {\r\n          console.error(`批量${actionText}失败:`, error);\r\n          message.error(`批量${actionText}失败: ${error.message}`);\r\n        } finally {\r\n          batchMonitoringToggling.value = false;\r\n        }\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(`批量${actionText}操作失败:`, error);\r\n    message.error(`批量${actionText}操作失败`);\r\n  }\r\n};\r\n\r\n// 单个监控状态切换\r\nconst handleToggleMonitoring = async (record, enableMonitoring) => {\r\n  if (enableMonitoring) {\r\n    // 启用监控时显示模板选择抽屉\r\n    selectedIP.value = record;\r\n    await loadZabbixTemplates(record.id);\r\n    templateDrawerVisible.value = true;\r\n  } else {\r\n    // 直接禁用监控\r\n    await toggleMonitoringStatus(record, false);\r\n  }\r\n};\r\n\r\n// 切换监控状态的实际方法\r\nconst toggleMonitoringStatus = async (record, enableMonitoring) => {\r\n  const actionText = enableMonitoring ? '启用监控' : '禁用监控';\r\n  \r\n  // 设置单个记录的加载状态\r\n  record.monitoringToggling = true;\r\n  \r\n  try {\r\n    const response = await ipAPI.toggleMonitoring(record.id, enableMonitoring);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      // 更新本地数据\r\n      record.monitoring_enabled = enableMonitoring;\r\n      message.success(`${record.ip_address || record.ipAddress} ${actionText}成功`, 1);\r\n    } else {\r\n      message.error(`${actionText}失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`${actionText}失败:`, error);\r\n    message.error(`${actionText}失败: ${error.message}`);\r\n  } finally {\r\n    record.monitoringToggling = false;\r\n  }\r\n};\r\n\r\n// 加载Zabbix模板列表\r\nconst loadZabbixTemplates = async (ipId) => {\r\n  templateLoading.value = true;\r\n  try {\r\n    const response = await ipAPI.getZabbixTemplates(ipId, templateSearchKeyword.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      zabbixTemplates.value = response.data.data.templates || [];\r\n      \r\n      // 初始化展开状态，默认展开所有分类\r\n      nextTick(() => {\r\n        try {\r\n          const categories = Object.keys(groupedTemplates.value || {});\r\n          categories.forEach(category => {\r\n            const categoryStr = String(category);\r\n            expandedCategories.value[categoryStr] = true;\r\n          });\r\n        } catch (error) {\r\n          console.warn('初始化展开状态错误:', error);\r\n        }\r\n      });\r\n      \r\n      console.log('成功加载模板列表:', zabbixTemplates.value.length, '个模板');\r\n    } else {\r\n      // 检查是否是Zabbix连接问题\r\n      if (response.data && response.data.message && response.data.message.includes('Zabbix API连接不可用')) {\r\n        // 显示详细的诊断信息\r\n        const errorMessage = '⚠️ Zabbix服务器连接失败';\r\n        const suggestions = [\r\n          '请检查Zabbix服务器是否正常运行',\r\n          '验证网络连接和防火墙设置',\r\n          '检查Zabbix API配置是否正确'\r\n        ];\r\n        \r\n        Modal.error({\r\n          title: '无法加载监控模板',\r\n          content: h('div', [\r\n            h('p', { style: 'margin-bottom: 16px;' }, errorMessage),\r\n            h('div', { style: 'background: #f5f5f5; padding: 12px; border-radius: 6px;' }, [\r\n              h('p', { style: 'margin: 0 0 8px 0; font-weight: 600;' }, '解决建议：'),\r\n              h('ul', { style: 'margin: 0; padding-left: 20px;' }, \r\n                suggestions.map(suggestion => \r\n                  h('li', { style: 'margin-bottom: 4px;' }, suggestion)\r\n                )\r\n              )\r\n            ])\r\n          ]),\r\n          width: 500\r\n        });\r\n      } else {\r\n        message.error(`加载模板列表失败: ${response.data?.message || '未知错误'}`);\r\n      }\r\n      \r\n      zabbixTemplates.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载模板列表失败:', error);\r\n    \r\n    // 检查是否是网络连接问题\r\n    if (error.message && (error.message.includes('Network Error') || error.message.includes('timeout'))) {\r\n      Modal.error({\r\n        title: '网络连接失败',\r\n        content: '无法连接到后端服务器，请检查网络连接和服务器状态。'\r\n      });\r\n    } else {\r\n      message.error(`加载模板列表失败: ${error.message}`);\r\n    }\r\n    \r\n    zabbixTemplates.value = [];\r\n  } finally {\r\n    templateLoading.value = false;\r\n  }\r\n};\r\n\r\n// 搜索模板\r\nconst handleTemplateSearch = async () => {\r\n  if (selectedIP.value) {\r\n    await loadZabbixTemplates(selectedIP.value.id);\r\n  }\r\n};\r\n\r\n// 模板选择变化 - 确保类型安全\r\nconst handleTemplateSelect = (templateIds) => {\r\n  try {\r\n    // 确保 templateIds 是数组并且所有元素都是字符串\r\n    if (Array.isArray(templateIds)) {\r\n      selectedTemplateIds.value = templateIds.map(id => {\r\n        if (id === null || id === undefined) return '';\r\n        return String(id);\r\n      });\r\n    } else {\r\n      selectedTemplateIds.value = [];\r\n    }\r\n    console.log('已选择模板:', selectedTemplateIds.value);\r\n  } catch (error) {\r\n    console.error('处理模板选择时出错:', error);\r\n    selectedTemplateIds.value = [];\r\n  }\r\n};\r\n\r\n// 创建监控主机\r\nconst handleCreateMonitoring = async () => {\r\n  if (!selectedIP.value) {\r\n    message.error('请先选择IP地址');\r\n    return;\r\n  }\r\n  \r\n  if (selectedTemplateIds.value.length === 0) {\r\n    message.error('请选择至少一个监控模板');\r\n    return;\r\n  }\r\n  \r\n  monitoringCreating.value = true;\r\n  \r\n  try {\r\n    const monitoringData = {\r\n      template_ids: selectedTemplateIds.value,\r\n      host_name: selectedIP.value.hostname || selectedIP.value.ip_address || selectedIP.value.ipAddress,\r\n      group_ids: [] // 使用默认主机组\r\n    };\r\n    \r\n    const response = await ipAPI.createMonitoring(selectedIP.value.id, monitoringData);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const result = response.data.data;\r\n      \r\n      message.success({\r\n        content: `监控主机创建成功！\\n主机名: ${result.host_name}\\nIP: ${result.ip_address}\\n模板数量: ${result.template_count}`,\r\n        duration: 5\r\n      });\r\n      \r\n      // 更新本地IP记录的监控状态\r\n      selectedIP.value.monitoring_enabled = true;\r\n      \r\n      // 关闭抽屉\r\n      templateDrawerVisible.value = false;\r\n      \r\n      // 清空选中的模板\r\n      selectedTemplateIds.value = [];\r\n      \r\n    } else {\r\n      message.error(`创建监控主机失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('创建监控主机失败:', error);\r\n    message.error(`创建监控主机失败: ${error.message}`);\r\n  } finally {\r\n    monitoringCreating.value = false;\r\n  }\r\n};\r\n\r\n// 关闭模板抽屉\r\n// 安全获取模板的唯一key\r\nconst getTemplateKey = (template) => {\r\n  try {\r\n    if (!template) return Math.random().toString();\r\n    if (template.templateid) return String(template.templateid);\r\n    if (template.id) return String(template.id);\r\n    return Math.random().toString();\r\n  } catch (error) {\r\n    console.error('获取模板key失败:', error);\r\n    return Math.random().toString();\r\n  }\r\n};\r\n\r\n// 安全获取模板的value\r\nconst getTemplateValue = (template) => {\r\n  try {\r\n    if (!template) return '';\r\n    if (template.templateid) return String(template.templateid);\r\n    if (template.id) return String(template.id);\r\n    return '';\r\n  } catch (error) {\r\n    console.error('获取模板value失败:', error);\r\n    return '';\r\n  }\r\n};\r\n\r\nconst handleCloseTemplateDrawer = () => {\r\n  templateDrawerVisible.value = false;\r\n  selectedTemplateIds.value = [];\r\n  templateSearchKeyword.value = '';\r\n  selectedCategory.value = '';\r\n  expandedCategories.value = {};\r\n  selectedIP.value = null;\r\n};\r\n\r\n// 模板数据安全验证函数\r\nconst validateTemplateData = (template) => {\r\n  try {\r\n    if (!template || typeof template !== 'object') {\r\n      console.warn('模板不是有效对象:', template);\r\n      return null;\r\n    }\r\n    \r\n    // 安全地获取所有字段\r\n    const safeTemplate = {\r\n      templateid: safeString(template.templateid || template.id || `temp_${Date.now()}`),\r\n      name: safeString(template.name || '未知模板'),\r\n      description: safeString(template.description || ''),\r\n      category: safeString(template.category || '📝 其他'),\r\n      items_count: Number(template.items_count) || 0,\r\n      triggers_count: Number(template.triggers_count) || 0,\r\n      macros_count: Number(template.macros_count) || 0,\r\n      groups: Array.isArray(template.groups) ? template.groups.map(group => ({\r\n        groupid: safeString(group.groupid || group.id || ''),\r\n        name: safeString(group.name || '未知组')\r\n      })) : [],\r\n      icon: safeString(template.icon || 'setting')\r\n    };\r\n    \r\n    // 验证必需字段\r\n    if (!safeTemplate.templateid || !safeTemplate.name) {\r\n      console.warn('模板缺少必需字段:', safeTemplate);\r\n      return null;\r\n    }\r\n    \r\n    return safeTemplate;\r\n  } catch (error) {\r\n    console.error('验证模板时出错:', error, template);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 按分类组织模板 - 增强类型安全\r\nconst groupedTemplates = computed(() => {\r\n  const groups = {};\r\n  \r\n  try {\r\n    if (!Array.isArray(zabbixTemplates.value)) {\r\n      console.warn('zabbixTemplates不是数组:', zabbixTemplates.value);\r\n      return groups;\r\n    }\r\n    \r\n    zabbixTemplates.value.forEach((template) => {\r\n      const safeTemplate = validateTemplateData(template);\r\n      if (!safeTemplate) {\r\n        return; // 跳过无效模板\r\n      }\r\n      \r\n      const category = safeTemplate.category;\r\n      if (!groups[category]) {\r\n        groups[category] = [];\r\n      }\r\n      \r\n      groups[category].push(safeTemplate);\r\n    });\r\n    \r\n    // 对每个分类的模板按名称排序\r\n    Object.keys(groups).forEach(category => {\r\n      try {\r\n        groups[category].sort((a, b) => {\r\n          const nameA = safeString(a.name || '');\r\n          const nameB = safeString(b.name || '');\r\n          return nameA.localeCompare(nameB);\r\n        });\r\n      } catch (sortError) {\r\n        console.warn(`排序分类${category}时出错:`, sortError);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('groupedTemplates计算出错:', error);\r\n  }\r\n  \r\n  return groups;\r\n});\r\n\r\n// 分类图标映射 - 增强类型安全\r\nconst getCategoryIcon = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    const iconMap = {\r\n      '💻 操作系统': 'DesktopOutlined',\r\n      '🗄 数据库': 'DatabaseOutlined', \r\n      '🌐 Web服务器': 'GlobalOutlined',\r\n      '📦 容器平台': 'ContainerOutlined',\r\n      '🌐 网络设备': 'RouterOutlined',\r\n      '☁️ 虚拟化': 'CloudOutlined',\r\n      '📊 网络监控': 'WifiOutlined',\r\n      '☁️ 云服务': 'CloudServerOutlined',\r\n      '🚀 应用服务': 'CodeOutlined',\r\n      '📬 消息队列': 'MessageOutlined',\r\n      '⚡ 缓存系统': 'ThunderboltOutlined',\r\n      '💾 存储系统': 'HddOutlined',\r\n      '🔒 安全监控': 'SafetyOutlined',\r\n      '🌡️ IoT设备': 'NodeIndexOutlined',\r\n      '📝 其他': 'SettingOutlined'\r\n    };\r\n    \r\n    return iconMap[categoryStr] || 'SettingOutlined';\r\n  } catch (error) {\r\n    console.warn('getCategoryIcon处理错误:', error, category);\r\n    return 'SettingOutlined';\r\n  }\r\n};\r\n\r\n// 分类统计信息 - 增强类型安全\r\nconst categoryStats = computed(() => {\r\n  const stats = {};\r\n  \r\n  try {\r\n    if (!groupedTemplates.value || typeof groupedTemplates.value !== 'object') {\r\n      return stats;\r\n    }\r\n    \r\n    Object.entries(groupedTemplates.value).forEach(([category, templates]) => {\r\n      try {\r\n        const categoryKey = safeCategoryToString(category);\r\n        if (!Array.isArray(templates)) {\r\n          console.warn(`分类${categoryKey}的模板不是数组:`, templates);\r\n          stats[categoryKey] = { count: 0, selected: 0 };\r\n          return;\r\n        }\r\n        \r\n        const selectedIds = Array.isArray(selectedTemplateIds.value) ? selectedTemplateIds.value : [];\r\n        \r\n        stats[categoryKey] = {\r\n          count: Number(templates.length) || 0,\r\n          selected: templates.filter(t => {\r\n            try {\r\n              const templateId = safeString(t.templateid || t.id || '');\r\n              return selectedIds.includes(templateId);\r\n            } catch (filterError) {\r\n              console.warn('过滤模板时出错:', filterError, t);\r\n              return false;\r\n            }\r\n          }).length\r\n        };\r\n      } catch (categoryError) {\r\n        console.warn(`处理分类${category}统计时出错:`, categoryError);\r\n        stats[safeCategoryToString(category)] = { count: 0, selected: 0 };\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('categoryStats计算出错:', error);\r\n  }\r\n  \r\n  return stats;\r\n});\r\n\r\n// 筛选后的模板 - 增强类型安全\r\nconst filteredTemplates = computed(() => {\r\n  try {\r\n    let result = groupedTemplates.value || {};\r\n    \r\n    // 分类筛选\r\n    if (selectedCategory.value) {\r\n      const categoryStr = safeString(selectedCategory.value);\r\n      result = {\r\n        [categoryStr]: result[categoryStr] || []\r\n      };\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('filteredTemplates计算出错:', error);\r\n    return {};\r\n  }\r\n});\r\n\r\n// 安全的分类显示名称函数\r\nconst safeCategoryDisplayName = (category) => {\r\n  try {\r\n    return safeCategoryToString(category);\r\n  } catch (error) {\r\n    console.error('safeCategoryDisplayName处理错误:', error, category);\r\n    return '📝 其他';\r\n  }\r\n};\r\n\r\n// 切换分类筛选 - 确保类型安全\r\nconst toggleCategoryFilter = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    if (selectedCategory.value === categoryStr) {\r\n      selectedCategory.value = '';\r\n    } else {\r\n      selectedCategory.value = categoryStr;\r\n    }\r\n  } catch (error) {\r\n    console.warn('toggleCategoryFilter处理错误:', error, category);\r\n    selectedCategory.value = '';\r\n  }\r\n};\r\n\r\n// 清除分类筛选\r\nconst clearCategoryFilter = () => {\r\n  selectedCategory.value = '';\r\n};\r\n\r\n// 切换分类展开状态 - 使用安全的类型转换\r\nconst toggleCategoryExpand = (category) => {\r\n  try {\r\n    const categoryStr = safeCategoryToString(category);\r\n    expandedCategories.value[categoryStr] = !expandedCategories.value[categoryStr];\r\n  } catch (error) {\r\n    console.warn('toggleCategoryExpand处理错误:', error, category);\r\n  }\r\n};\r\n\r\n// 安全检查分类是否展开 - 避免对象类型转换错误\r\nconst isCategoryExpanded = (category) => {\r\n  // 检查是对象还是字符串\r\n  if (typeof category === 'object') {\r\n    try {\r\n      return isCategoryExpanded(JSON.stringify(category));\r\n    } catch (jsonError) {\r\n      console.warn('对象转字符串失败:', jsonError);\r\n      return true; // 默认展开\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (category === null || category === undefined) {\r\n      return true;\r\n    }\r\n    const categoryStr = safeCategoryToString(category);\r\n    // 默认展开所有分类，除非明确设置为false\r\n    return expandedCategories.value[categoryStr] !== false;\r\n  } catch (error) {\r\n    console.warn('isCategoryExpanded处理错误:', error, category);\r\n    return true; // 默认展开\r\n  }\r\n};\r\n\r\n// 安全的分类转字符串函数 - 根据规范处理各种类型\r\nconst safeCategoryToString = (category) => {\r\n  try {\r\n    if (category === null || category === undefined) {\r\n      return '📝 其他';\r\n    }\r\n    \r\n    if (typeof category === 'string') {\r\n      return category.trim() || '📝 其他';\r\n    }\r\n    \r\n    if (typeof category === 'object') {\r\n      // 如果是对象，尝试提取有效属性\r\n      if (category.name && typeof category.name === 'string') {\r\n        return category.name.trim();\r\n      }\r\n      if (category.title && typeof category.title === 'string') {\r\n        return category.title.trim();\r\n      }\r\n      if (category.label && typeof category.label === 'string') {\r\n        return category.label.trim();\r\n      }\r\n      \r\n      // 尝试使用JSON.stringify安全地转换对象\r\n      try {\r\n        const jsonStr = JSON.stringify(category);\r\n        if (jsonStr && jsonStr !== '[object Object]') {\r\n          return jsonStr;\r\n        }\r\n      } catch (jsonError) {\r\n        // JSON转换失败时继续处理\r\n        console.warn('JSON转换失败:', jsonError);\r\n      }\r\n      \r\n      // 对象转换失败时的安全处理\r\n      console.warn('分类是对象但缺少有效字段:', category);\r\n      return '📝 其他';\r\n    }\r\n    \r\n    // 其他类型的安全转换\r\n    const stringResult = String(category);\r\n    // 检查是否是有效的字符串表示\r\n    if (stringResult && stringResult !== '[object Object]') {\r\n      return stringResult.trim() || '📝 其他';\r\n    } else {\r\n      return '📝 其他';\r\n    }\r\n  } catch (error) {\r\n    console.error('safeCategoryToString处理错误:', error, category);\r\n    return '📝 其他';\r\n  }\r\n};\r\n\r\n// 安全的字符串转换函数 - 增强版，防止\"Cannot convert object to primitive value\"错误\r\nconst safeString = (value) => {\r\n  try {\r\n    // 处理null/undefined\r\n    if (value == null) {\r\n      return '';\r\n    }\r\n    \r\n    // 处理基本类型\r\n    switch (typeof value) {\r\n      case 'string':\r\n        return value;\r\n      case 'number':\r\n      case 'boolean':\r\n      case 'bigint':\r\n        return String(value);\r\n      case 'symbol':\r\n        return value.toString();\r\n    }\r\n    \r\n    // 处理对象类型\r\n    if (typeof value === 'object') {\r\n      // 优先检查常见对象类型\r\n      if (value instanceof Date) {\r\n        return value.toISOString();\r\n      }\r\n      \r\n      if (value instanceof Error) {\r\n        return value.message || value.name || 'Error';\r\n      }\r\n      \r\n      // 尝试获取对象的常见字符串属性\r\n      const stringProps = ['name', 'title', 'label', 'text', 'message', 'value'];\r\n      for (const prop of stringProps) {\r\n        if (typeof value[prop] === 'string') {\r\n          return value[prop];\r\n        }\r\n      }\r\n      \r\n      // 安全地使用JSON.stringify\r\n      try {\r\n        const jsonStr = JSON.stringify(value, (key, val) => {\r\n          if (typeof val === 'object' && val !== null) {\r\n            return Object.prototype.toString.call(val);\r\n          }\r\n          return val;\r\n        });\r\n        if (jsonStr && jsonStr !== '{}' && jsonStr !== '[]') {\r\n          return jsonStr;\r\n        }\r\n      } catch (jsonError) {\r\n        console.warn('JSON.stringify failed:', jsonError);\r\n      }\r\n      \r\n      // 最后尝试调用toString()\r\n      try {\r\n        const toStringResult = Object.prototype.toString.call(value);\r\n        if (toStringResult !== '[object Object]') {\r\n          return toStringResult;\r\n        }\r\n      } catch (toStringError) {\r\n        console.warn('toString call failed:', toStringError);\r\n      }\r\n      \r\n      return '[object]';\r\n    }\r\n    \r\n    // 其他未知类型\r\n    return String(value);\r\n  } catch (error) {\r\n    console.error('safeString处理错误:', error, value);\r\n    return '';\r\n  }\r\n};\r\n\r\n// 获取模板图标 - 根据内存规范增强类型安全和错误处理\r\nconst getTemplateIcon = (template) => {\r\n  try {\r\n    // 基础验证\r\n    if (!template || typeof template !== 'object') {\r\n      console.warn('getTemplateIcon: 模板对象无效', template);\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    if (!template.icon) {\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    // 安全处理图标名称 - 确保必须是字符串类型\r\n    let iconName;\r\n    try {\r\n      if (typeof template.icon === 'string') {\r\n        iconName = template.icon.trim();\r\n      } else if (typeof template.icon === 'object' && template.icon !== null) {\r\n        // 如果是对象，尝试获取有效的字符串属性\r\n        if (template.icon.name && typeof template.icon.name === 'string') {\r\n          iconName = template.icon.name.trim();\r\n        } else if (template.icon.type && typeof template.icon.type === 'string') {\r\n          iconName = template.icon.type.trim();\r\n        } else {\r\n          // 对象转换为字符串时的安全处理\r\n          try {\r\n            const objStr = JSON.stringify(template.icon);\r\n            console.warn('getTemplateIcon: 图标是对象，尝试JSON转换', template.icon, objStr);\r\n            iconName = 'setting'; // 使用默认值\r\n          } catch (jsonError) {\r\n            console.error('getTemplateIcon: JSON转换失败', jsonError);\r\n            iconName = 'setting';\r\n          }\r\n        }\r\n      } else if (template.icon === null || template.icon === undefined) {\r\n        iconName = 'setting';\r\n      } else {\r\n        // 其他类型的安全转换\r\n        iconName = String(template.icon).trim();\r\n      }\r\n    } catch (typeError) {\r\n      console.error('getTemplateIcon: 类型处理错误', typeError, template.icon);\r\n      iconName = 'setting';\r\n    }\r\n    \r\n    // 验证图标名称\r\n    if (!iconName || iconName === '[object Object]' || iconName.length === 0) {\r\n      console.warn('getTemplateIcon: 无效的图标名称', iconName, template);\r\n      return 'SettingOutlined';\r\n    }\r\n    \r\n    // 如果已经包含Outlined后缀，直接返回\r\n    if (iconName.endsWith('Outlined')) {\r\n      return iconName;\r\n    }\r\n    \r\n    // 特殊图标名称映射\r\n    const iconMap = {\r\n      'global': 'GlobalOutlined',\r\n      'database': 'DatabaseOutlined',\r\n      'server': 'ServerOutlined',\r\n      'network': 'RouterOutlined',\r\n      'cloud': 'CloudOutlined',\r\n      'container': 'ContainerOutlined',\r\n      'security': 'SafetyOutlined',\r\n      'storage': 'HddOutlined',\r\n      'monitor': 'DashboardOutlined',\r\n      'setting': 'SettingOutlined'\r\n    };\r\n    \r\n    // 检查是否有直接映射\r\n    const lowerIconName = iconName.toLowerCase();\r\n    if (iconMap[lowerIconName]) {\r\n      return iconMap[lowerIconName];\r\n    }\r\n    \r\n    // 处理首字母大写并添加Outlined后缀\r\n    try {\r\n      const capitalizedIcon = iconName.charAt(0).toUpperCase() + iconName.slice(1);\r\n      const finalIconName = `${capitalizedIcon}Outlined`;\r\n      \r\n      // 验证图标是否存在于Ant Design图标库中\r\n      const availableIcons = [\r\n        'GlobalOutlined', 'DatabaseOutlined', 'DesktopOutlined', 'RouterOutlined',\r\n        'CloudOutlined', 'ContainerOutlined', 'SafetyOutlined', 'HddOutlined',\r\n        'CodeOutlined', 'MessageOutlined', 'ThunderboltOutlined', 'NodeIndexOutlined',\r\n        'SettingOutlined', 'DashboardOutlined', 'ServerOutlined', 'WifiOutlined'\r\n      ];\r\n      \r\n      if (availableIcons.includes(finalIconName)) {\r\n        return finalIconName;\r\n      }\r\n    } catch (processError) {\r\n      console.error('getTemplateIcon: 图标名称处理错误', processError, iconName);\r\n    }\r\n    \r\n    // 如果图标不存在，返回默认图标\r\n    return 'SettingOutlined';\r\n  } catch (error) {\r\n    console.error('getTemplateIcon处理严重错误:', error, template);\r\n    return 'SettingOutlined';\r\n  }\r\n};\r\n\r\nconst handleSearch = async () => {\r\n  pagination.current = 1;\r\n  await loadIPList();\r\n};\r\n\r\nconst handleReset = async () => {\r\n  searchKeyword.value = '';\r\n  ipStatus.value = '';\r\n  ipType.value = '';\r\n  pagination.current = 1;\r\n  await loadIPList();\r\n};\r\n\r\nconst handleSearchInput = (value) => {\r\n  searchKeyword.value = value;\r\n};\r\n\r\nconst handleStatusChange = (value) => {\r\n  ipStatus.value = value;\r\n};\r\n\r\nconst handleTableChange = async (paginationInfo, filters, sorter) => {\r\n  console.log('handleTableChange 被调用:', {\r\n    paginationInfo, \r\n    当前分页状态: {\r\n      current: pagination.current,\r\n      pageSize: pagination.pageSize\r\n    }\r\n  });\r\n  \r\n  pagination.current = paginationInfo.current;\r\n  pagination.pageSize = paginationInfo.pageSize;\r\n  \r\n  console.log('更新后的分页状态:', {\r\n    current: pagination.current,\r\n    pageSize: pagination.pageSize\r\n  });\r\n  \r\n  // 更新 URL 参数\r\n  const currentUrl = new URL(window.location);\r\n  currentUrl.searchParams.set('page', pagination.current.toString());\r\n  currentUrl.searchParams.set('page_size', pagination.pageSize.toString());\r\n  window.history.replaceState({}, '', currentUrl.toString());\r\n  console.log('已更新 URL:', currentUrl.toString());\r\n  \r\n  await loadIPList();\r\n};\r\n\r\nconst handleAdd = () => {\r\n  router.push({ name: 'ipAdd' });\r\n};\r\n\r\nconst handleView = (record) => {\r\n  selectedIP.value = record;\r\n  detailModalVisible.value = true;\r\n};\r\n\r\nconst handleEdit = (record) => {\r\n  // 检查IP是否受保护\r\n  if (record.is_protected || record.is_auto_discovered) {\r\n    message.warning({\r\n      content: `不能编辑此IP地址：${record.ip_address || record.ipAddress}\\n原因：${record.protection_reason || '自动发现的IP地址不允许编辑'}\\n可编辑字段：${Array.isArray(record.editable_fields) ? record.editable_fields.join(', ') : '备注、状态'}`,\r\n      duration: 5\r\n    });\r\n    return;\r\n  }\r\n  \r\n  editingIP.value = record;\r\n  Object.assign(formData, record);\r\n  editModalVisible.value = true;\r\n};\r\n\r\nconst handleDelete = async (record) => {\r\n  try {\r\n    // 显示加载状态\r\n    const loadingMessage = message.loading('正在检查删除影响...', 0);\r\n    \r\n    try {\r\n      // 检查删除影响\r\n      const impactResponse = await ipAPI.checkDeletionImpact(record.id);\r\n      loadingMessage();\r\n      \r\n      if (impactResponse.data && impactResponse.data.code === 200) {\r\n        const impactData = impactResponse.data.data;\r\n        \r\n        // 构建详细的确认对话框内容\r\n        const confirmContent = await new Promise((resolve) => {\r\n          const { createVNode } = Vue;\r\n          const { ExclamationCircleOutlined, WarningOutlined } = antdvIcons;\r\n          \r\n          const warningItems = impactData.deletion_warnings.map(warning => \r\n            createVNode('li', { style: 'margin: 4px 0; color: #ff4d4f;' }, warning)\r\n          );\r\n          \r\n          // 如果是自动发现的IP，添加特殊警告\r\n          if (impactData.is_auto_discovered) {\r\n            warningItems.unshift(\r\n              createVNode('li', { \r\n                style: 'margin: 4px 0; color: #ff4d4f; font-weight: bold; background: #fff2f0; padding: 8px; border-radius: 4px; border-left: 4px solid #ff4d4f;' \r\n              }, '⚠️ 警告：此IP为Zabbix自动发现，删除后可能影响监控系统！')\r\n            );\r\n          }\r\n          \r\n          const content = createVNode('div', {}, [\r\n            createVNode('p', { style: 'font-weight: bold; margin-bottom: 12px; color: #ff4d4f;' }, \r\n              impactData.is_auto_discovered ? \r\n              `⚠️ 删除自动发现的IP地址: ${impactData.ip_address}` : \r\n              `确认删除 IP地址: ${impactData.ip_address}`\r\n            ),\r\n            \r\n            // 基本信息\r\n            createVNode('div', { style: 'margin-bottom: 12px; padding: 8px; background: #f5f5f5; border-radius: 4px;' }, [\r\n              createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `主机名: ${impactData.hostname || '未设置'}`),\r\n              createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `来源: ${impactData.is_auto_discovered ? 'Zabbix自动发现' : '手动创建'}`),\r\n              impactData.zabbix_drule_id ? createVNode('p', { style: 'margin: 0; font-size: 12px; color: #666;' }, `Zabbix规则ID: ${impactData.zabbix_drule_id}`) : null\r\n            ]),\r\n            \r\n            // 影响统计\r\n            createVNode('div', { style: 'margin-bottom: 12px;' }, [\r\n              createVNode('p', { style: 'margin: 0; font-weight: bold; color: #fa8c16;' }, '删除影响范围:'),\r\n              impactData.scan_results_count > 0 ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, `· 扫描结果: ${impactData.scan_results_count} 条记录`) : null,\r\n              impactData.related_tasks.length > 0 ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, `· 相关任务: ${impactData.related_tasks.length} 个`) : null,\r\n              impactData.will_cleanup_zabbix ? \r\n                createVNode('p', { style: 'margin: 4px 0; color: #ff4d4f;' }, '· Zabbix监控数据: 将尝试清理') : null\r\n            ]),\r\n            \r\n            // 警告列表\r\n            createVNode('div', {}, [\r\n              createVNode('p', { style: 'margin: 8px 0 4px 0; font-weight: bold; color: #ff4d4f;' }, [\r\n                createVNode(WarningOutlined, { style: 'margin-right: 4px;' }),\r\n                '警告信息:'\r\n              ]),\r\n              createVNode('ul', { style: 'margin: 0; padding-left: 16px; max-height: 200px; overflow-y: auto;' }, warningItems)\r\n            ]),\r\n            \r\n            createVNode('p', { style: 'margin-top: 12px; font-weight: bold; color: #ff4d4f; text-align: center;' }, '此操作不可恢复！')\r\n          ]);\r\n          \r\n          resolve(content);\r\n        });\r\n        \r\n        // 显示确认对话框\r\n        await new Promise((resolve, reject) => {\r\n          const modal = Modal.confirm({\r\n            title: impactData.is_auto_discovered ? '删除自动发现的IP地址及相关数据' : '删除IP地址及相关数据',\r\n            content: confirmContent,\r\n            width: 600,\r\n            okText: '确认删除',\r\n            okType: 'danger',\r\n            cancelText: '取消',\r\n            icon: createVNode(ExclamationCircleOutlined, { style: 'color: #ff4d4f;' }),\r\n            onOk: () => resolve(true),\r\n            onCancel: () => reject(new Error('User cancelled'))\r\n          });\r\n        });\r\n        \r\n      } else {\r\n        loadingMessage();\r\n        throw new Error('获取删除影响信息失败');\r\n      }\r\n      \r\n    } catch (impactError) {\r\n      loadingMessage();\r\n      console.warn('检查删除影响失败，使用默认确认对话框:', impactError);\r\n      \r\n      // 如果检查影响失败，使用简单的确认对话框\r\n      await new Promise((resolve, reject) => {\r\n        const modal = Modal.confirm({\r\n          title: '确认删除IP',\r\n          content: `确定要删除IP地址 \"${record.ipAddress || record.ip_address}\" 吗？\\n\\n警告：此操作将删除IP记录及所有相关数据（包括扫描结果、Zabbix监控数据等），该操作不可恢复！`,\r\n          okText: '确认删除',\r\n          okType: 'danger',\r\n          cancelText: '取消',\r\n          onOk: () => resolve(true),\r\n          onCancel: () => reject(new Error('User cancelled'))\r\n        });\r\n      });\r\n    }\r\n    \r\n    // 执行删除操作\r\n    const deleteMessage = message.loading('正在删除IP及相关数据...', 0);\r\n    \r\n    try {\r\n      const response = await ipAPI.deleteIP(record.id);\r\n      deleteMessage();\r\n      \r\n      if (response.data && response.data.code === 200) {\r\n        const cleanupData = response.data.data;\r\n        \r\n        // 构建成功消息\r\n        let successMessage = `IP地址 \"${cleanupData.ip_address}\" 已成功删除`;\r\n        \r\n        const cleanupDetails = [];\r\n        if (cleanupData.scan_results_deleted > 0) {\r\n          cleanupDetails.push(`扫描结果: ${cleanupData.scan_results_deleted}条`);\r\n        }\r\n        if (cleanupData.zabbix_cleanup && cleanupData.zabbix_cleanup.success) {\r\n          if (cleanupData.zabbix_cleanup.hosts && cleanupData.zabbix_cleanup.hosts.length > 0) {\r\n            const deletedCount = cleanupData.zabbix_cleanup.hosts.filter(h => h.deleted).length;\r\n            cleanupDetails.push(`Zabbix主机: ${deletedCount}个`);\r\n          }\r\n        }\r\n        \r\n        if (cleanupDetails.length > 0) {\r\n          successMessage += `\\n同时清理了：${cleanupDetails.join('、')}`;\r\n        }\r\n        \r\n        message.success({\r\n          content: successMessage,\r\n          duration: 6\r\n        });\r\n        \r\n        // 直接从列表中移除已删除的IP，而不是刷新整个列表\r\n        ipData.value = ipData.value.filter(ip => ip.id !== record.id);\r\n        pagination.total = ipData.value.length;\r\n      } else {\r\n        message.error('删除IP地址失败');\r\n      }\r\n    } catch (deleteError) {\r\n      deleteMessage();\r\n      throw deleteError;\r\n    }\r\n    \r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除IP地址失败:', error);\r\n      message.error(`删除IP地址失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst handlePing = async (record) => {\r\n  record.pinging = true;\r\n  try {\r\n    // 调用后端ping API\r\n    const response = await ipAPI.pingIP(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const pingData = response.data.data;\r\n      // 更新记录的ping状态\r\n      record.ping_status = pingData.status;\r\n      record.pingStatus = pingData.status; // 兼容字段\r\n      record.last_seen = pingData.last_seen;\r\n      record.lastSeen = pingData.last_seen; // 兼容字段\r\n      \r\n      const statusText = pingData.is_online ? '在线' : '离线';\r\n      const responseTimeText = pingData.response_time ? ` (${pingData.response_time}ms)` : '';\r\n      \r\n      message.success(`Ping ${record.ip_address || record.ipAddress} 完成: ${statusText}${responseTimeText}`, 1);\r\n    } else {\r\n      message.error(`Ping失败: ${response.data?.message || '未知错误'}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Ping测试失败:', error);\r\n    let errorMessage = 'Ping失败';\r\n    if (error.response && error.response.data) {\r\n      errorMessage += `: ${error.response.data.message || error.response.data.error || '网络错误'}`;\r\n    } else if (error.message) {\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    message.error(errorMessage);\r\n  } finally {\r\n    record.pinging = false;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nconst handleExport = () => {\r\n  message.info('导出功能开发中...');\r\n};\r\n\r\nconst handleListManagement = () => {\r\n  message.info('列表管理功能开发中...');\r\n};\r\n\r\nconst handleScan = () => {\r\n  // 重置扫描表单并设置当前页面可能的IP范围\r\n  resetScanForm();\r\n  \r\n  // 如果有搜索关键词，尝试智能设置IP范围\r\n  if (searchKeyword.value) {\r\n    const keyword = searchKeyword.value.trim();\r\n    // 如果搜索关键词是IP格式，自动设置为扫描范围\r\n    const ipPattern = /^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$/;\r\n    if (ipPattern.test(keyword)) {\r\n      // 提取网段\r\n      const ipParts = keyword.split('.');\r\n      const networkBase = `${ipParts[0]}.${ipParts[1]}.${ipParts[2]}.0/24`;\r\n      scanFormData.ipRanges = networkBase;\r\n    }\r\n  }\r\n  \r\n  scanModalVisible.value = true;\r\n};\r\n\r\nconst handleScanConfirm = async () => {\r\n  try {\r\n    await scanFormRef.value.validate();\r\n    \r\n    // 处理IP范围数据\r\n    const ipRanges = scanFormData.ipRanges.split('\\n')\r\n      .map(range => range.trim())\r\n      .filter(range => range.length > 0);\r\n    \r\n    // 构建Python扫描配置数据，发送给后端\r\n    const scanConfig = {\r\n      ipRanges: ipRanges,\r\n      checkType: scanFormData.checkType,\r\n      ports: scanFormData.ports,\r\n      key: scanFormData.key,\r\n      // Python扫描器参数\r\n      maxConcurrent: scanFormData.maxConcurrent || 100,\r\n      timeout: scanFormData.timeout || 3.0,\r\n      pingTimeout: scanFormData.pingTimeout || 1.0,\r\n      // 保留一些参数用于服务检测\r\n      snmpCommunity: scanFormData.snmpCommunity,\r\n      snmpv3Config: scanFormData.snmpv3Config\r\n    };\r\n    \r\n    console.log('发送Python扫描配置:', scanConfig);\r\n    \r\n    try {\r\n      // 调用后端Python扫描API\r\n      const response = await ipAPI.createScanTask(scanConfig);\r\n      \r\n      if (response.data && response.data.code === 200) {\r\n        const taskData = response.data.data;\r\n        \r\n        // 显示成功消息\r\n        const scanEngineText = taskData.scanEngine === 'python' ? 'Python原生扫描' : '扫描';\r\n        \r\n        message.success({\r\n          content: `${scanEngineText}任务创建成功！\\n扫描范围: ${ipRanges.join(', ')}\\n检查类型: ${getCheckTypeName(scanFormData.checkType)}\\n任务ID: ${taskData.taskId}\\n并发数: ${scanConfig.maxConcurrent}\\n超时配置: 连接${scanConfig.timeout}s, Ping${scanConfig.pingTimeout}s\\n已启动后台异步处理，系统将自动扫描网络并保存结果到数据库...`,\r\n          duration: 8\r\n        });\r\n        \r\n        // 刷新IP列表\r\n        await loadIPList();\r\n        \r\n        // 自动打开任务查询面板查看进度\r\n        setTimeout(() => {\r\n          handleScanTaskQuery();\r\n        }, 1000);\r\n        \r\n      } else {\r\n        throw new Error(response.data?.message || 'Python扫描任务创建失败');\r\n      }\r\n    } catch (apiError) {\r\n      console.error('后端Python扫描API调用失败:', apiError);\r\n      message.error(`Python扫描任务创建失败: ${apiError.response?.data?.message || apiError.message}`);\r\n      return;\r\n    }\r\n    \r\n    scanModalVisible.value = false;\r\n    resetScanForm();\r\n  } catch (error) {\r\n    console.error('扫描配置验证失败:', error);\r\n    message.error('请检查扫描配置是否正确');\r\n  }\r\n};\r\n\r\n// 获取检查类型名称\r\nconst getCheckTypeName = (type) => {\r\n  const typeNames = {\r\n    0: 'SSH', 1: 'LDAP', 2: 'SMTP', 3: 'FTP', 4: 'HTTP',\r\n    5: 'POP', 6: 'NNTP', 7: 'IMAP', 8: 'TCP', 9: 'Zabbix agent',\r\n    10: 'SNMPv1', 11: 'SNMPv2', 12: 'ICMP ping', 13: 'SNMPv3',\r\n    14: 'HTTPS', 15: 'Telnet'\r\n  };\r\n  return typeNames[type] || '未知类型';\r\n};\r\n\r\nconst handleScanCancel = () => {\r\n  scanModalVisible.value = false;\r\n  resetScanForm();\r\n};\r\n\r\nconst handleTypeChange = (value) => {\r\n  // 根据类型设置默认端口\r\n  const defaultPorts = {\r\n    0: '22',      // SSH\r\n    1: '389',     // LDAP\r\n    2: '25',      // SMTP\r\n    3: '21',      // FTP\r\n    4: '80',      // HTTP\r\n    5: '110',     // POP\r\n    6: '119',     // NNTP\r\n    7: '143',     // IMAP\r\n    8: '0',       // TCP\r\n    9: '10050',   // Zabbix agent\r\n    10: '161',    // SNMPv1\r\n    11: '161',    // SNMPv2\r\n    12: '0',      // ICMP (不需要端口)\r\n    13: '161',    // SNMPv3\r\n    14: '443',    // HTTPS\r\n    15: '23'      // Telnet\r\n  };\r\n  \r\n  scanFormData.ports = defaultPorts[value] || '0';\r\n  \r\n  // 清空相关字段\r\n  scanFormData.key = '';\r\n  if (value !== 10 && value !== 11) {\r\n    scanFormData.snmpCommunity = 'public';\r\n  }\r\n  if (value !== 13) {\r\n    // 清空SNMPv3配置\r\n    scanFormData.snmpv3Config.securityLevel = '0';\r\n    scanFormData.snmpv3Config.securityName = '';\r\n    scanFormData.snmpv3Config.contextName = '';\r\n    scanFormData.snmpv3Config.authProtocol = 0;\r\n    scanFormData.snmpv3Config.authPassphrase = '';\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  }\r\n};\r\n\r\nconst handleSecurityLevelChange = (value) => {\r\n  // 清空认证和隐私配置\r\n  if (value === '0') {\r\n    scanFormData.snmpv3Config.authProtocol = 0;\r\n    scanFormData.snmpv3Config.authPassphrase = '';\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  } else if (value === '1') {\r\n    scanFormData.snmpv3Config.privProtocol = 0;\r\n    scanFormData.snmpv3Config.privPassphrase = '';\r\n  }\r\n};\r\n\r\nconst resetScanForm = () => {\r\n  Object.assign(scanFormData, {\r\n    ipRanges: '192.168.1.0/24',\r\n    checkType: 12,\r\n    ports: '0',\r\n    key: '',\r\n    // Python扫描器参数\r\n    maxConcurrent: 100,\r\n    timeout: 3.0,\r\n    pingTimeout: 1.0,\r\n    // 保留参数\r\n    snmpCommunity: 'public',\r\n    snmpv3Config: {\r\n      securityLevel: '0',\r\n      securityName: '',\r\n      contextName: '',\r\n      authProtocol: 0,\r\n      authPassphrase: '',\r\n      privProtocol: 0,\r\n      privPassphrase: ''\r\n    },\r\n    uniqueCheck: 0,\r\n    hostSource: 1,\r\n    nameSource: 0\r\n  });\r\n  scanFormRef.value?.resetFields();\r\n};\r\n\r\n// 扫描任务查询相关函数\r\nconst handleScanTaskQuery = () => {\r\n  scanTaskModalVisible.value = true;\r\n  loadScanTasks();\r\n  \r\n  // 启动异步状态监控\r\n  startAsyncStatusMonitoring();\r\n};\r\n\r\n// 异步状态监控\r\nlet statusCheckInterval = null;\r\n\r\n// 组件初始化状态标记\r\nlet isComponentInitialized = false;\r\nlet isMonitoringActive = false;\r\n\r\nconst startAsyncStatusMonitoring = () => {\r\n  // 防止重复启动\r\n  if (isMonitoringActive) {\r\n    console.log('异步监控已在运行，跳过重复启动');\r\n    return;\r\n  }\r\n  \r\n  // 清理旧的间隔器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  console.log('启动异步状态监控...');\r\n  isMonitoringActive = true;\r\n  \r\n  // 每5秒检查一次任务状态（减少频率）\r\n  statusCheckInterval = setInterval(async () => {\r\n    if (scanTaskModalVisible.value && isMonitoringActive) {\r\n      await checkRunningTasksStatus();\r\n    } else {\r\n      // 弹窗关闭时停止监控\r\n      stopAsyncStatusMonitoring();\r\n    }\r\n  }, 5000); // 从3秒改为5秒\r\n};\r\n\r\nconst stopAsyncStatusMonitoring = () => {\r\n  console.log('停止异步状态监控...');\r\n  \r\n  // 标记监控已停止\r\n  isMonitoringActive = false;\r\n  \r\n  // 清理主定时器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  // 清理可能存在的其他定时器引用\r\n  [statusCheckInterval].forEach(timer => {\r\n    if (timer) {\r\n      clearInterval(timer);\r\n    }\r\n  });\r\n  \r\n  // 等待一个微任务周期，确保正在运行的检查完成\r\n  setTimeout(() => {\r\n    console.log('异步状态监控已停止');\r\n  }, 100);\r\n};\r\n\r\nconst checkRunningTasksStatus = async () => {\r\n  try {\r\n    // 找到所有运行中的任务\r\n    const runningTasks = scanTasks.value.filter(task => \r\n      task.status === 'running' || task.status === 'pending'\r\n    );\r\n    \r\n    // 如果没有运行中的任务，停止监控\r\n    if (runningTasks.length === 0) {\r\n      stopAsyncStatusMonitoring();\r\n      return;\r\n    }\r\n    \r\n    for (const task of runningTasks) {\r\n      try {\r\n        const response = await ipAPI.getAsyncTaskStatus(task.id);\r\n        if (response.data && response.data.code === 200) {\r\n          const statusData = response.data.data;\r\n          \r\n          // 只有当状态发生变化时才更新\r\n          const taskIndex = scanTasks.value.findIndex(t => t.id === task.id);\r\n          if (taskIndex !== -1) {\r\n            const currentTask = scanTasks.value[taskIndex];\r\n            const hasStatusChanged = currentTask.status !== statusData.status;\r\n            const hasProgressChanged = currentTask.progress !== statusData.progress;\r\n            \r\n            if (hasStatusChanged || hasProgressChanged) {\r\n              // 使用 Vue 的响应式更新，减少 DOM 操作\r\n              Object.assign(scanTasks.value[taskIndex], {\r\n                status: statusData.status,\r\n                progress: statusData.progress,\r\n                result_data: statusData.result_data,\r\n                error_message: statusData.error_message\r\n              });\r\n              \r\n              // 如果任务完成，显示通知\r\n              if (statusData.status === 'completed' && hasStatusChanged) {\r\n                const resultData = statusData.result_data || {};\r\n                message.success({\r\n                  content: `任务 ${task.id} 已完成！\\n发现主机: ${resultData.discovered_hosts || 0} 个\\n新增IP: ${resultData.saved_count || 0} 个\\n更新IP: ${resultData.updated_count || 0} 个`,\r\n                  duration: 5\r\n                });\r\n                \r\n                // 延迟刷新IP列表，避免并发更新\r\n                setTimeout(() => {\r\n                  loadIPList();\r\n                }, 1000);\r\n              }\r\n              \r\n              // 如果任务失败，显示错误\r\n              if (statusData.status === 'failed' && hasStatusChanged) {\r\n                message.error({\r\n                  content: `任务 ${task.id} 失败：${statusData.error_message || '未知错误'}`,\r\n                  duration: 5\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // 静默处理单个任务检查失败\r\n        console.debug(`检查任务 ${task.id} 状态失败:`, error.message);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.debug('检查运行任务状态失败:', error.message);\r\n  }\r\n};\r\n\r\n\r\nconst loadScanTasks = async () => {\r\n  taskLoading.value = true;\r\n  try {\r\n    const params = {\r\n      page: taskPagination.current,\r\n      page_size: taskPagination.pageSize\r\n    };\r\n    \r\n    // 添加查询条件\r\n    if (taskStatusFilter.value && taskStatusFilter.value !== '') {\r\n      params.status = taskStatusFilter.value;\r\n    }\r\n    if (taskNameFilter.value && taskNameFilter.value !== '') {\r\n      params.search = taskNameFilter.value;\r\n    }\r\n    if (taskDateRange.value && Array.isArray(taskDateRange.value) && taskDateRange.value.length === 2) {\r\n      params.created_after = taskDateRange.value[0].toISOString();\r\n      params.created_before = taskDateRange.value[1].toISOString();\r\n    }\r\n    \r\n    console.log('调用扫描任务API，参数:', params);\r\n    \r\n    // 调用后端API获取扫描任务列表\r\n    const response = await ipAPI.getScanTasks(params);\r\n    \r\n    console.log('API响应:', response);\r\n    \r\n    if (response && response.data) {\r\n      // 检查是否是统一响应格式（包含code字段）\r\n      if (response.data.code !== undefined) {\r\n        // 统一响应格式\r\n        if (response.data.code === 200) {\r\n          const data = response.data.data;\r\n          // 过滤掉已取消的任务\r\n          let tasks = data.results || [];\r\n          tasks = tasks.filter(task => task.status !== 'cancelled');\r\n          scanTasks.value = tasks;\r\n          taskPagination.total = tasks.length; // 使用过滤后的数量\r\n          console.log('成功获取扫描任务（统一格式，已过滤取消任务）:', scanTasks.value);\r\n        } else {\r\n          console.error('API返回错误代码:', response.data.code, '错误信息:', response.data.message);\r\n          message.error(`获取扫描任务列表失败: ${response.data.message}`);\r\n          scanTasks.value = [];\r\n          taskPagination.total = 0;\r\n        }\r\n      } else {\r\n        // DRF标准响应格式（直接包含count、results字段）\r\n        console.log('检测到DRF标准响应格式');\r\n        // 过滤掉已取消的任务\r\n        let tasks = response.data.results || [];\r\n        tasks = tasks.filter(task => task.status !== 'cancelled');\r\n        scanTasks.value = tasks;\r\n        taskPagination.total = tasks.length; // 使用过滤后的数量\r\n        console.log('成功获取扫描任务（DRF格式，已过滤取消任务）:', scanTasks.value);\r\n        message.success('获取扫描任务列表成功', 1);\r\n      }\r\n    } else {\r\n      console.error('无效的API响应:', response);\r\n      message.error('获取扫描任务列表失败: 无效的响应数据');\r\n      scanTasks.value = [];\r\n      taskPagination.total = 0;\r\n    }\r\n  } catch (error) {\r\n    console.error('加载扫描任务失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      request: error.request\r\n    });\r\n    \r\n    let errorMessage = '加载扫描任务失败';\r\n    if (error.response) {\r\n      // 服务器响应错误\r\n      errorMessage += `: HTTP ${error.response.status}`;\r\n      if (error.response.data && error.response.data.message) {\r\n        errorMessage += ` - ${error.response.data.message}`;\r\n      }\r\n    } else if (error.request) {\r\n      // 请求发送但无响应\r\n      errorMessage += ': 网络连接失败或服务器无响应';\r\n    } else {\r\n      // 请求设置错误\r\n      errorMessage += `: ${error.message}`;\r\n    }\r\n    \r\n    message.error(errorMessage);\r\n    scanTasks.value = [];\r\n    taskPagination.total = 0;\r\n  } finally {\r\n    taskLoading.value = false;\r\n  }\r\n};\r\n\r\nconst handleSearchTasks = () => {\r\n  taskPagination.current = 1;\r\n  loadScanTasks();\r\n};\r\n\r\nconst handleRefreshTasks = () => {\r\n  taskStatusFilter.value = '';\r\n  taskDateRange.value = [];\r\n  taskNameFilter.value = '';\r\n  taskPagination.current = 1;\r\n  loadScanTasks();\r\n};\r\n\r\n\r\nconst handleTaskTableChange = (paginationInfo) => {\r\n  taskPagination.current = paginationInfo.current;\r\n  taskPagination.pageSize = paginationInfo.pageSize;\r\n  loadScanTasks();\r\n};\r\n\r\nconst handleViewTaskDetail = (record) => {\r\n  selectedTask.value = record;\r\n  taskDetailModalVisible.value = true;\r\n};\r\n\r\nconst handleViewTaskResults = async (record) => {\r\n  selectedTask.value = record;\r\n  await loadTaskResults(record.id);\r\n  taskResultModalVisible.value = true;\r\n};\r\n\r\nconst handleCancelTask = async (record) => {\r\n  try {\r\n    // 如果任务正在运行，先停止异步处理\r\n    if (record.status === 'running' || record.status === 'pending') {\r\n      try {\r\n        const stopResponse = await ipAPI.stopAsyncTask(record.id);\r\n        if (stopResponse.data && stopResponse.data.code === 200) {\r\n          message.success('异步任务已停止', 1);\r\n        }\r\n      } catch (stopError) {\r\n        console.warn('停止异步任务失败:', stopError);\r\n      }\r\n    }\r\n    \r\n    // 取消任务\r\n    const response = await ipAPI.cancelScanTask(record.id);\r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`任务 ${record.task_name || record.id} 已取消`, 1);\r\n      // 直接从列表中移除已取消的任务，而不是刷新整个列表\r\n      scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\r\n      taskPagination.total = scanTasks.value.length;\r\n    } else {\r\n      message.error('取消任务失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('取消任务失败:', error);\r\n    message.error(`取消任务失败: ${error.response?.data?.message || error.message}`);\r\n  }\r\n};\r\n\r\nconst handleDeleteTask = async (record) => {\r\n  try {\r\n    // 显示确认对话框\r\n    await new Promise((resolve, reject) => {\r\n      const modal = Modal.confirm({\r\n        title: '确认删除任务',\r\n        content: `确定要删除任务 \"${record.id}\" 吗？该操作不可恢复！`,\r\n        okText: '确认删除',\r\n        okType: 'danger',\r\n        cancelText: '取消',\r\n        onOk: () => resolve(true),\r\n        onCancel: () => reject(new Error('User cancelled'))\r\n      });\r\n    });\r\n    \r\n    // 调用删除API\r\n    const response = await ipAPI.deleteScanTask(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`任务 \"${record.id}\" 已成功删除`, 1);\r\n      \r\n      // 直接从列表中移除已删除的任务，而不是刷新整个列表\r\n      scanTasks.value = scanTasks.value.filter(task => task.id !== record.id);\r\n      taskPagination.total = scanTasks.value.length;\r\n    } else {\r\n      message.error('删除任务失败');\r\n    }\r\n  } catch (error) {\r\n    if (error.message !== 'User cancelled') {\r\n      console.error('删除任务失败:', error);\r\n      message.error(`删除任务失败: ${error.response?.data?.message || error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\nconst loadTaskResults = async (taskId) => {\r\n  resultLoading.value = true;\r\n  try {\r\n    const response = await ipAPI.getScanTaskResults(taskId);\r\n    if (response.data && response.data.code === 200) {\r\n      taskResults.value = response.data.data || [];\r\n    } else {\r\n      message.error('获取扫描结果失败');\r\n      taskResults.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('加载扫描结果失败:', error);\r\n    message.error(`加载扫描结果失败: ${error.response?.data?.message || error.message}`);\r\n    taskResults.value = [];\r\n  } finally {\r\n    resultLoading.value = false;\r\n  }\r\n};\r\n\r\n// 任务状态相关工具函数\r\nconst getTaskStatusColor = (status) => {\r\n  const colorMap = {\r\n    'pending': 'default',\r\n    'running': 'processing',\r\n    'completed': 'success',\r\n    'failed': 'error',\r\n    'cancelled': 'warning'\r\n  };\r\n  return colorMap[status] || 'default';\r\n};\r\n\r\nconst getTaskStatusText = (status) => {\r\n  const textMap = {\r\n    'pending': '等待中',\r\n    'running': '运行中',\r\n    'completed': '已完成',\r\n    'failed': '失败',\r\n    'cancelled': '已取消'\r\n  };\r\n  return textMap[status] || status;\r\n};\r\n\r\n// 判断是否为长时间运行的任务\r\nconst isLongRunningTask = (task) => {\r\n  if (task.status !== 'running') {\r\n    return false;\r\n  }\r\n  \r\n  // 检查任务的运行时间，如果超过180秒（5分钟）则认为是长时间运行\r\n  if (task.started_at) {\r\n    const startTime = new Date(task.started_at);\r\n    const currentTime = new Date();\r\n    const diffInSeconds = (currentTime - startTime) / 1000;\r\n    return diffInSeconds > 180; // 3分钟\r\n  }\r\n  \r\n  // 根据进度判断：如果进度大于30%但仍在运行，可能是长时间任务\r\n  return task.progress > 30;\r\n};\r\n\r\n// 获取取消按钮的文本\r\nconst getCancelButtonText = (record) => {\r\n  if (record.status === 'running' && isLongRunningTask(record)) {\r\n    return '停止';\r\n  }\r\n  return '取消';\r\n};\r\n\r\n// 获取取消按钮的提示信息\r\nconst getCancelButtonTitle = (record) => {\r\n  if (record.status === 'completed') {\r\n    return '任务已完成，无法取消';\r\n  }\r\n  if (record.status === 'cancelled') {\r\n    return '任务已取消';\r\n  }\r\n  if (record.status === 'failed') {\r\n    return '任务已失败，无法取消';\r\n  }\r\n  if (record.status === 'running') {\r\n    if (isLongRunningTask(record)) {\r\n      return '停止正在持续运行的任务。任务将会立即停止，不再检查新的主机发现';\r\n    }\r\n    return '取消正在运行的任务';\r\n  }\r\n  if (record.status === 'pending') {\r\n    return '取消等待中的任务';\r\n  }\r\n  return '取消任务';\r\n};\r\n\r\n// 获取删除按钮的提示信息\r\nconst getDeleteButtonTitle = (record) => {\r\n  if (record.status === 'running') {\r\n    return '任务正在运行中，无法删除';\r\n  }\r\n  if (record.status === 'pending') {\r\n    return '任务正在等待处理，无法删除';\r\n  }\r\n  return `删除任务 ${record.id} 的记录（不可恢复）`;\r\n};\r\n\r\n\r\n\r\n\r\nconst handleRefresh = () => {\r\n  loadIPList();\r\n  message.success('数据已刷新', 1);\r\n};\r\n\r\nconst handleSave = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    \r\n    // 转换字段名：前端驼峰命名转后端下划线命名\r\n    const submitData = {\r\n      ip_address: formData.ipAddress,\r\n      hostname: formData.hostname,\r\n      status: formData.status,\r\n      type: formData.type,\r\n      mac_address: formData.macAddress,\r\n      device: formData.device,\r\n      subnet: formData.subnet,\r\n      description: formData.description\r\n    };\r\n    \r\n    if (editingIP.value) {\r\n      // 编辑模式\r\n      await ipAPI.updateIP(editingIP.value.id, submitData);\r\n      message.success('IP信息更新成功', 1);\r\n    } else {\r\n      // 新增模式\r\n      await ipAPI.createIP(submitData);\r\n      message.success('IP添加成功', 1);\r\n    }\r\n    \r\n    editModalVisible.value = false;\r\n    resetForm();\r\n    await loadIPList();\r\n  } catch (error) {\r\n    console.error('保存IP失败:', error);\r\n    message.error(`保存失败: ${error.response?.data?.message || error.message}`);\r\n  }\r\n};\r\n\r\nconst handleCancel = () => {\r\n  editModalVisible.value = false;\r\n  resetForm();\r\n};\r\n\r\nconst resetForm = () => {\r\n  Object.assign(formData, {\r\n    ipAddress: '',\r\n    hostname: '',\r\n    status: 'available',\r\n    type: 'static',\r\n    macAddress: '',\r\n    device: '',\r\n    subnet: '',\r\n    description: ''\r\n  });\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 组件挂载时初始化数据\r\nonMounted(() => {\r\n  // 防止重复初始化\r\n  if (isComponentInitialized) {\r\n    console.log('IP列表组件已初始化，跳过重复初始化');\r\n    return;\r\n  }\r\n  \r\n  console.log('IP列表组件挂载，开始加载IP数据...');\r\n  isComponentInitialized = true;\r\n  \r\n  // 从 URL 参数中读取分页设置\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const pageParam = urlParams.get('page');\r\n  const pageSizeParam = urlParams.get('page_size');\r\n  \r\n  if (pageParam && !isNaN(parseInt(pageParam))) {\r\n    pagination.current = parseInt(pageParam);\r\n    console.log('从 URL 读取到 page 参数:', pagination.current);\r\n  }\r\n  \r\n  if (pageSizeParam && !isNaN(parseInt(pageSizeParam))) {\r\n    const requestedPageSize = parseInt(pageSizeParam);\r\n    // 检查是否在允许的选项中\r\n    const allowedSizes = [10, 20, 50, 100];\r\n    if (allowedSizes.includes(requestedPageSize)) {\r\n      pagination.pageSize = requestedPageSize;\r\n      console.log('从 URL 读取到 page_size 参数:', pagination.pageSize);\r\n    } else {\r\n      console.warn(`URL 中的 page_size=${requestedPageSize} 不在允许范围内，使用默认值 ${pagination.pageSize}`);\r\n    }\r\n  }\r\n  \r\n  // 全局抑制 ResizeObserver 错误\r\n  const originalError = console.error;\r\n  console.error = function(...args) {\r\n    if (args[0] && args[0].toString().includes('ResizeObserver loop completed')) {\r\n      return; // 忽略 ResizeObserver 错误\r\n    }\r\n    originalError.apply(console, args);\r\n  };\r\n  \r\n  // 使用现有的错误抑制函数\r\n  suppressResizeObserverError();\r\n  \r\n  // 延迟加载数据，避免DOM渲染冲突\r\n  nextTick(() => {\r\n    loadIPList();\r\n  });\r\n});\r\n\r\n// 组件即将卸载时的预清理\r\nonBeforeUnmount(() => {\r\n  console.log('IP列表组件即将卸载，进行预清理...');\r\n  \r\n  // 立即停止所有监控活动\r\n  stopAsyncStatusMonitoring();\r\n  \r\n  // 关闭所有弹窗，避免残留的DOM元素\r\n  scanTaskModalVisible.value = false;\r\n  taskDetailModalVisible.value = false;\r\n  taskResultModalVisible.value = false;\r\n  editModalVisible.value = false;\r\n  detailModalVisible.value = false;\r\n  scanModalVisible.value = false;\r\n});\r\n\r\n// 组件销毁时清理资源\r\nonUnmounted(() => {\r\n  console.log('IP列表组件销毁，清理监控定时器...');\r\n  \r\n  // 1. 停止异步状态监控\r\n  stopAsyncStatusMonitoring();\r\n  \r\n  // 2. 清理所有可能的定时器\r\n  if (statusCheckInterval) {\r\n    clearInterval(statusCheckInterval);\r\n    statusCheckInterval = null;\r\n  }\r\n  \r\n  // 3. 强制清理所有ResizeObserver实例\r\n  try {\r\n    // 查找页面中所有的ResizeObserver实例并断开连接\r\n    const tableElements = document.querySelectorAll('.modern-table, .ant-table, .ant-progress');\r\n    tableElements.forEach(element => {\r\n      // 移除可能的观察器\r\n      if (element._resizeObserver) {\r\n        element._resizeObserver.disconnect();\r\n        delete element._resizeObserver;\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.debug('清理ResizeObserver时出错:', error.message);\r\n  }\r\n  \r\n  // 4. 清理组件状态\r\n  scanTasks.value = [];\r\n  ipData.value = [];\r\n  taskResults.value = [];\r\n  \r\n  // 5. 重置初始化状态标记\r\n  isComponentInitialized = false;\r\n  isMonitoringActive = false;\r\n  \r\n  console.log('IP列表组件资源清理完成');\r\n});\r\n\r\n// 监听扫描任务弹窗状态\r\nwatch(scanTaskModalVisible, (newValue, oldValue) => {\r\n  console.log(`扫描任务弹窗状态变化: ${oldValue} -> ${newValue}`);\r\n  \r\n  if (!newValue) {\r\n    // 弹窗关闭时停止监控\r\n    console.log('弹窗关闭，停止异步监控');\r\n    stopAsyncStatusMonitoring();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n/* 简洁蓝白背景 */\r\n.ip-list-container {\r\n  background: #f8fafc;\r\n  min-height: 100vh;\r\n}\r\n\r\n/* 简洁卡片样式 */\r\n.table-card {\r\n  border-radius: 8px;\r\n  border: 1px solid #e2e8f0;\r\n  background: #ffffff;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.table-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px 24px;\r\n  background: #ffffff;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n.table-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  margin: 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #1e40af;\r\n}\r\n\r\n.table-extra {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n/* 简洁表格样式 */\r\n:deep(.modern-table) {\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n  background: #ffffff;\r\n}\r\n\r\n:deep(.modern-table .ant-table-thead > tr > th) {\r\n  background: #f1f5f9;\r\n  border: none;\r\n  color: #374151;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #e2e8f0;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr > td) {\r\n  border: none;\r\n  padding: 16px 20px;\r\n  border-bottom: 1px solid #f1f5f9;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr:hover > td) {\r\n  background: #f8fafc;\r\n}\r\n\r\n:deep(.modern-table .ant-table-tbody > tr:last-child > td) {\r\n  border-bottom: none;\r\n}\r\n\r\n/* 简洁按钮样式 */\r\n:deep(.ant-btn-primary) {\r\n  background: #2563eb;\r\n  border: 1px solid #2563eb;\r\n  border-radius: 6px;\r\n  height: 36px;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background: #1d4ed8;\r\n  border-color: #1d4ed8;\r\n}\r\n\r\n:deep(.ant-btn:not(.ant-btn-primary)) {\r\n  border-radius: 6px;\r\n  height: 36px;\r\n\r\n  background: #ffffff;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.ant-btn:not(.ant-btn-primary):hover) {\r\n  border-color: #2563eb;\r\n  color: #2563eb;\r\n}\r\n\r\n/* 简洁标签样式 */\r\n:deep(.ant-tag) {\r\n  border-radius: 4px;\r\n  padding: 2px 8px;\r\n  font-weight: 500;\r\n  border: 1px solid;\r\n  font-size: 12px;\r\n}\r\n\r\n/* 状态标签简洁色彩 */\r\n:deep(.ant-tag-success) {\r\n  background: #dcfce7;\r\n  color: #166534;\r\n  border-color: #bbf7d0;\r\n}\r\n\r\n:deep(.ant-tag-processing) {\r\n  background: #dbeafe;\r\n  color: #1e40af;\r\n  border-color: #93c5fd;\r\n}\r\n\r\n:deep(.ant-tag-warning) {\r\n  background: #fef3c7;\r\n  color: #92400e;\r\n  border-color: #fde68a;\r\n}\r\n\r\n:deep(.ant-tag-error) {\r\n  background: #fee2e2;\r\n  color: #dc2626;\r\n  border-color: #fecaca;\r\n}\r\n\r\n:deep(.ant-tag-default) {\r\n  background: #f3f4f6;\r\n  color: #374151;\r\n  border-color: #d1d5db;\r\n}\r\n\r\n/* 保护状态样式 */\r\n.protected-button {\r\n  opacity: 0.5;\r\n  cursor: not-allowed !important;\r\n}\r\n\r\n.protected-button:hover {\r\n  background: none !important;\r\n  border-color: transparent !important;\r\n  transform: none !important;\r\n}\r\n\r\n/* 保护信息提示 */\r\n.protection-info {\r\n  margin-top: 4px;\r\n  color: #718096;\r\n  font-style: italic;\r\n}\r\n\r\n/* 统计卡片样式 */\r\n:deep(.ant-statistic) {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n:deep(.ant-statistic-title) {\r\n  color: #4a5568;\r\n  font-weight: 600;\r\n}\r\n\r\n:deep(.ant-statistic-content) {\r\n  color: #2d3748;\r\n  font-weight: 700;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .ip-list-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .table-header {\r\n    padding: 16px 20px;\r\n    flex-wrap: wrap;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .table-title {\r\n    font-size: 18px;\r\n  }\r\n  \r\n  .table-extra {\r\n    flex-wrap: wrap;\r\n    gap: 8px;\r\n  }\r\n  \r\n  :deep(.modern-table .ant-table-thead > tr > th),\r\n  :deep(.modern-table .ant-table-tbody > tr > td) {\r\n    padding: 12px 16px;\r\n  }\r\n}\r\n\r\n/* 滚动条美化 */\r\n:deep(.ant-table-body)::-webkit-scrollbar {\r\n  width: 8px;\r\n  height: 8px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-track {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-thumb {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.ant-table-body)::-webkit-scrollbar-thumb:hover {\r\n  background: linear-gradient(135deg, #5a67d8 0%, #6b46c1 100%);\r\n  font-size: 12px;\r\n  line-height: 1.4;\r\n}\r\n\r\n.table-header-text {\r\n  font-weight: 600;\r\n  color: #374151;\r\n}\r\n\r\n/* IP地址单元格 */\r\n.ip-address-cell {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.ip-info {\r\n  flex: 1;\r\n}\r\n\r\n.ip-address {\r\n  font-family: 'Courier New', monospace;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  font-size: 14px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.ip-hostname {\r\n  font-size: 12px;\r\n  color: #6b7280;\r\n}\r\n\r\n/* 状态标签 */\r\n.status-tag {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  font-size: 12px;\r\n  padding: 4px 8px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n/* 类型标签 */\r\n.type-tag {\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n/* Ping状态 */\r\n.ping-status {\r\n  font-weight: 500;\r\n}\r\n\r\n/* 最后在线时间 */\r\n.last-seen {\r\n  color: #6b7280;\r\n  font-size: 12px;\r\n}\r\n\r\n.no-data {\r\n  color: #9ca3af;\r\n  font-style: italic;\r\n}\r\n\r\n.form-section {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.section-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  margin: 0 0 16px 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  padding-bottom: 8px;\r\n  border-bottom: 1px solid #e8f3ff;\r\n}\r\n\r\n.input-hint {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  margin-top: 4px;\r\n}\r\n\r\n/* 扫描弹窗样式 */\r\n:deep(.ant-modal-body) {\r\n  max-height: 600px;\r\n  overflow-y: auto;\r\n}\r\n:deep(.detail-modal .ant-modal-content) {\r\n  border-radius: 8px;\r\n}\r\n\r\n:deep(.edit-modal .ant-modal-content) {\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 按钮样式优化 */\r\n:deep(.ant-btn-primary) {\r\n  background: #1890ff;\r\n  border-color: #1890ff;\r\n  border-radius: 6px;\r\n}\r\n\r\n:deep(.ant-btn-primary:hover) {\r\n  background: #40a9ff;\r\n  border-color: #40a9ff;\r\n}\r\n\r\n:deep(.ant-btn) {\r\n  border-radius: 6px;\r\n}\r\n\r\n/* 输入框样式 */\r\n:deep(.ant-input) {\r\n  border-radius: 6px;\r\n  border-color: #e8f3ff;\r\n}\r\n\r\n:deep(.ant-input:focus) {\r\n  border-color: #1890ff;\r\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n:deep(.ant-select .ant-select-selector) {\r\n  border-radius: 6px;\r\n  border-color: #e8f3ff;\r\n}\r\n\r\n:deep(.ant-select:not(.ant-select-disabled):hover .ant-select-selector) {\r\n  border-color: #1890ff;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  \r\n  .filter-header {\r\n    flex-direction: column;\r\n    gap: 16px;\r\n    align-items: flex-start;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .ip-list-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .filter-content {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .filter-header {\r\n    gap: 12px;\r\n  }\r\n  \r\n  .filter-title {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .title-icon {\r\n    font-size: 18px;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .ip-list-container {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .ip-address-cell {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .filter-content {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .filter-actions {\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n}\r\n\r\n/* 表格容器样式 */\r\n.table-container {\r\n  overflow: hidden;\r\n  background: white;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 批量操作工具栏 */\r\n.batch-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 16px;\r\n  background: #f0f7ff;\r\n  border: 1px solid #d6e4ff;\r\n  border-radius: 8px;\r\n  margin-bottom: 16px;\r\n  animation: slideDown 0.3s ease;\r\n}\r\n\r\n@keyframes slideDown {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.batch-info {\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  color: #1890ff;\r\n  font-weight: 500;\r\n}\r\n\r\n.batch-info strong {\r\n  color: #1890ff;\r\n  margin: 0 4px;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 监控状态按钮样式 */\r\n.monitoring-enabled {\r\n  background: #f6ffed !important;\r\n  border-color: #b7eb8f !important;\r\n}\r\n\r\n.monitoring-enabled:hover {\r\n  background: #d9f7be !important;\r\n  border-color: #95de64 !important;\r\n}\r\n\r\n/* 统计卡片样式 */\r\n.stat-card {\r\n  border-radius: 8px;\r\n  border: 1px solid #e8f3ff;\r\n  background: #ffffff;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.08);\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n/* 批量Ping弹窗样式 - 重新设计 */\r\n.ping-confirm-phase,\r\n.ping-testing-phase,\r\n.ping-result-phase {\r\n  padding: 8px 0;\r\n}\r\n\r\n/* 阶段头部 */\r\n.phase-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n  border-radius: 12px;\r\n  border: 2px solid;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.ping-confirm-phase .phase-header {\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  border-color: #91caff;\r\n}\r\n\r\n.ping-testing-phase .phase-header {\r\n  background: linear-gradient(135deg, #fff7e6 0%, #fff2e8 100%);\r\n  border-color: #ffec8b;\r\n}\r\n\r\n.ping-result-phase .phase-header {\r\n  background: linear-gradient(135deg, #f6ffed 0%, #f0f9e8 100%);\r\n  border-color: #d9f7be;\r\n}\r\n\r\n.phase-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 56px;\r\n  height: 56px;\r\n  border-radius: 50%;\r\n  font-size: 24px;\r\n  position: relative;\r\n}\r\n\r\n.phase-icon.confirm {\r\n  background: rgba(24, 144, 255, 0.1);\r\n  color: #1890ff;\r\n}\r\n\r\n.phase-icon.testing {\r\n  background: rgba(250, 140, 22, 0.1);\r\n  color: #fa8c16;\r\n}\r\n\r\n.phase-icon.success {\r\n  background: rgba(82, 196, 26, 0.1);\r\n  color: #52c41a;\r\n}\r\n\r\n.phase-content {\r\n  flex: 1;\r\n}\r\n\r\n.phase-title {\r\n  margin: 0 0 8px 0;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.phase-description {\r\n  margin: 0;\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 统计网格 */\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.stat-card {\r\n  text-align: center;\r\n  padding: 20px 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-number {\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n  line-height: 1;\r\n}\r\n\r\n.stat-number.primary { color: #1890ff; }\r\n.stat-number.success { color: #52c41a; }\r\n.stat-number.error { color: #ff4d4f; }\r\n\r\n.stat-label {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n/* 测试参数 */\r\n.test-parameters {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.param-title {\r\n  margin: 0 0 16px 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.param-list {\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.param-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.param-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.param-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n.param-value {\r\n  color: #262626;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 提示信息 */\r\n.warning-tip,\r\n.tech-tip {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.warning-tip {\r\n  background: rgba(250, 140, 22, 0.05);\r\n  border: 1px solid rgba(250, 140, 22, 0.2);\r\n}\r\n\r\n.tech-tip {\r\n  background: rgba(24, 144, 255, 0.05);\r\n  border: 1px solid rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.tip-icon {\r\n  font-size: 16px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.tip-text {\r\n  font-size: 13px;\r\n  color: #595959;\r\n  line-height: 1.5;\r\n}\r\n\r\n/* 测试中的动画和状态 */\r\n.loading-spinner {\r\n  width: 24px;\r\n  height: 24px;\r\n  border: 2px solid #f3f3f3;\r\n  border-top: 2px solid #fa8c16;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n  position: absolute;\r\n  top: 16px;\r\n  left: 16px;\r\n}\r\n\r\n.testing-icon {\r\n  margin-left: 4px;\r\n  z-index: 1;\r\n}\r\n\r\n.testing-info {\r\n  background: #f9f9f9;\r\n  border-radius: 8px;\r\n  padding: 16px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.info-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.info-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.info-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n.info-value {\r\n  color: #262626;\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n}\r\n\r\n.info-value.status-active {\r\n  color: #fa8c16;\r\n  animation: pulse 2s infinite;\r\n}\r\n\r\n/* 进度条 */\r\n.progress-section {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.progress-bar {\r\n  width: 100%;\r\n  height: 6px;\r\n  background: #f5f5f5;\r\n  border-radius: 3px;\r\n  overflow: hidden;\r\n  margin-bottom: 12px;\r\n}\r\n\r\n.progress-fill {\r\n  height: 100%;\r\n  background: linear-gradient(90deg, #1890ff, #40a9ff, #69c0ff, #40a9ff, #1890ff);\r\n  background-size: 200% 100%;\r\n  border-radius: 3px;\r\n  animation: progressFlow 2s ease-in-out infinite;\r\n}\r\n\r\n.progress-text {\r\n  text-align: center;\r\n  font-size: 13px;\r\n  color: #8c8c8c;\r\n  font-style: italic;\r\n}\r\n\r\n/* 结果阶段 */\r\n.success-icon {\r\n  font-size: 32px;\r\n  animation: bounce 0.6s ease-out;\r\n}\r\n\r\n.result-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.result-card {\r\n  text-align: center;\r\n  padding: 24px 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n  transition: all 0.3s ease;\r\n  animation: fadeInUp 0.5s ease-out;\r\n}\r\n\r\n.result-card.success {\r\n  border-color: #d9f7be;\r\n  background: #f6ffed;\r\n}\r\n\r\n.result-card.error {\r\n  border-color: #ffccc7;\r\n  background: #fff2f0;\r\n}\r\n\r\n.result-card.primary {\r\n  border-color: #91caff;\r\n  background: #f0f7ff;\r\n}\r\n\r\n.result-card:nth-child(1) { animation-delay: 0.1s; }\r\n.result-card:nth-child(2) { animation-delay: 0.2s; }\r\n.result-card:nth-child(3) { animation-delay: 0.3s; }\r\n\r\n.result-number {\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n  line-height: 1;\r\n}\r\n\r\n.result-card.success .result-number { color: #52c41a; }\r\n.result-card.error .result-number { color: #ff4d4f; }\r\n.result-card.primary .result-number { color: #1890ff; }\r\n\r\n.result-label {\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.result-summary {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: rgba(82, 196, 26, 0.05);\r\n  border-radius: 8px;\r\n  border: 1px solid rgba(82, 196, 26, 0.2);\r\n  margin-bottom: 24px;\r\n  animation: fadeIn 0.5s ease-in 0.4s both;\r\n}\r\n\r\n.summary-item {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.summary-item:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.summary-item.success-rate .summary-value {\r\n  color: #52c41a;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n}\r\n\r\n.summary-item.test-time .summary-value {\r\n  color: #8c8c8c;\r\n  font-size: 13px;\r\n}\r\n\r\n.summary-label {\r\n  color: #8c8c8c;\r\n  font-size: 14px;\r\n}\r\n\r\n/* 按钮操作区域 */\r\n.modal-actions {\r\n  text-align: center;\r\n  margin-top: 8px;\r\n}\r\n\r\n/* 动画定义 */\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@keyframes pulse {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.6; }\r\n}\r\n\r\n@keyframes progressFlow {\r\n  0% { background-position: 200% 0; }\r\n  100% { background-position: -200% 0; }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n@keyframes bounce {\r\n  0%, 20%, 53%, 80%, 100% {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n  40%, 43% {\r\n    transform: translate3d(0, -8px, 0);\r\n  }\r\n  70% {\r\n    transform: translate3d(0, -4px, 0);\r\n  }\r\n  90% {\r\n    transform: translate3d(0, -2px, 0);\r\n  }\r\n}\r\n\r\n:deep(.ping-info-header) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n  padding: 16px;\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  border-radius: 8px;\r\n  border: 1px solid #d4edda;\r\n}\r\n\r\n:deep(.ping-icon) {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 48px;\r\n  height: 48px;\r\n  background: rgba(24, 144, 255, 0.1);\r\n  border-radius: 50%;\r\n}\r\n\r\n:deep(.ping-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.ping-stats) {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n  margin-bottom: 16px;\r\n  padding: 16px;\r\n  background: #fafafa;\r\n  border-radius: 6px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n:deep(.stat-item) {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n:deep(.stat-label) {\r\n  font-size: 14px;\r\n  color: #666;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.stat-value) {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  padding: 2px 8px;\r\n  border-radius: 4px;\r\n}\r\n\r\n:deep(.stat-value.primary) {\r\n  color: #1890ff;\r\n  background: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n:deep(.stat-value.success) {\r\n  color: #52c41a;\r\n  background: rgba(82, 196, 26, 0.1);\r\n}\r\n\r\n:deep(.stat-value.error) {\r\n  color: #ff4d4f;\r\n  background: rgba(255, 77, 79, 0.1);\r\n}\r\n\r\n:deep(.ping-description) {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n:deep(.ping-warning) {\r\n  padding: 12px;\r\n  background: rgba(250, 140, 22, 0.05);\r\n  border: 1px solid rgba(250, 140, 22, 0.2);\r\n  border-radius: 6px;\r\n}\r\n\r\n/* 批量Ping结果弹窗样式 */\r\n:deep(.ping-result-content) {\r\n  padding: 8px 0;\r\n}\r\n\r\n:deep(.result-header) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n  background: linear-gradient(135deg, #f6ffed 0%, #f0f9e8 100%);\r\n  border-radius: 8px;\r\n  border: 1px solid #d9f7be;\r\n}\r\n\r\n:deep(.result-icon.success) {\r\n  font-size: 32px;\r\n  color: #52c41a;\r\n}\r\n\r\n:deep(.result-title) {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #52c41a;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.result-stats) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.result-grid) {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 16px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n:deep(.result-item) {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: #fafafa;\r\n  border-radius: 8px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n:deep(.result-number) {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n:deep(.result-number.success) {\r\n  color: #52c41a;\r\n}\r\n\r\n:deep(.result-number.error) {\r\n  color: #ff4d4f;\r\n}\r\n\r\n:deep(.result-number.primary) {\r\n  color: #1890ff;\r\n}\r\n\r\n:deep(.result-label) {\r\n  font-size: 12px;\r\n  color: #666;\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n}\r\n\r\n:deep(.result-summary) {\r\n  text-align: center;\r\n  padding: 16px;\r\n  background: rgba(82, 196, 26, 0.05);\r\n  border-radius: 6px;\r\n  border: 1px solid rgba(82, 196, 26, 0.2);\r\n}\r\n\r\n/* 进度消息美化 */\r\n:deep(.ant-message-custom-content) {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n/* 弹窗按钮美化 */\r\n:deep(.ant-modal-confirm .ant-btn-primary) {\r\n  background: linear-gradient(135deg, #1890ff 0%, #40a9ff 100%);\r\n  border: none;\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.3);\r\n}\r\n\r\n:deep(.ant-modal-confirm .ant-btn-primary:hover) {\r\n  background: linear-gradient(135deg, #40a9ff 0%, #69c0ff 100%);\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.4);\r\n}\r\n\r\n/* Zabbix模板选择抽屉样式 */\r\n.template-drawer-content {\r\n  padding: 0;\r\n}\r\n\r\n.ip-info-card {\r\n  margin-bottom: 24px;\r\n  border-radius: 12px;\r\n  border: 1px solid #e8f3ff;\r\n  background: linear-gradient(135deg, #f0f7ff 0%, #e8f3ff 100%);\r\n  box-shadow: 0 2px 8px rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n.ip-info-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n}\r\n\r\n.ip-icon {\r\n  font-size: 24px;\r\n  color: #1890ff;\r\n}\r\n\r\n.ip-details h4 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.ip-details p {\r\n  margin: 0;\r\n  font-size: 12px;\r\n  color: #8c8c8c;\r\n}\r\n\r\n/* 搜索和筛选区域 */\r\n.template-search-section {\r\n  margin-bottom: 24px;\r\n  padding: 20px;\r\n  background: #fafafa;\r\n  border-radius: 12px;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.search-bar {\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n}\r\n\r\n.search-bar .ant-input-search {\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.search-bar .ant-input-search:hover {\r\n  box-shadow: 0 4px 12px rgba(24, 144, 255, 0.15);\r\n}\r\n\r\n.search-bar .ant-input-search:focus-within {\r\n  box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\r\n}\r\n\r\n.category-filter {\r\n  margin: 16px 0;\r\n  padding-bottom: 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n.category-filter-tag {\r\n  margin-bottom: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  padding: 8px 12px;\r\n  font-size: 13px;\r\n  border-radius: 8px;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  background: #f5f5f5;\r\n  border: 1px solid #f0f0f0;\r\n}\r\n\r\n.category-filter-tag:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  background: white;\r\n}\r\n\r\n.category-filter-tag-selected {\r\n  background: #1890ff !important;\r\n  color: white !important;\r\n  border-color: #1890ff !important;\r\n}\r\n\r\n.category-filter-tag-selected .category-count {\r\n  color: rgba(255, 255, 255, 0.8) !important;\r\n}\r\n\r\n.category-filter-tag-selected .category-selected {\r\n  background: white !important;\r\n  color: #1890ff !important;\r\n}\r\n\r\n.category-tag-selected {\r\n  background: #1890ff !important;\r\n  color: white !important;\r\n  border-color: #1890ff !important;\r\n}\r\n\r\n.category-filter-icon {\r\n  font-size: 14px;\r\n}\r\n\r\n.category-count {\r\n  font-weight: 600;\r\n  margin-left: 4px;\r\n}\r\n\r\n.category-selected {\r\n  background: rgba(255, 255, 255, 0.3);\r\n  padding: 2px 6px;\r\n  border-radius: 8px;\r\n  font-size: 10px;\r\n  font-weight: 600;\r\n  margin-left: 4px;\r\n}\r\n\r\n.clear-filter-tag {\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 模板列表 */\r\n.template-list {\r\n  max-height: calc(100vh - 400px);\r\n  overflow-y: auto;\r\n}\r\n\r\n.empty-templates {\r\n  text-align: center;\r\n  padding: 80px 20px;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n.empty-templates .ant-empty {\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.empty-templates .ant-empty-image {\r\n  height: 120px;\r\n}\r\n\r\n.empty-templates .ant-empty-description {\r\n  font-size: 15px;\r\n  color: #666;\r\n}\r\n\r\n.empty-templates .ant-btn {\r\n  margin-top: 16px;\r\n  border-radius: 8px;\r\n}\r\n\r\n.template-loading {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 300px;\r\n  padding: 40px;\r\n}\r\n\r\n.template-loading-spinner {\r\n  width: 48px;\r\n  height: 48px;\r\n  border: 4px solid #f0f0f0;\r\n  border-top: 4px solid #1890ff;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n.selected-templates-info {\r\n  margin-bottom: 20px;\r\n  animation: slideDown 0.3s ease-out;\r\n}\r\n\r\n.search-results-info {\r\n  margin: 12px 0;\r\n  padding: 12px 16px;\r\n  background: #f6f6f6;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  color: #666;\r\n  animation: fadeIn 0.3s ease;\r\n}\r\n\r\n.search-results-info strong {\r\n  color: #1890ff;\r\n  font-weight: 600;\r\n}\r\n\r\n@keyframes slideDown {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(-10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.template-grid {\r\n  animation: fadeIn 0.5s ease;\r\n}\r\n\r\n.template-card {\r\n  animation: fadeInUp 0.4s ease-out;\r\n  animation-fill-mode: both;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n/* 分类样式 */\r\n.template-category {\r\n  margin-bottom: 20px;\r\n  border: 1px solid #f0f0f0;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  background: white;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.04);\r\n}\r\n\r\n.category-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 12px 16px;\r\n  background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.category-title-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  flex: 1;\r\n}\r\n\r\n.category-title {\r\n  margin: 0;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n}\r\n\r\n.category-icon {\r\n  font-size: 16px;\r\n  color: #1890ff;\r\n}\r\n\r\n.category-stats {\r\n  display: flex;\r\n  gap: 8px;\r\n  align-items: center;\r\n}\r\n\r\n.selected-badge {\r\n  margin-left: 8px;\r\n}\r\n\r\n.expand-button {\r\n  color: #666;\r\n  border: none;\r\n  background: transparent;\r\n}\r\n\r\n.expand-button:hover {\r\n  color: #1890ff;\r\n  background: rgba(24, 144, 255, 0.1);\r\n}\r\n\r\n/* 模板网格 */\r\n.template-grid-wrapper {\r\n  padding: 16px;\r\n  overflow: hidden;\r\n  max-width: 100%;\r\n}\r\n\r\n.template-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\r\n  gap: 12px;\r\n  width: 100%;\r\n  max-width: 100%;\r\n  padding: 0;\r\n  justify-content: start;\r\n}\r\n\r\n.template-card-container {\r\n  position: relative;\r\n}\r\n\r\n.template-checkbox {\r\n  width: 100%;\r\n  margin: 0;\r\n}\r\n\r\n:deep(.template-checkbox .ant-checkbox) {\r\n  position: absolute;\r\n  top: 12px;\r\n  right: 12px;\r\n  z-index: 10;\r\n  background: white;\r\n  border-radius: 50%;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.template-card {\r\n  width: 100%;\r\n  max-width: 260px;\r\n  height: 140px;\r\n  border-radius: 8px;\r\n  border: 1px solid #e8e8e8;\r\n  transition: all 0.2s ease;\r\n  cursor: pointer;\r\n  position: relative;\r\n  overflow: hidden;\r\n  background: #ffffff;\r\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.06);\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.template-card:hover {\r\n  border-color: #40a9ff;\r\n  box-shadow: 0 12px 24px rgba(24, 144, 255, 0.25);\r\n  transform: translateY(-6px);\r\n}\r\n\r\n.template-card.selected {\r\n  border-color: #40a9ff;\r\n  background: linear-gradient(135deg, #e6f7ff 0%, #d6f0ff 100%);\r\n  box-shadow: 0 12px 28px rgba(24, 144, 255, 0.35);\r\n  transform: translateY(-6px);\r\n}\r\n\r\n.template-card.selected::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  width: 0;\r\n  height: 0;\r\n  border-style: solid;\r\n  border-width: 0 36px 36px 0;\r\n  border-color: transparent #40a9ff transparent transparent;\r\n}\r\n\r\n.template-card.selected::before {\r\n  content: '✓';\r\n  position: absolute;\r\n  top: 6px;\r\n  right: 6px;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  z-index: 2;\r\n}\r\n\r\n:deep(.template-card .ant-card-head) {\r\n  min-height: auto;\r\n  padding: 12px 16px 8px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n  background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);\r\n}\r\n\r\n:deep(.template-card .ant-card-head-title) {\r\n  padding: 0;\r\n}\r\n\r\n:deep(.template-card .ant-card-body) {\r\n  padding: 12px 16px;\r\n  height: calc(100% - 50px);\r\n  overflow: hidden;\r\n}\r\n\r\n.template-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 6px;\r\n  width: 100%;\r\n  padding: 8px 10px;\r\n  background: #fafafa;\r\n  border-bottom: 1px solid #e8e8e8;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.template-icon {\r\n  font-size: 14px;\r\n  color: #1890ff;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.template-name {\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: #262626;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  flex: 1;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.template-card:hover .template-name {\r\n  color: #40a9ff;\r\n}\r\n\r\n.template-content {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 8px 10px;\r\n  flex: 1;\r\n}\r\n\r\n.template-description {\r\n  font-size: 12px;\r\n  color: #666;\r\n  line-height: 1.4;\r\n  margin-bottom: 8px;\r\n  flex: 1;\r\n  overflow: hidden;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n\r\n.template-stats {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 6px 0;\r\n  padding: 6px 8px;\r\n  background: #f8f9fa;\r\n  border-radius: 4px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.stat-item {\r\n  text-align: center;\r\n  flex: 1;\r\n}\r\n\r\n.stat-label {\r\n  display: block;\r\n  font-size: 10px;\r\n  color: #666;\r\n  margin-bottom: 1px;\r\n  font-weight: 400;\r\n}\r\n\r\n.stat-value {\r\n  display: block;\r\n  font-size: 12px;\r\n  font-weight: 600;\r\n  color: #1890ff;\r\n}\r\n\r\n.template-groups {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 3px;\r\n  align-items: center;\r\n  margin-top: auto;\r\n  padding-top: 4px;\r\n}\r\n\r\n.template-groups .ant-tag {\r\n  font-size: 9px;\r\n  padding: 1px 4px;\r\n  margin: 0;\r\n  border-radius: 8px;\r\n  background: #e6f7ff;\r\n  border: 1px solid #91d5ff;\r\n  color: #1890ff;\r\n  line-height: 1.2;\r\n}\r\n\r\n.template-groups .ant-tag:hover {\r\n  background: linear-gradient(135deg, #e0e0e0 0%, #d0d0d0 100%);\r\n}\r\n\r\n.more-groups {\r\n  font-size: 10px;\r\n  color: #888;\r\n  font-weight: 500;\r\n  background: #f5f5f5;\r\n  padding: 1px 4px;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* 模板抽屉响应式设计 */\r\n@media (max-width: 1400px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 14px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1200px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 12px;\r\n  }\r\n  \r\n  .template-card {\r\n    height: 140px;\r\n  }\r\n  \r\n  .template-header {\r\n    padding: 10px 10px 5px;\r\n  }\r\n  \r\n  .template-name {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .template-icon {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .template-grid {\r\n    grid-template-columns: 1fr;\r\n    gap: 10px;\r\n  }\r\n  \r\n  .template-grid-wrapper {\r\n    padding: 12px;\r\n  }\r\n  \r\n  .template-card {\r\n    height: 120px;\r\n  }\r\n  \r\n  .template-header {\r\n    padding: 8px 8px 4px;\r\n    gap: 6px;\r\n  }\r\n  \r\n  .template-name {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-icon {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-stats {\r\n    margin: 6px 0;\r\n    padding: 6px 0;\r\n  }\r\n  \r\n  .stat-label {\r\n    font-size: 10px;\r\n  }\r\n  \r\n  .stat-value {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .template-groups {\r\n    margin-top: 6px;\r\n    padding: 0 8px;\r\n    gap: 3px;\r\n  }\r\n  \r\n  .template-groups .ant-tag {\r\n    font-size: 9px;\r\n    padding: 1px 4px;\r\n  }\r\n  \r\n  .more-groups {\r\n    font-size: 9px;\r\n    padding: 1px 3px;\r\n  }\r\n  \r\n  .category-header {\r\n    padding: 10px 12px;\r\n  }\r\n  \r\n  .category-title {\r\n    font-size: 13px;\r\n  }\r\n  \r\n  .category-icon {\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 1200px) {\r\n  .template-grid {\r\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .template-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .category-header {\r\n    padding: 12px 16px;\r\n  }\r\n  \r\n  .template-search-section {\r\n    padding: 16px;\r\n  }\r\n}\r\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAmB;;uBAA9BC,mBAAA,CAiFM,OAjFNC,UAiFM,GA9EJC,mBAAA,YAAe,EACfC,YAAA,CAmCEC,MAAA;IAlCCC,UAAU,EAAED,MAAA,CAAAE,MAAM;IAClBC,OAAO,EAAEH,MAAA,CAAAG,OAAO;IAChBC,UAAU,EAAEJ,MAAA,CAAAI,UAAU;IACtBC,eAAe,EAAEL,MAAA,CAAAK,eAAe;IAChCC,aAAa,EAAEN,MAAA,CAAAM,aAAa;IAC5BC,QAAQ,EAAEP,MAAA,CAAAO,QAAQ;IAClBC,MAAM,EAAER,MAAA,CAAAQ,MAAM;IACdC,UAAU,EAAET,MAAA,CAAAU,UAAU,CAACC,KAAK;IAC5BC,WAAW,EAAEZ,MAAA,CAAAU,UAAU,CAACG,MAAM;IAC9BC,cAAc,EAAEd,MAAA,CAAAU,UAAU,CAACK,SAAS;IACpCC,WAAW,EAAEhB,MAAA,CAAAU,UAAU,CAACO,MAAM;IAC9BC,cAAa,EAAElB,MAAA,CAAAkB,cAAc;IAC7BC,WAAU,EAAEnB,MAAA,CAAAmB,WAAW;IACvBC,aAAY,EAAEpB,MAAA,CAAAqB,iBAAiB;IAC/BC,MAAI,EAAEtB,MAAA,CAAAuB,UAAU;IAChBC,MAAI,EAAExB,MAAA,CAAAyB,UAAU;IAChBC,QAAM,EAAE1B,MAAA,CAAA2B,YAAY;IACpBC,MAAI,EAAE5B,MAAA,CAAA6B,UAAU;IAChBC,kBAAiB,EAAE9B,MAAA,CAAA+B,sBAAsB;IACzCC,aAAY,EAAEhC,MAAA,CAAAiC,iBAAiB;IAC/BC,uBAAuB,EAAElC,MAAA,CAAAmC,2BAA2B;IACpDC,gBAAe,EAAEpC,MAAA,CAAAqC,cAAc;IAC/BC,KAAG,EAAEtC,MAAA,CAAAuC,SAAS;IACdC,MAAI,EAAExC,MAAA,CAAAyC,UAAU;IAChBC,QAAM,EAAE1C,MAAA,CAAA2C,YAAY;IACpBC,iBAAiB,EAAE5C,MAAA,CAAA6C,eAAe;IAClCC,gBAAe,EAAE9C,MAAA,CAAA+C,oBAAoB;IACrCC,QAAM,EAAEhD,MAAA,CAAAiD,YAAY;IACpBC,OAAK,EAAElD,MAAA,CAAAmD,WAAW;IAClBC,aAAY,EAAEpD,MAAA,CAAAqD,iBAAiB;IAC/BC,cAAa,EAAEtD,MAAA,CAAAuD,kBAAkB;IACjCC,YAAW,EAAExD,MAAA,CAAAyD,gBAAgB;IAC7BC,aAAa,EAAE1D,MAAA,CAAA0D,aAAa;IAC5BC,uBAAuB,EAAE3D,MAAA,CAAA2D;wOAG5B7D,mBAAA,YAAe,EACfC,YAAA,CAkBEC,MAAA;IAjBC4D,UAAU,EAAE5D,MAAA,CAAA4D,UAAU;IACtBC,kBAAkB,EAAE7D,MAAA,CAAA6D,kBAAkB;IACtCC,gBAAgB,EAAE9D,MAAA,CAAA8D,gBAAgB;IAClCC,cAAc,EAAE/D,MAAA,CAAA+D,cAAc;IAC9BC,sBAAsB,EAAEhE,MAAA,CAAAgE,sBAAsB;IAC9CC,YAAY,EAAEjE,MAAA,CAAAiE,YAAY;IAC1BC,SAAS,EAAElE,MAAA,CAAAkE,SAAS;IACpBC,YAAY,EAAEnE,MAAA,CAAAmE,YAAY;IAC1BC,WAAW,EAAEpE,MAAA,CAAAoE,WAAW;IACxBC,aAAa,EAAErE,MAAA,CAAAqE,aAAa;IAC5BC,aAAa,EAAEtE,MAAA,CAAAsE,aAAa;IAC5BC,kBAAkB,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEzE,MAAA,CAAA6D,kBAAkB;IACtCa,gBAAgB,EAAE1E,MAAA,CAAA2E,gBAAgB;IAClCC,aAAY,EAAE5E,MAAA,CAAA6E,iBAAiB;IAC/BC,gBAAgB,EAAE9E,MAAA,CAAA+E,mBAAmB;IACrCC,gBAAgB,EAAEhF,MAAA,CAAAiF,kBAAkB;IACpCC,iBAAiB,EAAAV,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEzE,MAAA,CAAAgE,sBAAsB;iMAa5ClE,mBAAA,cAAiB,EACjBC,YAAA,CAOEC,MAAA;IANQmF,OAAO,EAAEnF,MAAA,CAAAoF,qBAAqB;4DAArBpF,MAAA,CAAAoF,qBAAqB,GAAAX,MAAA;IAC9BY,mBAAmB,EAAErF,MAAA,CAAAqF,mBAAmB;wEAAnBrF,MAAA,CAAAqF,mBAAmB,GAAAZ,MAAA;IAC/CtE,OAAO,EAAEH,MAAA,CAAAsF,eAAe;IACxB1B,UAAU,EAAE5D,MAAA,CAAA4D,UAAU;IACtB2B,SAAO,EAAEvF,MAAA,CAAAwF,sBAAsB;IAC/BC,OAAK,EAAEzF,MAAA,CAAA0F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}