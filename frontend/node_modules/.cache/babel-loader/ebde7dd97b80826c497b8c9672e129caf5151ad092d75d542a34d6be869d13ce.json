{"ast":null,"code":"import { axiosInstance as api } from './users';\n\n// IP管理API\nexport const ipAPI = {\n  /**\r\n   * 获取IP列表\r\n   * @param {Object} params - 查询参数\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @param {string} params.search - 搜索关键词(IP地址或主机名)\r\n   * @param {string} params.status - IP状态筛选\r\n   * @param {string} params.type - IP类型筛选\r\n   * @returns {Promise} IP列表响应\r\n   */\n  getIPList(params = {}) {\n    return api.get('/ip-management/records/', {\n      params\n    });\n  },\n  /**\r\n   * 获取IP详情\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} IP详情\r\n   */\n  getIPDetail(ipId) {\n    return api.get(`/ip-management/records/${ipId}/`);\n  },\n  /**\r\n   * 创建IP记录\r\n   * @param {Object} ipData - IP数据\r\n   * @param {string} ipData.ipAddress - IP地址\r\n   * @param {string} ipData.hostname - 主机名\r\n   * @param {string} ipData.status - IP状态\r\n   * @param {string} ipData.type - IP类型\r\n   * @param {string} ipData.macAddress - MAC地址\r\n   * @param {string} ipData.device - 关联设备\r\n   * @param {string} ipData.subnet - 所属网段\r\n   * @param {string} ipData.description - 备注\r\n   * @returns {Promise} 创建结果\r\n   */\n  createIP(ipData) {\n    return api.post('/ip-management/records/', ipData);\n  },\n  /**\r\n   * 更新IP记录\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {Object} ipData - 更新的IP数据\r\n   * @returns {Promise} 更新结果\r\n   */\n  updateIP(ipId, ipData) {\n    return api.put(`/ip-management/records/${ipId}/`, ipData);\n  },\n  /**\r\n   * 删除IP记录\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} 删除结果\r\n   */\n  deleteIP(ipId) {\n    return api.delete(`/ip-management/records/${ipId}/`);\n  },\n  /**\r\n   * 检查删除IP的影响范围\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} 删除影响评估结果\r\n   */\n  checkDeletionImpact(ipId) {\n    return api.get(`/ip-management/records/${ipId}/check-deletion-impact/`);\n  },\n  /**\r\n   * 批量删除IP记录\r\n   * @param {Array} ipIds - IP记录ID数组\r\n   * @returns {Promise} 批量删除结果\r\n   */\n  batchDeleteIPs(ipIds) {\n    return api.delete('/ip-management/records/batch/', {\n      data: {\n        ipIds\n      }\n    });\n  },\n  /**\r\n   * 切换单个IP的监控状态\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {boolean} enabled - 是否启用监控\r\n   * @returns {Promise} 切换结果\r\n   */\n  toggleMonitoring(ipId, enabled) {\n    return api.patch(`/ip-management/records/${ipId}/monitoring/`, {\n      enabled\n    });\n  },\n  /**\r\n   * 批量切换监控状态\r\n   * @param {Array} ipIds - IP记录ID数组\r\n   * @param {boolean} enabled - 是否启用监控\r\n   * @returns {Promise} 批量切换结果\r\n   */\n  batchToggleMonitoring(ipIds, enabled) {\n    return api.patch('/ip-management/records/batch-monitoring/', {\n      ipIds,\n      enabled\n    });\n  },\n  /**\r\n   * 获取Zabbix监控模板列表\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {string} search - 搜索关键词\r\n   * @returns {Promise} 模板列表响应\r\n   */\n  getZabbixTemplates(ipId, search = '') {\n    const params = search ? {\n      search\n    } : {};\n    return api.get(`/ip-management/records/${ipId}/zabbix-templates/`, {\n      params\n    });\n  },\n  /**\r\n   * 为IP创建Zabbix监控主机\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {Object} monitoringData - 监控配置数据\r\n   * @param {Array} monitoringData.template_ids - 模板ID列表\r\n   * @param {string} monitoringData.host_name - 主机名称\r\n   * @param {Array} monitoringData.group_ids - 主机组ID列表\r\n   * @returns {Promise} 创建结果\r\n   */\n  createMonitoring(ipId, monitoringData) {\n    return api.post(`/ip-management/records/${ipId}/create-monitoring/`, monitoringData);\n  },\n  /**\r\n   * Ping测试单个IP\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} Ping测试结果\r\n   */\n  pingIP(ipId) {\n    return api.post(`/ip-management/records/${ipId}/ping/`);\n  },\n  /**\r\n   * 批量Ping测试\r\n   * @param {Array} ipIds - IP记录ID数组\r\n   * @returns {Promise} 批量Ping测试结果\r\n   */\n  batchPingIPs(ipIds) {\n    return api.post('/ip-management/records/batch-ping/', {\n      ipIds\n    });\n  },\n  /**\r\n   * 导出IP列表\r\n   * @param {Object} params - 导出参数\r\n   * @returns {Promise} 导出文件\r\n   */\n  exportIPs(params = {}) {\n    return api.get('/ip-management/records/export/', {\n      params,\n      responseType: 'blob'\n    });\n  },\n  /**\r\n   * 获取IP统计信息\r\n   * @returns {Promise} IP统计数据\r\n   */\n  getIPStats() {\n    return api.get('/ip-management/records/statistics/');\n  },\n  /**\r\n   * 创建IP扫描任务（通过后端调用Zabbix）\r\n   * @param {Object} scanData - 扫描配置数据\r\n   * @param {Array} scanData.ipRanges - IP范围数组\r\n   * @param {number} scanData.checkType - 检查类型\r\n   * @param {string} scanData.ports - 端口范围\r\n   * @param {string} scanData.key - 检查键值或SNMP OID\r\n   * @param {string} scanData.snmpCommunity - SNMP社区\r\n   * @param {Object} scanData.snmpv3Config - SNMPv3配置\r\n   * @param {number} scanData.uniqueCheck - 唯一性检查\r\n   * @param {number} scanData.hostSource - 主机名称来源\r\n   * @param {number} scanData.nameSource - 可见名称来源\r\n   * @returns {Promise} 扫描任务创建结果\r\n   */\n  createScanTask(scanData) {\n    return api.post('/ip-management/scan/', scanData);\n  },\n  /**\r\n   * 获取扫描任务状态\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 任务状态\r\n   */\n  getScanTaskStatus(taskId) {\n    return api.get(`/ip-management/scan/${taskId}/status/`);\n  },\n  /**\r\n   * 获取扫描结果\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 扫描结果\r\n   */\n  getScanResults(taskId) {\n    return api.get(`/ip-management/scan/${taskId}/results/`);\n  },\n  /**\r\n   * 取消扫描任务\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 取消结果\r\n   */\n  cancelScanTask(taskId) {\n    return api.delete(`/ip-management/scan/${taskId}/`);\n  },\n  /**\r\n   * 获取扫描历史记录\r\n   * @param {Object} params - 查询参数\r\n   * @returns {Promise} 扫描历史列表\r\n   */\n  getScanHistory(params = {}) {\n    return api.get('/ip-management/scan/history/', {\n      params\n    });\n  },\n  /**\r\n   * 获取扫描任务列表\r\n   * @param {Object} params - 查询参数\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.page_size - 每页数量\r\n   * @param {string} params.status - 任务状态筛选\r\n   * @param {string} params.search - 搜索关键词\r\n   * @param {string} params.created_after - 创建时间起始\r\n   * @param {string} params.created_before - 创建时间结束\r\n   * @returns {Promise} 扫描任务列表\r\n   */\n  getScanTasks(params = {}) {\n    return api.get('/ip-management/scan-tasks/', {\n      params\n    });\n  },\n  /**\r\n   * 获取扫描任务结果\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 扫描任务结果\r\n   */\n  getScanTaskResults(taskId) {\n    return api.get(`/ip-management/scan/${taskId}/results/`);\n  },\n  /**\r\n   * 创建测试数据\r\n   * @returns {Promise} 创建结果\r\n   */\n  createTestData() {\n    return api.post('/ip-management/scan-tasks/create-test-data/');\n  },\n  /**\r\n   * 同步特定扫描任务的Zabbix发现IP到数据库\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 同步结果\r\n   */\n  syncTaskZabbixIPs(taskId) {\n    return api.post(`/ip-management/scan-tasks/${taskId}/sync-zabbix-ips/`);\n  },\n  /**\r\n   * 获取异步任务处理状态\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 任务状态\r\n   */\n  getAsyncTaskStatus(taskId) {\n    return api.get(`/ip-management/scan-tasks/${taskId}/async-status/`);\n  },\n  /**\r\n   * 停止异步任务处理\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 停止结果\r\n   */\n  stopAsyncTask(taskId) {\n    return api.post(`/ip-management/scan-tasks/${taskId}/stop-async/`);\n  },\n  /**\r\n   * 删除扫描任务记录\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 删除结果\r\n   */\n  deleteScanTask(taskId) {\n    return api.delete(`/ip-management/scan-tasks/${taskId}/`);\n  },\n  /**\r\n   * 强制启用所有禁用的Zabbix发现规则\r\n   * @returns {Promise} 启用结果\r\n   */\n  forceEnableZabbixRules() {\n    return api.post('/ip-management/zabbix/management/');\n  },\n  /**\r\n   * 获取Zabbix发现规则状态信息\r\n   * @returns {Promise} 规则状态信息\r\n   */\n  getZabbixRulesStatus() {\n    return api.get('/ip-management/zabbix/management/');\n  },\n  /**\r\n   * 测试Zabbix连接状态\r\n   * @returns {Promise} 连接状态和诊断信息\r\n   */\n  testZabbixConnection() {\n    return api.get('/ip-management/zabbix/management/');\n  }\n};\n\n// 网络扫描API\nexport const networkAPI = {\n  /**\r\n   * 执行网络扫描\r\n   * @param {Object} scanData - 扫描配置\r\n   * @param {Array} scanData.ipRanges - IP范围\r\n   * @param {Array} scanData.ports - 端口列表\r\n   * @param {string} scanData.scanType - 扫描类型\r\n   * @param {number} scanData.timeout - 超时时间\r\n   * @returns {Promise} 扫描任务ID\r\n   */\n  startNetworkScan(scanData) {\n    return api.post('/network/scan/', scanData);\n  },\n  /**\r\n   * 获取扫描任务状态\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 任务状态\r\n   */\n  getScanStatus(taskId) {\n    return api.get(`/network/scan/${taskId}/status/`);\n  },\n  /**\r\n   * 获取扫描结果\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 扫描结果\r\n   */\n  getScanResults(taskId) {\n    return api.get(`/network/scan/${taskId}/results/`);\n  },\n  /**\r\n   * 取消扫描任务\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 取消结果\r\n   */\n  cancelScan(taskId) {\n    return api.delete(`/network/scan/${taskId}/`);\n  },\n  /**\r\n   * 获取扫描历史\r\n   * @param {Object} params - 查询参数\r\n   * @returns {Promise} 扫描历史列表\r\n   */\n  getScanHistory(params = {}) {\n    return api.get('/network/scan/history/', {\n      params\n    });\n  },\n  /**\r\n   * 删除扫描历史\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 删除结果\r\n   */\n  deleteScanHistory(taskId) {\n    return api.delete(`/network/scan/history/${taskId}/`);\n  }\n};\n\n// 统一导出\nexport default {\n  ipAPI,\n  networkAPI\n};","map":{"version":3,"names":["axiosInstance","api","ipAPI","getIPList","params","get","getIPDetail","ipId","createIP","ipData","post","updateIP","put","deleteIP","delete","checkDeletionImpact","batchDeleteIPs","ipIds","data","toggleMonitoring","enabled","patch","batchToggleMonitoring","getZabbixTemplates","search","createMonitoring","monitoringData","pingIP","batchPingIPs","exportIPs","responseType","getIPStats","createScanTask","scanData","getScanTaskStatus","taskId","getScanResults","cancelScanTask","getScanHistory","getScanTasks","getScanTaskResults","createTestData","syncTaskZabbixIPs","getAsyncTaskStatus","stopAsyncTask","deleteScanTask","forceEnableZabbixRules","getZabbixRulesStatus","testZabbixConnection","networkAPI","startNetworkScan","getScanStatus","cancelScan","deleteScanHistory"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/api/ipManagement.js"],"sourcesContent":["import { axiosInstance as api } from './users';\r\n\r\n// IP管理API\r\nexport const ipAPI = {\r\n  /**\r\n   * 获取IP列表\r\n   * @param {Object} params - 查询参数\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.pageSize - 每页数量\r\n   * @param {string} params.search - 搜索关键词(IP地址或主机名)\r\n   * @param {string} params.status - IP状态筛选\r\n   * @param {string} params.type - IP类型筛选\r\n   * @returns {Promise} IP列表响应\r\n   */\r\n  getIPList(params = {}) {\r\n    return api.get('/ip-management/records/', { params });\r\n  },\r\n\r\n  /**\r\n   * 获取IP详情\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} IP详情\r\n   */\r\n  getIPDetail(ipId) {\r\n    return api.get(`/ip-management/records/${ipId}/`);\r\n  },\r\n\r\n  /**\r\n   * 创建IP记录\r\n   * @param {Object} ipData - IP数据\r\n   * @param {string} ipData.ipAddress - IP地址\r\n   * @param {string} ipData.hostname - 主机名\r\n   * @param {string} ipData.status - IP状态\r\n   * @param {string} ipData.type - IP类型\r\n   * @param {string} ipData.macAddress - MAC地址\r\n   * @param {string} ipData.device - 关联设备\r\n   * @param {string} ipData.subnet - 所属网段\r\n   * @param {string} ipData.description - 备注\r\n   * @returns {Promise} 创建结果\r\n   */\r\n  createIP(ipData) {\r\n    return api.post('/ip-management/records/', ipData);\r\n  },\r\n\r\n  /**\r\n   * 更新IP记录\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {Object} ipData - 更新的IP数据\r\n   * @returns {Promise} 更新结果\r\n   */\r\n  updateIP(ipId, ipData) {\r\n    return api.put(`/ip-management/records/${ipId}/`, ipData);\r\n  },\r\n\r\n  /**\r\n   * 删除IP记录\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  deleteIP(ipId) {\r\n    return api.delete(`/ip-management/records/${ipId}/`);\r\n  },\r\n\r\n  /**\r\n   * 检查删除IP的影响范围\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} 删除影响评估结果\r\n   */\r\n  checkDeletionImpact(ipId) {\r\n    return api.get(`/ip-management/records/${ipId}/check-deletion-impact/`);\r\n  },\r\n\r\n  /**\r\n   * 批量删除IP记录\r\n   * @param {Array} ipIds - IP记录ID数组\r\n   * @returns {Promise} 批量删除结果\r\n   */\r\n  batchDeleteIPs(ipIds) {\r\n    return api.delete('/ip-management/records/batch/', { data: { ipIds } });\r\n  },\r\n\r\n  /**\r\n   * 切换单个IP的监控状态\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {boolean} enabled - 是否启用监控\r\n   * @returns {Promise} 切换结果\r\n   */\r\n  toggleMonitoring(ipId, enabled) {\r\n    return api.patch(`/ip-management/records/${ipId}/monitoring/`, { enabled });\r\n  },\r\n\r\n  /**\r\n   * 批量切换监控状态\r\n   * @param {Array} ipIds - IP记录ID数组\r\n   * @param {boolean} enabled - 是否启用监控\r\n   * @returns {Promise} 批量切换结果\r\n   */\r\n  batchToggleMonitoring(ipIds, enabled) {\r\n    return api.patch('/ip-management/records/batch-monitoring/', { ipIds, enabled });\r\n  },\r\n\r\n  /**\r\n   * 获取Zabbix监控模板列表\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {string} search - 搜索关键词\r\n   * @returns {Promise} 模板列表响应\r\n   */\r\n  getZabbixTemplates(ipId, search = '') {\r\n    const params = search ? { search } : {};\r\n    return api.get(`/ip-management/records/${ipId}/zabbix-templates/`, { params });\r\n  },\r\n\r\n  /**\r\n   * 为IP创建Zabbix监控主机\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @param {Object} monitoringData - 监控配置数据\r\n   * @param {Array} monitoringData.template_ids - 模板ID列表\r\n   * @param {string} monitoringData.host_name - 主机名称\r\n   * @param {Array} monitoringData.group_ids - 主机组ID列表\r\n   * @returns {Promise} 创建结果\r\n   */\r\n  createMonitoring(ipId, monitoringData) {\r\n    return api.post(`/ip-management/records/${ipId}/create-monitoring/`, monitoringData);\r\n  },\r\n\r\n  /**\r\n   * Ping测试单个IP\r\n   * @param {number|string} ipId - IP记录ID\r\n   * @returns {Promise} Ping测试结果\r\n   */\r\n  pingIP(ipId) {\r\n    return api.post(`/ip-management/records/${ipId}/ping/`);\r\n  },\r\n\r\n  /**\r\n   * 批量Ping测试\r\n   * @param {Array} ipIds - IP记录ID数组\r\n   * @returns {Promise} 批量Ping测试结果\r\n   */\r\n  batchPingIPs(ipIds) {\r\n    return api.post('/ip-management/records/batch-ping/', { ipIds });\r\n  },\r\n\r\n  /**\r\n   * 导出IP列表\r\n   * @param {Object} params - 导出参数\r\n   * @returns {Promise} 导出文件\r\n   */\r\n  exportIPs(params = {}) {\r\n    return api.get('/ip-management/records/export/', { \r\n      params,\r\n      responseType: 'blob'\r\n    });\r\n  },\r\n\r\n  /**\r\n   * 获取IP统计信息\r\n   * @returns {Promise} IP统计数据\r\n   */\r\n  getIPStats() {\r\n    return api.get('/ip-management/records/statistics/');\r\n  },\r\n\r\n  /**\r\n   * 创建IP扫描任务（通过后端调用Zabbix）\r\n   * @param {Object} scanData - 扫描配置数据\r\n   * @param {Array} scanData.ipRanges - IP范围数组\r\n   * @param {number} scanData.checkType - 检查类型\r\n   * @param {string} scanData.ports - 端口范围\r\n   * @param {string} scanData.key - 检查键值或SNMP OID\r\n   * @param {string} scanData.snmpCommunity - SNMP社区\r\n   * @param {Object} scanData.snmpv3Config - SNMPv3配置\r\n   * @param {number} scanData.uniqueCheck - 唯一性检查\r\n   * @param {number} scanData.hostSource - 主机名称来源\r\n   * @param {number} scanData.nameSource - 可见名称来源\r\n   * @returns {Promise} 扫描任务创建结果\r\n   */\r\n  createScanTask(scanData) {\r\n    return api.post('/ip-management/scan/', scanData);\r\n  },\r\n\r\n  /**\r\n   * 获取扫描任务状态\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 任务状态\r\n   */\r\n  getScanTaskStatus(taskId) {\r\n    return api.get(`/ip-management/scan/${taskId}/status/`);\r\n  },\r\n\r\n  /**\r\n   * 获取扫描结果\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 扫描结果\r\n   */\r\n  getScanResults(taskId) {\r\n    return api.get(`/ip-management/scan/${taskId}/results/`);\r\n  },\r\n\r\n  /**\r\n   * 取消扫描任务\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 取消结果\r\n   */\r\n  cancelScanTask(taskId) {\r\n    return api.delete(`/ip-management/scan/${taskId}/`);\r\n  },\r\n\r\n  /**\r\n   * 获取扫描历史记录\r\n   * @param {Object} params - 查询参数\r\n   * @returns {Promise} 扫描历史列表\r\n   */\r\n  getScanHistory(params = {}) {\r\n    return api.get('/ip-management/scan/history/', { params });\r\n  },\r\n\r\n  /**\r\n   * 获取扫描任务列表\r\n   * @param {Object} params - 查询参数\r\n   * @param {number} params.page - 页码\r\n   * @param {number} params.page_size - 每页数量\r\n   * @param {string} params.status - 任务状态筛选\r\n   * @param {string} params.search - 搜索关键词\r\n   * @param {string} params.created_after - 创建时间起始\r\n   * @param {string} params.created_before - 创建时间结束\r\n   * @returns {Promise} 扫描任务列表\r\n   */\r\n  getScanTasks(params = {}) {\r\n    return api.get('/ip-management/scan-tasks/', { params });\r\n  },\r\n\r\n  /**\r\n   * 获取扫描任务结果\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 扫描任务结果\r\n   */\r\n  getScanTaskResults(taskId) {\r\n    return api.get(`/ip-management/scan/${taskId}/results/`);\r\n  },\r\n\r\n  /**\r\n   * 创建测试数据\r\n   * @returns {Promise} 创建结果\r\n   */\r\n  createTestData() {\r\n    return api.post('/ip-management/scan-tasks/create-test-data/');\r\n  },\r\n\r\n  /**\r\n   * 同步特定扫描任务的Zabbix发现IP到数据库\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 同步结果\r\n   */\r\n  syncTaskZabbixIPs(taskId) {\r\n    return api.post(`/ip-management/scan-tasks/${taskId}/sync-zabbix-ips/`);\r\n  },\r\n\r\n  /**\r\n   * 获取异步任务处理状态\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 任务状态\r\n   */\r\n  getAsyncTaskStatus(taskId) {\r\n    return api.get(`/ip-management/scan-tasks/${taskId}/async-status/`);\r\n  },\r\n\r\n  /**\r\n   * 停止异步任务处理\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 停止结果\r\n   */\r\n  stopAsyncTask(taskId) {\r\n    return api.post(`/ip-management/scan-tasks/${taskId}/stop-async/`);\r\n  },\r\n\r\n  /**\r\n   * 删除扫描任务记录\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  deleteScanTask(taskId) {\r\n    return api.delete(`/ip-management/scan-tasks/${taskId}/`);\r\n  },\r\n\r\n  /**\r\n   * 强制启用所有禁用的Zabbix发现规则\r\n   * @returns {Promise} 启用结果\r\n   */\r\n  forceEnableZabbixRules() {\r\n    return api.post('/ip-management/zabbix/management/');\r\n  },\r\n\r\n  /**\r\n   * 获取Zabbix发现规则状态信息\r\n   * @returns {Promise} 规则状态信息\r\n   */\r\n  getZabbixRulesStatus() {\r\n    return api.get('/ip-management/zabbix/management/');\r\n  },\r\n\r\n  /**\r\n   * 测试Zabbix连接状态\r\n   * @returns {Promise} 连接状态和诊断信息\r\n   */\r\n  testZabbixConnection() {\r\n    return api.get('/ip-management/zabbix/management/');\r\n  }\r\n};\r\n\r\n\r\n\r\n// 网络扫描API\r\nexport const networkAPI = {\r\n  /**\r\n   * 执行网络扫描\r\n   * @param {Object} scanData - 扫描配置\r\n   * @param {Array} scanData.ipRanges - IP范围\r\n   * @param {Array} scanData.ports - 端口列表\r\n   * @param {string} scanData.scanType - 扫描类型\r\n   * @param {number} scanData.timeout - 超时时间\r\n   * @returns {Promise} 扫描任务ID\r\n   */\r\n  startNetworkScan(scanData) {\r\n    return api.post('/network/scan/', scanData);\r\n  },\r\n\r\n  /**\r\n   * 获取扫描任务状态\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 任务状态\r\n   */\r\n  getScanStatus(taskId) {\r\n    return api.get(`/network/scan/${taskId}/status/`);\r\n  },\r\n\r\n  /**\r\n   * 获取扫描结果\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 扫描结果\r\n   */\r\n  getScanResults(taskId) {\r\n    return api.get(`/network/scan/${taskId}/results/`);\r\n  },\r\n\r\n  /**\r\n   * 取消扫描任务\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 取消结果\r\n   */\r\n  cancelScan(taskId) {\r\n    return api.delete(`/network/scan/${taskId}/`);\r\n  },\r\n\r\n  /**\r\n   * 获取扫描历史\r\n   * @param {Object} params - 查询参数\r\n   * @returns {Promise} 扫描历史列表\r\n   */\r\n  getScanHistory(params = {}) {\r\n    return api.get('/network/scan/history/', { params });\r\n  },\r\n\r\n  /**\r\n   * 删除扫描历史\r\n   * @param {string} taskId - 任务ID\r\n   * @returns {Promise} 删除结果\r\n   */\r\n  deleteScanHistory(taskId) {\r\n    return api.delete(`/network/scan/history/${taskId}/`);\r\n  }\r\n};\r\n\r\n// 统一导出\r\nexport default {\r\n  ipAPI,\r\n  networkAPI\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}