{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createVNode as _createVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveDynamicComponent as _resolveDynamicComponent, createBlock as _createBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"admin-users admin-page\"\n};\nconst _hoisted_2 = {\n  class: \"page-header\"\n};\nconst _hoisted_3 = {\n  class: \"header-content\"\n};\nconst _hoisted_4 = {\n  class: \"page-title\"\n};\nconst _hoisted_5 = {\n  class: \"header-actions\"\n};\nconst _hoisted_6 = {\n  class: \"users-layout admin-layout\"\n};\nconst _hoisted_7 = {\n  class: \"users-menu admin-menu\"\n};\nconst _hoisted_8 = {\n  class: \"menu-list\"\n};\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"menu-text\"\n};\nconst _hoisted_11 = {\n  class: \"menu-stats\"\n};\nconst _hoisted_12 = {\n  class: \"stats-list\"\n};\nconst _hoisted_13 = {\n  class: \"stat-item\"\n};\nconst _hoisted_14 = {\n  class: \"stat-value\"\n};\nconst _hoisted_15 = {\n  class: \"stat-item\"\n};\nconst _hoisted_16 = {\n  class: \"stat-value\"\n};\nconst _hoisted_17 = {\n  class: \"stat-item\"\n};\nconst _hoisted_18 = {\n  class: \"stat-value\"\n};\nconst _hoisted_19 = {\n  class: \"users-content admin-content\"\n};\nconst _hoisted_20 = {\n  key: 0\n};\nconst _hoisted_21 = {\n  key: 1,\n  class: \"text-gray\"\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"batch-actions\"\n};\nconst _hoisted_23 = {\n  class: \"switch-description\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_button = _resolveComponent(\"a-button\");\n  const _component_a_tooltip = _resolveComponent(\"a-tooltip\");\n  const _component_a_space = _resolveComponent(\"a-space\");\n  const _component_a_badge = _resolveComponent(\"a-badge\");\n  const _component_a_input_search = _resolveComponent(\"a-input-search\");\n  const _component_a_select_option = _resolveComponent(\"a-select-option\");\n  const _component_a_select = _resolveComponent(\"a-select\");\n  const _component_a_avatar = _resolveComponent(\"a-avatar\");\n  const _component_a_tag = _resolveComponent(\"a-tag\");\n  const _component_a_popconfirm = _resolveComponent(\"a-popconfirm\");\n  const _component_a_table = _resolveComponent(\"a-table\");\n  const _component_a_card = _resolveComponent(\"a-card\");\n  const _component_a_input = _resolveComponent(\"a-input\");\n  const _component_a_form_item = _resolveComponent(\"a-form-item\");\n  const _component_a_col = _resolveComponent(\"a-col\");\n  const _component_a_row = _resolveComponent(\"a-row\");\n  const _component_a_input_password = _resolveComponent(\"a-input-password\");\n  const _component_a_switch = _resolveComponent(\"a-switch\");\n  const _component_a_form = _resolveComponent(\"a-form\");\n  const _component_a_modal = _resolveComponent(\"a-modal\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 页面标题区域 \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"h1\", _hoisted_4, [_createVNode($setup[\"TeamOutlined\"]), _cache[11] || (_cache[11] = _createTextVNode(\" 用户管理 \", -1 /* CACHED */))]), _cache[12] || (_cache[12] = _createElementVNode(\"p\", {\n    class: \"page-description\"\n  }, \"管理系统用户和权限\", -1 /* CACHED */))]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_a_space, null, {\n    default: _withCtx(() => [_createVNode(_component_a_tooltip, {\n      title: \"导出用户列表为Excel文件\",\n      placement: \"bottom\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_button, {\n        onClick: $setup.exportUsers\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"ExportOutlined\"]), _cache[13] || (_cache[13] = _createTextVNode(\" 导出用户 \", -1 /* CACHED */))]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_a_tooltip, {\n      title: \"创建新的用户账户\",\n      placement: \"bottom\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_button, {\n        type: \"primary\",\n        onClick: $setup.showAddModal\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"PlusOutlined\"]), _cache[14] || (_cache[14] = _createTextVNode(\" 新建用户 \", -1 /* CACHED */))]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })])]), _createCommentVNode(\" 用户管理布局 \"), _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" 左侧菜单 \"), _createElementVNode(\"div\", _hoisted_7, [_cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n    class: \"menu-title\"\n  }, \"用户分类\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_8, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.categoryList, category => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: category.key,\n      class: _normalizeClass(['menu-item', {\n        'active': $setup.activeCategory === category.key\n      }]),\n      onClick: $event => $setup.handleCategoryChange(category.key)\n    }, [(_openBlock(), _createBlock(_resolveDynamicComponent(category.icon), {\n      class: \"menu-icon\"\n    })), _createElementVNode(\"span\", _hoisted_10, _toDisplayString(category.name), 1 /* TEXT */), category.count ? (_openBlock(), _createBlock(_component_a_badge, {\n      key: 0,\n      count: category.count,\n      class: \"menu-badge\"\n    }, null, 8 /* PROPS */, [\"count\"])) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_9);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 统计信息 \"), _createElementVNode(\"div\", _hoisted_11, [_cache[18] || (_cache[18] = _createElementVNode(\"div\", {\n    class: \"stats-title\"\n  }, \"用户统计\", -1 /* CACHED */)), _createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_cache[15] || (_cache[15] = _createElementVNode(\"span\", {\n    class: \"stat-label\"\n  }, \"总用户数\", -1 /* CACHED */)), _createElementVNode(\"span\", _hoisted_14, _toDisplayString($setup.userStats.total), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_15, [_cache[16] || (_cache[16] = _createElementVNode(\"span\", {\n    class: \"stat-label\"\n  }, \"活跃用户\", -1 /* CACHED */)), _createElementVNode(\"span\", _hoisted_16, _toDisplayString($setup.userStats.active), 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_17, [_cache[17] || (_cache[17] = _createElementVNode(\"span\", {\n    class: \"stat-label\"\n  }, \"管理员\", -1 /* CACHED */)), _createElementVNode(\"span\", _hoisted_18, _toDisplayString($setup.userStats.admin), 1 /* TEXT */)])])])]), _createCommentVNode(\" 右侧内容 \"), _createElementVNode(\"div\", _hoisted_19, [_createVNode(_component_a_card, null, {\n    title: _withCtx(() => [_createTextVNode(_toDisplayString($setup.getCurrentCategoryName()), 1 /* TEXT */)]),\n    extra: _withCtx(() => [_createVNode(_component_a_space, null, {\n      default: _withCtx(() => [_createVNode(_component_a_input_search, {\n        value: $setup.searchText,\n        \"onUpdate:value\": _cache[0] || (_cache[0] = $event => $setup.searchText = $event),\n        placeholder: \"搜索用户...\",\n        style: {\n          \"width\": \"200px\"\n        },\n        onSearch: $setup.handleSearch,\n        onChange: $setup.handleSearch\n      }, null, 8 /* PROPS */, [\"value\"]), _createVNode(_component_a_select, {\n        value: $setup.roleFilter,\n        \"onUpdate:value\": _cache[1] || (_cache[1] = $event => $setup.roleFilter = $event),\n        placeholder: \"角色筛选\",\n        style: {\n          \"width\": \"120px\"\n        },\n        onChange: $setup.handleRoleFilter\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_select_option, {\n          value: \"\"\n        }, {\n          default: _withCtx(() => [...(_cache[20] || (_cache[20] = [_createTextVNode(\"全部角色\", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_a_select_option, {\n          value: \"admin\"\n        }, {\n          default: _withCtx(() => [...(_cache[21] || (_cache[21] = [_createTextVNode(\"管理员\", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_a_select_option, {\n          value: \"operator\"\n        }, {\n          default: _withCtx(() => [...(_cache[22] || (_cache[22] = [_createTextVNode(\"操作员\", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_a_select_option, {\n          value: \"viewer\"\n        }, {\n          default: _withCtx(() => [...(_cache[23] || (_cache[23] = [_createTextVNode(\"观察者\", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"value\"]), _createVNode(_component_a_tooltip, {\n        title: \"刷新用户列表数据\",\n        placement: \"bottom\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_button, {\n          onClick: $setup.refreshData\n        }, {\n          default: _withCtx(() => [_createVNode($setup[\"ReloadOutlined\"])]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    default: _withCtx(() => [_createVNode(_component_a_table, {\n      columns: $setup.tableColumns,\n      \"data-source\": $setup.filteredUsers,\n      pagination: $setup.pagination,\n      loading: $setup.loading,\n      \"row-selection\": $setup.rowSelection,\n      \"row-key\": \"id\",\n      size: \"middle\"\n    }, {\n      bodyCell: _withCtx(({\n        column,\n        record\n      }) => [column.key === 'avatar' ? (_openBlock(), _createBlock(_component_a_avatar, {\n        key: 0,\n        style: _normalizeStyle({\n          background: $setup.getAvatarColor(record.role)\n        })\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(record.realName?.charAt(0) || record.username?.charAt(0)), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"style\"])) : column.key === 'role' ? (_openBlock(), _createBlock(_component_a_tag, {\n        key: 1,\n        color: $setup.getRoleColor(record.role)\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.getRoleText(record.role)), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"color\"])) : column.key === 'onlineStatus' ? (_openBlock(), _createBlock(_component_a_space, {\n        key: 2\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_badge, {\n          status: record.isOnline ? 'processing' : 'default',\n          text: record.isOnline ? '在线' : '离线'\n        }, null, 8 /* PROPS */, [\"status\", \"text\"]), record.onlineSessions && record.onlineSessions.length > 0 ? (_openBlock(), _createBlock(_component_a_tooltip, {\n          key: 0,\n          placement: \"top\"\n        }, {\n          title: _withCtx(() => [_createElementVNode(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(record.onlineSessions, session => {\n            return _openBlock(), _createElementBlock(\"div\", {\n              key: session.id\n            }, [_createTextVNode(\" IP: \" + _toDisplayString(session.ip_address), 1 /* TEXT */), _cache[24] || (_cache[24] = _createElementVNode(\"br\", null, null, -1 /* CACHED */)), _createTextVNode(\" 设备: \" + _toDisplayString(session.device_info), 1 /* TEXT */), _cache[25] || (_cache[25] = _createElementVNode(\"br\", null, null, -1 /* CACHED */)), _createTextVNode(\" 登录时间: \" + _toDisplayString($setup.formatDate(session.login_time)), 1 /* TEXT */)]);\n          }), 128 /* KEYED_FRAGMENT */))])]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true)]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */)) : column.key === 'status' ? (_openBlock(), _createBlock(_component_a_tag, {\n        key: 3,\n        color: record.isActive ? 'green' : 'red'\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(record.isActive ? '启用' : '禁用'), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"color\"])) : column.key === 'lastLogin' ? (_openBlock(), _createElementBlock(_Fragment, {\n        key: 4\n      }, [record.lastLogin ? (_openBlock(), _createElementBlock(\"span\", _hoisted_20, _toDisplayString($setup.formatDate(record.lastLogin)), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_21, \"从未登录\"))], 64 /* STABLE_FRAGMENT */)) : column.key === 'actions' ? (_openBlock(), _createBlock(_component_a_space, {\n        key: 5\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_tooltip, {\n          title: \"编辑用户信息\",\n          placement: \"top\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_button, {\n            type: \"link\",\n            size: \"small\",\n            onClick: $event => $setup.editUser(record)\n          }, {\n            default: _withCtx(() => [_createVNode($setup[\"EditOutlined\"])]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_a_tooltip, {\n          title: record.isActive ? '禁用此用户' : '启用此用户',\n          placement: \"top\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_button, {\n            type: \"link\",\n            size: \"small\",\n            onClick: $event => $setup.toggleUserStatus(record)\n          }, {\n            default: _withCtx(() => [!record.isActive ? (_openBlock(), _createBlock($setup[\"CheckCircleOutlined\"], {\n              key: 0\n            })) : (_openBlock(), _createBlock($setup[\"StopOutlined\"], {\n              key: 1\n            }))]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"title\"]), record.isOnline && record.username !== $setup.currentUsername ? (_openBlock(), _createBlock(_component_a_tooltip, {\n          key: 0,\n          title: \"踢出用户（关闭所有会话）\",\n          placement: \"top\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_popconfirm, {\n            title: `确定要踢出用户 '${record.username}' 吗？这将关闭其所有在线会话。`,\n            onConfirm: $event => $setup.kickOutUser(record),\n            placement: \"topRight\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_button, {\n              type: \"link\",\n              size: \"small\",\n              danger: \"\"\n            }, {\n              default: _withCtx(() => [_createVNode($setup[\"LogoutOutlined\"])]),\n              _: 1 /* STABLE */\n            })]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"title\", \"onConfirm\"])]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true), _createVNode(_component_a_tooltip, {\n          title: \"重置用户密码\",\n          placement: \"top\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_button, {\n            type: \"link\",\n            size: \"small\",\n            onClick: $event => $setup.resetPassword(record)\n          }, {\n            default: _withCtx(() => [_createVNode($setup[\"KeyOutlined\"])]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_a_popconfirm, {\n          title: $setup.getDeleteConfirmTitle(record),\n          onConfirm: $event => $setup.deleteUser(record),\n          placement: \"topRight\",\n          \"ok-type\": record.username === $setup.currentUsername ? 'danger' : 'primary'\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_tooltip, {\n            title: \"删除此用户\",\n            placement: \"top\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_button, {\n              type: \"link\",\n              size: \"small\",\n              danger: \"\"\n            }, {\n              default: _withCtx(() => [_createVNode($setup[\"DeleteOutlined\"])]),\n              _: 1 /* STABLE */\n            })]),\n            _: 1 /* STABLE */\n          })]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"title\", \"onConfirm\", \"ok-type\"])]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true)]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data-source\", \"pagination\", \"loading\"]), $setup.selectedRowKeys.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [_createVNode(_component_a_space, null, {\n      default: _withCtx(() => [_createElementVNode(\"span\", null, \"已选择 \" + _toDisplayString($setup.selectedRowKeys.length) + \" 项\", 1 /* TEXT */), _createVNode(_component_a_tooltip, {\n        title: \"批量启用选中的用户\",\n        placement: \"top\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_button, {\n          onClick: $setup.batchEnable\n        }, {\n          default: _withCtx(() => [_createVNode($setup[\"CheckOutlined\"]), _cache[26] || (_cache[26] = _createTextVNode(\" 批量启用 \", -1 /* CACHED */))]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_a_tooltip, {\n        title: \"批量禁用选中的用户\",\n        placement: \"top\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_button, {\n          onClick: $setup.batchDisable\n        }, {\n          default: _withCtx(() => [_createVNode($setup[\"CloseOutlined\"]), _cache[27] || (_cache[27] = _createTextVNode(\" 批量禁用 \", -1 /* CACHED */))]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_a_popconfirm, {\n        title: $setup.getBatchDeleteConfirmTitle(),\n        onConfirm: $setup.batchDelete,\n        placement: \"topRight\",\n        \"ok-type\": $setup.getBatchDeleteConfirmTitle().includes('警告') ? 'danger' : 'primary'\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_tooltip, {\n          title: \"批量删除选中的用户\",\n          placement: \"top\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_button, {\n            danger: \"\"\n          }, {\n            default: _withCtx(() => [_createVNode($setup[\"DeleteOutlined\"]), _cache[28] || (_cache[28] = _createTextVNode(\" 批量删除 \", -1 /* CACHED */))]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"title\", \"ok-type\"])]),\n      _: 1 /* STABLE */\n    })])) : _createCommentVNode(\"v-if\", true)]),\n    _: 1 /* STABLE */\n  })])]), _createCommentVNode(\" 添加/编辑用户弹窗 \"), _createVNode(_component_a_modal, {\n    open: $setup.modalVisible,\n    \"onUpdate:open\": _cache[10] || (_cache[10] = $event => $setup.modalVisible = $event),\n    title: $setup.isEditing ? '编辑用户' : '新建用户',\n    width: \"600px\",\n    onOk: $setup.handleSubmit,\n    onCancel: $setup.handleCancel\n  }, {\n    default: _withCtx(() => [_createVNode(_component_a_form, {\n      ref: \"formRef\",\n      model: $setup.formData,\n      rules: $setup.formRules,\n      layout: \"vertical\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_a_row, {\n        gutter: 16\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_form_item, {\n            label: \"用户名\",\n            name: \"username\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_input, {\n              value: $setup.formData.username,\n              \"onUpdate:value\": _cache[2] || (_cache[2] = $event => $setup.formData.username = $event),\n              placeholder: \"输入用户名\",\n              disabled: $setup.isEditing\n            }, null, 8 /* PROPS */, [\"value\", \"disabled\"])]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_a_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_form_item, {\n            label: \"真实姓名\",\n            name: \"realName\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_input, {\n              value: $setup.formData.realName,\n              \"onUpdate:value\": _cache[3] || (_cache[3] = $event => $setup.formData.realName = $event),\n              placeholder: \"输入真实姓名\"\n            }, null, 8 /* PROPS */, [\"value\"])]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_a_row, {\n        gutter: 16\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_form_item, {\n            label: \"邮箱\",\n            name: \"email\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_input, {\n              value: $setup.formData.email,\n              \"onUpdate:value\": _cache[4] || (_cache[4] = $event => $setup.formData.email = $event),\n              placeholder: \"输入邮箱地址\"\n            }, null, 8 /* PROPS */, [\"value\"])]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_a_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_form_item, {\n            label: \"电话\",\n            name: \"phone\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_input, {\n              value: $setup.formData.phone,\n              \"onUpdate:value\": _cache[5] || (_cache[5] = $event => $setup.formData.phone = $event),\n              placeholder: \"输入电话号码\"\n            }, null, 8 /* PROPS */, [\"value\"])]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_a_row, {\n        gutter: 16\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_form_item, {\n            label: \"角色\",\n            name: \"role\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_select, {\n              value: $setup.formData.role,\n              \"onUpdate:value\": _cache[6] || (_cache[6] = $event => $setup.formData.role = $event),\n              placeholder: \"选择用户角色\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_a_select_option, {\n                value: \"admin\"\n              }, {\n                default: _withCtx(() => [...(_cache[29] || (_cache[29] = [_createTextVNode(\"管理员\", -1 /* CACHED */)]))]),\n                _: 1 /* STABLE */\n              }), _createVNode(_component_a_select_option, {\n                value: \"operator\"\n              }, {\n                default: _withCtx(() => [...(_cache[30] || (_cache[30] = [_createTextVNode(\"操作员\", -1 /* CACHED */)]))]),\n                _: 1 /* STABLE */\n              }), _createVNode(_component_a_select_option, {\n                value: \"viewer\"\n              }, {\n                default: _withCtx(() => [...(_cache[31] || (_cache[31] = [_createTextVNode(\"观察者\", -1 /* CACHED */)]))]),\n                _: 1 /* STABLE */\n              })]),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"value\"])]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_a_col, {\n          span: 12\n        }, {\n          default: _withCtx(() => [_createVNode(_component_a_form_item, {\n            label: \"部门\",\n            name: \"department\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_a_input, {\n              value: $setup.formData.department,\n              \"onUpdate:value\": _cache[7] || (_cache[7] = $event => $setup.formData.department = $event),\n              placeholder: \"输入所属部门\"\n            }, null, 8 /* PROPS */, [\"value\"])]),\n            _: 1 /* STABLE */\n          })]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }), !$setup.isEditing ? (_openBlock(), _createBlock(_component_a_form_item, {\n        key: 0,\n        label: \"密码\",\n        name: \"password\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_input_password, {\n          value: $setup.formData.password,\n          \"onUpdate:value\": _cache[8] || (_cache[8] = $event => $setup.formData.password = $event),\n          placeholder: \"输入密码\"\n        }, null, 8 /* PROPS */, [\"value\"])]),\n        _: 1 /* STABLE */\n      })) : _createCommentVNode(\"v-if\", true), _createVNode(_component_a_form_item, {\n        label: \"状态\",\n        name: \"isActive\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_a_switch, {\n          checked: $setup.formData.isActive,\n          \"onUpdate:checked\": _cache[9] || (_cache[9] = $event => $setup.formData.isActive = $event)\n        }, null, 8 /* PROPS */, [\"checked\"]), _createElementVNode(\"span\", _hoisted_23, _toDisplayString($setup.formData.isActive ? '启用' : '禁用'), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"model\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"open\", \"title\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","$setup","_hoisted_5","_component_a_space","_component_a_tooltip","title","placement","_component_a_button","onClick","exportUsers","type","showAddModal","_hoisted_6","_hoisted_7","_hoisted_8","_Fragment","_renderList","categoryList","category","key","_normalizeClass","activeCategory","$event","handleCategoryChange","_createBlock","_resolveDynamicComponent","icon","_hoisted_10","_toDisplayString","name","count","_component_a_badge","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","userStats","total","_hoisted_15","_hoisted_16","active","_hoisted_17","_hoisted_18","admin","_hoisted_19","_component_a_card","_withCtx","getCurrentCategoryName","extra","_component_a_input_search","value","searchText","placeholder","style","onSearch","handleSearch","onChange","_component_a_select","roleFilter","handleRoleFilter","_component_a_select_option","_cache","refreshData","_component_a_table","columns","tableColumns","filteredUsers","pagination","loading","rowSelection","size","bodyCell","column","record","_component_a_avatar","_normalizeStyle","background","getAvatarColor","role","realName","charAt","username","_component_a_tag","color","getRoleColor","getRoleText","status","isOnline","text","onlineSessions","length","session","id","ip_address","device_info","formatDate","login_time","isActive","lastLogin","_hoisted_20","_hoisted_21","editUser","toggleUserStatus","currentUsername","_component_a_popconfirm","onConfirm","kickOutUser","danger","resetPassword","getDeleteConfirmTitle","deleteUser","selectedRowKeys","_hoisted_22","batchEnable","batchDisable","getBatchDeleteConfirmTitle","batchDelete","includes","_component_a_modal","open","modalVisible","isEditing","width","onOk","handleSubmit","onCancel","handleCancel","_component_a_form","ref","model","formData","rules","formRules","layout","_component_a_row","gutter","_component_a_col","span","_component_a_form_item","label","_component_a_input","disabled","email","phone","department","_component_a_input_password","password","_component_a_switch","checked","_hoisted_23"],"sources":["E:\\A_project\\yuanchi\\AIops\\frontend\\src\\views\\admin\\AdminUsers.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-users admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <TeamOutlined />\r\n          用户管理\r\n        </h1>\r\n        <p class=\"page-description\">管理系统用户和权限</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-tooltip title=\"导出用户列表为Excel文件\" placement=\"bottom\">\r\n            <a-button @click=\"exportUsers\">\r\n              <ExportOutlined />\r\n              导出用户\r\n            </a-button>\r\n          </a-tooltip>\r\n          <a-tooltip title=\"创建新的用户账户\" placement=\"bottom\">\r\n            <a-button type=\"primary\" @click=\"showAddModal\">\r\n              <PlusOutlined />\r\n              新建用户\r\n            </a-button>\r\n          </a-tooltip>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 用户管理布局 -->\r\n    <div class=\"users-layout admin-layout\">\r\n      <!-- 左侧菜单 -->\r\n      <div class=\"users-menu admin-menu\">\r\n        <div class=\"menu-title\">用户分类</div>\r\n        <div class=\"menu-list\">\r\n          <div \r\n            v-for=\"category in categoryList\" \r\n            :key=\"category.key\"\r\n            :class=\"['menu-item', { 'active': activeCategory === category.key }]\"\r\n            @click=\"handleCategoryChange(category.key)\"\r\n          >\r\n            <component :is=\"category.icon\" class=\"menu-icon\" />\r\n            <span class=\"menu-text\">{{ category.name }}</span>\r\n            <a-badge \r\n              v-if=\"category.count\" \r\n              :count=\"category.count\" \r\n              class=\"menu-badge\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 统计信息 -->\r\n        <div class=\"menu-stats\">\r\n          <div class=\"stats-title\">用户统计</div>\r\n          <div class=\"stats-list\">\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">总用户数</span>\r\n              <span class=\"stat-value\">{{ userStats.total }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">活跃用户</span>\r\n              <span class=\"stat-value\">{{ userStats.active }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">管理员</span>\r\n              <span class=\"stat-value\">{{ userStats.admin }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧内容 -->\r\n      <div class=\"users-content admin-content\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索用户...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n                @change=\"handleSearch\"\r\n              />\r\n              <a-select\r\n                v-model:value=\"roleFilter\"\r\n                placeholder=\"角色筛选\"\r\n                style=\"width: 120px\"\r\n                @change=\"handleRoleFilter\"\r\n              >\r\n                <a-select-option value=\"\">全部角色</a-select-option>\r\n                <a-select-option value=\"admin\">管理员</a-select-option>\r\n                <a-select-option value=\"operator\">操作员</a-select-option>\r\n                <a-select-option value=\"viewer\">观察者</a-select-option>\r\n              </a-select>\r\n              <a-tooltip title=\"刷新用户列表数据\" placement=\"bottom\">\r\n                <a-button @click=\"refreshData\">\r\n                  <ReloadOutlined />\r\n                </a-button>\r\n              </a-tooltip>\r\n            </a-space>\r\n          </template>\r\n\r\n          <a-table\r\n            :columns=\"tableColumns\"\r\n            :data-source=\"filteredUsers\"\r\n            :pagination=\"pagination\"\r\n            :loading=\"loading\"\r\n            :row-selection=\"rowSelection\"\r\n            row-key=\"id\"\r\n            size=\"middle\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <template v-if=\"column.key === 'avatar'\">\r\n                <a-avatar :style=\"{ background: getAvatarColor(record.role) }\">\r\n                  {{ record.realName?.charAt(0) || record.username?.charAt(0) }}\r\n                </a-avatar>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'role'\">\r\n                <a-tag :color=\"getRoleColor(record.role)\">\r\n                  {{ getRoleText(record.role) }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'onlineStatus'\">\r\n                <a-space>\r\n                  <a-badge \r\n                    :status=\"record.isOnline ? 'processing' : 'default'\" \r\n                    :text=\"record.isOnline ? '在线' : '离线'\"\r\n                  />\r\n                  <a-tooltip v-if=\"record.onlineSessions && record.onlineSessions.length > 0\" placement=\"top\">\r\n                    <template #title>\r\n                      <div>\r\n                        <div v-for=\"session in record.onlineSessions\" :key=\"session.id\">\r\n                          IP: {{ session.ip_address }}<br>\r\n                          设备: {{ session.device_info }}<br>\r\n                          登录时间: {{ formatDate(session.login_time) }}\r\n                        </div>\r\n                      </div>\r\n                    </template>\r\n                  </a-tooltip>\r\n                </a-space>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"record.isActive ? 'green' : 'red'\">\r\n                  {{ record.isActive ? '启用' : '禁用' }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'lastLogin'\">      \r\n                <span v-if=\"record.lastLogin\">\r\n                  {{ formatDate(record.lastLogin) }}\r\n                </span>\r\n                <span v-else class=\"text-gray\">从未登录</span>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'actions'\">\r\n                <a-space>\r\n                  <a-tooltip title=\"编辑用户信息\" placement=\"top\">\r\n                    <a-button type=\"link\" size=\"small\" @click=\"editUser(record)\">\r\n                      <EditOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip :title=\"record.isActive ? '禁用此用户' : '启用此用户'\" placement=\"top\">\r\n                    <a-button \r\n                      type=\"link\" \r\n                      size=\"small\" \r\n                      @click=\"toggleUserStatus(record)\"\r\n                    >\r\n                      <CheckCircleOutlined v-if=\"!record.isActive\" />\r\n                      <StopOutlined v-else />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip v-if=\"record.isOnline && record.username !== currentUsername\" title=\"踢出用户（关闭所有会话）\" placement=\"top\">\r\n                    <a-popconfirm\r\n                      :title=\"`确定要踢出用户 '${record.username}' 吗？这将关闭其所有在线会话。`\"\r\n                      @confirm=\"kickOutUser(record)\"\r\n                      placement=\"topRight\"\r\n                    >\r\n                      <a-button type=\"link\" size=\"small\" danger>\r\n                        <LogoutOutlined />\r\n                      </a-button>\r\n                    </a-popconfirm>\r\n                  </a-tooltip>\r\n                  <a-tooltip title=\"重置用户密码\" placement=\"top\">\r\n                    <a-button \r\n                      type=\"link\" \r\n                      size=\"small\" \r\n                      @click=\"resetPassword(record)\"\r\n                    >\r\n                      <KeyOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-popconfirm\r\n                    :title=\"getDeleteConfirmTitle(record)\"\r\n                    @confirm=\"deleteUser(record)\"\r\n                    placement=\"topRight\"\r\n                    :ok-type=\"record.username === currentUsername ? 'danger' : 'primary'\"\r\n                  >\r\n                    <a-tooltip title=\"删除此用户\" placement=\"top\">\r\n                      <a-button type=\"link\" size=\"small\" danger>\r\n                        <DeleteOutlined />\r\n                      </a-button>\r\n                    </a-tooltip>\r\n                  </a-popconfirm>\r\n                </a-space>\r\n              </template>\r\n            </template>\r\n          </a-table>\r\n\r\n          <!-- 批量操作 -->\r\n          <div v-if=\"selectedRowKeys.length > 0\" class=\"batch-actions\">\r\n            <a-space>\r\n              <span>已选择 {{ selectedRowKeys.length }} 项</span>\r\n              <a-tooltip title=\"批量启用选中的用户\" placement=\"top\">\r\n                <a-button @click=\"batchEnable\">\r\n                  <CheckOutlined />\r\n                  批量启用\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-tooltip title=\"批量禁用选中的用户\" placement=\"top\">\r\n                <a-button @click=\"batchDisable\">\r\n                  <CloseOutlined />\r\n                  批量禁用\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-popconfirm\r\n                :title=\"getBatchDeleteConfirmTitle()\"\r\n                @confirm=\"batchDelete\"\r\n                placement=\"topRight\"\r\n                :ok-type=\"getBatchDeleteConfirmTitle().includes('警告') ? 'danger' : 'primary'\"\r\n              >\r\n                <a-tooltip title=\"批量删除选中的用户\" placement=\"top\">\r\n                  <a-button danger>\r\n                    <DeleteOutlined />\r\n                    批量删除\r\n                  </a-button>\r\n                </a-tooltip>\r\n              </a-popconfirm>\r\n            </a-space>\r\n          </div>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 添加/编辑用户弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"isEditing ? '编辑用户' : '新建用户'\"\r\n      width=\"600px\"\r\n      @ok=\"handleSubmit\"\r\n      @cancel=\"handleCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"用户名\" name=\"username\">\r\n              <a-input \r\n                v-model:value=\"formData.username\" \r\n                placeholder=\"输入用户名\"\r\n                :disabled=\"isEditing\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"真实姓名\" name=\"realName\">\r\n              <a-input v-model:value=\"formData.realName\" placeholder=\"输入真实姓名\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"邮箱\" name=\"email\">\r\n              <a-input v-model:value=\"formData.email\" placeholder=\"输入邮箱地址\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"电话\" name=\"phone\">\r\n              <a-input v-model:value=\"formData.phone\" placeholder=\"输入电话号码\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"角色\" name=\"role\">\r\n              <a-select v-model:value=\"formData.role\" placeholder=\"选择用户角色\">\r\n                <a-select-option value=\"admin\">管理员</a-select-option>\r\n                <a-select-option value=\"operator\">操作员</a-select-option>\r\n                <a-select-option value=\"viewer\">观察者</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"部门\" name=\"department\">\r\n              <a-input v-model:value=\"formData.department\" placeholder=\"输入所属部门\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item v-if=\"!isEditing\" label=\"密码\" name=\"password\">\r\n          <a-input-password v-model:value=\"formData.password\" placeholder=\"输入密码\" />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"状态\" name=\"isActive\">\r\n          <a-switch v-model:checked=\"formData.isActive\" />\r\n          <span class=\"switch-description\">{{ formData.isActive ? '启用' : '禁用' }}</span>\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { userAPI } from '@/api/users';\r\nimport { dictionaryAPI } from '@/api/index';\r\nimport {\r\n  TeamOutlined,\r\n  PlusOutlined,\r\n  ExportOutlined,\r\n  ReloadOutlined,\r\n  UserOutlined,\r\n  CrownOutlined,\r\n  SafetyOutlined,\r\n  EyeOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  KeyOutlined,\r\n  StopOutlined,\r\n  CheckOutlined,\r\n  CloseOutlined,\r\n  LogoutOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst modalVisible = ref(false);\r\nconst isEditing = ref(false);\r\nconst searchText = ref('');\r\nconst roleFilter = ref('');\r\nconst activeCategory = ref('all');\r\nconst selectedRowKeys = ref([]);\r\n\r\n// 表单数据\r\nconst formRef = ref();\r\nconst formData = ref({\r\n  username: '',\r\n  realName: '',\r\n  email: '',\r\n  phone: '',\r\n  role: 'viewer',\r\n  department: '',\r\n  password: '',\r\n  isActive: true\r\n});\r\n\r\n// 用户数据\r\nconst users = ref([]);\r\nconst userStats = ref({\r\n  total: 0,\r\n  active: 0,\r\n  admin: 0\r\n});\r\n\r\n// 分类列表（从字典动态获取）\r\nconst categoryList = ref([]);\r\n\r\n// 获取用户分类字典数据\r\nconst fetchUserCategories = async () => {\r\n  try {\r\n    const response = await dictionaryAPI.getDictionaryByCategory('user_category', {\r\n      status: 'active',\r\n      simple: 'true'  // 获取简化数据格式\r\n    });\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const dictionary = response.data.data || [];\r\n      \r\n      // 转换字典数据为分类格式\r\n      const dictionaryCategories = dictionary\r\n        .sort((a, b) => (b.priority || 0) - (a.priority || 0))\r\n        .map(item => {\r\n          // 解析config中的配置\r\n          let config = {};\r\n          try {\r\n            config = item.config ? JSON.parse(item.config) : {};\r\n          } catch (e) {\r\n            console.warn('解析字典配置失败:', item.config);\r\n          }\r\n          \r\n          return {\r\n            key: item.key,\r\n            name: item.label,\r\n            icon: config.icon || 'UserOutlined',\r\n            count: 0\r\n          };\r\n        });\r\n      \r\n      // 始终包含默认分类\r\n      const defaultCategories = [\r\n        {\r\n          key: 'all',\r\n          name: '全部用户',\r\n          icon: 'TeamOutlined',\r\n          count: 0\r\n        },\r\n        {\r\n          key: 'active',\r\n          name: '活跃用户',\r\n          icon: 'CheckCircleOutlined',\r\n          count: 0\r\n        },\r\n        {\r\n          key: 'inactive',\r\n          name: '禁用用户',\r\n          icon: 'CloseCircleOutlined',\r\n          count: 0\r\n        }\r\n      ];\r\n      \r\n      // 合并默认分类和字典分类\r\n      categoryList.value = [...defaultCategories, ...dictionaryCategories];\r\n      \r\n      console.log('用户分类字典加载成功:', categoryList.value);\r\n    } else {\r\n      console.warn('获取用户分类字典失败，使用默认分类');\r\n      setDefaultCategories();\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户分类字典失败:', error);\r\n    // 如果获取字典失败，使用默认分类\r\n    setDefaultCategories();\r\n  }\r\n};\r\n\r\n// 设置默认分类（作为备用方案）\r\nconst setDefaultCategories = () => {\r\n  categoryList.value = [\r\n    {\r\n      key: 'all',\r\n      name: '全部用户',\r\n      icon: 'TeamOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'admin',\r\n      name: '管理员',\r\n      icon: 'CrownOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'operator',\r\n      name: '操作员',\r\n      icon: 'SafetyOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'viewer',\r\n      name: '观察者',\r\n      icon: 'EyeOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'active',\r\n      name: '活跃用户',\r\n      icon: 'CheckCircleOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'inactive',\r\n      name: '禁用用户',\r\n      icon: 'CloseCircleOutlined',\r\n      count: 0\r\n    }\r\n  ];\r\n};\r\n\r\n// 表格列配置\r\nconst tableColumns = [\r\n  {\r\n    title: '用户名',\r\n    dataIndex: 'username',\r\n    key: 'username',\r\n  },\r\n  {\r\n    title: '姓名',\r\n    dataIndex: 'realName',\r\n    key: 'realName'\r\n  },\r\n  {\r\n    title: '邮箱',\r\n    dataIndex: 'email',\r\n    key: 'email'\r\n  },\r\n  {\r\n    title: '角色',\r\n    key: 'role',\r\n    width: 100,\r\n    filters: [\r\n      { text: '管理员', value: 'admin' },\r\n      { text: '操作员', value: 'operator' },\r\n      { text: '观察者', value: 'viewer' }\r\n    ]\r\n  },\r\n  {\r\n    title: '部门',\r\n    dataIndex: 'department',\r\n    key: 'department'\r\n  },\r\n  {\r\n    title: '在线状态',\r\n    key: 'onlineStatus',\r\n    width: 100,\r\n    filters: [\r\n      { text: '在线', value: true },\r\n      { text: '离线', value: false }\r\n    ]\r\n  },\r\n  {\r\n    title: '状态',\r\n    key: 'status',\r\n    width: 80,\r\n    filters: [\r\n      { text: '启用', value: true },\r\n      { text: '禁用', value: false }\r\n    ]\r\n  },\r\n  // {\r\n  //   title: '最后登录',\r\n  //   key: 'lastLogin',\r\n  //   width: 150,\r\n  // },\r\n  {\r\n    title: '操作',\r\n    key: 'actions',\r\n    width: 200,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = ref({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,\r\n  onChange: (page, pageSize) => {\r\n    pagination.value.current = page;\r\n    pagination.value.pageSize = pageSize;\r\n    fetchUsers();\r\n  }\r\n});\r\n\r\n// 行选择配置\r\nconst rowSelection = {\r\n  selectedRowKeys,\r\n  onChange: (keys) => {\r\n    selectedRowKeys.value = keys;\r\n  }\r\n};\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  username: [\r\n    { required: true, message: '请输入用户名', trigger: 'blur' },\r\n    { min: 3, max: 20, message: '用户名长度在3-20个字符', trigger: 'blur' }\r\n  ],\r\n  realName: [\r\n    { required: true, message: '请输入真实姓名', trigger: 'blur' }\r\n  ],\r\n  email: [\r\n    { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n    { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\r\n  ],\r\n  role: [\r\n    { required: true, message: '请选择用户角色', trigger: 'change' }\r\n  ],\r\n  password: [\r\n    { required: true, message: '请输入密码', trigger: 'blur' },\r\n    { min: 6, message: '密码长度不能少于6个字符', trigger: 'blur' }\r\n  ],\r\n  phone: [\r\n    { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\r\n  ]\r\n};\r\n\r\n// 计算属性\r\nconst filteredUsers = computed(() => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array in filteredUsers:', users.value);\r\n    return [];\r\n  }\r\n  \r\n  let result = users.value;\r\n  \r\n  // 分类筛选\r\n  if (activeCategory.value !== 'all') {\r\n    if (activeCategory.value === 'active') {\r\n      result = result.filter(user => user.isActive);\r\n    } else if (activeCategory.value === 'inactive') {\r\n      result = result.filter(user => !user.isActive);\r\n    } else {\r\n      result = result.filter(user => user.role === activeCategory.value);\r\n    }\r\n  }\r\n  \r\n  // 角色筛选\r\n  if (roleFilter.value) {\r\n    result = result.filter(user => user.role === roleFilter.value);\r\n  }\r\n  \r\n  // 搜索筛选\r\n  if (searchText.value) {\r\n    const searchLower = searchText.value.toLowerCase();\r\n    result = result.filter(user => \r\n      user.username?.toLowerCase().includes(searchLower) ||\r\n      user.realName?.toLowerCase().includes(searchLower) ||\r\n      user.email?.toLowerCase().includes(searchLower) ||\r\n      user.department?.toLowerCase().includes(searchLower)\r\n    );\r\n  }\r\n  \r\n  return result;\r\n});\r\n\r\n// 获取当前分类名称\r\nconst getCurrentCategoryName = () => {\r\n  const category = categoryList.value.find(cat => cat.key === activeCategory.value);\r\n  return category ? category.name : '全部用户';\r\n};\r\n\r\n// 获取头像颜色\r\nconst getAvatarColor = (role) => {\r\n  const colors = {\r\n    admin: '#faad14',\r\n    operator: '#1890ff', \r\n    viewer: '#52c41a'\r\n  };\r\n  return colors[role] || '#d9d9d9';\r\n};\r\n\r\n// 获取角色颜色\r\nconst getRoleColor = (role) => {\r\n  const colors = {\r\n    admin: 'gold',\r\n    operator: 'blue',\r\n    viewer: 'green'\r\n  };\r\n  return colors[role] || 'default';\r\n};\r\n\r\n// 获取角色文本\r\nconst getRoleText = (role) => {\r\n  const texts = {\r\n    admin: '管理员',\r\n    operator: '操作员',\r\n    viewer: '观察者'\r\n  };\r\n  return texts[role] || role;\r\n};\r\n\r\n// 获取当前用户名\r\nconst currentUsername = computed(() => {\r\n  return localStorage.getItem('username') || '';\r\n});\r\n\r\n// 获取删除确认标题\r\nconst getDeleteConfirmTitle = (record) => {\r\n  if (record.username === currentUsername.value) {\r\n    return '警告：您将删除自己的账户！删除后您将被自动退出登录，确定继续吗？';\r\n  }\r\n  return `确定要删除用户 \"${record.username}\" 吗？`;\r\n};\r\n\r\n// 获取批量删除确认标题\r\nconst getBatchDeleteConfirmTitle = () => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array:', users.value);\r\n    return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\r\n  }\r\n  \r\n  const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n  const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername.value);\r\n  \r\n  if (isCurrentUserIncluded) {\r\n    return '警告：您在批量删除中包含了自己的账户！删除后您将被自动退出登录，确定继续吗？';\r\n  }\r\n  return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\r\n};\r\n\r\n// 格式化日期\r\nconst formatDate = (date) => {\r\n  if (!date) return '';\r\n  return new Date(date).toLocaleString('zh-CN', {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\n// 更新统计数据\r\nconst updateStats = () => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array in updateStats:', users.value);\r\n    users.value = []; // 重置为空数组\r\n  }\r\n  \r\n  const stats = {\r\n    total: users.value.length,\r\n    active: users.value.filter(user => user.isActive).length,\r\n    admin: users.value.filter(user => user.role === 'admin').length\r\n  };\r\n  \r\n  userStats.value = stats;\r\n  \r\n  // 更新分类计数（支持动态分类）\r\n  categoryList.value.forEach(category => {\r\n    switch (category.key) {\r\n      case 'all':\r\n        category.count = stats.total;\r\n        break;\r\n      case 'active':\r\n        category.count = stats.active;\r\n        break;\r\n      case 'inactive':\r\n        category.count = stats.total - stats.active;\r\n        break;\r\n      case 'admin':\r\n        category.count = users.value.filter(user => user.role === 'admin').length;\r\n        break;\r\n      case 'operator':\r\n        category.count = users.value.filter(user => user.role === 'operator').length;\r\n        break;\r\n      case 'viewer':\r\n        category.count = users.value.filter(user => user.role === 'viewer').length;\r\n        break;\r\n      default:\r\n        // 对于其他动态分类，根据角色进行计数\r\n        if (category.key === 'admin' || category.key === 'operator' || category.key === 'viewer') {\r\n          category.count = users.value.filter(user => user.role === category.key).length;\r\n        } else {\r\n          // 其他类型的分类可以根据需要扩展\r\n          category.count = 0;\r\n        }\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\n// 获取用户列表\r\nconst fetchUsers = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const params = {\r\n      page: pagination.value.current,\r\n      pageSize: pagination.value.pageSize,\r\n      search: searchText.value,\r\n      role: roleFilter.value\r\n    };\r\n    \r\n    // 移除空参数\r\n    Object.keys(params).forEach(key => {\r\n      if (!params[key]) {\r\n        delete params[key];\r\n      }\r\n    });\r\n    \r\n    const response = await userAPI.getUserList(params);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const data = response.data.data;\r\n      // 处理用户数据，统一字段格式\r\n      users.value = (data.list || data.results || []).map(user => ({\r\n        id: user.id,\r\n        username: user.username,\r\n        realName: user.profile?.real_name || user.real_name || user.first_name + ' ' + user.last_name,\r\n        email: user.email,\r\n        phone: user.profile?.phone || user.phone || '',\r\n        role: user.profile?.role || 'viewer',\r\n        department: user.profile?.department || '',\r\n        isActive: user.is_active !== undefined ? user.is_active : true,\r\n        lastLogin: user.last_login,\r\n        createdAt: user.date_joined || user.created_at,\r\n        // 新增在线状态相关字段\r\n        isOnline: user.is_online || false,\r\n        onlineSessions: user.online_sessions || []\r\n      }));\r\n      \r\n      pagination.value.total = data.total || data.count || users.value.length;\r\n      \r\n      // 获取用户统计\r\n      await fetchUserStats();\r\n      updateStats();\r\n    } else {\r\n      console.error('API响应格式错误:', response.data);\r\n      throw new Error('API响应格式错误');\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户列表失败:', error);\r\n    \r\n    // 对于401错误，提供更友好的提示\r\n    if (error.response?.status === 401) {\r\n      message.error({\r\n        content: '身份认证已过期，请重新登录',\r\n        duration: 5\r\n      });\r\n      \r\n      // 清除本地状态并跳转到登录页\r\n      setTimeout(() => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userInfo');\r\n        localStorage.removeItem('isLoggedIn');\r\n        localStorage.removeItem('userType');\r\n        localStorage.removeItem('username');\r\n        window.location.href = '/#/login';\r\n      }, 2000);\r\n    } else {\r\n      // 其他错误的处理\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message;\r\n      message.error(`获取用户列表失败: ${errorMsg}`);\r\n    }\r\n    \r\n    // 如果API失败，使用空数组而不是模拟数据\r\n    users.value = [];\r\n    pagination.value.total = 0;\r\n    updateStats();\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 获取用户统计数据\r\nconst fetchUserStats = async () => {\r\n  try {\r\n    const response = await userAPI.getUserStats();\r\n    if (response.data && response.data.code === 200) {\r\n      const stats = response.data.data;\r\n      userStats.value = {\r\n        total: stats.total || 0,\r\n        active: stats.active || 0,\r\n        admin: stats.admin || 0\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户统计失败:', error);\r\n    // 统计失败时使用本地计算\r\n    userStats.value = {\r\n      total: users.value.length,\r\n      active: users.value.filter(user => user.isActive).length,\r\n      admin: users.value.filter(user => user.role === 'admin').length\r\n    };\r\n  }\r\n};\r\n\r\n\r\n// 分类切换\r\nconst handleCategoryChange = (key) => {\r\n  activeCategory.value = key;\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  // 分类筛选在前端处理，不需要重新获取数据\r\n};\r\n\r\n// 搜索处理\r\nconst handleSearch = () => {\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  fetchUsers(); // 重新获取数据\r\n};\r\n\r\n// 角色筛选\r\nconst handleRoleFilter = () => {\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  fetchUsers(); // 重新获取数据\r\n};\r\n\r\n// 刷新数据\r\nconst refreshData = () => {\r\n  fetchUsers();\r\n  message.success('数据刷新成功');\r\n};\r\n\r\n// 显示新建用户弹窗\r\nconst showAddModal = () => {\r\n  isEditing.value = false;\r\n  formData.value = {\r\n    username: '',\r\n    realName: '',\r\n    email: '',\r\n    phone: '',\r\n    role: 'viewer',\r\n    department: '',\r\n    password: '',\r\n    isActive: true\r\n  };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 编辑用户\r\nconst editUser = (record) => {\r\n  isEditing.value = true;\r\n  formData.value = {\r\n    id: record.id,\r\n    username: record.username,\r\n    realName: record.realName,\r\n    email: record.email,\r\n    phone: record.phone,\r\n    role: record.role,\r\n    department: record.department,\r\n    isActive: record.isActive\r\n  };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    loading.value = true;\r\n    \r\n    // 准备API请求数据\r\n    const apiData = {\r\n      username: formData.value.username,\r\n      email: formData.value.email,\r\n      real_name: formData.value.realName,\r\n      phone: formData.value.phone,\r\n      role: formData.value.role,\r\n      department: formData.value.department,\r\n      is_active: formData.value.isActive\r\n    };\r\n    \r\n    if (!isEditing.value) {\r\n      apiData.password = formData.value.password;\r\n    }\r\n    \r\n    let response;\r\n    if (isEditing.value) {\r\n      // 编辑用户\r\n      response = await userAPI.updateUser(formData.value.id, apiData);\r\n    } else {\r\n      // 新建用户\r\n      response = await userAPI.createUser(apiData);\r\n    }\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(isEditing.value ? '用户更新成功' : '用户创建成功');\r\n      modalVisible.value = false;\r\n      // 重新获取数据\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '操作失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('用户操作失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 取消操作\r\nconst handleCancel = () => {\r\n  modalVisible.value = false;\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 切换用户状态\r\nconst toggleUserStatus = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.toggleUserStatus(record.id, !record.isActive);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`用户${!record.isActive ? '启用' : '禁用'}成功`);\r\n      // 重新获取数据\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '操作失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('切换用户状态失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 重置密码\r\nconst resetPassword = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.resetUserPassword(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('密码重置成功,新密码为: 123456');\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '重置密码失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('重置密码失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '重置密码失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 踢出用户\r\nconst kickOutUser = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.kickOutUser(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const data = response.data.data;\r\n      message.success({\r\n        content: `成功踢出用户 ${data.username}，关闭了 ${data.kicked_sessions} 个会话`,\r\n        duration: 3\r\n      });\r\n      \r\n      // 重新获取数据以更新在线状态\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '踢出用户失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('踢出用户失败:', error);\r\n    \r\n    if (error.response?.status === 403) {\r\n      message.error('权限不足，只有管理员才能踢出用户');\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '踢出用户失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 删除用户\r\nconst deleteUser = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 检查是否删除当前登录用户\r\n    const currentUsername = localStorage.getItem('username');\r\n    const isCurrentUser = record.username === currentUsername;\r\n    \r\n    const response = await userAPI.deleteUser(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('用户删除成功');\r\n      \r\n      // 如果删除的是当前用户，提示用户并重定向到登录页\r\n      if (isCurrentUser) {\r\n        message.warning({\r\n          content: '您删除了自己的账户，系统将在3秒后自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        // 3秒后清除登录状态并跳转到登录页\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return; // 不执行后续的fetchUsers，避免401错误\r\n      }\r\n      \r\n      // 重新获取数据（只有非当前用户时才执行）\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('删除用户失败:', error);\r\n    \r\n    // 如果是401错误且删除的是当前用户，给出特殊提示\r\n    if (error.response?.status === 401) {\r\n      const currentUsername = localStorage.getItem('username');\r\n      const isCurrentUser = record.username === currentUsername;\r\n      \r\n      if (isCurrentUser) {\r\n        message.success({\r\n          content: '用户删除成功，您的账户已被删除，系统将自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return;\r\n      } else {\r\n        message.error('认证失败，请重新登录');\r\n      }\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '删除失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量启用\r\nconst batchEnable = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 批量操作需要逐个调用API\r\n    const promises = selectedRowKeys.value.map(id => {\r\n      const user = users.value.find(u => u.id === id);\r\n      if (user && !user.isActive) {\r\n        return userAPI.toggleUserStatus(id, true);\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    \r\n    await Promise.all(promises);\r\n    \r\n    selectedRowKeys.value = [];\r\n    message.success('批量启用成功');\r\n    // 重新获取数据\r\n    await fetchUsers();\r\n  } catch (error) {\r\n    console.error('批量启用失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量启用失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量禁用\r\nconst batchDisable = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 批量操作需要逐个调用API\r\n    const promises = selectedRowKeys.value.map(id => {\r\n      const user = users.value.find(u => u.id === id);\r\n      if (user && user.isActive) {\r\n        return userAPI.toggleUserStatus(id, false);\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    \r\n    await Promise.all(promises);\r\n    \r\n    selectedRowKeys.value = [];\r\n    message.success('批量禁用成功');\r\n    // 重新获取数据\r\n    await fetchUsers();\r\n  } catch (error) {\r\n    console.error('批量禁用失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量禁用失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量删除\r\nconst batchDelete = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 检查是否包含当前登录用户\r\n    const currentUsername = localStorage.getItem('username');\r\n    \r\n    // 确保users.value是数组\r\n    if (!Array.isArray(users.value)) {\r\n      console.warn('users.value is not an array in batchDelete:', users.value);\r\n      message.error('数据异常，请刷新页面后重试');\r\n      return;\r\n    }\r\n    \r\n    const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n    const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\r\n    \r\n    const response = await userAPI.batchDeleteUsers(selectedRowKeys.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      selectedRowKeys.value = [];\r\n      message.success('批量删除成功');\r\n      \r\n      // 如果删除的用户中包含当前用户，提示用户并重定向到登录页\r\n      if (isCurrentUserIncluded) {\r\n        message.warning({\r\n          content: '您在批量删除中包含了自己的账户，系统将在3秒后自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        // 3秒后清除登录状态并跳转到登录页\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return; // 不执行后续的fetchUsers，避免401错误\r\n      }\r\n      \r\n      // 重新获取数据（只有非当前用户时才执行）\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '批量删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('批量删除失败:', error);\r\n    \r\n    // 如果是401错误，可能是删除了当前用户后的后续请求\r\n    if (error.response?.status === 401) {\r\n      const currentUsername = localStorage.getItem('username');\r\n      \r\n      // 确保users.value是数组\r\n      if (!Array.isArray(users.value)) {\r\n        console.warn('users.value is not an array in error handler:', users.value);\r\n        message.error('认证失败，请重新登录');\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 2000);\r\n        return;\r\n      }\r\n      \r\n      const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n      const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\r\n      \r\n      if (isCurrentUserIncluded) {\r\n        message.success({\r\n          content: '批量删除成功，您的账户已被删除，系统将自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return;\r\n      } else {\r\n        message.error('认证失败，请重新登录');\r\n      }\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量删除失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 导出用户\r\nconst exportUsers = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.exportUsers();\r\n    \r\n    if (response.data) {\r\n      // 创建下载链接\r\n      const blob = new Blob([response.data], { \r\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n      });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `用户列表_${new Date().toISOString().slice(0, 10)}.xlsx`;\r\n      link.click();\r\n      window.URL.revokeObjectURL(url);\r\n      \r\n      message.success('用户列表导出成功');\r\n    } else {\r\n      throw new Error('导出数据为空');\r\n    }\r\n  } catch (error) {\r\n    console.error('导出用户列表失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '导出失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 组件挂载\r\nonMounted(async () => {\r\n  // 同时获取用户分类和用户数据\r\n  await Promise.all([\r\n    fetchUserCategories(),\r\n    fetchUsers()\r\n  ]);\r\n});\r\n\r\n// 监听搜索条件变化，实现实时搜索\r\nwatch([searchText, roleFilter], () => {\r\n  // 使用防抖避免频繁请求\r\n  clearTimeout(searchTimeout.value);\r\n  searchTimeout.value = setTimeout(() => {\r\n    pagination.value.current = 1; // 重置页码\r\n    fetchUsers();\r\n  }, 500);\r\n});\r\n\r\n// 搜索防抖定时器\r\nconst searchTimeout = ref(null);\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 用户管理页面特有的样式 */\r\n/* 所有通用样式已在 admin-common.css 中定义 */\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}