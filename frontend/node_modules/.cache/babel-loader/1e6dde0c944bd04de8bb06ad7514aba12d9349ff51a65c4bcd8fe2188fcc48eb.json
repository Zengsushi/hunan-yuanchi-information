{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://127.0.0.1:8001/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 添加认证token\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 统一错误处理\n  if (error.response?.status === 401) {\n    // 未授权，清除本地存储并跳转到登录页\n    console.warn('收到401错误，用户已被踢出或token已过期');\n\n    // 清除所有相关的本地存储\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userType');\n    localStorage.removeItem('username');\n    localStorage.removeItem('isAdmin');\n    localStorage.removeItem('userRole');\n    localStorage.removeItem('remember_user');\n    localStorage.removeItem('remember_mode');\n\n    // 跳转到登录页\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// ==================== 部门管理 API ====================\n\n/**\r\n * 获取部门列表\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.page - 页码\r\n * @param {number} params.page_size - 每页数量\r\n * @param {string} params.search - 搜索关键词\r\n * @param {string} params.status - 状态筛选\r\n * @param {string} params.level - 层级筛选\r\n * @param {string} params.category - 分类筛选\r\n * @returns {Promise} API响应\r\n */\nexport const getDepartments = (params = {}) => {\n  return api.get('/organization/departments/', {\n    params\n  });\n};\n\n/**\r\n * 获取部门详情\r\n * @param {number} id - 部门ID\r\n * @returns {Promise} API响应\r\n */\nexport const getDepartmentDetail = id => {\n  return api.get(`/organization/departments/${id}/`);\n};\n\n/**\r\n * 创建部门\r\n * @param {Object} data - 部门数据\r\n * @param {string} data.name - 部门名称\r\n * @param {string} data.code - 部门编码\r\n * @param {number} data.parent - 上级部门ID\r\n * @param {number} data.manager - 部门负责人ID\r\n * @param {number} data.sort_order - 排序\r\n * @param {string} data.status - 状态\r\n * @param {string} data.description - 描述\r\n * @returns {Promise} API响应\r\n */\nexport const createDepartment = data => {\n  return api.post('/organization/departments/', data);\n};\n\n/**\r\n * 更新部门\r\n * @param {number} id - 部门ID\r\n * @param {Object} data - 部门数据\r\n * @returns {Promise} API响应\r\n */\nexport const updateDepartment = (id, data) => {\n  return api.put(`/organization/departments/${id}/`, data);\n};\n\n/**\r\n * 删除部门\r\n * @param {number} id - 部门ID\r\n * @returns {Promise} API响应\r\n */\nexport const deleteDepartment = id => {\n  return api.delete(`/organization/departments/${id}/`);\n};\n\n/**\r\n * 获取部门树形结构\r\n * @returns {Promise} API响应\r\n */\nexport const getDepartmentTree = () => {\n  return api.get('/organization/departments/tree/');\n};\n\n/**\r\n * 导出部门列表\r\n * @param {Object} params - 导出参数\r\n * @returns {Promise} API响应\r\n */\nexport const exportDepartments = (params = {}) => {\n  return api.get('/organization/departments/export/', {\n    params,\n    responseType: 'blob'\n  });\n};\n\n// ==================== 职位管理 API ====================\n\n/**\r\n * 获取职位列表\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.page - 页码\r\n * @param {number} params.page_size - 每页数量\r\n * @param {string} params.search - 搜索关键词\r\n * @param {string} params.status - 状态筛选\r\n * @param {string} params.level - 级别筛选\r\n * @param {number} params.department - 部门筛选\r\n * @param {string} params.category - 分类筛选\r\n * @returns {Promise} API响应\r\n */\nexport const getPositions = (params = {}) => {\n  return api.get('/organization/positions/', {\n    params\n  });\n};\n\n/**\r\n * 获取职位详情\r\n * @param {number} id - 职位ID\r\n * @returns {Promise} API响应\r\n */\nexport const getPositionDetail = id => {\n  return api.get(`/organization/positions/${id}/`);\n};\n\n/**\r\n * 创建职位\r\n * @param {Object} data - 职位数据\r\n * @param {string} data.name - 职位名称\r\n * @param {string} data.code - 职位编码\r\n * @param {number} data.department - 所属部门ID\r\n * @param {string} data.level - 职位级别\r\n * @param {number} data.min_salary - 最低薪资\r\n * @param {number} data.max_salary - 最高薪资\r\n * @param {number} data.sort_order - 排序\r\n * @param {string} data.status - 状态\r\n * @param {string} data.description - 描述\r\n * @param {string} data.requirements - 职位要求\r\n * @returns {Promise} API响应\r\n */\nexport const createPosition = data => {\n  return api.post('/organization/positions/', data);\n};\n\n/**\r\n * 更新职位\r\n * @param {number} id - 职位ID\r\n * @param {Object} data - 职位数据\r\n * @returns {Promise} API响应\r\n */\nexport const updatePosition = (id, data) => {\n  return api.put(`/organization/positions/${id}/`, data);\n};\n\n/**\r\n * 删除职位\r\n * @param {number} id - 职位ID\r\n * @returns {Promise} API响应\r\n */\nexport const deletePosition = id => {\n  return api.delete(`/organization/positions/${id}/`);\n};\n\n/**\r\n * 根据部门获取职位列表\r\n * @param {number} departmentId - 部门ID\r\n * @returns {Promise} API响应\r\n */\nexport const getPositionsByDepartment = departmentId => {\n  return api.get('/organization/positions/by_department/', {\n    params: {\n      department_id: departmentId\n    }\n  });\n};\n\n/**\r\n * 导出职位列表\r\n * @param {Object} params - 导出参数\r\n * @returns {Promise} API响应\r\n */\nexport const exportPositions = (params = {}) => {\n  return api.get('/organization/positions/export/', {\n    params,\n    responseType: 'blob'\n  });\n};\n\n// ==================== 员工管理 API ====================\n\n/**\r\n * 获取员工列表\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.page - 页码\r\n * @param {number} params.page_size - 每页数量\r\n * @param {string} params.search - 搜索关键词\r\n * @param {string} params.status - 状态筛选\r\n * @param {number} params.department - 部门筛选\r\n * @param {number} params.position - 职位筛选\r\n * @param {string} params.category - 分类筛选\r\n * @returns {Promise} API响应\r\n */\nexport const getEmployees = (params = {}) => {\n  return api.get('/organization/employees/', {\n    params\n  });\n};\n\n/**\r\n * 获取员工详情\r\n * @param {number} id - 员工ID\r\n * @returns {Promise} API响应\r\n */\nexport const getEmployeeDetail = id => {\n  return api.get(`/organization/employees/${id}/`);\n};\n\n/**\r\n * 创建员工\r\n * @param {Object} data - 员工数据\r\n * @param {string} data.name - 员工姓名\r\n * @param {string} data.employee_id - 员工工号\r\n * @param {number} data.user - 关联用户ID\r\n * @param {number} data.department - 所属部门ID\r\n * @param {number} data.position - 职位ID\r\n * @param {number} data.supervisor - 直属上级ID\r\n * @param {string} data.phone - 手机号码\r\n * @param {string} data.email - 邮箱地址\r\n * @param {string} data.hire_date - 入职日期\r\n * @param {number} data.salary - 薪资\r\n * @param {string} data.status - 员工状态\r\n * @param {number} data.sort_order - 排序\r\n * @param {string} data.notes - 备注\r\n * @returns {Promise} API响应\r\n */\nexport const createEmployee = data => {\n  return api.post('/organization/employees/', data);\n};\n\n/**\r\n * 更新员工\r\n * @param {number} id - 员工ID\r\n * @param {Object} data - 员工数据\r\n * @returns {Promise} API响应\r\n */\nexport const updateEmployee = (id, data) => {\n  return api.put(`/organization/employees/${id}/`, data);\n};\n\n/**\r\n * 删除员工\r\n * @param {number} id - 员工ID\r\n * @returns {Promise} API响应\r\n */\nexport const deleteEmployee = id => {\n  return api.delete(`/organization/employees/${id}/`);\n};\n\n/**\r\n * 获取部门下的员工\r\n * @param {number} departmentId - 部门ID\r\n * @param {Object} params - 查询参数\r\n * @returns {Promise} API响应\r\n */\nexport const getDepartmentEmployees = (departmentId, params = {}) => {\n  return api.get(`/organization/departments/${departmentId}/employees/`, {\n    params\n  });\n};\n\n/**\r\n * 获取职位下的员工\r\n * @param {number} positionId - 职位ID\r\n * @returns {Promise} API响应\r\n */\nexport const getPositionEmployees = positionId => {\n  return api.get(`/organization/positions/${positionId}/employees/`);\n};\n\n/**\r\n * 获取员工的下属列表\r\n * @param {number} employeeId - 员工ID\r\n * @returns {Promise} API响应\r\n */\nexport const getEmployeeSubordinates = employeeId => {\n  return api.get(`/organization/employees/${employeeId}/subordinates/`);\n};\n\n/**\r\n * 根据上级获取员工列表\r\n * @param {number} supervisorId - 上级ID\r\n * @returns {Promise} API响应\r\n */\nexport const getEmployeesBySupervisor = supervisorId => {\n  return api.get('/organization/employees/by_supervisor/', {\n    params: {\n      supervisor_id: supervisorId\n    }\n  });\n};\n\n/**\r\n * 获取可用的用户（未关联员工的用户）\r\n * @param {Object} params - 查询参数\r\n * @returns {Promise} API响应\r\n */\nexport const getAvailableUsers = (params = {}) => {\n  return api.get('/organization/employees/available_users/', {\n    params\n  });\n};\n\n/**\r\n * 更改员工状态\r\n * @param {number} employeeId - 员工ID\r\n * @param {string} status - 新状态\r\n * @returns {Promise} API响应\r\n */\nexport const changeEmployeeStatus = (employeeId, status) => {\n  return api.post(`/organization/employees/${employeeId}/change_status/`, {\n    status\n  });\n};\n\n/**\r\n * 导出员工列表\r\n * @param {Object} params - 导出参数\r\n * @returns {Promise} API响应\r\n */\nexport const exportEmployees = (params = {}) => {\n  return api.get('/organization/employees/export/', {\n    params,\n    responseType: 'blob'\n  });\n};\n\n// ==================== 组织架构统计 API ====================\n\n/**\r\n * 获取部门统计信息\r\n * @returns {Promise} API响应\r\n */\nexport const getDepartmentStatistics = () => {\n  return api.get('/organization/departments/statistics/');\n};\n\n/**\r\n * 获取员工统计信息\r\n * @returns {Promise} API响应\r\n */\nexport const getEmployeeStatistics = () => {\n  return api.get('/organization/employees/statistics/');\n};\n\n// ==================== 组织架构图 API ====================\n\n/**\r\n * 获取组织架构图数据\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.department_id - 根部门ID（可选）\r\n * @param {number} params.max_depth - 最大深度（可选）\r\n * @returns {Promise} API响应\r\n */\nexport const getOrganizationChart = (params = {}) => {\n  return api.get('/organization/chart/', {\n    params\n  });\n};\n\n/**\r\n * 获取员工关系图数据\r\n * @param {number} employeeId - 员工ID\r\n * @returns {Promise} API响应\r\n */\nexport const getEmployeeRelationChart = employeeId => {\n  return api.get(`/organization/employees/${employeeId}/relations/`);\n};\n\n// ==================== 批量操作 API ====================\n\n/**\r\n * 批量导入部门\r\n * @param {FormData} formData - 包含Excel文件的FormData\r\n * @returns {Promise} API响应\r\n */\nexport const batchImportDepartments = formData => {\n  return api.post('/organization/departments/batch_import/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * 批量导入职位\r\n * @param {FormData} formData - 包含Excel文件的FormData\r\n * @returns {Promise} API响应\r\n */\nexport const batchImportPositions = formData => {\n  return api.post('/organization/positions/batch_import/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * 批量导入员工\r\n * @param {FormData} formData - 包含Excel文件的FormData\r\n * @returns {Promise} API响应\r\n */\nexport const batchImportEmployees = formData => {\n  return api.post('/organization/employees/batch_import/', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\n\n/**\r\n * 批量更新员工状态\r\n * @param {Object} data - 批量更新数据\r\n * @param {Array} data.employee_ids - 员工ID列表\r\n * @param {string} data.status - 新状态\r\n * @returns {Promise} API响应\r\n */\nexport const batchUpdateEmployeeStatus = data => {\n  return api.post('/organization/employees/batch_update_status/', data);\n};\n\n/**\r\n * 批量删除员工\r\n * @param {Array} employeeIds - 员工ID列表\r\n * @returns {Promise} API响应\r\n */\nexport const batchDeleteEmployees = employeeIds => {\n  return api.post('/organization/employees/batch_delete/', {\n    employee_ids: employeeIds\n  });\n};\n\n// ==================== 默认导出 ====================\n\nexport default {\n  // 部门管理\n  getDepartments,\n  getDepartmentDetail,\n  createDepartment,\n  updateDepartment,\n  deleteDepartment,\n  getDepartmentTree,\n  getDepartmentEmployees,\n  exportDepartments,\n  // 职位管理\n  getPositions,\n  getPositionDetail,\n  createPosition,\n  updatePosition,\n  deletePosition,\n  getPositionsByDepartment,\n  getPositionEmployees,\n  exportPositions,\n  // 员工管理\n  getEmployees,\n  getEmployeeDetail,\n  createEmployee,\n  updateEmployee,\n  deleteEmployee,\n  getEmployeeSubordinates,\n  getEmployeesBySupervisor,\n  getAvailableUsers,\n  changeEmployeeStatus,\n  exportEmployees,\n  // 统计信息\n  getDepartmentStatistics,\n  getEmployeeStatistics,\n  // 组织架构图\n  getOrganizationChart,\n  getEmployeeRelationChart,\n  // 批量操作\n  batchImportDepartments,\n  batchImportPositions,\n  batchImportEmployees,\n  batchUpdateEmployeeStatus,\n  batchDeleteEmployees\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","VUE_APP_API_BASE_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","console","warn","removeItem","window","location","href","getDepartments","params","get","getDepartmentDetail","id","createDepartment","data","post","updateDepartment","put","deleteDepartment","delete","getDepartmentTree","exportDepartments","responseType","getPositions","getPositionDetail","createPosition","updatePosition","deletePosition","getPositionsByDepartment","departmentId","department_id","exportPositions","getEmployees","getEmployeeDetail","createEmployee","updateEmployee","deleteEmployee","getDepartmentEmployees","getPositionEmployees","positionId","getEmployeeSubordinates","employeeId","getEmployeesBySupervisor","supervisorId","supervisor_id","getAvailableUsers","changeEmployeeStatus","exportEmployees","getDepartmentStatistics","getEmployeeStatistics","getOrganizationChart","getEmployeeRelationChart","batchImportDepartments","formData","batchImportPositions","batchImportEmployees","batchUpdateEmployeeStatus","batchDeleteEmployees","employeeIds","employee_ids"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/api/organization.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: process.env.VUE_APP_API_BASE_URL || 'http://127.0.0.1:8001/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  }\r\n});\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    // 添加认证token\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Token ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  error => {\r\n    // 统一错误处理\r\n    if (error.response?.status === 401) {\r\n      // 未授权，清除本地存储并跳转到登录页\r\n      console.warn('收到401错误，用户已被踢出或token已过期');\r\n      \r\n      // 清除所有相关的本地存储\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('userInfo');\r\n      localStorage.removeItem('isLoggedIn');\r\n      localStorage.removeItem('userType');\r\n      localStorage.removeItem('username');\r\n      localStorage.removeItem('isAdmin');\r\n      localStorage.removeItem('userRole');\r\n      localStorage.removeItem('remember_user');\r\n      localStorage.removeItem('remember_mode');\r\n      \r\n      // 跳转到登录页\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ==================== 部门管理 API ====================\r\n\r\n/**\r\n * 获取部门列表\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.page - 页码\r\n * @param {number} params.page_size - 每页数量\r\n * @param {string} params.search - 搜索关键词\r\n * @param {string} params.status - 状态筛选\r\n * @param {string} params.level - 层级筛选\r\n * @param {string} params.category - 分类筛选\r\n * @returns {Promise} API响应\r\n */\r\nexport const getDepartments = (params = {}) => {\r\n  return api.get('/organization/departments/', { params });\r\n};\r\n\r\n\r\n/**\r\n * 获取部门详情\r\n * @param {number} id - 部门ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getDepartmentDetail = (id) => {\r\n  return api.get(`/organization/departments/${id}/`);\r\n};\r\n\r\n/**\r\n * 创建部门\r\n * @param {Object} data - 部门数据\r\n * @param {string} data.name - 部门名称\r\n * @param {string} data.code - 部门编码\r\n * @param {number} data.parent - 上级部门ID\r\n * @param {number} data.manager - 部门负责人ID\r\n * @param {number} data.sort_order - 排序\r\n * @param {string} data.status - 状态\r\n * @param {string} data.description - 描述\r\n * @returns {Promise} API响应\r\n */\r\nexport const createDepartment = (data) => {\r\n  return api.post('/organization/departments/', data);\r\n};\r\n\r\n/**\r\n * 更新部门\r\n * @param {number} id - 部门ID\r\n * @param {Object} data - 部门数据\r\n * @returns {Promise} API响应\r\n */\r\nexport const updateDepartment = (id, data) => {\r\n  return api.put(`/organization/departments/${id}/`, data);\r\n};\r\n\r\n/**\r\n * 删除部门\r\n * @param {number} id - 部门ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const deleteDepartment = (id) => {\r\n  return api.delete(`/organization/departments/${id}/`);\r\n};\r\n\r\n/**\r\n * 获取部门树形结构\r\n * @returns {Promise} API响应\r\n */\r\nexport const getDepartmentTree = () => {\r\n  return api.get('/organization/departments/tree/');\r\n};\r\n\r\n/**\r\n * 导出部门列表\r\n * @param {Object} params - 导出参数\r\n * @returns {Promise} API响应\r\n */\r\nexport const exportDepartments = (params = {}) => {\r\n  return api.get('/organization/departments/export/', {\r\n    params,\r\n    responseType: 'blob'\r\n  });\r\n};\r\n\r\n// ==================== 职位管理 API ====================\r\n\r\n/**\r\n * 获取职位列表\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.page - 页码\r\n * @param {number} params.page_size - 每页数量\r\n * @param {string} params.search - 搜索关键词\r\n * @param {string} params.status - 状态筛选\r\n * @param {string} params.level - 级别筛选\r\n * @param {number} params.department - 部门筛选\r\n * @param {string} params.category - 分类筛选\r\n * @returns {Promise} API响应\r\n */\r\nexport const getPositions = (params = {}) => {\r\n  return api.get('/organization/positions/', { params });\r\n};\r\n\r\n/**\r\n * 获取职位详情\r\n * @param {number} id - 职位ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getPositionDetail = (id) => {\r\n  return api.get(`/organization/positions/${id}/`);\r\n};\r\n\r\n/**\r\n * 创建职位\r\n * @param {Object} data - 职位数据\r\n * @param {string} data.name - 职位名称\r\n * @param {string} data.code - 职位编码\r\n * @param {number} data.department - 所属部门ID\r\n * @param {string} data.level - 职位级别\r\n * @param {number} data.min_salary - 最低薪资\r\n * @param {number} data.max_salary - 最高薪资\r\n * @param {number} data.sort_order - 排序\r\n * @param {string} data.status - 状态\r\n * @param {string} data.description - 描述\r\n * @param {string} data.requirements - 职位要求\r\n * @returns {Promise} API响应\r\n */\r\nexport const createPosition = (data) => {\r\n  return api.post('/organization/positions/', data);\r\n};\r\n\r\n/**\r\n * 更新职位\r\n * @param {number} id - 职位ID\r\n * @param {Object} data - 职位数据\r\n * @returns {Promise} API响应\r\n */\r\nexport const updatePosition = (id, data) => {\r\n  return api.put(`/organization/positions/${id}/`, data);\r\n};\r\n\r\n/**\r\n * 删除职位\r\n * @param {number} id - 职位ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const deletePosition = (id) => {\r\n  return api.delete(`/organization/positions/${id}/`);\r\n};\r\n\r\n/**\r\n * 根据部门获取职位列表\r\n * @param {number} departmentId - 部门ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getPositionsByDepartment = (departmentId) => {\r\n  return api.get('/organization/positions/by_department/', {\r\n    params: { department_id: departmentId }\r\n  });\r\n};\r\n\r\n/**\r\n * 导出职位列表\r\n * @param {Object} params - 导出参数\r\n * @returns {Promise} API响应\r\n */\r\nexport const exportPositions = (params = {}) => {\r\n  return api.get('/organization/positions/export/', {\r\n    params,\r\n    responseType: 'blob'\r\n  });\r\n};\r\n\r\n// ==================== 员工管理 API ====================\r\n\r\n/**\r\n * 获取员工列表\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.page - 页码\r\n * @param {number} params.page_size - 每页数量\r\n * @param {string} params.search - 搜索关键词\r\n * @param {string} params.status - 状态筛选\r\n * @param {number} params.department - 部门筛选\r\n * @param {number} params.position - 职位筛选\r\n * @param {string} params.category - 分类筛选\r\n * @returns {Promise} API响应\r\n */\r\nexport const getEmployees = (params = {}) => {\r\n  return api.get('/organization/employees/', { params });\r\n};\r\n\r\n/**\r\n * 获取员工详情\r\n * @param {number} id - 员工ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getEmployeeDetail = (id) => {\r\n  return api.get(`/organization/employees/${id}/`);\r\n};\r\n\r\n/**\r\n * 创建员工\r\n * @param {Object} data - 员工数据\r\n * @param {string} data.name - 员工姓名\r\n * @param {string} data.employee_id - 员工工号\r\n * @param {number} data.user - 关联用户ID\r\n * @param {number} data.department - 所属部门ID\r\n * @param {number} data.position - 职位ID\r\n * @param {number} data.supervisor - 直属上级ID\r\n * @param {string} data.phone - 手机号码\r\n * @param {string} data.email - 邮箱地址\r\n * @param {string} data.hire_date - 入职日期\r\n * @param {number} data.salary - 薪资\r\n * @param {string} data.status - 员工状态\r\n * @param {number} data.sort_order - 排序\r\n * @param {string} data.notes - 备注\r\n * @returns {Promise} API响应\r\n */\r\nexport const createEmployee = (data) => {\r\n  return api.post('/organization/employees/', data);\r\n};\r\n\r\n/**\r\n * 更新员工\r\n * @param {number} id - 员工ID\r\n * @param {Object} data - 员工数据\r\n * @returns {Promise} API响应\r\n */\r\nexport const updateEmployee = (id, data) => {\r\n  return api.put(`/organization/employees/${id}/`, data);\r\n};\r\n\r\n/**\r\n * 删除员工\r\n * @param {number} id - 员工ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const deleteEmployee = (id) => {\r\n  return api.delete(`/organization/employees/${id}/`);\r\n};\r\n\r\n/**\r\n * 获取部门下的员工\r\n * @param {number} departmentId - 部门ID\r\n * @param {Object} params - 查询参数\r\n * @returns {Promise} API响应\r\n */\r\nexport const getDepartmentEmployees = (departmentId, params = {}) => {\r\n  return api.get(`/organization/departments/${departmentId}/employees/`, { params });\r\n};\r\n\r\n/**\r\n * 获取职位下的员工\r\n * @param {number} positionId - 职位ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getPositionEmployees = (positionId) => {\r\n  return api.get(`/organization/positions/${positionId}/employees/`);\r\n};\r\n\r\n/**\r\n * 获取员工的下属列表\r\n * @param {number} employeeId - 员工ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getEmployeeSubordinates = (employeeId) => {\r\n  return api.get(`/organization/employees/${employeeId}/subordinates/`);\r\n};\r\n\r\n/**\r\n * 根据上级获取员工列表\r\n * @param {number} supervisorId - 上级ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getEmployeesBySupervisor = (supervisorId) => {\r\n  return api.get('/organization/employees/by_supervisor/', {\r\n    params: { supervisor_id: supervisorId }\r\n  });\r\n};\r\n\r\n/**\r\n * 获取可用的用户（未关联员工的用户）\r\n * @param {Object} params - 查询参数\r\n * @returns {Promise} API响应\r\n */\r\nexport const getAvailableUsers = (params = {}) => {\r\n  return api.get('/organization/employees/available_users/', { params });\r\n};\r\n\r\n/**\r\n * 更改员工状态\r\n * @param {number} employeeId - 员工ID\r\n * @param {string} status - 新状态\r\n * @returns {Promise} API响应\r\n */\r\nexport const changeEmployeeStatus = (employeeId, status) => {\r\n  return api.post(`/organization/employees/${employeeId}/change_status/`, { status });\r\n};\r\n\r\n/**\r\n * 导出员工列表\r\n * @param {Object} params - 导出参数\r\n * @returns {Promise} API响应\r\n */\r\nexport const exportEmployees = (params = {}) => {\r\n  return api.get('/organization/employees/export/', {\r\n    params,\r\n    responseType: 'blob'\r\n  });\r\n};\r\n\r\n// ==================== 组织架构统计 API ====================\r\n\r\n/**\r\n * 获取部门统计信息\r\n * @returns {Promise} API响应\r\n */\r\nexport const getDepartmentStatistics = () => {\r\n  return api.get('/organization/departments/statistics/');\r\n};\r\n\r\n/**\r\n * 获取员工统计信息\r\n * @returns {Promise} API响应\r\n */\r\nexport const getEmployeeStatistics = () => {\r\n  return api.get('/organization/employees/statistics/');\r\n};\r\n\r\n// ==================== 组织架构图 API ====================\r\n\r\n/**\r\n * 获取组织架构图数据\r\n * @param {Object} params - 查询参数\r\n * @param {number} params.department_id - 根部门ID（可选）\r\n * @param {number} params.max_depth - 最大深度（可选）\r\n * @returns {Promise} API响应\r\n */\r\nexport const getOrganizationChart = (params = {}) => {\r\n  return api.get('/organization/chart/', { params });\r\n};\r\n\r\n/**\r\n * 获取员工关系图数据\r\n * @param {number} employeeId - 员工ID\r\n * @returns {Promise} API响应\r\n */\r\nexport const getEmployeeRelationChart = (employeeId) => {\r\n  return api.get(`/organization/employees/${employeeId}/relations/`);\r\n};\r\n\r\n// ==================== 批量操作 API ====================\r\n\r\n/**\r\n * 批量导入部门\r\n * @param {FormData} formData - 包含Excel文件的FormData\r\n * @returns {Promise} API响应\r\n */\r\nexport const batchImportDepartments = (formData) => {\r\n  return api.post('/organization/departments/batch_import/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * 批量导入职位\r\n * @param {FormData} formData - 包含Excel文件的FormData\r\n * @returns {Promise} API响应\r\n */\r\nexport const batchImportPositions = (formData) => {\r\n  return api.post('/organization/positions/batch_import/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * 批量导入员工\r\n * @param {FormData} formData - 包含Excel文件的FormData\r\n * @returns {Promise} API响应\r\n */\r\nexport const batchImportEmployees = (formData) => {\r\n  return api.post('/organization/employees/batch_import/', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * 批量更新员工状态\r\n * @param {Object} data - 批量更新数据\r\n * @param {Array} data.employee_ids - 员工ID列表\r\n * @param {string} data.status - 新状态\r\n * @returns {Promise} API响应\r\n */\r\nexport const batchUpdateEmployeeStatus = (data) => {\r\n  return api.post('/organization/employees/batch_update_status/', data);\r\n};\r\n\r\n/**\r\n * 批量删除员工\r\n * @param {Array} employeeIds - 员工ID列表\r\n * @returns {Promise} API响应\r\n */\r\nexport const batchDeleteEmployees = (employeeIds) => {\r\n  return api.post('/organization/employees/batch_delete/', {\r\n    employee_ids: employeeIds\r\n  });\r\n};\r\n\r\n// ==================== 默认导出 ====================\r\n\r\nexport default {\r\n  // 部门管理\r\n  getDepartments,\r\n  getDepartmentDetail,\r\n  createDepartment,\r\n  updateDepartment,\r\n  deleteDepartment,\r\n  getDepartmentTree,\r\n  getDepartmentEmployees,\r\n  exportDepartments,\r\n  \r\n  // 职位管理\r\n  getPositions,\r\n  getPositionDetail,\r\n  createPosition,\r\n  updatePosition,\r\n  deletePosition,\r\n  getPositionsByDepartment,\r\n  getPositionEmployees,\r\n  exportPositions,\r\n  \r\n  // 员工管理\r\n  getEmployees,\r\n  getEmployeeDetail,\r\n  createEmployee,\r\n  updateEmployee,\r\n  deleteEmployee,\r\n  getEmployeeSubordinates,\r\n  getEmployeesBySupervisor,\r\n  getAvailableUsers,\r\n  changeEmployeeStatus,\r\n  exportEmployees,\r\n  \r\n  // 统计信息\r\n  getDepartmentStatistics,\r\n  getEmployeeStatistics,\r\n  \r\n  // 组织架构图\r\n  getOrganizationChart,\r\n  getEmployeeRelationChart,\r\n  \r\n  // 批量操作\r\n  batchImportDepartments,\r\n  batchImportPositions,\r\n  batchImportEmployees,\r\n  batchUpdateEmployeeStatus,\r\n  batchDeleteEmployees\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}