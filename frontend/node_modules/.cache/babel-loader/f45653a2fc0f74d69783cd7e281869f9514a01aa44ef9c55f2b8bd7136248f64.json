{"ast":null,"code":"import { ref, computed, onMounted, watch } from 'vue';\nimport { message } from 'ant-design-vue';\nimport { userAPI } from '@/api/users';\nimport { dictionaryAPI } from '@/api/index';\nimport { TeamOutlined, PlusOutlined, ExportOutlined, ReloadOutlined, UserOutlined, CrownOutlined, SafetyOutlined, EyeOutlined, CheckCircleOutlined, CloseCircleOutlined, EditOutlined, DeleteOutlined, KeyOutlined, StopOutlined, CheckOutlined, CloseOutlined, LogoutOutlined } from '@ant-design/icons-vue';\n\n// 响应式数据\n\nexport default {\n  __name: 'AdminUsers',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const loading = ref(false);\n    const modalVisible = ref(false);\n    const isEditing = ref(false);\n    const searchText = ref('');\n    const roleFilter = ref('');\n    const activeCategory = ref('all');\n    const selectedRowKeys = ref([]);\n\n    // 表单数据\n    const formRef = ref();\n    const formData = ref({\n      username: '',\n      realName: '',\n      email: '',\n      phone: '',\n      role: 'viewer',\n      department: '',\n      password: '',\n      isActive: true\n    });\n\n    // 用户数据\n    const users = ref([]);\n    const userStats = ref({\n      total: 0,\n      active: 0,\n      admin: 0\n    });\n\n    // 分类列表（从字典动态获取）\n    const categoryList = ref([]);\n\n    // 获取用户分类字典数据\n    const fetchUserCategories = async () => {\n      try {\n        const response = await dictionaryAPI.getDictionaryByCategory('user_category', {\n          status: 'active',\n          simple: 'true' // 获取简化数据格式\n        });\n        if (response.data && response.data.code === 200) {\n          const dictionary = response.data.data || [];\n\n          // 转换字典数据为分类格式\n          const dictionaryCategories = dictionary.sort((a, b) => (b.priority || 0) - (a.priority || 0)).map(item => {\n            // 解析config中的配置\n            let config = {};\n            try {\n              config = item.config ? JSON.parse(item.config) : {};\n            } catch (e) {\n              console.warn('解析字典配置失败:', item.config);\n            }\n            return {\n              key: item.key,\n              name: item.label,\n              icon: config.icon || 'UserOutlined',\n              count: 0\n            };\n          });\n\n          // 始终包含默认分类\n          const defaultCategories = [{\n            key: 'all',\n            name: '全部用户',\n            icon: 'TeamOutlined',\n            count: 0\n          }, {\n            key: 'active',\n            name: '活跃用户',\n            icon: 'CheckCircleOutlined',\n            count: 0\n          }, {\n            key: 'inactive',\n            name: '禁用用户',\n            icon: 'CloseCircleOutlined',\n            count: 0\n          }];\n\n          // 合并默认分类和字典分类\n          categoryList.value = [...defaultCategories, ...dictionaryCategories];\n          console.log('用户分类字典加载成功:', categoryList.value);\n        } else {\n          console.warn('获取用户分类字典失败，使用默认分类');\n          setDefaultCategories();\n        }\n      } catch (error) {\n        console.error('获取用户分类字典失败:', error);\n        // 如果获取字典失败，使用默认分类\n        setDefaultCategories();\n      }\n    };\n\n    // 设置默认分类（作为备用方案）\n    const setDefaultCategories = () => {\n      categoryList.value = [{\n        key: 'all',\n        name: '全部用户',\n        icon: 'TeamOutlined',\n        count: 0\n      }, {\n        key: 'admin',\n        name: '管理员',\n        icon: 'CrownOutlined',\n        count: 0\n      }, {\n        key: 'operator',\n        name: '操作员',\n        icon: 'SafetyOutlined',\n        count: 0\n      }, {\n        key: 'viewer',\n        name: '观察者',\n        icon: 'EyeOutlined',\n        count: 0\n      }, {\n        key: 'active',\n        name: '活跃用户',\n        icon: 'CheckCircleOutlined',\n        count: 0\n      }, {\n        key: 'inactive',\n        name: '禁用用户',\n        icon: 'CloseCircleOutlined',\n        count: 0\n      }];\n    };\n\n    // 表格列配置\n    const tableColumns = [{\n      title: '用户名',\n      dataIndex: 'username',\n      key: 'username'\n    }, {\n      title: '姓名',\n      dataIndex: 'realName',\n      key: 'realName'\n    }, {\n      title: '邮箱',\n      dataIndex: 'email',\n      key: 'email'\n    }, {\n      title: '角色',\n      key: 'role',\n      width: 100,\n      filters: [{\n        text: '管理员',\n        value: 'admin'\n      }, {\n        text: '操作员',\n        value: 'operator'\n      }, {\n        text: '观察者',\n        value: 'viewer'\n      }]\n    }, {\n      title: '部门',\n      dataIndex: 'department',\n      key: 'department'\n    }, {\n      title: '在线状态',\n      key: 'onlineStatus',\n      width: 100,\n      filters: [{\n        text: '在线',\n        value: true\n      }, {\n        text: '离线',\n        value: false\n      }]\n    }, {\n      title: '状态',\n      key: 'status',\n      width: 80,\n      filters: [{\n        text: '启用',\n        value: true\n      }, {\n        text: '禁用',\n        value: false\n      }]\n    },\n    // {\n    //   title: '最后登录',\n    //   key: 'lastLogin',\n    //   width: 150,\n    // },\n    {\n      title: '操作',\n      key: 'actions',\n      width: 200,\n      fixed: 'right'\n    }];\n\n    // 分页配置\n    const pagination = ref({\n      current: 1,\n      pageSize: 10,\n      total: 0,\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,\n      onChange: (page, pageSize) => {\n        pagination.value.current = page;\n        pagination.value.pageSize = pageSize;\n        fetchUsers();\n      }\n    });\n\n    // 行选择配置\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: keys => {\n        selectedRowKeys.value = keys;\n      }\n    };\n\n    // 表单验证规则\n    const formRules = {\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 20,\n        message: '用户名长度在3-20个字符',\n        trigger: 'blur'\n      }],\n      realName: [{\n        required: true,\n        message: '请输入真实姓名',\n        trigger: 'blur'\n      }],\n      email: [{\n        required: true,\n        message: '请输入邮箱地址',\n        trigger: 'blur'\n      }, {\n        type: 'email',\n        message: '请输入正确的邮箱格式',\n        trigger: 'blur'\n      }],\n      role: [{\n        required: true,\n        message: '请选择用户角色',\n        trigger: 'change'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        message: '密码长度不能少于6个字符',\n        trigger: 'blur'\n      }],\n      phone: [{\n        pattern: /^1[3-9]\\d{9}$/,\n        message: '请输入正确的手机号码',\n        trigger: 'blur'\n      }]\n    };\n\n    // 计算属性\n    const filteredUsers = computed(() => {\n      // 确保users.value是数组\n      if (!Array.isArray(users.value)) {\n        console.warn('users.value is not an array in filteredUsers:', users.value);\n        return [];\n      }\n      let result = users.value;\n\n      // 分类筛选\n      if (activeCategory.value !== 'all') {\n        if (activeCategory.value === 'active') {\n          result = result.filter(user => user.isActive);\n        } else if (activeCategory.value === 'inactive') {\n          result = result.filter(user => !user.isActive);\n        } else {\n          result = result.filter(user => user.role === activeCategory.value);\n        }\n      }\n\n      // 角色筛选\n      if (roleFilter.value) {\n        result = result.filter(user => user.role === roleFilter.value);\n      }\n\n      // 搜索筛选\n      if (searchText.value) {\n        const searchLower = searchText.value.toLowerCase();\n        result = result.filter(user => user.username?.toLowerCase().includes(searchLower) || user.realName?.toLowerCase().includes(searchLower) || user.email?.toLowerCase().includes(searchLower) || user.department?.toLowerCase().includes(searchLower));\n      }\n      return result;\n    });\n\n    // 获取当前分类名称\n    const getCurrentCategoryName = () => {\n      const category = categoryList.value.find(cat => cat.key === activeCategory.value);\n      return category ? category.name : '全部用户';\n    };\n\n    // 获取头像颜色\n    const getAvatarColor = role => {\n      const colors = {\n        admin: '#faad14',\n        operator: '#1890ff',\n        viewer: '#52c41a'\n      };\n      return colors[role] || '#d9d9d9';\n    };\n\n    // 获取角色颜色\n    const getRoleColor = role => {\n      const colors = {\n        admin: 'gold',\n        operator: 'blue',\n        viewer: 'green'\n      };\n      return colors[role] || 'default';\n    };\n\n    // 获取角色文本\n    const getRoleText = role => {\n      const texts = {\n        admin: '管理员',\n        operator: '操作员',\n        viewer: '观察者'\n      };\n      return texts[role] || role;\n    };\n\n    // 获取当前用户名\n    const currentUsername = computed(() => {\n      return localStorage.getItem('username') || '';\n    });\n\n    // 获取删除确认标题\n    const getDeleteConfirmTitle = record => {\n      if (record.username === currentUsername.value) {\n        return '警告：您将删除自己的账户！删除后您将被自动退出登录，确定继续吗？';\n      }\n      return `确定要删除用户 \"${record.username}\" 吗？`;\n    };\n\n    // 获取批量删除确认标题\n    const getBatchDeleteConfirmTitle = () => {\n      // 确保users.value是数组\n      if (!Array.isArray(users.value)) {\n        console.warn('users.value is not an array:', users.value);\n        return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\n      }\n      const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\n      const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername.value);\n      if (isCurrentUserIncluded) {\n        return '警告：您在批量删除中包含了自己的账户！删除后您将被自动退出登录，确定继续吗？';\n      }\n      return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\n    };\n\n    // 格式化日期\n    const formatDate = date => {\n      if (!date) return '';\n      return new Date(date).toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 更新统计数据\n    const updateStats = () => {\n      // 确保users.value是数组\n      if (!Array.isArray(users.value)) {\n        console.warn('users.value is not an array in updateStats:', users.value);\n        users.value = []; // 重置为空数组\n      }\n      const stats = {\n        total: users.value.length,\n        active: users.value.filter(user => user.isActive).length,\n        admin: users.value.filter(user => user.role === 'admin').length\n      };\n      userStats.value = stats;\n\n      // 更新分类计数（支持动态分类）\n      categoryList.value.forEach(category => {\n        switch (category.key) {\n          case 'all':\n            category.count = stats.total;\n            break;\n          case 'active':\n            category.count = stats.active;\n            break;\n          case 'inactive':\n            category.count = stats.total - stats.active;\n            break;\n          case 'admin':\n            category.count = users.value.filter(user => user.role === 'admin').length;\n            break;\n          case 'operator':\n            category.count = users.value.filter(user => user.role === 'operator').length;\n            break;\n          case 'viewer':\n            category.count = users.value.filter(user => user.role === 'viewer').length;\n            break;\n          default:\n            // 对于其他动态分类，根据角色进行计数\n            if (category.key === 'admin' || category.key === 'operator' || category.key === 'viewer') {\n              category.count = users.value.filter(user => user.role === category.key).length;\n            } else {\n              // 其他类型的分类可以根据需要扩展\n              category.count = 0;\n            }\n            break;\n        }\n      });\n    };\n\n    // 获取用户列表\n    const fetchUsers = async () => {\n      try {\n        loading.value = true;\n        const params = {\n          page: pagination.value.current,\n          pageSize: pagination.value.pageSize,\n          search: searchText.value,\n          role: roleFilter.value\n        };\n\n        // 移除空参数\n        Object.keys(params).forEach(key => {\n          if (!params[key]) {\n            delete params[key];\n          }\n        });\n        const response = await userAPI.getUserList(params);\n        if (response.data && response.data.code === 200) {\n          const data = response.data.data;\n          // 处理用户数据，统一字段格式\n          users.value = (data.list || data.results || []).map(user => ({\n            id: user.id,\n            username: user.username,\n            realName: user.profile?.real_name || user.real_name || user.first_name + ' ' + user.last_name,\n            email: user.email,\n            phone: user.profile?.phone || user.phone || '',\n            role: user.profile?.role || 'viewer',\n            department: user.profile?.department || '',\n            isActive: user.is_active !== undefined ? user.is_active : true,\n            lastLogin: user.last_login,\n            createdAt: user.date_joined || user.created_at,\n            // 新增在线状态相关字段\n            isOnline: user.is_online || false,\n            onlineSessions: user.online_sessions || []\n          }));\n          pagination.value.total = data.total || data.count || users.value.length;\n\n          // 获取用户统计\n          await fetchUserStats();\n          updateStats();\n        } else {\n          console.error('API响应格式错误:', response.data);\n          throw new Error('API响应格式错误');\n        }\n      } catch (error) {\n        console.error('获取用户列表失败:', error);\n\n        // 对于401错误，提供更友好的提示\n        if (error.response?.status === 401) {\n          message.error({\n            content: '身份认证已过期，请重新登录',\n            duration: 5\n          });\n\n          // 清除本地状态并跳转到登录页\n          setTimeout(() => {\n            localStorage.removeItem('token');\n            localStorage.removeItem('userInfo');\n            localStorage.removeItem('isLoggedIn');\n            localStorage.removeItem('userType');\n            localStorage.removeItem('username');\n            window.location.href = '/#/login';\n          }, 2000);\n        } else {\n          // 其他错误的处理\n          const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message;\n          message.error(`获取用户列表失败: ${errorMsg}`);\n        }\n\n        // 如果API失败，使用空数组而不是模拟数据\n        users.value = [];\n        pagination.value.total = 0;\n        updateStats();\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 获取用户统计数据\n    const fetchUserStats = async () => {\n      try {\n        const response = await userAPI.getUserStats();\n        if (response.data && response.data.code === 200) {\n          const stats = response.data.data;\n          userStats.value = {\n            total: stats.total || 0,\n            active: stats.active || 0,\n            admin: stats.admin || 0\n          };\n        }\n      } catch (error) {\n        console.error('获取用户统计失败:', error);\n        // 统计失败时使用本地计算\n        userStats.value = {\n          total: users.value.length,\n          active: users.value.filter(user => user.isActive).length,\n          admin: users.value.filter(user => user.role === 'admin').length\n        };\n      }\n    };\n\n    // 分类切换\n    const handleCategoryChange = key => {\n      activeCategory.value = key;\n      selectedRowKeys.value = [];\n      pagination.value.current = 1; // 重置页码\n      // 分类筛选在前端处理，不需要重新获取数据\n    };\n\n    // 搜索处理\n    const handleSearch = () => {\n      selectedRowKeys.value = [];\n      pagination.value.current = 1; // 重置页码\n      fetchUsers(); // 重新获取数据\n    };\n\n    // 角色筛选\n    const handleRoleFilter = () => {\n      selectedRowKeys.value = [];\n      pagination.value.current = 1; // 重置页码\n      fetchUsers(); // 重新获取数据\n    };\n\n    // 刷新数据\n    const refreshData = () => {\n      fetchUsers();\n      message.success('数据刷新成功');\n    };\n\n    // 显示新建用户弹窗\n    const showAddModal = () => {\n      isEditing.value = false;\n      formData.value = {\n        username: '',\n        realName: '',\n        email: '',\n        phone: '',\n        role: 'viewer',\n        department: '',\n        password: '',\n        isActive: true\n      };\n      modalVisible.value = true;\n    };\n\n    // 编辑用户\n    const editUser = record => {\n      isEditing.value = true;\n      formData.value = {\n        id: record.id,\n        username: record.username,\n        realName: record.realName,\n        email: record.email,\n        phone: record.phone,\n        role: record.role,\n        department: record.department,\n        isActive: record.isActive\n      };\n      modalVisible.value = true;\n    };\n\n    // 提交表单\n    const handleSubmit = async () => {\n      try {\n        await formRef.value.validate();\n        loading.value = true;\n\n        // 准备API请求数据\n        const apiData = {\n          username: formData.value.username,\n          email: formData.value.email,\n          real_name: formData.value.realName,\n          phone: formData.value.phone,\n          role: formData.value.role,\n          department: formData.value.department,\n          is_active: formData.value.isActive\n        };\n        if (!isEditing.value) {\n          apiData.password = formData.value.password;\n        }\n        let response;\n        if (isEditing.value) {\n          // 编辑用户\n          response = await userAPI.updateUser(formData.value.id, apiData);\n        } else {\n          // 新建用户\n          response = await userAPI.createUser(apiData);\n        }\n        if (response.data && response.data.code === 200) {\n          message.success(isEditing.value ? '用户更新成功' : '用户创建成功');\n          modalVisible.value = false;\n          // 重新获取数据\n          await fetchUsers();\n        } else {\n          throw new Error(response.data?.error || response.data?.message || '操作失败');\n        }\n      } catch (error) {\n        console.error('用户操作失败:', error);\n        const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\n        message.error(errorMsg);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 取消操作\n    const handleCancel = () => {\n      modalVisible.value = false;\n      formRef.value?.resetFields();\n    };\n\n    // 切换用户状态\n    const toggleUserStatus = async record => {\n      try {\n        loading.value = true;\n        const response = await userAPI.toggleUserStatus(record.id, !record.isActive);\n        if (response.data && response.data.code === 200) {\n          message.success(`用户${!record.isActive ? '启用' : '禁用'}成功`);\n          // 重新获取数据\n          await fetchUsers();\n        } else {\n          throw new Error(response.data?.error || response.data?.message || '操作失败');\n        }\n      } catch (error) {\n        console.error('切换用户状态失败:', error);\n        const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\n        message.error(errorMsg);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 重置密码\n    const resetPassword = async record => {\n      try {\n        loading.value = true;\n        const response = await userAPI.resetUserPassword(record.id);\n        if (response.data && response.data.code === 200) {\n          message.success('密码重置成功,新密码为: 123456');\n        } else {\n          throw new Error(response.data?.error || response.data?.message || '重置密码失败');\n        }\n      } catch (error) {\n        console.error('重置密码失败:', error);\n        const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '重置密码失败，请重试';\n        message.error(errorMsg);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 踢出用户\n    const kickOutUser = async record => {\n      try {\n        loading.value = true;\n        const response = await userAPI.kickOutUser(record.id);\n        if (response.data && response.data.code === 200) {\n          const data = response.data.data;\n          message.success({\n            content: `成功踢出用户 ${data.username}，关闭了 ${data.kicked_sessions} 个会话`,\n            duration: 3\n          });\n\n          // 重新获取数据以更新在线状态\n          await fetchUsers();\n        } else {\n          throw new Error(response.data?.error || response.data?.message || '踢出用户失败');\n        }\n      } catch (error) {\n        console.error('踢出用户失败:', error);\n        if (error.response?.status === 403) {\n          message.error('权限不足，只有管理员才能踢出用户');\n        } else {\n          const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '踢出用户失败，请重试';\n          message.error(errorMsg);\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 删除用户\n    const deleteUser = async record => {\n      try {\n        loading.value = true;\n\n        // 检查是否删除当前登录用户\n        const currentUsername = localStorage.getItem('username');\n        const isCurrentUser = record.username === currentUsername;\n        const response = await userAPI.deleteUser(record.id);\n        if (response.data && response.data.code === 200) {\n          message.success('用户删除成功');\n\n          // 如果删除的是当前用户，提示用户并重定向到登录页\n          if (isCurrentUser) {\n            message.warning({\n              content: '您删除了自己的账户，系统将在3秒后自动退出登录',\n              duration: 3\n            });\n\n            // 3秒后清除登录状态并跳转到登录页\n            setTimeout(() => {\n              localStorage.removeItem('token');\n              localStorage.removeItem('userInfo');\n              localStorage.removeItem('isLoggedIn');\n              localStorage.removeItem('userType');\n              localStorage.removeItem('username');\n              window.location.href = '/#/login';\n            }, 3000);\n            return; // 不执行后续的fetchUsers，避免401错误\n          }\n\n          // 重新获取数据（只有非当前用户时才执行）\n          await fetchUsers();\n        } else {\n          throw new Error(response.data?.error || response.data?.message || '删除失败');\n        }\n      } catch (error) {\n        console.error('删除用户失败:', error);\n\n        // 如果是401错误且删除的是当前用户，给出特殊提示\n        if (error.response?.status === 401) {\n          const currentUsername = localStorage.getItem('username');\n          const isCurrentUser = record.username === currentUsername;\n          if (isCurrentUser) {\n            message.success({\n              content: '用户删除成功，您的账户已被删除，系统将自动退出登录',\n              duration: 3\n            });\n            setTimeout(() => {\n              localStorage.removeItem('token');\n              localStorage.removeItem('userInfo');\n              localStorage.removeItem('isLoggedIn');\n              localStorage.removeItem('userType');\n              localStorage.removeItem('username');\n              window.location.href = '/#/login';\n            }, 3000);\n            return;\n          } else {\n            message.error('认证失败，请重新登录');\n          }\n        } else {\n          const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '删除失败，请重试';\n          message.error(errorMsg);\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 批量启用\n    const batchEnable = async () => {\n      try {\n        loading.value = true;\n\n        // 批量操作需要逐个调用API\n        const promises = selectedRowKeys.value.map(id => {\n          const user = users.value.find(u => u.id === id);\n          if (user && !user.isActive) {\n            return userAPI.toggleUserStatus(id, true);\n          }\n          return Promise.resolve();\n        });\n        await Promise.all(promises);\n        selectedRowKeys.value = [];\n        message.success('批量启用成功');\n        // 重新获取数据\n        await fetchUsers();\n      } catch (error) {\n        console.error('批量启用失败:', error);\n        const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量启用失败，请重试';\n        message.error(errorMsg);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 批量禁用\n    const batchDisable = async () => {\n      try {\n        loading.value = true;\n\n        // 批量操作需要逐个调用API\n        const promises = selectedRowKeys.value.map(id => {\n          const user = users.value.find(u => u.id === id);\n          if (user && user.isActive) {\n            return userAPI.toggleUserStatus(id, false);\n          }\n          return Promise.resolve();\n        });\n        await Promise.all(promises);\n        selectedRowKeys.value = [];\n        message.success('批量禁用成功');\n        // 重新获取数据\n        await fetchUsers();\n      } catch (error) {\n        console.error('批量禁用失败:', error);\n        const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量禁用失败，请重试';\n        message.error(errorMsg);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 批量删除\n    const batchDelete = async () => {\n      try {\n        loading.value = true;\n\n        // 检查是否包含当前登录用户\n        const currentUsername = localStorage.getItem('username');\n\n        // 确保users.value是数组\n        if (!Array.isArray(users.value)) {\n          console.warn('users.value is not an array in batchDelete:', users.value);\n          message.error('数据异常，请刷新页面后重试');\n          return;\n        }\n        const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\n        const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\n        const response = await userAPI.batchDeleteUsers(selectedRowKeys.value);\n        if (response.data && response.data.code === 200) {\n          selectedRowKeys.value = [];\n          message.success('批量删除成功');\n\n          // 如果删除的用户中包含当前用户，提示用户并重定向到登录页\n          if (isCurrentUserIncluded) {\n            message.warning({\n              content: '您在批量删除中包含了自己的账户，系统将在3秒后自动退出登录',\n              duration: 3\n            });\n\n            // 3秒后清除登录状态并跳转到登录页\n            setTimeout(() => {\n              localStorage.removeItem('token');\n              localStorage.removeItem('userInfo');\n              localStorage.removeItem('isLoggedIn');\n              localStorage.removeItem('userType');\n              localStorage.removeItem('username');\n              window.location.href = '/#/login';\n            }, 3000);\n            return; // 不执行后续的fetchUsers，避免401错误\n          }\n\n          // 重新获取数据（只有非当前用户时才执行）\n          await fetchUsers();\n        } else {\n          throw new Error(response.data?.error || response.data?.message || '批量删除失败');\n        }\n      } catch (error) {\n        console.error('批量删除失败:', error);\n\n        // 如果是401错误，可能是删除了当前用户后的后续请求\n        if (error.response?.status === 401) {\n          const currentUsername = localStorage.getItem('username');\n\n          // 确保users.value是数组\n          if (!Array.isArray(users.value)) {\n            console.warn('users.value is not an array in error handler:', users.value);\n            message.error('认证失败，请重新登录');\n            setTimeout(() => {\n              localStorage.removeItem('token');\n              localStorage.removeItem('userInfo');\n              localStorage.removeItem('isLoggedIn');\n              localStorage.removeItem('userType');\n              localStorage.removeItem('username');\n              window.location.href = '/#/login';\n            }, 2000);\n            return;\n          }\n          const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\n          const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\n          if (isCurrentUserIncluded) {\n            message.success({\n              content: '批量删除成功，您的账户已被删除，系统将自动退出登录',\n              duration: 3\n            });\n            setTimeout(() => {\n              localStorage.removeItem('token');\n              localStorage.removeItem('userInfo');\n              localStorage.removeItem('isLoggedIn');\n              localStorage.removeItem('userType');\n              localStorage.removeItem('username');\n              window.location.href = '/#/login';\n            }, 3000);\n            return;\n          } else {\n            message.error('认证失败，请重新登录');\n          }\n        } else {\n          const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量删除失败，请重试';\n          message.error(errorMsg);\n        }\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 导出用户\n    const exportUsers = async () => {\n      try {\n        loading.value = true;\n        const response = await userAPI.exportUsers();\n        if (response.data) {\n          // 创建下载链接\n          const blob = new Blob([response.data], {\n            type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          });\n          const url = window.URL.createObjectURL(blob);\n          const link = document.createElement('a');\n          link.href = url;\n          link.download = `用户列表_${new Date().toISOString().slice(0, 10)}.xlsx`;\n          link.click();\n          window.URL.revokeObjectURL(url);\n          message.success('用户列表导出成功');\n        } else {\n          throw new Error('导出数据为空');\n        }\n      } catch (error) {\n        console.error('导出用户列表失败:', error);\n        const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '导出失败，请重试';\n        message.error(errorMsg);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 组件挂载\n    onMounted(async () => {\n      // 同时获取用户分类和用户数据\n      await Promise.all([fetchUserCategories(), fetchUsers()]);\n    });\n\n    // 监听搜索条件变化，实现实时搜索\n    watch([searchText, roleFilter], () => {\n      // 使用防抖避免频繁请求\n      clearTimeout(searchTimeout.value);\n      searchTimeout.value = setTimeout(() => {\n        pagination.value.current = 1; // 重置页码\n        fetchUsers();\n      }, 500);\n    });\n\n    // 搜索防抖定时器\n    const searchTimeout = ref(null);\n    const __returned__ = {\n      loading,\n      modalVisible,\n      isEditing,\n      searchText,\n      roleFilter,\n      activeCategory,\n      selectedRowKeys,\n      formRef,\n      formData,\n      users,\n      userStats,\n      categoryList,\n      fetchUserCategories,\n      setDefaultCategories,\n      tableColumns,\n      pagination,\n      rowSelection,\n      formRules,\n      filteredUsers,\n      getCurrentCategoryName,\n      getAvatarColor,\n      getRoleColor,\n      getRoleText,\n      currentUsername,\n      getDeleteConfirmTitle,\n      getBatchDeleteConfirmTitle,\n      formatDate,\n      updateStats,\n      fetchUsers,\n      fetchUserStats,\n      handleCategoryChange,\n      handleSearch,\n      handleRoleFilter,\n      refreshData,\n      showAddModal,\n      editUser,\n      handleSubmit,\n      handleCancel,\n      toggleUserStatus,\n      resetPassword,\n      kickOutUser,\n      deleteUser,\n      batchEnable,\n      batchDisable,\n      batchDelete,\n      exportUsers,\n      searchTimeout,\n      ref,\n      computed,\n      onMounted,\n      watch,\n      get message() {\n        return message;\n      },\n      get userAPI() {\n        return userAPI;\n      },\n      get dictionaryAPI() {\n        return dictionaryAPI;\n      },\n      get TeamOutlined() {\n        return TeamOutlined;\n      },\n      get PlusOutlined() {\n        return PlusOutlined;\n      },\n      get ExportOutlined() {\n        return ExportOutlined;\n      },\n      get ReloadOutlined() {\n        return ReloadOutlined;\n      },\n      get UserOutlined() {\n        return UserOutlined;\n      },\n      get CrownOutlined() {\n        return CrownOutlined;\n      },\n      get SafetyOutlined() {\n        return SafetyOutlined;\n      },\n      get EyeOutlined() {\n        return EyeOutlined;\n      },\n      get CheckCircleOutlined() {\n        return CheckCircleOutlined;\n      },\n      get CloseCircleOutlined() {\n        return CloseCircleOutlined;\n      },\n      get EditOutlined() {\n        return EditOutlined;\n      },\n      get DeleteOutlined() {\n        return DeleteOutlined;\n      },\n      get KeyOutlined() {\n        return KeyOutlined;\n      },\n      get StopOutlined() {\n        return StopOutlined;\n      },\n      get CheckOutlined() {\n        return CheckOutlined;\n      },\n      get CloseOutlined() {\n        return CloseOutlined;\n      },\n      get LogoutOutlined() {\n        return LogoutOutlined;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","watch","message","userAPI","dictionaryAPI","TeamOutlined","PlusOutlined","ExportOutlined","ReloadOutlined","UserOutlined","CrownOutlined","SafetyOutlined","EyeOutlined","CheckCircleOutlined","CloseCircleOutlined","EditOutlined","DeleteOutlined","KeyOutlined","StopOutlined","CheckOutlined","CloseOutlined","LogoutOutlined","loading","modalVisible","isEditing","searchText","roleFilter","activeCategory","selectedRowKeys","formRef","formData","username","realName","email","phone","role","department","password","isActive","users","userStats","total","active","admin","categoryList","fetchUserCategories","response","getDictionaryByCategory","status","simple","data","code","dictionary","dictionaryCategories","sort","a","b","priority","map","item","config","JSON","parse","e","console","warn","key","name","label","icon","count","defaultCategories","value","log","setDefaultCategories","error","tableColumns","title","dataIndex","width","filters","text","fixed","pagination","current","pageSize","showSizeChanger","showQuickJumper","showTotal","range","onChange","page","fetchUsers","rowSelection","keys","formRules","required","trigger","min","max","type","pattern","filteredUsers","Array","isArray","result","filter","user","searchLower","toLowerCase","includes","getCurrentCategoryName","category","find","cat","getAvatarColor","colors","operator","viewer","getRoleColor","getRoleText","texts","currentUsername","localStorage","getItem","getDeleteConfirmTitle","record","getBatchDeleteConfirmTitle","length","selectedUsers","id","isCurrentUserIncluded","some","formatDate","date","Date","toLocaleString","year","month","day","hour","minute","updateStats","stats","forEach","params","search","Object","getUserList","list","results","profile","real_name","first_name","last_name","is_active","undefined","lastLogin","last_login","createdAt","date_joined","created_at","isOnline","is_online","onlineSessions","online_sessions","fetchUserStats","Error","content","duration","setTimeout","removeItem","window","location","href","errorMsg","getUserStats","handleCategoryChange","handleSearch","handleRoleFilter","refreshData","success","showAddModal","editUser","handleSubmit","validate","apiData","updateUser","createUser","handleCancel","resetFields","toggleUserStatus","resetPassword","resetUserPassword","kickOutUser","kicked_sessions","deleteUser","isCurrentUser","warning","batchEnable","promises","u","Promise","resolve","all","batchDisable","batchDelete","batchDeleteUsers","exportUsers","blob","Blob","url","URL","createObjectURL","link","document","createElement","download","toISOString","slice","click","revokeObjectURL","clearTimeout","searchTimeout"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/views/admin/AdminUsers.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-users admin-page\">\r\n    <!-- 页面标题区域 -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <h1 class=\"page-title\">\r\n          <TeamOutlined />\r\n          用户管理\r\n        </h1>\r\n        <p class=\"page-description\">管理系统用户和权限</p>\r\n      </div>\r\n      <div class=\"header-actions\">\r\n        <a-space>\r\n          <a-tooltip title=\"导出用户列表为Excel文件\" placement=\"bottom\">\r\n            <a-button @click=\"exportUsers\">\r\n              <ExportOutlined />\r\n              导出用户\r\n            </a-button>\r\n          </a-tooltip>\r\n          <a-tooltip title=\"创建新的用户账户\" placement=\"bottom\">\r\n            <a-button type=\"primary\" @click=\"showAddModal\">\r\n              <PlusOutlined />\r\n              新建用户\r\n            </a-button>\r\n          </a-tooltip>\r\n        </a-space>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 用户管理布局 -->\r\n    <div class=\"users-layout admin-layout\">\r\n      <!-- 左侧菜单 -->\r\n      <div class=\"users-menu admin-menu\">\r\n        <div class=\"menu-title\">用户分类</div>\r\n        <div class=\"menu-list\">\r\n          <div \r\n            v-for=\"category in categoryList\" \r\n            :key=\"category.key\"\r\n            :class=\"['menu-item', { 'active': activeCategory === category.key }]\"\r\n            @click=\"handleCategoryChange(category.key)\"\r\n          >\r\n            <component :is=\"category.icon\" class=\"menu-icon\" />\r\n            <span class=\"menu-text\">{{ category.name }}</span>\r\n            <a-badge \r\n              v-if=\"category.count\" \r\n              :count=\"category.count\" \r\n              class=\"menu-badge\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 统计信息 -->\r\n        <div class=\"menu-stats\">\r\n          <div class=\"stats-title\">用户统计</div>\r\n          <div class=\"stats-list\">\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">总用户数</span>\r\n              <span class=\"stat-value\">{{ userStats.total }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">活跃用户</span>\r\n              <span class=\"stat-value\">{{ userStats.active }}</span>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <span class=\"stat-label\">管理员</span>\r\n              <span class=\"stat-value\">{{ userStats.admin }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 右侧内容 -->\r\n      <div class=\"users-content admin-content\">\r\n        <a-card>\r\n          <template #title>\r\n            {{ getCurrentCategoryName() }}\r\n          </template>\r\n          <template #extra>\r\n            <a-space>\r\n              <a-input-search\r\n                v-model:value=\"searchText\"\r\n                placeholder=\"搜索用户...\"\r\n                style=\"width: 200px\"\r\n                @search=\"handleSearch\"\r\n                @change=\"handleSearch\"\r\n              />\r\n              <a-select\r\n                v-model:value=\"roleFilter\"\r\n                placeholder=\"角色筛选\"\r\n                style=\"width: 120px\"\r\n                @change=\"handleRoleFilter\"\r\n              >\r\n                <a-select-option value=\"\">全部角色</a-select-option>\r\n                <a-select-option value=\"admin\">管理员</a-select-option>\r\n                <a-select-option value=\"operator\">操作员</a-select-option>\r\n                <a-select-option value=\"viewer\">观察者</a-select-option>\r\n              </a-select>\r\n              <a-tooltip title=\"刷新用户列表数据\" placement=\"bottom\">\r\n                <a-button @click=\"refreshData\">\r\n                  <ReloadOutlined />\r\n                </a-button>\r\n              </a-tooltip>\r\n            </a-space>\r\n          </template>\r\n\r\n          <a-table\r\n            :columns=\"tableColumns\"\r\n            :data-source=\"filteredUsers\"\r\n            :pagination=\"pagination\"\r\n            :loading=\"loading\"\r\n            :row-selection=\"rowSelection\"\r\n            row-key=\"id\"\r\n            size=\"middle\"\r\n          >\r\n            <template #bodyCell=\"{ column, record }\">\r\n              <template v-if=\"column.key === 'avatar'\">\r\n                <a-avatar :style=\"{ background: getAvatarColor(record.role) }\">\r\n                  {{ record.realName?.charAt(0) || record.username?.charAt(0) }}\r\n                </a-avatar>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'role'\">\r\n                <a-tag :color=\"getRoleColor(record.role)\">\r\n                  {{ getRoleText(record.role) }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'onlineStatus'\">\r\n                <a-space>\r\n                  <a-badge \r\n                    :status=\"record.isOnline ? 'processing' : 'default'\" \r\n                    :text=\"record.isOnline ? '在线' : '离线'\"\r\n                  />\r\n                  <a-tooltip v-if=\"record.onlineSessions && record.onlineSessions.length > 0\" placement=\"top\">\r\n                    <template #title>\r\n                      <div>\r\n                        <div v-for=\"session in record.onlineSessions\" :key=\"session.id\">\r\n                          IP: {{ session.ip_address }}<br>\r\n                          设备: {{ session.device_info }}<br>\r\n                          登录时间: {{ formatDate(session.login_time) }}\r\n                        </div>\r\n                      </div>\r\n                    </template>\r\n                  </a-tooltip>\r\n                </a-space>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'status'\">\r\n                <a-tag :color=\"record.isActive ? 'green' : 'red'\">\r\n                  {{ record.isActive ? '启用' : '禁用' }}\r\n                </a-tag>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'lastLogin'\">      \r\n                <span v-if=\"record.lastLogin\">\r\n                  {{ formatDate(record.lastLogin) }}\r\n                </span>\r\n                <span v-else class=\"text-gray\">从未登录</span>\r\n              </template>\r\n              <template v-else-if=\"column.key === 'actions'\">\r\n                <a-space>\r\n                  <a-tooltip title=\"编辑用户信息\" placement=\"top\">\r\n                    <a-button type=\"link\" size=\"small\" @click=\"editUser(record)\">\r\n                      <EditOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip :title=\"record.isActive ? '禁用此用户' : '启用此用户'\" placement=\"top\">\r\n                    <a-button \r\n                      type=\"link\" \r\n                      size=\"small\" \r\n                      @click=\"toggleUserStatus(record)\"\r\n                    >\r\n                      <CheckCircleOutlined v-if=\"!record.isActive\" />\r\n                      <StopOutlined v-else />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-tooltip v-if=\"record.isOnline && record.username !== currentUsername\" title=\"踢出用户（关闭所有会话）\" placement=\"top\">\r\n                    <a-popconfirm\r\n                      :title=\"`确定要踢出用户 '${record.username}' 吗？这将关闭其所有在线会话。`\"\r\n                      @confirm=\"kickOutUser(record)\"\r\n                      placement=\"topRight\"\r\n                    >\r\n                      <a-button type=\"link\" size=\"small\" danger>\r\n                        <LogoutOutlined />\r\n                      </a-button>\r\n                    </a-popconfirm>\r\n                  </a-tooltip>\r\n                  <a-tooltip title=\"重置用户密码\" placement=\"top\">\r\n                    <a-button \r\n                      type=\"link\" \r\n                      size=\"small\" \r\n                      @click=\"resetPassword(record)\"\r\n                    >\r\n                      <KeyOutlined />\r\n                    </a-button>\r\n                  </a-tooltip>\r\n                  <a-popconfirm\r\n                    :title=\"getDeleteConfirmTitle(record)\"\r\n                    @confirm=\"deleteUser(record)\"\r\n                    placement=\"topRight\"\r\n                    :ok-type=\"record.username === currentUsername ? 'danger' : 'primary'\"\r\n                  >\r\n                    <a-tooltip title=\"删除此用户\" placement=\"top\">\r\n                      <a-button type=\"link\" size=\"small\" danger>\r\n                        <DeleteOutlined />\r\n                      </a-button>\r\n                    </a-tooltip>\r\n                  </a-popconfirm>\r\n                </a-space>\r\n              </template>\r\n            </template>\r\n          </a-table>\r\n\r\n          <!-- 批量操作 -->\r\n          <div v-if=\"selectedRowKeys.length > 0\" class=\"batch-actions\">\r\n            <a-space>\r\n              <span>已选择 {{ selectedRowKeys.length }} 项</span>\r\n              <a-tooltip title=\"批量启用选中的用户\" placement=\"top\">\r\n                <a-button @click=\"batchEnable\">\r\n                  <CheckOutlined />\r\n                  批量启用\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-tooltip title=\"批量禁用选中的用户\" placement=\"top\">\r\n                <a-button @click=\"batchDisable\">\r\n                  <CloseOutlined />\r\n                  批量禁用\r\n                </a-button>\r\n              </a-tooltip>\r\n              <a-popconfirm\r\n                :title=\"getBatchDeleteConfirmTitle()\"\r\n                @confirm=\"batchDelete\"\r\n                placement=\"topRight\"\r\n                :ok-type=\"getBatchDeleteConfirmTitle().includes('警告') ? 'danger' : 'primary'\"\r\n              >\r\n                <a-tooltip title=\"批量删除选中的用户\" placement=\"top\">\r\n                  <a-button danger>\r\n                    <DeleteOutlined />\r\n                    批量删除\r\n                  </a-button>\r\n                </a-tooltip>\r\n              </a-popconfirm>\r\n            </a-space>\r\n          </div>\r\n        </a-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 添加/编辑用户弹窗 -->\r\n    <a-modal\r\n      v-model:open=\"modalVisible\"\r\n      :title=\"isEditing ? '编辑用户' : '新建用户'\"\r\n      width=\"600px\"\r\n      @ok=\"handleSubmit\"\r\n      @cancel=\"handleCancel\"\r\n    >\r\n      <a-form\r\n        ref=\"formRef\"\r\n        :model=\"formData\"\r\n        :rules=\"formRules\"\r\n        layout=\"vertical\"\r\n      >\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"用户名\" name=\"username\">\r\n              <a-input \r\n                v-model:value=\"formData.username\" \r\n                placeholder=\"输入用户名\"\r\n                :disabled=\"isEditing\"\r\n              />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"真实姓名\" name=\"realName\">\r\n              <a-input v-model:value=\"formData.realName\" placeholder=\"输入真实姓名\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"邮箱\" name=\"email\">\r\n              <a-input v-model:value=\"formData.email\" placeholder=\"输入邮箱地址\" />\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"电话\" name=\"phone\">\r\n              <a-input v-model:value=\"formData.phone\" placeholder=\"输入电话号码\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-row :gutter=\"16\">\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"角色\" name=\"role\">\r\n              <a-select v-model:value=\"formData.role\" placeholder=\"选择用户角色\">\r\n                <a-select-option value=\"admin\">管理员</a-select-option>\r\n                <a-select-option value=\"operator\">操作员</a-select-option>\r\n                <a-select-option value=\"viewer\">观察者</a-select-option>\r\n              </a-select>\r\n            </a-form-item>\r\n          </a-col>\r\n          <a-col :span=\"12\">\r\n            <a-form-item label=\"部门\" name=\"department\">\r\n              <a-input v-model:value=\"formData.department\" placeholder=\"输入所属部门\" />\r\n            </a-form-item>\r\n          </a-col>\r\n        </a-row>\r\n\r\n        <a-form-item v-if=\"!isEditing\" label=\"密码\" name=\"password\">\r\n          <a-input-password v-model:value=\"formData.password\" placeholder=\"输入密码\" />\r\n        </a-form-item>\r\n\r\n        <a-form-item label=\"状态\" name=\"isActive\">\r\n          <a-switch v-model:checked=\"formData.isActive\" />\r\n          <span class=\"switch-description\">{{ formData.isActive ? '启用' : '禁用' }}</span>\r\n        </a-form-item>\r\n      </a-form>\r\n    </a-modal>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted, watch } from 'vue';\r\nimport { message } from 'ant-design-vue';\r\nimport { userAPI } from '@/api/users';\r\nimport { dictionaryAPI } from '@/api/index';\r\nimport {\r\n  TeamOutlined,\r\n  PlusOutlined,\r\n  ExportOutlined,\r\n  ReloadOutlined,\r\n  UserOutlined,\r\n  CrownOutlined,\r\n  SafetyOutlined,\r\n  EyeOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  EditOutlined,\r\n  DeleteOutlined,\r\n  KeyOutlined,\r\n  StopOutlined,\r\n  CheckOutlined,\r\n  CloseOutlined,\r\n  LogoutOutlined\r\n} from '@ant-design/icons-vue';\r\n\r\n// 响应式数据\r\nconst loading = ref(false);\r\nconst modalVisible = ref(false);\r\nconst isEditing = ref(false);\r\nconst searchText = ref('');\r\nconst roleFilter = ref('');\r\nconst activeCategory = ref('all');\r\nconst selectedRowKeys = ref([]);\r\n\r\n// 表单数据\r\nconst formRef = ref();\r\nconst formData = ref({\r\n  username: '',\r\n  realName: '',\r\n  email: '',\r\n  phone: '',\r\n  role: 'viewer',\r\n  department: '',\r\n  password: '',\r\n  isActive: true\r\n});\r\n\r\n// 用户数据\r\nconst users = ref([]);\r\nconst userStats = ref({\r\n  total: 0,\r\n  active: 0,\r\n  admin: 0\r\n});\r\n\r\n// 分类列表（从字典动态获取）\r\nconst categoryList = ref([]);\r\n\r\n// 获取用户分类字典数据\r\nconst fetchUserCategories = async () => {\r\n  try {\r\n    const response = await dictionaryAPI.getDictionaryByCategory('user_category', {\r\n      status: 'active',\r\n      simple: 'true'  // 获取简化数据格式\r\n    });\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const dictionary = response.data.data || [];\r\n      \r\n      // 转换字典数据为分类格式\r\n      const dictionaryCategories = dictionary\r\n        .sort((a, b) => (b.priority || 0) - (a.priority || 0))\r\n        .map(item => {\r\n          // 解析config中的配置\r\n          let config = {};\r\n          try {\r\n            config = item.config ? JSON.parse(item.config) : {};\r\n          } catch (e) {\r\n            console.warn('解析字典配置失败:', item.config);\r\n          }\r\n          \r\n          return {\r\n            key: item.key,\r\n            name: item.label,\r\n            icon: config.icon || 'UserOutlined',\r\n            count: 0\r\n          };\r\n        });\r\n      \r\n      // 始终包含默认分类\r\n      const defaultCategories = [\r\n        {\r\n          key: 'all',\r\n          name: '全部用户',\r\n          icon: 'TeamOutlined',\r\n          count: 0\r\n        },\r\n        {\r\n          key: 'active',\r\n          name: '活跃用户',\r\n          icon: 'CheckCircleOutlined',\r\n          count: 0\r\n        },\r\n        {\r\n          key: 'inactive',\r\n          name: '禁用用户',\r\n          icon: 'CloseCircleOutlined',\r\n          count: 0\r\n        }\r\n      ];\r\n      \r\n      // 合并默认分类和字典分类\r\n      categoryList.value = [...defaultCategories, ...dictionaryCategories];\r\n      \r\n      console.log('用户分类字典加载成功:', categoryList.value);\r\n    } else {\r\n      console.warn('获取用户分类字典失败，使用默认分类');\r\n      setDefaultCategories();\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户分类字典失败:', error);\r\n    // 如果获取字典失败，使用默认分类\r\n    setDefaultCategories();\r\n  }\r\n};\r\n\r\n// 设置默认分类（作为备用方案）\r\nconst setDefaultCategories = () => {\r\n  categoryList.value = [\r\n    {\r\n      key: 'all',\r\n      name: '全部用户',\r\n      icon: 'TeamOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'admin',\r\n      name: '管理员',\r\n      icon: 'CrownOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'operator',\r\n      name: '操作员',\r\n      icon: 'SafetyOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'viewer',\r\n      name: '观察者',\r\n      icon: 'EyeOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'active',\r\n      name: '活跃用户',\r\n      icon: 'CheckCircleOutlined',\r\n      count: 0\r\n    },\r\n    {\r\n      key: 'inactive',\r\n      name: '禁用用户',\r\n      icon: 'CloseCircleOutlined',\r\n      count: 0\r\n    }\r\n  ];\r\n};\r\n\r\n// 表格列配置\r\nconst tableColumns = [\r\n  {\r\n    title: '用户名',\r\n    dataIndex: 'username',\r\n    key: 'username',\r\n  },\r\n  {\r\n    title: '姓名',\r\n    dataIndex: 'realName',\r\n    key: 'realName'\r\n  },\r\n  {\r\n    title: '邮箱',\r\n    dataIndex: 'email',\r\n    key: 'email'\r\n  },\r\n  {\r\n    title: '角色',\r\n    key: 'role',\r\n    width: 100,\r\n    filters: [\r\n      { text: '管理员', value: 'admin' },\r\n      { text: '操作员', value: 'operator' },\r\n      { text: '观察者', value: 'viewer' }\r\n    ]\r\n  },\r\n  {\r\n    title: '部门',\r\n    dataIndex: 'department',\r\n    key: 'department'\r\n  },\r\n  {\r\n    title: '在线状态',\r\n    key: 'onlineStatus',\r\n    width: 100,\r\n    filters: [\r\n      { text: '在线', value: true },\r\n      { text: '离线', value: false }\r\n    ]\r\n  },\r\n  {\r\n    title: '状态',\r\n    key: 'status',\r\n    width: 80,\r\n    filters: [\r\n      { text: '启用', value: true },\r\n      { text: '禁用', value: false }\r\n    ]\r\n  },\r\n  // {\r\n  //   title: '最后登录',\r\n  //   key: 'lastLogin',\r\n  //   width: 150,\r\n  // },\r\n  {\r\n    title: '操作',\r\n    key: 'actions',\r\n    width: 200,\r\n    fixed: 'right'\r\n  }\r\n];\r\n\r\n// 分页配置\r\nconst pagination = ref({\r\n  current: 1,\r\n  pageSize: 10,\r\n  total: 0,\r\n  showSizeChanger: true,\r\n  showQuickJumper: true,\r\n  showTotal: (total, range) => `第 ${range[0]}-${range[1]} 条/共 ${total} 条`,\r\n  onChange: (page, pageSize) => {\r\n    pagination.value.current = page;\r\n    pagination.value.pageSize = pageSize;\r\n    fetchUsers();\r\n  }\r\n});\r\n\r\n// 行选择配置\r\nconst rowSelection = {\r\n  selectedRowKeys,\r\n  onChange: (keys) => {\r\n    selectedRowKeys.value = keys;\r\n  }\r\n};\r\n\r\n// 表单验证规则\r\nconst formRules = {\r\n  username: [\r\n    { required: true, message: '请输入用户名', trigger: 'blur' },\r\n    { min: 3, max: 20, message: '用户名长度在3-20个字符', trigger: 'blur' }\r\n  ],\r\n  realName: [\r\n    { required: true, message: '请输入真实姓名', trigger: 'blur' }\r\n  ],\r\n  email: [\r\n    { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n    { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\r\n  ],\r\n  role: [\r\n    { required: true, message: '请选择用户角色', trigger: 'change' }\r\n  ],\r\n  password: [\r\n    { required: true, message: '请输入密码', trigger: 'blur' },\r\n    { min: 6, message: '密码长度不能少于6个字符', trigger: 'blur' }\r\n  ],\r\n  phone: [\r\n    { pattern: /^1[3-9]\\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }\r\n  ]\r\n};\r\n\r\n// 计算属性\r\nconst filteredUsers = computed(() => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array in filteredUsers:', users.value);\r\n    return [];\r\n  }\r\n  \r\n  let result = users.value;\r\n  \r\n  // 分类筛选\r\n  if (activeCategory.value !== 'all') {\r\n    if (activeCategory.value === 'active') {\r\n      result = result.filter(user => user.isActive);\r\n    } else if (activeCategory.value === 'inactive') {\r\n      result = result.filter(user => !user.isActive);\r\n    } else {\r\n      result = result.filter(user => user.role === activeCategory.value);\r\n    }\r\n  }\r\n  \r\n  // 角色筛选\r\n  if (roleFilter.value) {\r\n    result = result.filter(user => user.role === roleFilter.value);\r\n  }\r\n  \r\n  // 搜索筛选\r\n  if (searchText.value) {\r\n    const searchLower = searchText.value.toLowerCase();\r\n    result = result.filter(user => \r\n      user.username?.toLowerCase().includes(searchLower) ||\r\n      user.realName?.toLowerCase().includes(searchLower) ||\r\n      user.email?.toLowerCase().includes(searchLower) ||\r\n      user.department?.toLowerCase().includes(searchLower)\r\n    );\r\n  }\r\n  \r\n  return result;\r\n});\r\n\r\n// 获取当前分类名称\r\nconst getCurrentCategoryName = () => {\r\n  const category = categoryList.value.find(cat => cat.key === activeCategory.value);\r\n  return category ? category.name : '全部用户';\r\n};\r\n\r\n// 获取头像颜色\r\nconst getAvatarColor = (role) => {\r\n  const colors = {\r\n    admin: '#faad14',\r\n    operator: '#1890ff', \r\n    viewer: '#52c41a'\r\n  };\r\n  return colors[role] || '#d9d9d9';\r\n};\r\n\r\n// 获取角色颜色\r\nconst getRoleColor = (role) => {\r\n  const colors = {\r\n    admin: 'gold',\r\n    operator: 'blue',\r\n    viewer: 'green'\r\n  };\r\n  return colors[role] || 'default';\r\n};\r\n\r\n// 获取角色文本\r\nconst getRoleText = (role) => {\r\n  const texts = {\r\n    admin: '管理员',\r\n    operator: '操作员',\r\n    viewer: '观察者'\r\n  };\r\n  return texts[role] || role;\r\n};\r\n\r\n// 获取当前用户名\r\nconst currentUsername = computed(() => {\r\n  return localStorage.getItem('username') || '';\r\n});\r\n\r\n// 获取删除确认标题\r\nconst getDeleteConfirmTitle = (record) => {\r\n  if (record.username === currentUsername.value) {\r\n    return '警告：您将删除自己的账户！删除后您将被自动退出登录，确定继续吗？';\r\n  }\r\n  return `确定要删除用户 \"${record.username}\" 吗？`;\r\n};\r\n\r\n// 获取批量删除确认标题\r\nconst getBatchDeleteConfirmTitle = () => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array:', users.value);\r\n    return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\r\n  }\r\n  \r\n  const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n  const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername.value);\r\n  \r\n  if (isCurrentUserIncluded) {\r\n    return '警告：您在批量删除中包含了自己的账户！删除后您将被自动退出登录，确定继续吗？';\r\n  }\r\n  return `确定要批量删除选中的 ${selectedRowKeys.value.length} 个用户吗？`;\r\n};\r\n\r\n// 格式化日期\r\nconst formatDate = (date) => {\r\n  if (!date) return '';\r\n  return new Date(date).toLocaleString('zh-CN', {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\n// 更新统计数据\r\nconst updateStats = () => {\r\n  // 确保users.value是数组\r\n  if (!Array.isArray(users.value)) {\r\n    console.warn('users.value is not an array in updateStats:', users.value);\r\n    users.value = []; // 重置为空数组\r\n  }\r\n  \r\n  const stats = {\r\n    total: users.value.length,\r\n    active: users.value.filter(user => user.isActive).length,\r\n    admin: users.value.filter(user => user.role === 'admin').length\r\n  };\r\n  \r\n  userStats.value = stats;\r\n  \r\n  // 更新分类计数（支持动态分类）\r\n  categoryList.value.forEach(category => {\r\n    switch (category.key) {\r\n      case 'all':\r\n        category.count = stats.total;\r\n        break;\r\n      case 'active':\r\n        category.count = stats.active;\r\n        break;\r\n      case 'inactive':\r\n        category.count = stats.total - stats.active;\r\n        break;\r\n      case 'admin':\r\n        category.count = users.value.filter(user => user.role === 'admin').length;\r\n        break;\r\n      case 'operator':\r\n        category.count = users.value.filter(user => user.role === 'operator').length;\r\n        break;\r\n      case 'viewer':\r\n        category.count = users.value.filter(user => user.role === 'viewer').length;\r\n        break;\r\n      default:\r\n        // 对于其他动态分类，根据角色进行计数\r\n        if (category.key === 'admin' || category.key === 'operator' || category.key === 'viewer') {\r\n          category.count = users.value.filter(user => user.role === category.key).length;\r\n        } else {\r\n          // 其他类型的分类可以根据需要扩展\r\n          category.count = 0;\r\n        }\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\n// 获取用户列表\r\nconst fetchUsers = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const params = {\r\n      page: pagination.value.current,\r\n      pageSize: pagination.value.pageSize,\r\n      search: searchText.value,\r\n      role: roleFilter.value\r\n    };\r\n    \r\n    // 移除空参数\r\n    Object.keys(params).forEach(key => {\r\n      if (!params[key]) {\r\n        delete params[key];\r\n      }\r\n    });\r\n    \r\n    const response = await userAPI.getUserList(params);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const data = response.data.data;\r\n      // 处理用户数据，统一字段格式\r\n      users.value = (data.list || data.results || []).map(user => ({\r\n        id: user.id,\r\n        username: user.username,\r\n        realName: user.profile?.real_name || user.real_name || user.first_name + ' ' + user.last_name,\r\n        email: user.email,\r\n        phone: user.profile?.phone || user.phone || '',\r\n        role: user.profile?.role || 'viewer',\r\n        department: user.profile?.department || '',\r\n        isActive: user.is_active !== undefined ? user.is_active : true,\r\n        lastLogin: user.last_login,\r\n        createdAt: user.date_joined || user.created_at,\r\n        // 新增在线状态相关字段\r\n        isOnline: user.is_online || false,\r\n        onlineSessions: user.online_sessions || []\r\n      }));\r\n      \r\n      pagination.value.total = data.total || data.count || users.value.length;\r\n      \r\n      // 获取用户统计\r\n      await fetchUserStats();\r\n      updateStats();\r\n    } else {\r\n      console.error('API响应格式错误:', response.data);\r\n      throw new Error('API响应格式错误');\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户列表失败:', error);\r\n    \r\n    // 对于401错误，提供更友好的提示\r\n    if (error.response?.status === 401) {\r\n      message.error({\r\n        content: '身份认证已过期，请重新登录',\r\n        duration: 5\r\n      });\r\n      \r\n      // 清除本地状态并跳转到登录页\r\n      setTimeout(() => {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('userInfo');\r\n        localStorage.removeItem('isLoggedIn');\r\n        localStorage.removeItem('userType');\r\n        localStorage.removeItem('username');\r\n        window.location.href = '/#/login';\r\n      }, 2000);\r\n    } else {\r\n      // 其他错误的处理\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message;\r\n      message.error(`获取用户列表失败: ${errorMsg}`);\r\n    }\r\n    \r\n    // 如果API失败，使用空数组而不是模拟数据\r\n    users.value = [];\r\n    pagination.value.total = 0;\r\n    updateStats();\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 获取用户统计数据\r\nconst fetchUserStats = async () => {\r\n  try {\r\n    const response = await userAPI.getUserStats();\r\n    if (response.data && response.data.code === 200) {\r\n      const stats = response.data.data;\r\n      userStats.value = {\r\n        total: stats.total || 0,\r\n        active: stats.active || 0,\r\n        admin: stats.admin || 0\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('获取用户统计失败:', error);\r\n    // 统计失败时使用本地计算\r\n    userStats.value = {\r\n      total: users.value.length,\r\n      active: users.value.filter(user => user.isActive).length,\r\n      admin: users.value.filter(user => user.role === 'admin').length\r\n    };\r\n  }\r\n};\r\n\r\n\r\n// 分类切换\r\nconst handleCategoryChange = (key) => {\r\n  activeCategory.value = key;\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  // 分类筛选在前端处理，不需要重新获取数据\r\n};\r\n\r\n// 搜索处理\r\nconst handleSearch = () => {\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  fetchUsers(); // 重新获取数据\r\n};\r\n\r\n// 角色筛选\r\nconst handleRoleFilter = () => {\r\n  selectedRowKeys.value = [];\r\n  pagination.value.current = 1; // 重置页码\r\n  fetchUsers(); // 重新获取数据\r\n};\r\n\r\n// 刷新数据\r\nconst refreshData = () => {\r\n  fetchUsers();\r\n  message.success('数据刷新成功');\r\n};\r\n\r\n// 显示新建用户弹窗\r\nconst showAddModal = () => {\r\n  isEditing.value = false;\r\n  formData.value = {\r\n    username: '',\r\n    realName: '',\r\n    email: '',\r\n    phone: '',\r\n    role: 'viewer',\r\n    department: '',\r\n    password: '',\r\n    isActive: true\r\n  };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 编辑用户\r\nconst editUser = (record) => {\r\n  isEditing.value = true;\r\n  formData.value = {\r\n    id: record.id,\r\n    username: record.username,\r\n    realName: record.realName,\r\n    email: record.email,\r\n    phone: record.phone,\r\n    role: record.role,\r\n    department: record.department,\r\n    isActive: record.isActive\r\n  };\r\n  modalVisible.value = true;\r\n};\r\n\r\n// 提交表单\r\nconst handleSubmit = async () => {\r\n  try {\r\n    await formRef.value.validate();\r\n    loading.value = true;\r\n    \r\n    // 准备API请求数据\r\n    const apiData = {\r\n      username: formData.value.username,\r\n      email: formData.value.email,\r\n      real_name: formData.value.realName,\r\n      phone: formData.value.phone,\r\n      role: formData.value.role,\r\n      department: formData.value.department,\r\n      is_active: formData.value.isActive\r\n    };\r\n    \r\n    if (!isEditing.value) {\r\n      apiData.password = formData.value.password;\r\n    }\r\n    \r\n    let response;\r\n    if (isEditing.value) {\r\n      // 编辑用户\r\n      response = await userAPI.updateUser(formData.value.id, apiData);\r\n    } else {\r\n      // 新建用户\r\n      response = await userAPI.createUser(apiData);\r\n    }\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(isEditing.value ? '用户更新成功' : '用户创建成功');\r\n      modalVisible.value = false;\r\n      // 重新获取数据\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '操作失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('用户操作失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 取消操作\r\nconst handleCancel = () => {\r\n  modalVisible.value = false;\r\n  formRef.value?.resetFields();\r\n};\r\n\r\n// 切换用户状态\r\nconst toggleUserStatus = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.toggleUserStatus(record.id, !record.isActive);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success(`用户${!record.isActive ? '启用' : '禁用'}成功`);\r\n      // 重新获取数据\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '操作失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('切换用户状态失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '操作失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 重置密码\r\nconst resetPassword = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.resetUserPassword(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('密码重置成功,新密码为: 123456');\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '重置密码失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('重置密码失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '重置密码失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 踢出用户\r\nconst kickOutUser = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.kickOutUser(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      const data = response.data.data;\r\n      message.success({\r\n        content: `成功踢出用户 ${data.username}，关闭了 ${data.kicked_sessions} 个会话`,\r\n        duration: 3\r\n      });\r\n      \r\n      // 重新获取数据以更新在线状态\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '踢出用户失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('踢出用户失败:', error);\r\n    \r\n    if (error.response?.status === 403) {\r\n      message.error('权限不足，只有管理员才能踢出用户');\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '踢出用户失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 删除用户\r\nconst deleteUser = async (record) => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 检查是否删除当前登录用户\r\n    const currentUsername = localStorage.getItem('username');\r\n    const isCurrentUser = record.username === currentUsername;\r\n    \r\n    const response = await userAPI.deleteUser(record.id);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      message.success('用户删除成功');\r\n      \r\n      // 如果删除的是当前用户，提示用户并重定向到登录页\r\n      if (isCurrentUser) {\r\n        message.warning({\r\n          content: '您删除了自己的账户，系统将在3秒后自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        // 3秒后清除登录状态并跳转到登录页\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return; // 不执行后续的fetchUsers，避免401错误\r\n      }\r\n      \r\n      // 重新获取数据（只有非当前用户时才执行）\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('删除用户失败:', error);\r\n    \r\n    // 如果是401错误且删除的是当前用户，给出特殊提示\r\n    if (error.response?.status === 401) {\r\n      const currentUsername = localStorage.getItem('username');\r\n      const isCurrentUser = record.username === currentUsername;\r\n      \r\n      if (isCurrentUser) {\r\n        message.success({\r\n          content: '用户删除成功，您的账户已被删除，系统将自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return;\r\n      } else {\r\n        message.error('认证失败，请重新登录');\r\n      }\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '删除失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量启用\r\nconst batchEnable = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 批量操作需要逐个调用API\r\n    const promises = selectedRowKeys.value.map(id => {\r\n      const user = users.value.find(u => u.id === id);\r\n      if (user && !user.isActive) {\r\n        return userAPI.toggleUserStatus(id, true);\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    \r\n    await Promise.all(promises);\r\n    \r\n    selectedRowKeys.value = [];\r\n    message.success('批量启用成功');\r\n    // 重新获取数据\r\n    await fetchUsers();\r\n  } catch (error) {\r\n    console.error('批量启用失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量启用失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量禁用\r\nconst batchDisable = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 批量操作需要逐个调用API\r\n    const promises = selectedRowKeys.value.map(id => {\r\n      const user = users.value.find(u => u.id === id);\r\n      if (user && user.isActive) {\r\n        return userAPI.toggleUserStatus(id, false);\r\n      }\r\n      return Promise.resolve();\r\n    });\r\n    \r\n    await Promise.all(promises);\r\n    \r\n    selectedRowKeys.value = [];\r\n    message.success('批量禁用成功');\r\n    // 重新获取数据\r\n    await fetchUsers();\r\n  } catch (error) {\r\n    console.error('批量禁用失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量禁用失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 批量删除\r\nconst batchDelete = async () => {\r\n  try {\r\n    loading.value = true;\r\n    \r\n    // 检查是否包含当前登录用户\r\n    const currentUsername = localStorage.getItem('username');\r\n    \r\n    // 确保users.value是数组\r\n    if (!Array.isArray(users.value)) {\r\n      console.warn('users.value is not an array in batchDelete:', users.value);\r\n      message.error('数据异常，请刷新页面后重试');\r\n      return;\r\n    }\r\n    \r\n    const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n    const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\r\n    \r\n    const response = await userAPI.batchDeleteUsers(selectedRowKeys.value);\r\n    \r\n    if (response.data && response.data.code === 200) {\r\n      selectedRowKeys.value = [];\r\n      message.success('批量删除成功');\r\n      \r\n      // 如果删除的用户中包含当前用户，提示用户并重定向到登录页\r\n      if (isCurrentUserIncluded) {\r\n        message.warning({\r\n          content: '您在批量删除中包含了自己的账户，系统将在3秒后自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        // 3秒后清除登录状态并跳转到登录页\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return; // 不执行后续的fetchUsers，避免401错误\r\n      }\r\n      \r\n      // 重新获取数据（只有非当前用户时才执行）\r\n      await fetchUsers();\r\n    } else {\r\n      throw new Error(response.data?.error || response.data?.message || '批量删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('批量删除失败:', error);\r\n    \r\n    // 如果是401错误，可能是删除了当前用户后的后续请求\r\n    if (error.response?.status === 401) {\r\n      const currentUsername = localStorage.getItem('username');\r\n      \r\n      // 确保users.value是数组\r\n      if (!Array.isArray(users.value)) {\r\n        console.warn('users.value is not an array in error handler:', users.value);\r\n        message.error('认证失败，请重新登录');\r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 2000);\r\n        return;\r\n      }\r\n      \r\n      const selectedUsers = users.value.filter(user => selectedRowKeys.value.includes(user.id));\r\n      const isCurrentUserIncluded = selectedUsers.some(user => user.username === currentUsername);\r\n      \r\n      if (isCurrentUserIncluded) {\r\n        message.success({\r\n          content: '批量删除成功，您的账户已被删除，系统将自动退出登录',\r\n          duration: 3\r\n        });\r\n        \r\n        setTimeout(() => {\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('userInfo');\r\n          localStorage.removeItem('isLoggedIn');\r\n          localStorage.removeItem('userType');\r\n          localStorage.removeItem('username');\r\n          window.location.href = '/#/login';\r\n        }, 3000);\r\n        \r\n        return;\r\n      } else {\r\n        message.error('认证失败，请重新登录');\r\n      }\r\n    } else {\r\n      const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '批量删除失败，请重试';\r\n      message.error(errorMsg);\r\n    }\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 导出用户\r\nconst exportUsers = async () => {\r\n  try {\r\n    loading.value = true;\r\n    const response = await userAPI.exportUsers();\r\n    \r\n    if (response.data) {\r\n      // 创建下载链接\r\n      const blob = new Blob([response.data], { \r\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' \r\n      });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `用户列表_${new Date().toISOString().slice(0, 10)}.xlsx`;\r\n      link.click();\r\n      window.URL.revokeObjectURL(url);\r\n      \r\n      message.success('用户列表导出成功');\r\n    } else {\r\n      throw new Error('导出数据为空');\r\n    }\r\n  } catch (error) {\r\n    console.error('导出用户列表失败:', error);\r\n    const errorMsg = error.response?.data?.error || error.response?.data?.message || error.message || '导出失败，请重试';\r\n    message.error(errorMsg);\r\n  } finally {\r\n    loading.value = false;\r\n  }\r\n};\r\n\r\n// 组件挂载\r\nonMounted(async () => {\r\n  // 同时获取用户分类和用户数据\r\n  await Promise.all([\r\n    fetchUserCategories(),\r\n    fetchUsers()\r\n  ]);\r\n});\r\n\r\n// 监听搜索条件变化，实现实时搜索\r\nwatch([searchText, roleFilter], () => {\r\n  // 使用防抖避免频繁请求\r\n  clearTimeout(searchTimeout.value);\r\n  searchTimeout.value = setTimeout(() => {\r\n    pagination.value.current = 1; // 重置页码\r\n    fetchUsers();\r\n  }, 500);\r\n});\r\n\r\n// 搜索防抖定时器\r\nconst searchTimeout = ref(null);\r\n</script>\r\n\r\n<style scoped>\r\n@import '@/assets/admin-common.css';\r\n\r\n/* 用户管理页面特有的样式 */\r\n/* 所有通用样式已在 admin-common.css 中定义 */\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}