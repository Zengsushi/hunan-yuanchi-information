{"ast":null,"code":"/**\r\n * 日期格式化工具函数\r\n */\n\n/**\r\n * 格式化日期时间\r\n * @param {string|Date} date - 日期\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的日期字符串\r\n */\nexport function formatDateTime(date, format = 'YYYY-MM-DD HH:mm:ss') {\n  if (!date) return '-';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '-';\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  const seconds = String(d.getSeconds()).padStart(2, '0');\n  return format.replace('YYYY', year).replace('MM', month).replace('DD', day).replace('HH', hours).replace('mm', minutes).replace('ss', seconds);\n}\n\n/**\r\n * 格式化日期\r\n * @param {string|Date} date - 日期\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的日期字符串\r\n */\nexport function formatDate(date, format = 'YYYY-MM-DD') {\n  return formatDateTime(date, format);\n}\n\n/**\r\n * 格式化时间\r\n * @param {string|Date} date - 日期\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的时间字符串\r\n */\nexport function formatTime(date, format = 'HH:mm:ss') {\n  return formatDateTime(date, format);\n}\n\n/**\r\n * 获取相对时间描述\r\n * @param {string|Date} date - 日期\r\n * @returns {string} 相对时间描述\r\n */\nexport function getRelativeTime(date) {\n  if (!date) return '-';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '-';\n  const now = new Date();\n  const diff = now.getTime() - d.getTime();\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  const months = Math.floor(days / 30);\n  const years = Math.floor(days / 365);\n  if (years > 0) {\n    return `${years}年前`;\n  } else if (months > 0) {\n    return `${months}个月前`;\n  } else if (days > 0) {\n    return `${days}天前`;\n  } else if (hours > 0) {\n    return `${hours}小时前`;\n  } else if (minutes > 0) {\n    return `${minutes}分钟前`;\n  } else if (seconds > 0) {\n    return `${seconds}秒前`;\n  } else {\n    return '刚刚';\n  }\n}\n\n/**\r\n * 计算日期差值（天数）\r\n * @param {string|Date} startDate - 开始日期\r\n * @param {string|Date} endDate - 结束日期\r\n * @returns {number} 天数差值\r\n */\nexport function getDaysDiff(startDate, endDate) {\n  if (!startDate || !endDate) return 0;\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) return 0;\n  const diff = end.getTime() - start.getTime();\n  return Math.ceil(diff / (1000 * 60 * 60 * 24));\n}\n\n/**\r\n * 计算距离今天的天数\r\n * @param {string|Date} date - 日期\r\n * @returns {number} 天数（正数表示未来，负数表示过去）\r\n */\nexport function getDaysFromToday(date) {\n  if (!date) return 0;\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return 0;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  d.setHours(0, 0, 0, 0);\n  const diff = d.getTime() - today.getTime();\n  return Math.ceil(diff / (1000 * 60 * 60 * 24));\n}\n\n/**\r\n * 判断日期是否为今天\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为今天\r\n */\nexport function isToday(date) {\n  if (!date) return false;\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return false;\n  const today = new Date();\n  return d.toDateString() === today.toDateString();\n}\n\n/**\r\n * 判断日期是否为昨天\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为昨天\r\n */\nexport function isYesterday(date) {\n  if (!date) return false;\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return false;\n  const yesterday = new Date();\n  yesterday.setDate(yesterday.getDate() - 1);\n  return d.toDateString() === yesterday.toDateString();\n}\n\n/**\r\n * 判断日期是否为本周\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为本周\r\n */\nexport function isThisWeek(date) {\n  if (!date) return false;\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return false;\n  const today = new Date();\n  const startOfWeek = new Date(today);\n  startOfWeek.setDate(today.getDate() - today.getDay());\n  startOfWeek.setHours(0, 0, 0, 0);\n  const endOfWeek = new Date(startOfWeek);\n  endOfWeek.setDate(startOfWeek.getDate() + 6);\n  endOfWeek.setHours(23, 59, 59, 999);\n  return d >= startOfWeek && d <= endOfWeek;\n}\n\n/**\r\n * 判断日期是否为本月\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为本月\r\n */\nexport function isThisMonth(date) {\n  if (!date) return false;\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return false;\n  const today = new Date();\n  return d.getFullYear() === today.getFullYear() && d.getMonth() === today.getMonth();\n}\n\n/**\r\n * 判断日期是否为本年\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为本年\r\n */\nexport function isThisYear(date) {\n  if (!date) return false;\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return false;\n  const today = new Date();\n  return d.getFullYear() === today.getFullYear();\n}\n\n/**\r\n * 获取日期范围描述\r\n * @param {string|Date} startDate - 开始日期\r\n * @param {string|Date} endDate - 结束日期\r\n * @returns {string} 日期范围描述\r\n */\nexport function getDateRangeText(startDate, endDate) {\n  if (!startDate && !endDate) return '-';\n  if (!startDate) return `截止到 ${formatDate(endDate)}`;\n  if (!endDate) return `从 ${formatDate(startDate)} 开始`;\n  const start = formatDate(startDate);\n  const end = formatDate(endDate);\n  if (start === end) {\n    return start;\n  }\n  return `${start} ~ ${end}`;\n}\n\n/**\r\n * 获取月份名称\r\n * @param {number} month - 月份（0-11）\r\n * @param {boolean} short - 是否使用简写\r\n * @returns {string} 月份名称\r\n */\nexport function getMonthName(month, short = false) {\n  const months = short ? ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'] : ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];\n  return months[month] || '';\n}\n\n/**\r\n * 获取星期名称\r\n * @param {number} day - 星期（0-6，0为周日）\r\n * @param {boolean} short - 是否使用简写\r\n * @returns {string} 星期名称\r\n */\nexport function getDayName(day, short = false) {\n  const days = short ? ['日', '一', '二', '三', '四', '五', '六'] : ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];\n  return days[day] || '';\n}\n\n/**\r\n * 验证日期格式\r\n * @param {string} dateString - 日期字符串\r\n * @param {string} format - 期望的格式\r\n * @returns {boolean} 是否符合格式\r\n */\nexport function validateDateFormat(dateString, format = 'YYYY-MM-DD') {\n  if (!dateString) return false;\n\n  // 简单的格式验证\n  if (format === 'YYYY-MM-DD') {\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!regex.test(dateString)) return false;\n  } else if (format === 'YYYY-MM-DD HH:mm:ss') {\n    const regex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;\n    if (!regex.test(dateString)) return false;\n  }\n\n  // 验证日期是否有效\n  const date = new Date(dateString);\n  return !isNaN(date.getTime());\n}\n\n/**\r\n * 获取当前时间戳\r\n * @returns {number} 时间戳\r\n */\nexport function getCurrentTimestamp() {\n  return Date.now();\n}\n\n/**\r\n * 时间戳转日期\r\n * @param {number} timestamp - 时间戳\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的日期字符串\r\n */\nexport function timestampToDate(timestamp, format = 'YYYY-MM-DD HH:mm:ss') {\n  if (!timestamp) return '-';\n  const date = new Date(timestamp);\n  return formatDateTime(date, format);\n}\n\n/**\r\n * 日期转时间戳\r\n * @param {string|Date} date - 日期\r\n * @returns {number} 时间戳\r\n */\nexport function dateToTimestamp(date) {\n  if (!date) return 0;\n  const d = new Date(date);\n  return isNaN(d.getTime()) ? 0 : d.getTime();\n}\nexport default {\n  formatDateTime,\n  formatDate,\n  formatTime,\n  getRelativeTime,\n  getDaysDiff,\n  getDaysFromToday,\n  isToday,\n  isYesterday,\n  isThisWeek,\n  isThisMonth,\n  isThisYear,\n  getDateRangeText,\n  getMonthName,\n  getDayName,\n  validateDateFormat,\n  getCurrentTimestamp,\n  timestampToDate,\n  dateToTimestamp\n};","map":{"version":3,"names":["formatDateTime","date","format","d","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","replace","formatDate","formatTime","getRelativeTime","now","diff","Math","floor","days","months","years","getDaysDiff","startDate","endDate","start","end","ceil","getDaysFromToday","today","setHours","isToday","toDateString","isYesterday","yesterday","setDate","isThisWeek","startOfWeek","getDay","endOfWeek","isThisMonth","isThisYear","getDateRangeText","getMonthName","short","getDayName","validateDateFormat","dateString","regex","test","getCurrentTimestamp","timestampToDate","timestamp","dateToTimestamp"],"sources":["E:/A_project/yuanchi/AIops/frontend/src/utils/date.js"],"sourcesContent":["/**\r\n * 日期格式化工具函数\r\n */\r\n\r\n/**\r\n * 格式化日期时间\r\n * @param {string|Date} date - 日期\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的日期字符串\r\n */\r\nexport function formatDateTime(date, format = 'YYYY-MM-DD HH:mm:ss') {\r\n  if (!date) return '-'\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return '-'\r\n  \r\n  const year = d.getFullYear()\r\n  const month = String(d.getMonth() + 1).padStart(2, '0')\r\n  const day = String(d.getDate()).padStart(2, '0')\r\n  const hours = String(d.getHours()).padStart(2, '0')\r\n  const minutes = String(d.getMinutes()).padStart(2, '0')\r\n  const seconds = String(d.getSeconds()).padStart(2, '0')\r\n  \r\n  return format\r\n    .replace('YYYY', year)\r\n    .replace('MM', month)\r\n    .replace('DD', day)\r\n    .replace('HH', hours)\r\n    .replace('mm', minutes)\r\n    .replace('ss', seconds)\r\n}\r\n\r\n/**\r\n * 格式化日期\r\n * @param {string|Date} date - 日期\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的日期字符串\r\n */\r\nexport function formatDate(date, format = 'YYYY-MM-DD') {\r\n  return formatDateTime(date, format)\r\n}\r\n\r\n/**\r\n * 格式化时间\r\n * @param {string|Date} date - 日期\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport function formatTime(date, format = 'HH:mm:ss') {\r\n  return formatDateTime(date, format)\r\n}\r\n\r\n/**\r\n * 获取相对时间描述\r\n * @param {string|Date} date - 日期\r\n * @returns {string} 相对时间描述\r\n */\r\nexport function getRelativeTime(date) {\r\n  if (!date) return '-'\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return '-'\r\n  \r\n  const now = new Date()\r\n  const diff = now.getTime() - d.getTime()\r\n  const seconds = Math.floor(diff / 1000)\r\n  const minutes = Math.floor(seconds / 60)\r\n  const hours = Math.floor(minutes / 60)\r\n  const days = Math.floor(hours / 24)\r\n  const months = Math.floor(days / 30)\r\n  const years = Math.floor(days / 365)\r\n  \r\n  if (years > 0) {\r\n    return `${years}年前`\r\n  } else if (months > 0) {\r\n    return `${months}个月前`\r\n  } else if (days > 0) {\r\n    return `${days}天前`\r\n  } else if (hours > 0) {\r\n    return `${hours}小时前`\r\n  } else if (minutes > 0) {\r\n    return `${minutes}分钟前`\r\n  } else if (seconds > 0) {\r\n    return `${seconds}秒前`\r\n  } else {\r\n    return '刚刚'\r\n  }\r\n}\r\n\r\n/**\r\n * 计算日期差值（天数）\r\n * @param {string|Date} startDate - 开始日期\r\n * @param {string|Date} endDate - 结束日期\r\n * @returns {number} 天数差值\r\n */\r\nexport function getDaysDiff(startDate, endDate) {\r\n  if (!startDate || !endDate) return 0\r\n  \r\n  const start = new Date(startDate)\r\n  const end = new Date(endDate)\r\n  \r\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) return 0\r\n  \r\n  const diff = end.getTime() - start.getTime()\r\n  return Math.ceil(diff / (1000 * 60 * 60 * 24))\r\n}\r\n\r\n/**\r\n * 计算距离今天的天数\r\n * @param {string|Date} date - 日期\r\n * @returns {number} 天数（正数表示未来，负数表示过去）\r\n */\r\nexport function getDaysFromToday(date) {\r\n  if (!date) return 0\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return 0\r\n  \r\n  const today = new Date()\r\n  today.setHours(0, 0, 0, 0)\r\n  d.setHours(0, 0, 0, 0)\r\n  \r\n  const diff = d.getTime() - today.getTime()\r\n  return Math.ceil(diff / (1000 * 60 * 60 * 24))\r\n}\r\n\r\n/**\r\n * 判断日期是否为今天\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为今天\r\n */\r\nexport function isToday(date) {\r\n  if (!date) return false\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return false\r\n  \r\n  const today = new Date()\r\n  return d.toDateString() === today.toDateString()\r\n}\r\n\r\n/**\r\n * 判断日期是否为昨天\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为昨天\r\n */\r\nexport function isYesterday(date) {\r\n  if (!date) return false\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return false\r\n  \r\n  const yesterday = new Date()\r\n  yesterday.setDate(yesterday.getDate() - 1)\r\n  return d.toDateString() === yesterday.toDateString()\r\n}\r\n\r\n/**\r\n * 判断日期是否为本周\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为本周\r\n */\r\nexport function isThisWeek(date) {\r\n  if (!date) return false\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return false\r\n  \r\n  const today = new Date()\r\n  const startOfWeek = new Date(today)\r\n  startOfWeek.setDate(today.getDate() - today.getDay())\r\n  startOfWeek.setHours(0, 0, 0, 0)\r\n  \r\n  const endOfWeek = new Date(startOfWeek)\r\n  endOfWeek.setDate(startOfWeek.getDate() + 6)\r\n  endOfWeek.setHours(23, 59, 59, 999)\r\n  \r\n  return d >= startOfWeek && d <= endOfWeek\r\n}\r\n\r\n/**\r\n * 判断日期是否为本月\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为本月\r\n */\r\nexport function isThisMonth(date) {\r\n  if (!date) return false\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return false\r\n  \r\n  const today = new Date()\r\n  return d.getFullYear() === today.getFullYear() && d.getMonth() === today.getMonth()\r\n}\r\n\r\n/**\r\n * 判断日期是否为本年\r\n * @param {string|Date} date - 日期\r\n * @returns {boolean} 是否为本年\r\n */\r\nexport function isThisYear(date) {\r\n  if (!date) return false\r\n  \r\n  const d = new Date(date)\r\n  if (isNaN(d.getTime())) return false\r\n  \r\n  const today = new Date()\r\n  return d.getFullYear() === today.getFullYear()\r\n}\r\n\r\n/**\r\n * 获取日期范围描述\r\n * @param {string|Date} startDate - 开始日期\r\n * @param {string|Date} endDate - 结束日期\r\n * @returns {string} 日期范围描述\r\n */\r\nexport function getDateRangeText(startDate, endDate) {\r\n  if (!startDate && !endDate) return '-'\r\n  if (!startDate) return `截止到 ${formatDate(endDate)}`\r\n  if (!endDate) return `从 ${formatDate(startDate)} 开始`\r\n  \r\n  const start = formatDate(startDate)\r\n  const end = formatDate(endDate)\r\n  \r\n  if (start === end) {\r\n    return start\r\n  }\r\n  \r\n  return `${start} ~ ${end}`\r\n}\r\n\r\n/**\r\n * 获取月份名称\r\n * @param {number} month - 月份（0-11）\r\n * @param {boolean} short - 是否使用简写\r\n * @returns {string} 月份名称\r\n */\r\nexport function getMonthName(month, short = false) {\r\n  const months = short\r\n    ? ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']\r\n    : ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']\r\n  \r\n  return months[month] || ''\r\n}\r\n\r\n/**\r\n * 获取星期名称\r\n * @param {number} day - 星期（0-6，0为周日）\r\n * @param {boolean} short - 是否使用简写\r\n * @returns {string} 星期名称\r\n */\r\nexport function getDayName(day, short = false) {\r\n  const days = short\r\n    ? ['日', '一', '二', '三', '四', '五', '六']\r\n    : ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']\r\n  \r\n  return days[day] || ''\r\n}\r\n\r\n/**\r\n * 验证日期格式\r\n * @param {string} dateString - 日期字符串\r\n * @param {string} format - 期望的格式\r\n * @returns {boolean} 是否符合格式\r\n */\r\nexport function validateDateFormat(dateString, format = 'YYYY-MM-DD') {\r\n  if (!dateString) return false\r\n  \r\n  // 简单的格式验证\r\n  if (format === 'YYYY-MM-DD') {\r\n    const regex = /^\\d{4}-\\d{2}-\\d{2}$/\r\n    if (!regex.test(dateString)) return false\r\n  } else if (format === 'YYYY-MM-DD HH:mm:ss') {\r\n    const regex = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/\r\n    if (!regex.test(dateString)) return false\r\n  }\r\n  \r\n  // 验证日期是否有效\r\n  const date = new Date(dateString)\r\n  return !isNaN(date.getTime())\r\n}\r\n\r\n/**\r\n * 获取当前时间戳\r\n * @returns {number} 时间戳\r\n */\r\nexport function getCurrentTimestamp() {\r\n  return Date.now()\r\n}\r\n\r\n/**\r\n * 时间戳转日期\r\n * @param {number} timestamp - 时间戳\r\n * @param {string} format - 格式化模式\r\n * @returns {string} 格式化后的日期字符串\r\n */\r\nexport function timestampToDate(timestamp, format = 'YYYY-MM-DD HH:mm:ss') {\r\n  if (!timestamp) return '-'\r\n  \r\n  const date = new Date(timestamp)\r\n  return formatDateTime(date, format)\r\n}\r\n\r\n/**\r\n * 日期转时间戳\r\n * @param {string|Date} date - 日期\r\n * @returns {number} 时间戳\r\n */\r\nexport function dateToTimestamp(date) {\r\n  if (!date) return 0\r\n  \r\n  const d = new Date(date)\r\n  return isNaN(d.getTime()) ? 0 : d.getTime()\r\n}\r\n\r\nexport default {\r\n  formatDateTime,\r\n  formatDate,\r\n  formatTime,\r\n  getRelativeTime,\r\n  getDaysDiff,\r\n  getDaysFromToday,\r\n  isToday,\r\n  isYesterday,\r\n  isThisWeek,\r\n  isThisMonth,\r\n  isThisYear,\r\n  getDateRangeText,\r\n  getMonthName,\r\n  getDayName,\r\n  validateDateFormat,\r\n  getCurrentTimestamp,\r\n  timestampToDate,\r\n  dateToTimestamp\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}